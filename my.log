Sat 01 Jul 2023 19:37:43 main.py INFO 
[WELCOME] Unfolding configurations...!
Sat 01 Jul 2023 19:37:43 main.py INFO {'global_config': {'seed': 5959, 'device': 'cuda', 'is_mp': True}}
Sat 01 Jul 2023 19:37:43 main.py INFO {'data_config': {'data_path': './data/', 'dataset_name': 'MNIST', 'num_shards': 200, 'iid': True}}
Sat 01 Jul 2023 19:37:43 main.py INFO {'fed_config': {'C': 0.1, 'K': 100, 'R': 100, 'E': 10, 'B': 10, 'criterion': 'torch.nn.CrossEntropyLoss', 'optimizer': 'torch.optim.SGD'}}
Sat 01 Jul 2023 19:37:43 main.py INFO {'optim_config': {'lr': 0.01, 'momentum': 0.9}}
Sat 01 Jul 2023 19:37:43 main.py INFO {'init_config': {'init_type': 'xavier', 'init_gain': 1.0, 'gpu_ids': [0, 1]}}
Sat 01 Jul 2023 19:37:43 main.py INFO {'model_config': {'name': 'TwoNN', 'in_features': 784, 'num_hiddens': 200, 'num_classes': 10}}
Sat 01 Jul 2023 19:37:43 main.py INFO {'log_config': {'log_path': './log/2023-07-01_19:37:40', 'log_name': 'FL.log', 'tb_port': 5252, 'tb_host': '0.0.0.0'}}
Sat 01 Jul 2023 19:37:43 main.py INFO {'attack_method': {'attack': 'Sign_flipping'}}
Sat 01 Jul 2023 19:37:43 server.py INFO [Round: 0000] ...successfully initialized model (# parameters: 199210)!
Sat 01 Jul 2023 19:37:44 server.py INFO [Round: 0000] ...successfully created all 100 clients!
Sat 01 Jul 2023 19:37:44 server.py INFO [Round: 0000] ...successfully finished setup of all 100 clients!
Sat 01 Jul 2023 19:37:44 server.py INFO [Round: 0000] ...successfully transmitted models to all 100 clients!
Sat 01 Jul 2023 19:37:44 server.py INFO [Round: 0001] Select clients...!
Sat 01 Jul 2023 19:37:44 server.py INFO [Round: 0001] ...successfully transmitted models to 99 selected clients!
Sat 01 Jul 2023 19:37:44 server.py INFO [Round: 0001] Start updating selected client 0001...!
Sat 01 Jul 2023 19:37:44 server.py INFO [Round: 0001] Start updating selected client 0002...!
Sat 01 Jul 2023 19:37:44 server.py INFO [Round: 0001] Start updating selected client 0003...!
Sat 01 Jul 2023 19:37:44 server.py INFO [Round: 0001] Start updating selected client 0004...!
Sat 01 Jul 2023 19:37:44 server.py INFO [Round: 0001] Start updating selected client 0006...!
Sat 01 Jul 2023 19:37:44 server.py INFO [Round: 0001] Start updating selected client 0005...!
Sat 01 Jul 2023 19:37:45 server.py INFO [Round: 0001] Start updating selected client 0008...!
Sat 01 Jul 2023 19:37:45 server.py INFO [Round: 0001] Start updating selected client 0009...!
Sat 01 Jul 2023 19:37:45 server.py INFO [Round: 0001] Start updating selected client 0010...!
Sat 01 Jul 2023 19:37:45 server.py INFO [Round: 0001] Start updating selected client 0012...!
Sat 01 Jul 2023 19:37:45 server.py INFO [Round: 0001] Start updating selected client 0011...!
Sat 01 Jul 2023 19:37:45 server.py INFO [Round: 0001] Start updating selected client 0013...!
Sat 01 Jul 2023 19:37:45 server.py INFO [Round: 0001] Start updating selected client 0007...!
Sat 01 Jul 2023 19:37:45 server.py INFO [Round: 0001] Start updating selected client 0015...!
Sat 01 Jul 2023 19:37:45 server.py INFO [Round: 0001] Start updating selected client 0014...!
Sat 01 Jul 2023 19:37:45 server.py INFO [Round: 0001] Start updating selected client 0016...!
Sat 01 Jul 2023 19:37:45 server.py INFO [Round: 0001] Start updating selected client 0017...!
Sat 01 Jul 2023 19:37:45 server.py INFO [Round: 0001] Start updating selected client 0018...!
Sat 01 Jul 2023 19:37:45 server.py INFO [Round: 0001] Start updating selected client 0019...!
Sat 01 Jul 2023 19:37:45 server.py INFO [Round: 0001] Start updating selected client 0020...!
Sat 01 Jul 2023 19:37:46 server.py INFO [Round: 0001] Start updating selected client 0022...!
Sat 01 Jul 2023 19:37:46 server.py INFO [Round: 0001] Start updating selected client 0021...!
Sat 01 Jul 2023 19:37:46 server.py INFO [Round: 0001] Start updating selected client 0024...!
Sat 01 Jul 2023 19:37:46 server.py INFO [Round: 0001] Start updating selected client 0025...!
Sat 01 Jul 2023 19:37:46 server.py INFO [Round: 0001] Start updating selected client 0023...!
Sat 01 Jul 2023 19:37:46 server.py INFO [Round: 0001] Start updating selected client 0027...!
Sat 01 Jul 2023 19:37:46 server.py INFO [Round: 0001] Start updating selected client 0026...!
Sat 01 Jul 2023 19:37:46 server.py INFO [Round: 0001] Start updating selected client 0028...!
Sat 01 Jul 2023 19:37:46 server.py INFO [Round: 0001] Start updating selected client 0029...!
Sat 01 Jul 2023 19:37:46 server.py INFO [Round: 0001] Start updating selected client 0031...!
Sat 01 Jul 2023 19:37:46 server.py INFO [Round: 0001] Start updating selected client 0030...!
Sat 01 Jul 2023 19:38:01 server.py INFO [Round: 0001] ...client 0010 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:01 server.py INFO [Round: 0001] Start updating selected client 0032...!
Sat 01 Jul 2023 19:38:02 server.py INFO [Round: 0001] ...client 0001 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:02 server.py INFO [Round: 0001] Start updating selected client 0033...!
Sat 01 Jul 2023 19:38:03 server.py INFO [Round: 0001] ...client 0008 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:03 server.py INFO [Round: 0001] Start updating selected client 0034...!
Sat 01 Jul 2023 19:38:03 server.py INFO [Round: 0001] ...client 0004 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:03 server.py INFO [Round: 0001] Start updating selected client 0035...!
Sat 01 Jul 2023 19:38:04 server.py INFO [Round: 0001] ...client 0027 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:04 server.py INFO [Round: 0001] Start updating selected client 0036...!
Sat 01 Jul 2023 19:38:05 server.py INFO [Round: 0001] ...client 0002 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:05 server.py INFO [Round: 0001] Start updating selected client 0037...!
Sat 01 Jul 2023 19:38:05 server.py INFO [Round: 0001] ...client 0006 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:05 server.py INFO [Round: 0001] Start updating selected client 0038...!
Sat 01 Jul 2023 19:38:05 server.py INFO [Round: 0001] ...client 0026 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:05 server.py INFO [Round: 0001] Start updating selected client 0039...!
Sat 01 Jul 2023 19:38:06 server.py INFO [Round: 0001] ...client 0028 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:06 server.py INFO [Round: 0001] Start updating selected client 0040...!
Sat 01 Jul 2023 19:38:06 server.py INFO [Round: 0001] ...client 0007 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:06 server.py INFO [Round: 0001] Start updating selected client 0041...!
Sat 01 Jul 2023 19:38:07 server.py INFO [Round: 0001] ...client 0016 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:07 server.py INFO [Round: 0001] Start updating selected client 0042...!
Sat 01 Jul 2023 19:38:07 server.py INFO [Round: 0001] ...client 0011 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:07 server.py INFO [Round: 0001] Start updating selected client 0043...!
Sat 01 Jul 2023 19:38:08 server.py INFO [Round: 0001] ...client 0014 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:08 server.py INFO [Round: 0001] Start updating selected client 0044...!
Sat 01 Jul 2023 19:38:09 server.py INFO [Round: 0001] ...client 0024 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:09 server.py INFO [Round: 0001] Start updating selected client 0045...!
Sat 01 Jul 2023 19:38:10 server.py INFO [Round: 0001] ...client 0023 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:10 server.py INFO [Round: 0001] Start updating selected client 0046...!
Sat 01 Jul 2023 19:38:12 server.py INFO [Round: 0001] ...client 0025 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:12 server.py INFO [Round: 0001] Start updating selected client 0047...!
Sat 01 Jul 2023 19:38:13 server.py INFO [Round: 0001] ...client 0003 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:13 server.py INFO [Round: 0001] Start updating selected client 0048...!
Sat 01 Jul 2023 19:38:18 server.py INFO [Round: 0001] ...client 0015 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:18 server.py INFO [Round: 0001] Start updating selected client 0049...!
Sat 01 Jul 2023 19:38:21 server.py INFO [Round: 0001] ...client 0032 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:21 server.py INFO [Round: 0001] Start updating selected client 0050...!
Sat 01 Jul 2023 19:38:21 server.py INFO [Round: 0001] ...client 0009 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:21 server.py INFO [Round: 0001] Start updating selected client 0051...!
Sat 01 Jul 2023 19:38:22 server.py INFO [Round: 0001] ...client 0033 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:22 server.py INFO [Round: 0001] Start updating selected client 0052...!
Sat 01 Jul 2023 19:38:23 server.py INFO [Round: 0001] ...client 0034 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:23 server.py INFO [Round: 0001] Start updating selected client 0053...!
Sat 01 Jul 2023 19:38:24 server.py INFO [Round: 0001] ...client 0035 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:24 server.py INFO [Round: 0001] Start updating selected client 0054...!
Sat 01 Jul 2023 19:38:24 server.py INFO [Round: 0001] ...client 0036 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:24 server.py INFO [Round: 0001] Start updating selected client 0055...!
Sat 01 Jul 2023 19:38:25 server.py INFO [Round: 0001] ...client 0017 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:25 server.py INFO [Round: 0001] Start updating selected client 0056...!
Sat 01 Jul 2023 19:38:25 server.py INFO [Round: 0001] ...client 0037 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:25 server.py INFO [Round: 0001] Start updating selected client 0057...!
Sat 01 Jul 2023 19:38:26 server.py INFO [Round: 0001] ...client 0039 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:26 server.py INFO [Round: 0001] Start updating selected client 0058...!
Sat 01 Jul 2023 19:38:26 server.py INFO [Round: 0001] ...client 0038 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:26 server.py INFO [Round: 0001] Start updating selected client 0059...!
Sat 01 Jul 2023 19:38:27 server.py INFO [Round: 0001] ...client 0040 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:27 server.py INFO [Round: 0001] Start updating selected client 0060...!
Sat 01 Jul 2023 19:38:27 server.py INFO [Round: 0001] ...client 0041 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:27 server.py INFO [Round: 0001] Start updating selected client 0061...!
Sat 01 Jul 2023 19:38:28 server.py INFO [Round: 0001] ...client 0042 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:28 server.py INFO [Round: 0001] Start updating selected client 0062...!
Sat 01 Jul 2023 19:38:29 server.py INFO [Round: 0001] ...client 0043 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:29 server.py INFO [Round: 0001] Start updating selected client 0063...!
Sat 01 Jul 2023 19:38:29 server.py INFO [Round: 0001] ...client 0020 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:29 server.py INFO [Round: 0001] Start updating selected client 0064...!
Sat 01 Jul 2023 19:38:30 server.py INFO [Round: 0001] ...client 0044 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:30 server.py INFO [Round: 0001] Start updating selected client 0065...!
Sat 01 Jul 2023 19:38:31 server.py INFO [Round: 0001] ...client 0045 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:31 server.py INFO [Round: 0001] Start updating selected client 0066...!
Sat 01 Jul 2023 19:38:33 server.py INFO [Round: 0001] ...client 0046 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:33 server.py INFO [Round: 0001] Start updating selected client 0067...!
Sat 01 Jul 2023 19:38:35 server.py INFO [Round: 0001] ...client 0013 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:35 server.py INFO [Round: 0001] Start updating selected client 0068...!
Sat 01 Jul 2023 19:38:35 server.py INFO [Round: 0001] ...client 0047 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:35 server.py INFO [Round: 0001] Start updating selected client 0069...!
Sat 01 Jul 2023 19:38:37 server.py INFO [Round: 0001] ...client 0048 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:37 server.py INFO [Round: 0001] Start updating selected client 0070...!
Sat 01 Jul 2023 19:38:41 server.py INFO [Round: 0001] ...client 0050 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:41 server.py INFO [Round: 0001] Start updating selected client 0071...!
Sat 01 Jul 2023 19:38:42 server.py INFO [Round: 0001] ...client 0052 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:42 server.py INFO [Round: 0001] Start updating selected client 0072...!
Sat 01 Jul 2023 19:38:43 server.py INFO [Round: 0001] ...client 0049 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:43 server.py INFO [Round: 0001] Start updating selected client 0073...!
Sat 01 Jul 2023 19:38:43 server.py INFO [Round: 0001] ...client 0053 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:43 server.py INFO [Round: 0001] Start updating selected client 0074...!
Sat 01 Jul 2023 19:38:44 server.py INFO [Round: 0001] ...client 0054 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:44 server.py INFO [Round: 0001] Start updating selected client 0075...!
Sat 01 Jul 2023 19:38:45 server.py INFO [Round: 0001] ...client 0055 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:45 server.py INFO [Round: 0001] Start updating selected client 0076...!
Sat 01 Jul 2023 19:38:45 server.py INFO [Round: 0001] ...client 0057 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:46 server.py INFO [Round: 0001] Start updating selected client 0077...!
Sat 01 Jul 2023 19:38:46 server.py INFO [Round: 0001] ...client 0058 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:46 server.py INFO [Round: 0001] Start updating selected client 0078...!
Sat 01 Jul 2023 19:38:47 server.py INFO [Round: 0001] ...client 0059 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:47 server.py INFO [Round: 0001] Start updating selected client 0079...!
Sat 01 Jul 2023 19:38:48 server.py INFO [Round: 0001] ...client 0060 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:48 server.py INFO [Round: 0001] Start updating selected client 0080...!
Sat 01 Jul 2023 19:38:48 server.py INFO [Round: 0001] ...client 0061 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:49 server.py INFO [Round: 0001] Start updating selected client 0081...!
Sat 01 Jul 2023 19:38:49 server.py INFO [Round: 0001] ...client 0051 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:49 server.py INFO [Round: 0001] Start updating selected client 0082...!
Sat 01 Jul 2023 19:38:49 server.py INFO [Round: 0001] ...client 0062 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:49 server.py INFO [Round: 0001] Start updating selected client 0083...!
Sat 01 Jul 2023 19:38:50 server.py INFO [Round: 0001] ...client 0063 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:50 server.py INFO [Round: 0001] Start updating selected client 0084...!
Sat 01 Jul 2023 19:38:52 server.py INFO [Round: 0001] ...client 0065 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:52 server.py INFO [Round: 0001] Start updating selected client 0085...!
Sat 01 Jul 2023 19:38:52 server.py INFO [Round: 0001] ...client 0066 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:52 server.py INFO [Round: 0001] Start updating selected client 0086...!
Sat 01 Jul 2023 19:38:54 server.py INFO [Round: 0001] ...client 0056 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:54 server.py INFO [Round: 0001] Start updating selected client 0087...!
Sat 01 Jul 2023 19:38:56 server.py INFO [Round: 0001] ...client 0067 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:56 server.py INFO [Round: 0001] Start updating selected client 0088...!
Sat 01 Jul 2023 19:38:58 server.py INFO [Round: 0001] ...client 0069 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:38:58 server.py INFO [Round: 0001] Start updating selected client 0089...!
Sat 01 Jul 2023 19:39:01 server.py INFO [Round: 0001] ...client 0071 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:39:01 server.py INFO [Round: 0001] Start updating selected client 0090...!
Sat 01 Jul 2023 19:39:01 server.py INFO [Round: 0001] ...client 0070 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:39:01 server.py INFO [Round: 0001] Start updating selected client 0091...!
Sat 01 Jul 2023 19:39:02 server.py INFO [Round: 0001] ...client 0072 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:39:02 server.py INFO [Round: 0001] Start updating selected client 0092...!
Sat 01 Jul 2023 19:39:02 server.py INFO [Round: 0001] ...client 0064 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:39:02 server.py INFO [Round: 0001] Start updating selected client 0093...!
Sat 01 Jul 2023 19:39:03 server.py INFO [Round: 0001] ...client 0074 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:39:03 server.py INFO [Round: 0001] Start updating selected client 0094...!
Sat 01 Jul 2023 19:39:04 server.py INFO [Round: 0001] ...client 0005 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:39:04 server.py INFO [Round: 0001] Start updating selected client 0095...!
Sat 01 Jul 2023 19:39:05 server.py INFO [Round: 0001] ...client 0075 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:39:05 server.py INFO [Round: 0001] Start updating selected client 0096...!
Sat 01 Jul 2023 19:39:06 server.py INFO [Round: 0001] ...client 0076 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:39:06 server.py INFO [Round: 0001] Start updating selected client 0097...!
Sat 01 Jul 2023 19:39:06 server.py INFO [Round: 0001] ...client 0077 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:39:06 server.py INFO [Round: 0001] Start updating selected client 0098...!
Sat 01 Jul 2023 19:39:07 server.py INFO [Round: 0001] ...client 0078 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:39:07 server.py INFO [Round: 0001] Start updating selected client 0099...!
Sat 01 Jul 2023 19:39:09 server.py INFO [Round: 0001] ...client 0079 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:39:09 server.py INFO [Round: 0001] ...client 0073 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:39:09 server.py INFO [Round: 0001] ...client 0080 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:39:10 server.py INFO [Round: 0001] ...client 0081 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:39:10 server.py INFO [Round: 0001] ...client 0083 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:39:10 server.py INFO [Round: 0001] ...client 0012 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:39:12 server.py INFO [Round: 0001] ...client 0084 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:39:13 server.py INFO [Round: 0001] ...client 0068 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:39:14 server.py INFO [Round: 0001] ...client 0086 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:39:14 server.py INFO [Round: 0001] ...client 0082 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:39:14 server.py INFO [Round: 0001] ...client 0085 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:39:16 server.py INFO [Round: 0001] ...client 0018 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:39:17 server.py INFO [Round: 0001] ...client 0088 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:39:18 server.py INFO [Round: 0001] ...client 0031 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:39:18 server.py INFO [Round: 0001] ...client 0087 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:39:19 server.py INFO [Round: 0001] ...client 0089 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:39:20 server.py INFO [Round: 0001] ...client 0090 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:39:20 server.py INFO [Round: 0001] ...client 0092 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:39:20 server.py INFO [Round: 0001] ...client 0021 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:39:21 server.py INFO [Round: 0001] ...client 0094 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:39:21 server.py INFO [Round: 0001] ...client 0091 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:39:21 server.py INFO [Round: 0001] ...client 0019 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:39:22 server.py INFO [Round: 0001] ...client 0096 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:39:22 server.py INFO [Round: 0001] ...client 0030 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:39:22 server.py INFO [Round: 0001] ...client 0093 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:39:23 server.py INFO [Round: 0001] ...client 0097 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:39:23 server.py INFO [Round: 0001] ...client 0098 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:39:23 server.py INFO [Round: 0001] ...client 0022 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:39:23 server.py INFO [Round: 0001] ...client 0099 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:39:23 server.py INFO [Round: 0001] ...client 0029 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:39:23 server.py INFO [Round: 0001] ...client 0095 is selected and updated (with total sample size: 600)!
Sat 01 Jul 2023 19:39:24 server.py INFO [Round: 0001] Evaluate selected 99 clients' models...!
Sat 01 Jul 2023 19:39:26 client.py INFO 	[Client 0010] ...finished evaluation!            
	=> Test loss: 126.2582            
	=> Test accuracy: 0.50%

Sat 01 Jul 2023 19:39:26 client.py INFO 	[Client 0021] ...finished evaluation!            
	=> Test loss: 122.8908            
	=> Test accuracy: 0.17%

Sat 01 Jul 2023 19:39:26 client.py INFO 	[Client 0026] ...finished evaluation!            
	=> Test loss: 115.3799            
	=> Test accuracy: 0.50%

Sat 01 Jul 2023 19:39:26 client.py INFO 	[Client 0005] ...finished evaluation!            
	=> Test loss: 134.5178            
	=> Test accuracy: 0.00%

Sat 01 Jul 2023 19:39:26 client.py INFO 	[Client 0029] ...finished evaluation!            
	=> Test loss: 135.4012            
	=> Test accuracy: 0.00%

Sat 01 Jul 2023 19:39:26 client.py INFO 	[Client 0022] ...finished evaluation!            
	=> Test loss: 133.3303            
	=> Test accuracy: 0.00%

Sat 01 Jul 2023 19:39:26 client.py INFO 	[Client 0027] ...finished evaluation!            
	=> Test loss: 115.3508            
	=> Test accuracy: 0.50%

Sat 01 Jul 2023 19:39:26 client.py INFO 	[Client 0014] ...finished evaluation!            
	=> Test loss: 109.6812            
	=> Test accuracy: 0.17%

Sat 01 Jul 2023 19:39:26 client.py INFO 	[Client 0011] ...finished evaluation!            
	=> Test loss: 131.0538            
	=> Test accuracy: 0.17%

Sat 01 Jul 2023 19:39:26 client.py INFO 	[Client 0018] ...finished evaluation!            
	=> Test loss: 122.1239            
	=> Test accuracy: 0.17%

Sat 01 Jul 2023 19:39:26 client.py INFO 	[Client 0004] ...finished evaluation!            
	=> Test loss: 127.2390            
	=> Test accuracy: 0.17%

Sat 01 Jul 2023 19:39:27 client.py INFO 	[Client 0002] ...finished evaluation!            
	=> Test loss: 132.0116            
	=> Test accuracy: 0.00%

Sat 01 Jul 2023 19:39:27 client.py INFO 	[Client 0020] ...finished evaluation!            
	=> Test loss: 109.0167            
	=> Test accuracy: 0.33%

Sat 01 Jul 2023 19:39:27 client.py INFO 	[Client 0012] ...finished evaluation!            
	=> Test loss: 133.8102            
	=> Test accuracy: 0.17%

Sat 01 Jul 2023 19:39:27 client.py INFO 	[Client 0030] ...finished evaluation!            
	=> Test loss: 133.4449            
	=> Test accuracy: 0.00%

Sat 01 Jul 2023 19:39:27 client.py INFO 	[Client 0019] ...finished evaluation!            
	=> Test loss: 130.9678            
	=> Test accuracy: 0.33%

Sat 01 Jul 2023 19:39:27 client.py INFO 	[Client 0028] ...finished evaluation!            
	=> Test loss: 112.1054            
	=> Test accuracy: 0.17%

Sat 01 Jul 2023 19:39:27 client.py INFO 	[Client 0006] ...finished evaluation!            
	=> Test loss: 119.5666            
	=> Test accuracy: 0.33%

Sat 01 Jul 2023 19:39:27 client.py INFO 	[Client 0017] ...finished evaluation!            
	=> Test loss: 118.9917            
	=> Test accuracy: 0.17%

Sat 01 Jul 2023 19:39:27 client.py INFO 	[Client 0003] ...finished evaluation!            
	=> Test loss: 133.9266            
	=> Test accuracy: 0.00%

Sat 01 Jul 2023 19:39:27 client.py INFO 	[Client 0024] ...finished evaluation!            
	=> Test loss: 118.5841            
	=> Test accuracy: 0.50%

Sat 01 Jul 2023 19:39:27 client.py INFO 	[Client 0016] ...finished evaluation!            
	=> Test loss: 126.2712            
	=> Test accuracy: 0.17%

Sat 01 Jul 2023 19:39:28 client.py INFO 	[Client 0013] ...finished evaluation!            
	=> Test loss: 108.4868            
	=> Test accuracy: 0.17%

Sat 01 Jul 2023 19:39:28 client.py INFO 	[Client 0009] ...finished evaluation!            
	=> Test loss: 126.9632            
	=> Test accuracy: 0.17%

Sat 01 Jul 2023 19:39:28 client.py INFO 	[Client 0001] ...finished evaluation!            
	=> Test loss: 102.3907            
	=> Test accuracy: 0.33%

Sat 01 Jul 2023 19:39:28 client.py INFO 	[Client 0025] ...finished evaluation!            
	=> Test loss: 120.4440            
	=> Test accuracy: 0.00%

Sat 01 Jul 2023 19:39:28 client.py INFO 	[Client 0008] ...finished evaluation!            
	=> Test loss: 129.5977            
	=> Test accuracy: 0.00%

Sat 01 Jul 2023 19:39:28 client.py INFO 	[Client 0023] ...finished evaluation!            
	=> Test loss: 123.9349            
	=> Test accuracy: 0.00%

Sat 01 Jul 2023 19:39:28 client.py INFO 	[Client 0015] ...finished evaluation!            
	=> Test loss: 118.9155            
	=> Test accuracy: 0.33%

Sat 01 Jul 2023 19:39:28 client.py INFO 	[Client 0031] ...finished evaluation!            
	=> Test loss: 0.0104            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:28 client.py INFO 	[Client 0007] ...finished evaluation!            
	=> Test loss: 95.1045            
	=> Test accuracy: 0.50%

Sat 01 Jul 2023 19:39:30 client.py INFO 	[Client 0034] ...finished evaluation!            
	=> Test loss: 0.0092            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:30 client.py INFO 	[Client 0033] ...finished evaluation!            
	=> Test loss: 0.0102            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:30 client.py INFO 	[Client 0032] ...finished evaluation!            
	=> Test loss: 0.0089            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:30 client.py INFO 	[Client 0036] ...finished evaluation!            
	=> Test loss: 0.0082            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:31 client.py INFO 	[Client 0041] ...finished evaluation!            
	=> Test loss: 0.0085            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:31 client.py INFO 	[Client 0035] ...finished evaluation!            
	=> Test loss: 0.0088            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:31 client.py INFO 	[Client 0042] ...finished evaluation!            
	=> Test loss: 0.0109            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:31 client.py INFO 	[Client 0047] ...finished evaluation!            
	=> Test loss: 0.0076            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:31 client.py INFO 	[Client 0043] ...finished evaluation!            
	=> Test loss: 0.0073            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:31 client.py INFO 	[Client 0045] ...finished evaluation!            
	=> Test loss: 0.0097            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:31 client.py INFO 	[Client 0038] ...finished evaluation!            
	=> Test loss: 0.0077            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:31 client.py INFO 	[Client 0040] ...finished evaluation!            
	=> Test loss: 0.0075            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:31 client.py INFO 	[Client 0048] ...finished evaluation!            
	=> Test loss: 0.0104            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:31 client.py INFO 	[Client 0039] ...finished evaluation!            
	=> Test loss: 0.0085            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:31 client.py INFO 	[Client 0049] ...finished evaluation!            
	=> Test loss: 0.0101            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:32 client.py INFO 	[Client 0037] ...finished evaluation!            
	=> Test loss: 0.0090            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:32 client.py INFO 	[Client 0051] ...finished evaluation!            
	=> Test loss: 0.0086            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:32 client.py INFO 	[Client 0044] ...finished evaluation!            
	=> Test loss: 0.0089            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:32 client.py INFO 	[Client 0055] ...finished evaluation!            
	=> Test loss: 0.0135            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:32 client.py INFO 	[Client 0052] ...finished evaluation!            
	=> Test loss: 0.0100            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:32 client.py INFO 	[Client 0046] ...finished evaluation!            
	=> Test loss: 0.0073            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:32 client.py INFO 	[Client 0054] ...finished evaluation!            
	=> Test loss: 0.0110            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:32 client.py INFO 	[Client 0050] ...finished evaluation!            
	=> Test loss: 0.0085            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:32 client.py INFO 	[Client 0053] ...finished evaluation!            
	=> Test loss: 0.0081            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:32 client.py INFO 	[Client 0058] ...finished evaluation!            
	=> Test loss: 0.0089            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:32 client.py INFO 	[Client 0056] ...finished evaluation!            
	=> Test loss: 0.0077            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:33 client.py INFO 	[Client 0057] ...finished evaluation!            
	=> Test loss: 0.0082            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:33 client.py INFO 	[Client 0060] ...finished evaluation!            
	=> Test loss: 0.0073            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:33 client.py INFO 	[Client 0061] ...finished evaluation!            
	=> Test loss: 0.0108            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:33 client.py INFO 	[Client 0062] ...finished evaluation!            
	=> Test loss: 0.0086            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:33 client.py INFO 	[Client 0059] ...finished evaluation!            
	=> Test loss: 0.0089            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:35 client.py INFO 	[Client 0064] ...finished evaluation!            
	=> Test loss: 0.0076            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:35 client.py INFO 	[Client 0066] ...finished evaluation!            
	=> Test loss: 0.0100            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:35 client.py INFO 	[Client 0065] ...finished evaluation!            
	=> Test loss: 0.0089            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:35 client.py INFO 	[Client 0063] ...finished evaluation!            
	=> Test loss: 0.0090            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:35 client.py INFO 	[Client 0068] ...finished evaluation!            
	=> Test loss: 0.0075            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:35 client.py INFO 	[Client 0071] ...finished evaluation!            
	=> Test loss: 0.0086            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:35 client.py INFO 	[Client 0070] ...finished evaluation!            
	=> Test loss: 0.0103            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:35 client.py INFO 	[Client 0075] ...finished evaluation!            
	=> Test loss: 0.0077            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:36 client.py INFO 	[Client 0067] ...finished evaluation!            
	=> Test loss: 0.0098            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:36 client.py INFO 	[Client 0079] ...finished evaluation!            
	=> Test loss: 0.0075            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:36 client.py INFO 	[Client 0073] ...finished evaluation!            
	=> Test loss: 0.0100            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:36 client.py INFO 	[Client 0069] ...finished evaluation!            
	=> Test loss: 0.0082            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:36 client.py INFO 	[Client 0074] ...finished evaluation!            
	=> Test loss: 0.0085            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:36 client.py INFO 	[Client 0072] ...finished evaluation!            
	=> Test loss: 0.0107            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:36 client.py INFO 	[Client 0078] ...finished evaluation!            
	=> Test loss: 0.0081            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:36 client.py INFO 	[Client 0077] ...finished evaluation!            
	=> Test loss: 0.0096            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:36 client.py INFO 	[Client 0076] ...finished evaluation!            
	=> Test loss: 0.0077            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:36 client.py INFO 	[Client 0081] ...finished evaluation!            
	=> Test loss: 0.0111            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:36 client.py INFO 	[Client 0083] ...finished evaluation!            
	=> Test loss: 0.0087            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:37 client.py INFO 	[Client 0080] ...finished evaluation!            
	=> Test loss: 0.0103            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:37 client.py INFO 	[Client 0082] ...finished evaluation!            
	=> Test loss: 0.0107            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:37 client.py INFO 	[Client 0089] ...finished evaluation!            
	=> Test loss: 0.0091            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:37 client.py INFO 	[Client 0088] ...finished evaluation!            
	=> Test loss: 0.0078            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:37 client.py INFO 	[Client 0086] ...finished evaluation!            
	=> Test loss: 0.0083            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:37 client.py INFO 	[Client 0084] ...finished evaluation!            
	=> Test loss: 0.0133            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:37 client.py INFO 	[Client 0087] ...finished evaluation!            
	=> Test loss: 0.0070            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:37 client.py INFO 	[Client 0085] ...finished evaluation!            
	=> Test loss: 0.0107            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:37 client.py INFO 	[Client 0090] ...finished evaluation!            
	=> Test loss: 0.0086            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:37 client.py INFO 	[Client 0091] ...finished evaluation!            
	=> Test loss: 0.0078            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:38 client.py INFO 	[Client 0093] ...finished evaluation!            
	=> Test loss: 0.0084            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:38 client.py INFO 	[Client 0092] ...finished evaluation!            
	=> Test loss: 0.0080            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:38 client.py INFO 	[Client 0094] ...finished evaluation!            
	=> Test loss: 0.0081            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:38 client.py INFO 	[Client 0099] ...finished evaluation!            
	=> Test loss: 0.0112            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:38 client.py INFO 	[Client 0096] ...finished evaluation!            
	=> Test loss: 0.0071            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:38 client.py INFO 	[Client 0097] ...finished evaluation!            
	=> Test loss: 0.0085            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:38 client.py INFO 	[Client 0098] ...finished evaluation!            
	=> Test loss: 0.0089            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:38 client.py INFO 	[Client 0095] ...finished evaluation!            
	=> Test loss: 0.0084            
	=> Test accuracy: 100.00%

Sat 01 Jul 2023 19:39:39 server.py INFO [Round: 0001] Aggregate updated weights of 99 clients...!
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=568)
           2	LOAD_CONST(arg=1, lineno=568)
           4	STORE_FAST(arg=2, lineno=568)
           6	LOAD_CONST(arg=1, lineno=569)
           8	STORE_FAST(arg=3, lineno=569)
          10	LOAD_CONST(arg=1, lineno=570)
          12	STORE_FAST(arg=4, lineno=570)
          14	SETUP_LOOP(arg=74, lineno=571)
          16	LOAD_GLOBAL(arg=0, lineno=571)
          18	LOAD_FAST(arg=0, lineno=571)
          20	LOAD_ATTR(arg=1, lineno=571)
          22	LOAD_CONST(arg=2, lineno=571)
          24	BINARY_SUBSCR(arg=None, lineno=571)
          26	CALL_FUNCTION(arg=1, lineno=571)
          28	GET_ITER(arg=None, lineno=571)
>         30	FOR_ITER(arg=56, lineno=571)
          32	STORE_FAST(arg=5, lineno=571)
          34	LOAD_FAST(arg=2, lineno=572)
          36	LOAD_FAST(arg=0, lineno=572)
          38	LOAD_FAST(arg=5, lineno=572)
          40	BINARY_SUBSCR(arg=None, lineno=572)
          42	LOAD_FAST(arg=1, lineno=572)
          44	LOAD_FAST(arg=5, lineno=572)
          46	BINARY_SUBSCR(arg=None, lineno=572)
          48	BINARY_MULTIPLY(arg=None, lineno=572)
          50	INPLACE_ADD(arg=None, lineno=572)
          52	STORE_FAST(arg=2, lineno=572)
          54	LOAD_FAST(arg=3, lineno=573)
          56	LOAD_FAST(arg=0, lineno=573)
          58	LOAD_FAST(arg=5, lineno=573)
          60	BINARY_SUBSCR(arg=None, lineno=573)
          62	LOAD_CONST(arg=3, lineno=573)
          64	BINARY_POWER(arg=None, lineno=573)
          66	INPLACE_ADD(arg=None, lineno=573)
          68	STORE_FAST(arg=3, lineno=573)
          70	LOAD_FAST(arg=4, lineno=574)
          72	LOAD_FAST(arg=1, lineno=574)
          74	LOAD_FAST(arg=5, lineno=574)
          76	BINARY_SUBSCR(arg=None, lineno=574)
          78	LOAD_CONST(arg=3, lineno=574)
          80	BINARY_POWER(arg=None, lineno=574)
          82	INPLACE_ADD(arg=None, lineno=574)
          84	STORE_FAST(arg=4, lineno=574)
          86	JUMP_ABSOLUTE(arg=30, lineno=574)
>         88	POP_BLOCK(arg=None, lineno=574)
>         90	LOAD_FAST(arg=3, lineno=576)
          92	LOAD_CONST(arg=1, lineno=576)
          94	COMPARE_OP(arg=2, lineno=576)
          96	POP_JUMP_IF_FALSE(arg=110, lineno=576)
          98	LOAD_FAST(arg=4, lineno=576)
         100	LOAD_CONST(arg=1, lineno=576)
         102	COMPARE_OP(arg=2, lineno=576)
         104	POP_JUMP_IF_FALSE(arg=110, lineno=576)
         106	LOAD_CONST(arg=1, lineno=577)
         108	RETURN_VALUE(arg=None, lineno=577)
>        110	LOAD_FAST(arg=3, lineno=578)
         112	LOAD_CONST(arg=1, lineno=578)
         114	COMPARE_OP(arg=2, lineno=578)
         116	POP_JUMP_IF_TRUE(arg=126, lineno=578)
         118	LOAD_FAST(arg=4, lineno=578)
         120	LOAD_CONST(arg=1, lineno=578)
         122	COMPARE_OP(arg=2, lineno=578)
         124	POP_JUMP_IF_FALSE(arg=130, lineno=578)
>        126	LOAD_CONST(arg=4, lineno=579)
         128	RETURN_VALUE(arg=None, lineno=579)
>        130	LOAD_CONST(arg=4, lineno=581)
         132	LOAD_FAST(arg=2, lineno=581)
         134	LOAD_GLOBAL(arg=2, lineno=581)
         136	LOAD_METHOD(arg=3, lineno=581)
         138	LOAD_FAST(arg=3, lineno=581)
         140	LOAD_FAST(arg=4, lineno=581)
         142	BINARY_MULTIPLY(arg=None, lineno=581)
         144	CALL_METHOD(arg=1, lineno=581)
         146	BINARY_TRUE_DIVIDE(arg=None, lineno=581)
         148	BINARY_SUBTRACT(arg=None, lineno=581)
         150	RETURN_VALUE(arg=None, lineno=581)
         152	LOAD_CONST(arg=0, lineno=581)
         154	RETURN_VALUE(arg=None, lineno=581)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=568)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=568)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=4, inst=STORE_FAST(arg=2, lineno=568)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$const2.0']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=569)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=8, inst=STORE_FAST(arg=3, lineno=569)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$const6.1']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=570)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=12, inst=STORE_FAST(arg=4, lineno=570)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$const10.2']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG end state. edges=[Edge(pc=14, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=14 nstack_initial=0)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=14, inst=SETUP_LOOP(arg=74, lineno=571)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=16, inst=LOAD_GLOBAL(arg=0, lineno=571)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=571)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$16load_global.0']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=20, inst=LOAD_ATTR(arg=1, lineno=571)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$16load_global.0', '$x18.1']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=22, inst=LOAD_CONST(arg=2, lineno=571)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$16load_global.0', '$20load_attr.2']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=24, inst=BINARY_SUBSCR(arg=None, lineno=571)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$16load_global.0', '$20load_attr.2', '$const22.3']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=26, inst=CALL_FUNCTION(arg=1, lineno=571)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$16load_global.0', '$24binary_subscr.4']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=28, inst=GET_ITER(arg=None, lineno=571)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$26call_function.5']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG end state. edges=[Edge(pc=30, stack=('$28get_iter.6',), blockstack=({'kind': BlockKind(LOOP), 'end': 90, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=30 nstack_initial=1)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack: ['$phi30.0']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=30, inst=FOR_ITER(arg=56, lineno=571)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$phi30.0']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG end state. edges=[Edge(pc=88, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 90, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=32, stack=('$phi30.0', '$30for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 90, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=32 nstack_initial=2)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=88, inst=POP_BLOCK(arg=None, lineno=574)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=32 nstack_initial=2), State(pc_initial=90 nstack_initial=0)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack: ['$phi32.0', '$phi32.1']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=32, inst=STORE_FAST(arg=5, lineno=571)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$phi32.0', '$phi32.1']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=572)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$phi32.0']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=572)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$phi32.0', '$result34.2']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=38, inst=LOAD_FAST(arg=5, lineno=572)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$phi32.0', '$result34.2', '$x36.3']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=572)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$phi32.0', '$result34.2', '$x36.3', '$i38.4']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=42, inst=LOAD_FAST(arg=1, lineno=572)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$phi32.0', '$result34.2', '$40binary_subscr.5']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=44, inst=LOAD_FAST(arg=5, lineno=572)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$phi32.0', '$result34.2', '$40binary_subscr.5', '$y42.6']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=572)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$phi32.0', '$result34.2', '$40binary_subscr.5', '$y42.6', '$i44.7']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=48, inst=BINARY_MULTIPLY(arg=None, lineno=572)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$phi32.0', '$result34.2', '$40binary_subscr.5', '$46binary_subscr.8']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=50, inst=INPLACE_ADD(arg=None, lineno=572)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$phi32.0', '$result34.2', '$48binary_multiply.9']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=52, inst=STORE_FAST(arg=2, lineno=572)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$phi32.0', '$50inplace_add.10']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=54, inst=LOAD_FAST(arg=3, lineno=573)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$phi32.0']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=56, inst=LOAD_FAST(arg=0, lineno=573)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$phi32.0', '$norm_x54.11']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=58, inst=LOAD_FAST(arg=5, lineno=573)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$phi32.0', '$norm_x54.11', '$x56.12']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=60, inst=BINARY_SUBSCR(arg=None, lineno=573)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$phi32.0', '$norm_x54.11', '$x56.12', '$i58.13']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=62, inst=LOAD_CONST(arg=3, lineno=573)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$phi32.0', '$norm_x54.11', '$60binary_subscr.14']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=64, inst=BINARY_POWER(arg=None, lineno=573)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$phi32.0', '$norm_x54.11', '$60binary_subscr.14', '$const62.15']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=66, inst=INPLACE_ADD(arg=None, lineno=573)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$phi32.0', '$norm_x54.11', '$64binary_power.16']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=68, inst=STORE_FAST(arg=3, lineno=573)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$phi32.0', '$66inplace_add.17']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=70, inst=LOAD_FAST(arg=4, lineno=574)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$phi32.0']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=72, inst=LOAD_FAST(arg=1, lineno=574)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$phi32.0', '$norm_y70.18']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=74, inst=LOAD_FAST(arg=5, lineno=574)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$phi32.0', '$norm_y70.18', '$y72.19']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=76, inst=BINARY_SUBSCR(arg=None, lineno=574)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$phi32.0', '$norm_y70.18', '$y72.19', '$i74.20']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=78, inst=LOAD_CONST(arg=3, lineno=574)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$phi32.0', '$norm_y70.18', '$76binary_subscr.21']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=80, inst=BINARY_POWER(arg=None, lineno=574)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$phi32.0', '$norm_y70.18', '$76binary_subscr.21', '$const78.22']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=82, inst=INPLACE_ADD(arg=None, lineno=574)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$phi32.0', '$norm_y70.18', '$80binary_power.23']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=84, inst=STORE_FAST(arg=4, lineno=574)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$phi32.0', '$82inplace_add.24']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=86, inst=JUMP_ABSOLUTE(arg=30, lineno=574)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$phi32.0']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG end state. edges=[Edge(pc=30, stack=('$phi32.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 90, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=30 nstack_initial=1)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=90, inst=LOAD_FAST(arg=3, lineno=576)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=92, inst=LOAD_CONST(arg=1, lineno=576)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$norm_x90.0']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=94, inst=COMPARE_OP(arg=2, lineno=576)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$norm_x90.0', '$const92.1']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=96, inst=POP_JUMP_IF_FALSE(arg=110, lineno=576)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$94compare_op.2']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG end state. edges=[Edge(pc=98, stack=(), blockstack=(), npush=0), Edge(pc=110, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=30 nstack_initial=1), State(pc_initial=98 nstack_initial=0), State(pc_initial=110 nstack_initial=0)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=110 nstack_initial=0)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=98, inst=LOAD_FAST(arg=4, lineno=576)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=100, inst=LOAD_CONST(arg=1, lineno=576)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$norm_y98.0']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=102, inst=COMPARE_OP(arg=2, lineno=576)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$norm_y98.0', '$const100.1']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=104, inst=POP_JUMP_IF_FALSE(arg=110, lineno=576)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$102compare_op.2']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0), Edge(pc=110, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=110 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=110 nstack_initial=0)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=110, inst=LOAD_FAST(arg=3, lineno=578)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=112, inst=LOAD_CONST(arg=1, lineno=578)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$norm_x110.0']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=114, inst=COMPARE_OP(arg=2, lineno=578)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$norm_x110.0', '$const112.1']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=116, inst=POP_JUMP_IF_TRUE(arg=126, lineno=578)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$114compare_op.2']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG end state. edges=[Edge(pc=118, stack=(), blockstack=(), npush=0), Edge(pc=126, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=110 nstack_initial=0), State(pc_initial=118 nstack_initial=0), State(pc_initial=126 nstack_initial=0)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=106, inst=LOAD_CONST(arg=1, lineno=577)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=108, inst=RETURN_VALUE(arg=None, lineno=577)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$const106.0']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=110 nstack_initial=0), State(pc_initial=118 nstack_initial=0), State(pc_initial=126 nstack_initial=0)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=126 nstack_initial=0)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=118, inst=LOAD_FAST(arg=4, lineno=578)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=120, inst=LOAD_CONST(arg=1, lineno=578)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$norm_y118.0']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=122, inst=COMPARE_OP(arg=2, lineno=578)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$norm_y118.0', '$const120.1']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=124, inst=POP_JUMP_IF_FALSE(arg=130, lineno=578)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$122compare_op.2']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG end state. edges=[Edge(pc=126, stack=(), blockstack=(), npush=0), Edge(pc=130, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=126 nstack_initial=0), State(pc_initial=126 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=126, inst=LOAD_CONST(arg=4, lineno=579)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=128, inst=RETURN_VALUE(arg=None, lineno=579)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$const126.0']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=126 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=130 nstack_initial=0)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=130, inst=LOAD_CONST(arg=4, lineno=581)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=132, inst=LOAD_FAST(arg=2, lineno=581)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$const130.0']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=134, inst=LOAD_GLOBAL(arg=2, lineno=581)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$const130.0', '$result132.1']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=136, inst=LOAD_METHOD(arg=3, lineno=581)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$const130.0', '$result132.1', '$134load_global.2']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=138, inst=LOAD_FAST(arg=3, lineno=581)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$const130.0', '$result132.1', '$136load_method.3']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=140, inst=LOAD_FAST(arg=4, lineno=581)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$const130.0', '$result132.1', '$136load_method.3', '$norm_x138.4']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=142, inst=BINARY_MULTIPLY(arg=None, lineno=581)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$const130.0', '$result132.1', '$136load_method.3', '$norm_x138.4', '$norm_y140.5']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=144, inst=CALL_METHOD(arg=1, lineno=581)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$const130.0', '$result132.1', '$136load_method.3', '$142binary_multiply.6']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=146, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=581)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$const130.0', '$result132.1', '$144call_method.7']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=148, inst=BINARY_SUBTRACT(arg=None, lineno=581)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$const130.0', '$146binary_true_divide.8']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=150, inst=RETURN_VALUE(arg=None, lineno=581)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$148binary_subtract.9']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG -------------------------Prune PHIs-------------------------
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=1): {'$phi30.0'},
             State(pc_initial=32 nstack_initial=2): {'$phi32.1'},
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=90 nstack_initial=0): set(),
             State(pc_initial=98 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=110 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=126 nstack_initial=0): set(),
             State(pc_initial=130 nstack_initial=0): set()})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG defmap: {'$phi30.0': State(pc_initial=14 nstack_initial=0),
 '$phi32.1': State(pc_initial=30 nstack_initial=1)}
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.6',
                           State(pc_initial=14 nstack_initial=0)),
                          ('$phi32.0', State(pc_initial=32 nstack_initial=2))},
             '$phi32.0': {('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.6',
                           State(pc_initial=14 nstack_initial=0)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi32.0': {('$28get_iter.6',
                           State(pc_initial=14 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.6',
                           State(pc_initial=14 nstack_initial=0))},
             '$phi32.0': {('$28get_iter.6',
                           State(pc_initial=14 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.6',
                           State(pc_initial=14 nstack_initial=0))},
             '$phi32.0': {('$28get_iter.6',
                           State(pc_initial=14 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG keep phismap: {'$phi30.0': {('$28get_iter.6', State(pc_initial=14 nstack_initial=0))},
 '$phi32.1': {('$30for_iter.2', State(pc_initial=30 nstack_initial=1))}}
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=14 nstack_initial=0): {'$phi30.0': '$28get_iter.6'},
             State(pc_initial=30 nstack_initial=1): {'$phi32.1': '$30for_iter.2'}})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG ----------------------DONE Prune PHIs-----------------------
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'}), (10, {'res': '$const10.2'}), (12, {'value': '$const10.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ()})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((16, {'res': '$16load_global.0'}), (18, {'res': '$x18.1'}), (20, {'item': '$x18.1', 'res': '$20load_attr.2'}), (22, {'res': '$const22.3'}), (24, {'index': '$const22.3', 'target': '$20load_attr.2', 'res': '$24binary_subscr.4'}), (26, {'func': '$16load_global.0', 'args': ['$24binary_subscr.4'], 'res': '$26call_function.5'}), (28, {'value': '$26call_function.5', 'res': '$28get_iter.6'})), outgoing_phis={'$phi30.0': '$28get_iter.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$28get_iter.6',)})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'iterator': '$phi30.0', 'pair': '$30for_iter.1', 'indval': '$30for_iter.2', 'pred': '$30for_iter.3'}),), outgoing_phis={'$phi32.1': '$30for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 90, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={88: (), 32: ('$phi30.0', '$30for_iter.2')})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG block_infos State(pc_initial=32 nstack_initial=2):
AdaptBlockInfo(insts=((32, {'value': '$phi32.1'}), (34, {'res': '$result34.2'}), (36, {'res': '$x36.3'}), (38, {'res': '$i38.4'}), (40, {'index': '$i38.4', 'target': '$x36.3', 'res': '$40binary_subscr.5'}), (42, {'res': '$y42.6'}), (44, {'res': '$i44.7'}), (46, {'index': '$i44.7', 'target': '$y42.6', 'res': '$46binary_subscr.8'}), (48, {'lhs': '$40binary_subscr.5', 'rhs': '$46binary_subscr.8', 'res': '$48binary_multiply.9'}), (50, {'lhs': '$result34.2', 'rhs': '$48binary_multiply.9', 'res': '$50inplace_add.10'}), (52, {'value': '$50inplace_add.10'}), (54, {'res': '$norm_x54.11'}), (56, {'res': '$x56.12'}), (58, {'res': '$i58.13'}), (60, {'index': '$i58.13', 'target': '$x56.12', 'res': '$60binary_subscr.14'}), (62, {'res': '$const62.15'}), (64, {'lhs': '$60binary_subscr.14', 'rhs': '$const62.15', 'res': '$64binary_power.16'}), (66, {'lhs': '$norm_x54.11', 'rhs': '$64binary_power.16', 'res': '$66inplace_add.17'}), (68, {'value': '$66inplace_add.17'}), (70, {'res': '$norm_y70.18'}), (72, {'res': '$y72.19'}), (74, {'res': '$i74.20'}), (76, {'index': '$i74.20', 'target': '$y72.19', 'res': '$76binary_subscr.21'}), (78, {'res': '$const78.22'}), (80, {'lhs': '$76binary_subscr.21', 'rhs': '$const78.22', 'res': '$80binary_power.23'}), (82, {'lhs': '$norm_y70.18', 'rhs': '$80binary_power.23', 'res': '$82inplace_add.24'}), (84, {'value': '$82inplace_add.24'}), (86, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 90, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={30: ('$phi32.0',)})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 90, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={90: ()})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$norm_x90.0'}), (92, {'res': '$const92.1'}), (94, {'lhs': '$norm_x90.0', 'rhs': '$const92.1', 'res': '$94compare_op.2'}), (96, {'pred': '$94compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={98: (), 110: ()})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$norm_y98.0'}), (100, {'res': '$const100.1'}), (102, {'lhs': '$norm_y98.0', 'rhs': '$const100.1', 'res': '$102compare_op.2'}), (104, {'pred': '$102compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: (), 110: ()})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$const106.0'}), (108, {'retval': '$const106.0', 'castval': '$108return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG block_infos State(pc_initial=110 nstack_initial=0):
AdaptBlockInfo(insts=((110, {'res': '$norm_x110.0'}), (112, {'res': '$const112.1'}), (114, {'lhs': '$norm_x110.0', 'rhs': '$const112.1', 'res': '$114compare_op.2'}), (116, {'pred': '$114compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={118: (), 126: ()})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$norm_y118.0'}), (120, {'res': '$const120.1'}), (122, {'lhs': '$norm_y118.0', 'rhs': '$const120.1', 'res': '$122compare_op.2'}), (124, {'pred': '$122compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={126: (), 130: ()})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG block_infos State(pc_initial=126 nstack_initial=0):
AdaptBlockInfo(insts=((126, {'res': '$const126.0'}), (128, {'retval': '$const126.0', 'castval': '$128return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG block_infos State(pc_initial=130 nstack_initial=0):
AdaptBlockInfo(insts=((130, {'res': '$const130.0'}), (132, {'res': '$result132.1'}), (134, {'res': '$134load_global.2'}), (136, {'item': '$134load_global.2', 'res': '$136load_method.3'}), (138, {'res': '$norm_x138.4'}), (140, {'res': '$norm_y140.5'}), (142, {'lhs': '$norm_x138.4', 'rhs': '$norm_y140.5', 'res': '$142binary_multiply.6'}), (144, {'func': '$136load_method.3', 'args': ['$142binary_multiply.6'], 'res': '$144call_method.7'}), (146, {'lhs': '$result132.1', 'rhs': '$144call_method.7', 'res': '$146binary_true_divide.8'}), (148, {'lhs': '$const130.0', 'rhs': '$146binary_true_divide.8', 'res': '$148binary_subtract.9'}), (150, {'retval': '$148binary_subtract.9', 'castval': '$150return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:40 interpreter.py DEBUG label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    result = const(float, 0.0)               ['result']
    norm_x = const(float, 0.0)               ['norm_x']
    norm_y = const(float, 0.0)               ['norm_y']
    jump 14                                  []
label 14:
    $16load_global.0 = global(range: <class 'range'>) ['$16load_global.0']
    $20load_attr.2 = getattr(value=x, attr=shape) ['$20load_attr.2', 'x']
    $const22.3 = const(int, 0)               ['$const22.3']
    $24binary_subscr.4 = getitem(value=$20load_attr.2, index=$const22.3, fn=<built-in function getitem>) ['$20load_attr.2', '$24binary_subscr.4', '$const22.3']
    $26call_function.5 = call $16load_global.0($24binary_subscr.4, func=$16load_global.0, args=[Var($24binary_subscr.4, distances.py:571)], kws=(), vararg=None, varkwarg=None, target=None) ['$16load_global.0', '$24binary_subscr.4', '$26call_function.5']
    $28get_iter.6 = getiter(value=$26call_function.5) ['$26call_function.5', '$28get_iter.6']
    $phi30.0 = $28get_iter.6                 ['$28get_iter.6', '$phi30.0']
    jump 30                                  []
label 30:
    $30for_iter.1 = iternext(value=$phi30.0) ['$30for_iter.1', '$phi30.0']
    $30for_iter.2 = pair_first(value=$30for_iter.1) ['$30for_iter.1', '$30for_iter.2']
    $30for_iter.3 = pair_second(value=$30for_iter.1) ['$30for_iter.1', '$30for_iter.3']
    $phi32.1 = $30for_iter.2                 ['$30for_iter.2', '$phi32.1']
    branch $30for_iter.3, 32, 88             ['$30for_iter.3']
label 32:
    i = $phi32.1                             ['$phi32.1', 'i']
    $40binary_subscr.5 = getitem(value=x, index=i, fn=<built-in function getitem>) ['$40binary_subscr.5', 'i', 'x']
    $46binary_subscr.8 = getitem(value=y, index=i, fn=<built-in function getitem>) ['$46binary_subscr.8', 'i', 'y']
    $48binary_multiply.9 = $40binary_subscr.5 * $46binary_subscr.8 ['$40binary_subscr.5', '$46binary_subscr.8', '$48binary_multiply.9']
    $50inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$48binary_multiply.9, static_lhs=Undefined, static_rhs=Undefined) ['$48binary_multiply.9', '$50inplace_add.10', 'result']
    result = $50inplace_add.10               ['$50inplace_add.10', 'result']
    $60binary_subscr.14 = getitem(value=x, index=i, fn=<built-in function getitem>) ['$60binary_subscr.14', 'i', 'x']
    $const62.15 = const(int, 2)              ['$const62.15']
    $64binary_power.16 = $60binary_subscr.14 ** $const62.15 ['$60binary_subscr.14', '$64binary_power.16', '$const62.15']
    $66inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=norm_x, rhs=$64binary_power.16, static_lhs=Undefined, static_rhs=Undefined) ['$64binary_power.16', '$66inplace_add.17', 'norm_x']
    norm_x = $66inplace_add.17               ['$66inplace_add.17', 'norm_x']
    $76binary_subscr.21 = getitem(value=y, index=i, fn=<built-in function getitem>) ['$76binary_subscr.21', 'i', 'y']
    $const78.22 = const(int, 2)              ['$const78.22']
    $80binary_power.23 = $76binary_subscr.21 ** $const78.22 ['$76binary_subscr.21', '$80binary_power.23', '$const78.22']
    $82inplace_add.24 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=norm_y, rhs=$80binary_power.23, static_lhs=Undefined, static_rhs=Undefined) ['$80binary_power.23', '$82inplace_add.24', 'norm_y']
    norm_y = $82inplace_add.24               ['$82inplace_add.24', 'norm_y']
    jump 30                                  []
label 88:
    jump 90                                  []
label 90:
    $const92.1 = const(float, 0.0)           ['$const92.1']
    $94compare_op.2 = norm_x == $const92.1   ['$94compare_op.2', '$const92.1', 'norm_x']
    bool96 = global(bool: <class 'bool'>)    ['bool96']
    $96pred = call bool96($94compare_op.2, func=bool96, args=(Var($94compare_op.2, distances.py:576),), kws=(), vararg=None, varkwarg=None, target=None) ['$94compare_op.2', '$96pred', 'bool96']
    branch $96pred, 98, 110                  ['$96pred']
label 98:
    $const100.1 = const(float, 0.0)          ['$const100.1']
    $102compare_op.2 = norm_y == $const100.1 ['$102compare_op.2', '$const100.1', 'norm_y']
    bool104 = global(bool: <class 'bool'>)   ['bool104']
    $104pred = call bool104($102compare_op.2, func=bool104, args=(Var($102compare_op.2, distances.py:576),), kws=(), vararg=None, varkwarg=None, target=None) ['$102compare_op.2', '$104pred', 'bool104']
    branch $104pred, 106, 110                ['$104pred']
label 106:
    $const106.0 = const(float, 0.0)          ['$const106.0']
    $108return_value.1 = cast(value=$const106.0) ['$108return_value.1', '$const106.0']
    return $108return_value.1                ['$108return_value.1']
label 110:
    $const112.1 = const(float, 0.0)          ['$const112.1']
    $114compare_op.2 = norm_x == $const112.1 ['$114compare_op.2', '$const112.1', 'norm_x']
    bool116 = global(bool: <class 'bool'>)   ['bool116']
    $116pred = call bool116($114compare_op.2, func=bool116, args=(Var($114compare_op.2, distances.py:578),), kws=(), vararg=None, varkwarg=None, target=None) ['$114compare_op.2', '$116pred', 'bool116']
    branch $116pred, 126, 118                ['$116pred']
label 118:
    $const120.1 = const(float, 0.0)          ['$const120.1']
    $122compare_op.2 = norm_y == $const120.1 ['$122compare_op.2', '$const120.1', 'norm_y']
    bool124 = global(bool: <class 'bool'>)   ['bool124']
    $124pred = call bool124($122compare_op.2, func=bool124, args=(Var($122compare_op.2, distances.py:578),), kws=(), vararg=None, varkwarg=None, target=None) ['$122compare_op.2', '$124pred', 'bool124']
    branch $124pred, 126, 130                ['$124pred']
label 126:
    $const126.0 = const(float, 1.0)          ['$const126.0']
    $128return_value.1 = cast(value=$const126.0) ['$128return_value.1', '$const126.0']
    return $128return_value.1                ['$128return_value.1']
label 130:
    $const130.0 = const(float, 1.0)          ['$const130.0']
    $134load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>) ['$134load_global.2']
    $136load_method.3 = getattr(value=$134load_global.2, attr=sqrt) ['$134load_global.2', '$136load_method.3']
    $142binary_multiply.6 = norm_x * norm_y  ['$142binary_multiply.6', 'norm_x', 'norm_y']
    $144call_method.7 = call $136load_method.3($142binary_multiply.6, func=$136load_method.3, args=[Var($142binary_multiply.6, distances.py:581)], kws=(), vararg=None, varkwarg=None, target=None) ['$136load_method.3', '$142binary_multiply.6', '$144call_method.7']
    $146binary_true_divide.8 = result / $144call_method.7 ['$144call_method.7', '$146binary_true_divide.8', 'result']
    $148binary_subtract.9 = $const130.0 - $146binary_true_divide.8 ['$146binary_true_divide.8', '$148binary_subtract.9', '$const130.0']
    $150return_value.10 = cast(value=$148binary_subtract.9) ['$148binary_subtract.9', '$150return_value.10']
    return $150return_value.10               ['$150return_value.10']

Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block analysis pass on 0
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7510BC88>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: x = arg(0, name=x)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: y = arg(1, name=y)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: result = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: norm_x = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: norm_y = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 14
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block analysis pass on 14
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7510BC88>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $16load_global.0 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $20load_attr.2 = getattr(value=x, attr=shape)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const22.3 = const(int, 0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $24binary_subscr.4 = static_getitem(value=$20load_attr.2, index=0, index_var=$const22.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $26call_function.5 = call $16load_global.0($24binary_subscr.4, func=$16load_global.0, args=[Var($24binary_subscr.4, distances.py:571)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $28get_iter.6 = getiter(value=$26call_function.5)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $phi30.0 = $28get_iter.6
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 30
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block analysis pass on 30
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7510BC88>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $30for_iter.1 = iternext(value=$phi30.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $30for_iter.2 = pair_first(value=$30for_iter.1)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $30for_iter.3 = pair_second(value=$30for_iter.1)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $phi32.1 = $30for_iter.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $30for_iter.3, 32, 88
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block analysis pass on 32
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7510BC88>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: i = $phi32.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $40binary_subscr.5 = getitem(value=x, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $46binary_subscr.8 = getitem(value=y, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $48binary_multiply.9 = $40binary_subscr.5 * $46binary_subscr.8
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $50inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$48binary_multiply.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: result = $50inplace_add.10
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $60binary_subscr.14 = getitem(value=x, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const62.15 = const(int, 2)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $64binary_power.16 = $60binary_subscr.14 ** $const62.15
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $66inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=norm_x, rhs=$64binary_power.16, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: norm_x = $66inplace_add.17
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $76binary_subscr.21 = getitem(value=y, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const78.22 = const(int, 2)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $80binary_power.23 = $76binary_subscr.21 ** $const78.22
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $82inplace_add.24 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=norm_y, rhs=$80binary_power.23, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: norm_y = $82inplace_add.24
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 30
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block analysis pass on 88
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7510BC88>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 90
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block analysis pass on 90
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7510BC88>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const92.1 = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $94compare_op.2 = norm_x == $const92.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool96 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $96pred = call bool96($94compare_op.2, func=bool96, args=(Var($94compare_op.2, distances.py:576),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $96pred, 98, 110
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block analysis pass on 98
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7510BC88>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const100.1 = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $102compare_op.2 = norm_y == $const100.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool104 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $104pred = call bool104($102compare_op.2, func=bool104, args=(Var($102compare_op.2, distances.py:576),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $104pred, 106, 110
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block analysis pass on 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7510BC88>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const106.0 = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $108return_value.1 = cast(value=$const106.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $108return_value.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block analysis pass on 110
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7510BC88>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const112.1 = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $114compare_op.2 = norm_x == $const112.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool116 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $116pred = call bool116($114compare_op.2, func=bool116, args=(Var($114compare_op.2, distances.py:578),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $116pred, 126, 118
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block analysis pass on 118
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7510BC88>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const120.1 = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $122compare_op.2 = norm_y == $const120.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool124 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $124pred = call bool124($122compare_op.2, func=bool124, args=(Var($122compare_op.2, distances.py:578),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $124pred, 126, 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block analysis pass on 126
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7510BC88>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const126.0 = const(float, 1.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $128return_value.1 = cast(value=$const126.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $128return_value.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block analysis pass on 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7510BC88>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const130.0 = const(float, 1.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $134load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $136load_method.3 = getattr(value=$134load_global.2, attr=sqrt)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $142binary_multiply.6 = norm_x * norm_y
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $144call_method.7 = call $136load_method.3($142binary_multiply.6, func=$136load_method.3, args=[Var($142binary_multiply.6, distances.py:581)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $146binary_true_divide.8 = result / $144call_method.7
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $148binary_subtract.9 = $const130.0 - $146binary_true_divide.8
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $150return_value.10 = cast(value=$148binary_subtract.9)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $150return_value.10
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG defs defaultdict(<class 'list'>,
            {'$102compare_op.2': [<numba.core.ir.Assign object at 0x0000015A16D6E0C8>],
             '$104pred': [<numba.core.ir.Assign object at 0x0000015A28CBB1C8>],
             '$108return_value.1': [<numba.core.ir.Assign object at 0x0000015A28CBB108>],
             '$114compare_op.2': [<numba.core.ir.Assign object at 0x0000015A28CBB408>],
             '$116pred': [<numba.core.ir.Assign object at 0x0000015A28CBB548>],
             '$122compare_op.2': [<numba.core.ir.Assign object at 0x0000015A28CAF088>],
             '$124pred': [<numba.core.ir.Assign object at 0x0000015A28CAF348>],
             '$128return_value.1': [<numba.core.ir.Assign object at 0x0000015A28CAF648>],
             '$134load_global.2': [<numba.core.ir.Assign object at 0x0000015A28CAFB08>],
             '$136load_method.3': [<numba.core.ir.Assign object at 0x0000015A28CAFC48>],
             '$142binary_multiply.6': [<numba.core.ir.Assign object at 0x0000015A28CCD088>],
             '$144call_method.7': [<numba.core.ir.Assign object at 0x0000015A28CCD208>],
             '$146binary_true_divide.8': [<numba.core.ir.Assign object at 0x0000015A28CCD348>],
             '$148binary_subtract.9': [<numba.core.ir.Assign object at 0x0000015A28CCD448>],
             '$150return_value.10': [<numba.core.ir.Assign object at 0x0000015A28CCD588>],
             '$16load_global.0': [<numba.core.ir.Assign object at 0x0000015A75111AC8>],
             '$20load_attr.2': [<numba.core.ir.Assign object at 0x0000015A26F74D48>],
             '$24binary_subscr.4': [<numba.core.ir.Assign object at 0x0000015A28CD52C8>],
             '$26call_function.5': [<numba.core.ir.Assign object at 0x0000015A26F74B88>],
             '$28get_iter.6': [<numba.core.ir.Assign object at 0x0000015A26F74388>],
             '$30for_iter.1': [<numba.core.ir.Assign object at 0x0000015A16D5F108>],
             '$30for_iter.2': [<numba.core.ir.Assign object at 0x0000015A16D5F2C8>],
             '$30for_iter.3': [<numba.core.ir.Assign object at 0x0000015A16D5F888>],
             '$40binary_subscr.5': [<numba.core.ir.Assign object at 0x0000015A16D50348>],
             '$46binary_subscr.8': [<numba.core.ir.Assign object at 0x0000015A16D50508>],
             '$48binary_multiply.9': [<numba.core.ir.Assign object at 0x0000015A26F65348>],
             '$50inplace_add.10': [<numba.core.ir.Assign object at 0x0000015A26F65388>],
             '$60binary_subscr.14': [<numba.core.ir.Assign object at 0x0000015A26F65B08>],
             '$64binary_power.16': [<numba.core.ir.Assign object at 0x0000015A16D40EC8>],
             '$66inplace_add.17': [<numba.core.ir.Assign object at 0x0000015A16D406C8>],
             '$76binary_subscr.21': [<numba.core.ir.Assign object at 0x0000015A16D40148>],
             '$80binary_power.23': [<numba.core.ir.Assign object at 0x0000015A1C08A308>],
             '$82inplace_add.24': [<numba.core.ir.Assign object at 0x0000015A1C08A6C8>],
             '$94compare_op.2': [<numba.core.ir.Assign object at 0x0000015A1C08AB88>],
             '$96pred': [<numba.core.ir.Assign object at 0x0000015A16D6E148>],
             '$const100.1': [<numba.core.ir.Assign object at 0x0000015A16D6E988>],
             '$const106.0': [<numba.core.ir.Assign object at 0x0000015A28CBB7C8>],
             '$const112.1': [<numba.core.ir.Assign object at 0x0000015A28CBB148>],
             '$const120.1': [<numba.core.ir.Assign object at 0x0000015A28CBB708>],
             '$const126.0': [<numba.core.ir.Assign object at 0x0000015A28CAF508>],
             '$const130.0': [<numba.core.ir.Assign object at 0x0000015A28CAF848>],
             '$const22.3': [<numba.core.ir.Assign object at 0x0000015A26F743C8>],
             '$const62.15': [<numba.core.ir.Assign object at 0x0000015A26F65808>],
             '$const78.22': [<numba.core.ir.Assign object at 0x0000015A1C08A8C8>],
             '$const92.1': [<numba.core.ir.Assign object at 0x0000015A1C08AC88>],
             '$phi30.0': [<numba.core.ir.Assign object at 0x0000015A75111548>],
             '$phi32.1': [<numba.core.ir.Assign object at 0x0000015A16D5F708>],
             'bool104': [<numba.core.ir.Assign object at 0x0000015A16D6E188>],
             'bool116': [<numba.core.ir.Assign object at 0x0000015A28CBB948>],
             'bool124': [<numba.core.ir.Assign object at 0x0000015A28CAF208>],
             'bool96': [<numba.core.ir.Assign object at 0x0000015A16D6ECC8>],
             'i': [<numba.core.ir.Assign object at 0x0000015A16D5F048>],
             'norm_x': [<numba.core.ir.Assign object at 0x0000015A28C78988>,
                        <numba.core.ir.Assign object at 0x0000015A26F65448>],
             'norm_y': [<numba.core.ir.Assign object at 0x0000015A28C78848>,
                        <numba.core.ir.Assign object at 0x0000015A16D40908>],
             'result': [<numba.core.ir.Assign object at 0x0000015A26F45388>,
                        <numba.core.ir.Assign object at 0x0000015A16D5FF88>],
             'x': [<numba.core.ir.Assign object at 0x0000015A16D9B748>],
             'y': [<numba.core.ir.Assign object at 0x0000015A16D9B708>]})
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG SSA violators {'norm_y', 'norm_x', 'result'}
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Fix SSA violator on var norm_y
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A16D32488>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: x = arg(0, name=x)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: y = arg(1, name=y)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: result = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: norm_x = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: norm_y = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG first assign: norm_y
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG replaced with: norm_y = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 14
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 14
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A16D32488>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $16load_global.0 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $20load_attr.2 = getattr(value=x, attr=shape)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const22.3 = const(int, 0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $24binary_subscr.4 = static_getitem(value=$20load_attr.2, index=0, index_var=$const22.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $26call_function.5 = call $16load_global.0($24binary_subscr.4, func=$16load_global.0, args=[Var($24binary_subscr.4, distances.py:571)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $28get_iter.6 = getiter(value=$26call_function.5)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $phi30.0 = $28get_iter.6
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 30
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 30
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A16D32488>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $30for_iter.1 = iternext(value=$phi30.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $30for_iter.2 = pair_first(value=$30for_iter.1)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $30for_iter.3 = pair_second(value=$30for_iter.1)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $phi32.1 = $30for_iter.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $30for_iter.3, 32, 88
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 32
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A16D32488>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: i = $phi32.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $40binary_subscr.5 = getitem(value=x, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $46binary_subscr.8 = getitem(value=y, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $48binary_multiply.9 = $40binary_subscr.5 * $46binary_subscr.8
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $50inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$48binary_multiply.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: result = $50inplace_add.10
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $60binary_subscr.14 = getitem(value=x, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const62.15 = const(int, 2)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $64binary_power.16 = $60binary_subscr.14 ** $const62.15
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $66inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=norm_x, rhs=$64binary_power.16, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: norm_x = $66inplace_add.17
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $76binary_subscr.21 = getitem(value=y, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const78.22 = const(int, 2)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $80binary_power.23 = $76binary_subscr.21 ** $const78.22
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $82inplace_add.24 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=norm_y, rhs=$80binary_power.23, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: norm_y = $82inplace_add.24
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG replaced with: norm_y.1 = $82inplace_add.24
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 30
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 88
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A16D32488>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 90
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 90
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A16D32488>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const92.1 = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $94compare_op.2 = norm_x == $const92.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool96 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $96pred = call bool96($94compare_op.2, func=bool96, args=(Var($94compare_op.2, distances.py:576),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $96pred, 98, 110
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 98
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A16D32488>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const100.1 = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $102compare_op.2 = norm_y == $const100.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool104 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $104pred = call bool104($102compare_op.2, func=bool104, args=(Var($102compare_op.2, distances.py:576),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $104pred, 106, 110
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A16D32488>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const106.0 = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $108return_value.1 = cast(value=$const106.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $108return_value.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 110
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A16D32488>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const112.1 = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $114compare_op.2 = norm_x == $const112.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool116 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $116pred = call bool116($114compare_op.2, func=bool116, args=(Var($114compare_op.2, distances.py:578),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $116pred, 126, 118
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 118
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A16D32488>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const120.1 = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $122compare_op.2 = norm_y == $const120.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool124 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $124pred = call bool124($122compare_op.2, func=bool124, args=(Var($122compare_op.2, distances.py:578),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $124pred, 126, 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 126
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A16D32488>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const126.0 = const(float, 1.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $128return_value.1 = cast(value=$const126.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $128return_value.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A16D32488>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const130.0 = const(float, 1.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $134load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $136load_method.3 = getattr(value=$134load_global.2, attr=sqrt)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $142binary_multiply.6 = norm_x * norm_y
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $144call_method.7 = call $136load_method.3($142binary_multiply.6, func=$136load_method.3, args=[Var($142binary_multiply.6, distances.py:581)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $146binary_true_divide.8 = result / $144call_method.7
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $148binary_subtract.9 = $const130.0 - $146binary_true_divide.8
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $150return_value.10 = cast(value=$148binary_subtract.9)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $150return_value.10
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000015A28CBE888>],
             32: [<numba.core.ir.Assign object at 0x0000015A28CBED88>]})
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A16D32488>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: x = arg(0, name=x)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: y = arg(1, name=y)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: result = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: norm_x = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: norm_y = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 14
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 14
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A16D32488>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $16load_global.0 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $20load_attr.2 = getattr(value=x, attr=shape)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const22.3 = const(int, 0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $24binary_subscr.4 = static_getitem(value=$20load_attr.2, index=0, index_var=$const22.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $26call_function.5 = call $16load_global.0($24binary_subscr.4, func=$16load_global.0, args=[Var($24binary_subscr.4, distances.py:571)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $28get_iter.6 = getiter(value=$26call_function.5)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $phi30.0 = $28get_iter.6
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 30
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 30
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A16D32488>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $30for_iter.1 = iternext(value=$phi30.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $30for_iter.2 = pair_first(value=$30for_iter.1)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $30for_iter.3 = pair_second(value=$30for_iter.1)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $phi32.1 = $30for_iter.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $30for_iter.3, 32, 88
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 32
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A16D32488>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: i = $phi32.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $40binary_subscr.5 = getitem(value=x, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $46binary_subscr.8 = getitem(value=y, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $48binary_multiply.9 = $40binary_subscr.5 * $46binary_subscr.8
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $50inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$48binary_multiply.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: result = $50inplace_add.10
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $60binary_subscr.14 = getitem(value=x, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const62.15 = const(int, 2)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $64binary_power.16 = $60binary_subscr.14 ** $const62.15
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $66inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=norm_x, rhs=$64binary_power.16, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: norm_x = $66inplace_add.17
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $76binary_subscr.21 = getitem(value=y, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const78.22 = const(int, 2)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $80binary_power.23 = $76binary_subscr.21 ** $const78.22
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $82inplace_add.24 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=norm_y, rhs=$80binary_power.23, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def var='norm_y' stmt=$82inplace_add.24 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=norm_y, rhs=$80binary_power.23, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 32
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 30 from label 32
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 30
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 30
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG insert phi node norm_y.2 = phi(incoming_values=[], incoming_blocks=[]) at 30
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 32
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG incoming_def norm_y.1 = $82inplace_add.24
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 14
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 14
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 0 from label 14
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 0
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG incoming_def norm_y = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG replaced with: $82inplace_add.24 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=norm_y.2, rhs=$80binary_power.23, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: norm_y.1 = $82inplace_add.24
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 30
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 88
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A16D32488>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 90
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 90
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A16D32488>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const92.1 = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $94compare_op.2 = norm_x == $const92.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool96 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $96pred = call bool96($94compare_op.2, func=bool96, args=(Var($94compare_op.2, distances.py:576),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $96pred, 98, 110
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 98
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A16D32488>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const100.1 = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $102compare_op.2 = norm_y == $const100.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def var='norm_y' stmt=$102compare_op.2 = norm_y == $const100.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 98
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 90 from label 98
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 90
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 90
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 88 from label 90
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 88
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 88
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 30 from label 88
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 30
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG replaced with: $102compare_op.2 = norm_y.2 == $const100.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool104 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $104pred = call bool104($102compare_op.2, func=bool104, args=(Var($102compare_op.2, distances.py:576),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $104pred, 106, 110
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A16D32488>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const106.0 = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $108return_value.1 = cast(value=$const106.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $108return_value.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 110
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A16D32488>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const112.1 = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $114compare_op.2 = norm_x == $const112.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool116 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $116pred = call bool116($114compare_op.2, func=bool116, args=(Var($114compare_op.2, distances.py:578),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $116pred, 126, 118
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 118
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A16D32488>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const120.1 = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $122compare_op.2 = norm_y == $const120.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def var='norm_y' stmt=$122compare_op.2 = norm_y == $const120.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 118
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 110 from label 118
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 110
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 110
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 90 from label 110
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 90
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 90
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 88 from label 90
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 88
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 88
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 30 from label 88
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 30
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG replaced with: $122compare_op.2 = norm_y.2 == $const120.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool124 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $124pred = call bool124($122compare_op.2, func=bool124, args=(Var($122compare_op.2, distances.py:578),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $124pred, 126, 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 126
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A16D32488>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const126.0 = const(float, 1.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $128return_value.1 = cast(value=$const126.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $128return_value.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A16D32488>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const130.0 = const(float, 1.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $134load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $136load_method.3 = getattr(value=$134load_global.2, attr=sqrt)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $142binary_multiply.6 = norm_x * norm_y
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def var='norm_y' stmt=$142binary_multiply.6 = norm_x * norm_y
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 118 from label 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 118
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 118
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 110 from label 118
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 110
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 110
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 90 from label 110
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 90
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 90
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 88 from label 90
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 88
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 88
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 30 from label 88
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 30
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG replaced with: $142binary_multiply.6 = norm_x * norm_y.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $144call_method.7 = call $136load_method.3($142binary_multiply.6, func=$136load_method.3, args=[Var($142binary_multiply.6, distances.py:581)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $146binary_true_divide.8 = result / $144call_method.7
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $148binary_subtract.9 = $const130.0 - $146binary_true_divide.8
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $150return_value.10 = cast(value=$148binary_subtract.9)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $150return_value.10
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Fix SSA violator on var norm_x
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A28CBEEC8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: x = arg(0, name=x)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: y = arg(1, name=y)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: result = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: norm_x = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG first assign: norm_x
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG replaced with: norm_x = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: norm_y = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 14
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 14
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A28CBEEC8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $16load_global.0 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $20load_attr.2 = getattr(value=x, attr=shape)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const22.3 = const(int, 0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $24binary_subscr.4 = static_getitem(value=$20load_attr.2, index=0, index_var=$const22.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $26call_function.5 = call $16load_global.0($24binary_subscr.4, func=$16load_global.0, args=[Var($24binary_subscr.4, distances.py:571)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $28get_iter.6 = getiter(value=$26call_function.5)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $phi30.0 = $28get_iter.6
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 30
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 30
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A28CBEEC8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: norm_y.2 = phi(incoming_values=[Var(norm_y.1, distances.py:574), Var(norm_y, distances.py:570)], incoming_blocks=[32, 14])
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $30for_iter.1 = iternext(value=$phi30.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $30for_iter.2 = pair_first(value=$30for_iter.1)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $30for_iter.3 = pair_second(value=$30for_iter.1)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $phi32.1 = $30for_iter.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $30for_iter.3, 32, 88
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 32
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A28CBEEC8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: i = $phi32.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $40binary_subscr.5 = getitem(value=x, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $46binary_subscr.8 = getitem(value=y, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $48binary_multiply.9 = $40binary_subscr.5 * $46binary_subscr.8
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $50inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$48binary_multiply.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: result = $50inplace_add.10
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $60binary_subscr.14 = getitem(value=x, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const62.15 = const(int, 2)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $64binary_power.16 = $60binary_subscr.14 ** $const62.15
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $66inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=norm_x, rhs=$64binary_power.16, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: norm_x = $66inplace_add.17
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG replaced with: norm_x.1 = $66inplace_add.17
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $76binary_subscr.21 = getitem(value=y, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const78.22 = const(int, 2)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $80binary_power.23 = $76binary_subscr.21 ** $const78.22
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $82inplace_add.24 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=norm_y.2, rhs=$80binary_power.23, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: norm_y.1 = $82inplace_add.24
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 30
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 88
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A28CBEEC8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 90
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 90
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A28CBEEC8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const92.1 = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $94compare_op.2 = norm_x == $const92.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool96 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $96pred = call bool96($94compare_op.2, func=bool96, args=(Var($94compare_op.2, distances.py:576),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $96pred, 98, 110
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 98
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A28CBEEC8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const100.1 = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $102compare_op.2 = norm_y.2 == $const100.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool104 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $104pred = call bool104($102compare_op.2, func=bool104, args=(Var($102compare_op.2, distances.py:576),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $104pred, 106, 110
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A28CBEEC8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const106.0 = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $108return_value.1 = cast(value=$const106.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $108return_value.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 110
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A28CBEEC8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const112.1 = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $114compare_op.2 = norm_x == $const112.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool116 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $116pred = call bool116($114compare_op.2, func=bool116, args=(Var($114compare_op.2, distances.py:578),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $116pred, 126, 118
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 118
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A28CBEEC8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const120.1 = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $122compare_op.2 = norm_y.2 == $const120.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool124 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $124pred = call bool124($122compare_op.2, func=bool124, args=(Var($122compare_op.2, distances.py:578),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $124pred, 126, 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 126
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A28CBEEC8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const126.0 = const(float, 1.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $128return_value.1 = cast(value=$const126.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $128return_value.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A28CBEEC8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const130.0 = const(float, 1.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $134load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $136load_method.3 = getattr(value=$134load_global.2, attr=sqrt)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $142binary_multiply.6 = norm_x * norm_y.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $144call_method.7 = call $136load_method.3($142binary_multiply.6, func=$136load_method.3, args=[Var($142binary_multiply.6, distances.py:581)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $146binary_true_divide.8 = result / $144call_method.7
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $148binary_subtract.9 = $const130.0 - $146binary_true_divide.8
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $150return_value.10 = cast(value=$148binary_subtract.9)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $150return_value.10
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000015A28CBEC08>],
             32: [<numba.core.ir.Assign object at 0x0000015A28CBEC88>]})
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A28CD5FC8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: x = arg(0, name=x)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: y = arg(1, name=y)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: result = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: norm_x = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: norm_y = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 14
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 14
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A28CD5FC8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $16load_global.0 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $20load_attr.2 = getattr(value=x, attr=shape)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const22.3 = const(int, 0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $24binary_subscr.4 = static_getitem(value=$20load_attr.2, index=0, index_var=$const22.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $26call_function.5 = call $16load_global.0($24binary_subscr.4, func=$16load_global.0, args=[Var($24binary_subscr.4, distances.py:571)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $28get_iter.6 = getiter(value=$26call_function.5)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $phi30.0 = $28get_iter.6
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 30
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 30
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A28CD5FC8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: norm_y.2 = phi(incoming_values=[Var(norm_y.1, distances.py:574), Var(norm_y, distances.py:570)], incoming_blocks=[32, 14])
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $30for_iter.1 = iternext(value=$phi30.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $30for_iter.2 = pair_first(value=$30for_iter.1)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $30for_iter.3 = pair_second(value=$30for_iter.1)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $phi32.1 = $30for_iter.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $30for_iter.3, 32, 88
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 32
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A28CD5FC8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: i = $phi32.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $40binary_subscr.5 = getitem(value=x, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $46binary_subscr.8 = getitem(value=y, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $48binary_multiply.9 = $40binary_subscr.5 * $46binary_subscr.8
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $50inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$48binary_multiply.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: result = $50inplace_add.10
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $60binary_subscr.14 = getitem(value=x, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const62.15 = const(int, 2)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $64binary_power.16 = $60binary_subscr.14 ** $const62.15
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $66inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=norm_x, rhs=$64binary_power.16, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def var='norm_x' stmt=$66inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=norm_x, rhs=$64binary_power.16, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 32
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 30 from label 32
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 30
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 30
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG insert phi node norm_x.2 = phi(incoming_values=[], incoming_blocks=[]) at 30
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 32
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG incoming_def norm_x.1 = $66inplace_add.17
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 14
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 14
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 0 from label 14
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 0
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG incoming_def norm_x = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG replaced with: $66inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=norm_x.2, rhs=$64binary_power.16, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: norm_x.1 = $66inplace_add.17
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $76binary_subscr.21 = getitem(value=y, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const78.22 = const(int, 2)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $80binary_power.23 = $76binary_subscr.21 ** $const78.22
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $82inplace_add.24 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=norm_y.2, rhs=$80binary_power.23, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: norm_y.1 = $82inplace_add.24
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 30
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 88
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A28CD5FC8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 90
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 90
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A28CD5FC8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const92.1 = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $94compare_op.2 = norm_x == $const92.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def var='norm_x' stmt=$94compare_op.2 = norm_x == $const92.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 90
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 88 from label 90
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 88
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 88
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 30 from label 88
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 30
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG replaced with: $94compare_op.2 = norm_x.2 == $const92.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool96 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $96pred = call bool96($94compare_op.2, func=bool96, args=(Var($94compare_op.2, distances.py:576),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $96pred, 98, 110
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 98
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A28CD5FC8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const100.1 = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $102compare_op.2 = norm_y.2 == $const100.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool104 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $104pred = call bool104($102compare_op.2, func=bool104, args=(Var($102compare_op.2, distances.py:576),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $104pred, 106, 110
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A28CD5FC8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const106.0 = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $108return_value.1 = cast(value=$const106.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $108return_value.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 110
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A28CD5FC8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const112.1 = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $114compare_op.2 = norm_x == $const112.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def var='norm_x' stmt=$114compare_op.2 = norm_x == $const112.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 110
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 90 from label 110
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 90
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 90
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 88 from label 90
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 88
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 88
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 30 from label 88
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 30
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG replaced with: $114compare_op.2 = norm_x.2 == $const112.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool116 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $116pred = call bool116($114compare_op.2, func=bool116, args=(Var($114compare_op.2, distances.py:578),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $116pred, 126, 118
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 118
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A28CD5FC8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const120.1 = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $122compare_op.2 = norm_y.2 == $const120.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool124 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $124pred = call bool124($122compare_op.2, func=bool124, args=(Var($122compare_op.2, distances.py:578),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $124pred, 126, 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 126
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A28CD5FC8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const126.0 = const(float, 1.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $128return_value.1 = cast(value=$const126.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $128return_value.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A28CD5FC8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const130.0 = const(float, 1.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $134load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $136load_method.3 = getattr(value=$134load_global.2, attr=sqrt)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $142binary_multiply.6 = norm_x * norm_y.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def var='norm_x' stmt=$142binary_multiply.6 = norm_x * norm_y.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 118 from label 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 118
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 118
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 110 from label 118
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 110
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 110
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 90 from label 110
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 90
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 90
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 88 from label 90
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 88
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 88
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 30 from label 88
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 30
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG replaced with: $142binary_multiply.6 = norm_x.2 * norm_y.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $144call_method.7 = call $136load_method.3($142binary_multiply.6, func=$136load_method.3, args=[Var($142binary_multiply.6, distances.py:581)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $146binary_true_divide.8 = result / $144call_method.7
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $148binary_subtract.9 = $const130.0 - $146binary_true_divide.8
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $150return_value.10 = cast(value=$148binary_subtract.9)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $150return_value.10
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Fix SSA violator on var result
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A28CD57C8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: x = arg(0, name=x)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: y = arg(1, name=y)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: result = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG first assign: result
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG replaced with: result = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: norm_x = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: norm_y = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 14
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 14
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A28CD57C8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $16load_global.0 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $20load_attr.2 = getattr(value=x, attr=shape)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const22.3 = const(int, 0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $24binary_subscr.4 = static_getitem(value=$20load_attr.2, index=0, index_var=$const22.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $26call_function.5 = call $16load_global.0($24binary_subscr.4, func=$16load_global.0, args=[Var($24binary_subscr.4, distances.py:571)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $28get_iter.6 = getiter(value=$26call_function.5)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $phi30.0 = $28get_iter.6
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 30
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 30
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A28CD57C8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: norm_x.2 = phi(incoming_values=[Var(norm_x.1, distances.py:573), Var(norm_x, distances.py:569)], incoming_blocks=[32, 14])
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: norm_y.2 = phi(incoming_values=[Var(norm_y.1, distances.py:574), Var(norm_y, distances.py:570)], incoming_blocks=[32, 14])
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $30for_iter.1 = iternext(value=$phi30.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $30for_iter.2 = pair_first(value=$30for_iter.1)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $30for_iter.3 = pair_second(value=$30for_iter.1)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $phi32.1 = $30for_iter.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $30for_iter.3, 32, 88
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 32
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A28CD57C8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: i = $phi32.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $40binary_subscr.5 = getitem(value=x, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $46binary_subscr.8 = getitem(value=y, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $48binary_multiply.9 = $40binary_subscr.5 * $46binary_subscr.8
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $50inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$48binary_multiply.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: result = $50inplace_add.10
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG replaced with: result.1 = $50inplace_add.10
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $60binary_subscr.14 = getitem(value=x, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const62.15 = const(int, 2)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $64binary_power.16 = $60binary_subscr.14 ** $const62.15
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $66inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=norm_x.2, rhs=$64binary_power.16, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: norm_x.1 = $66inplace_add.17
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $76binary_subscr.21 = getitem(value=y, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const78.22 = const(int, 2)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $80binary_power.23 = $76binary_subscr.21 ** $const78.22
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $82inplace_add.24 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=norm_y.2, rhs=$80binary_power.23, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: norm_y.1 = $82inplace_add.24
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 30
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 88
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A28CD57C8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 90
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 90
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A28CD57C8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const92.1 = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $94compare_op.2 = norm_x.2 == $const92.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool96 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $96pred = call bool96($94compare_op.2, func=bool96, args=(Var($94compare_op.2, distances.py:576),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $96pred, 98, 110
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 98
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A28CD57C8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const100.1 = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $102compare_op.2 = norm_y.2 == $const100.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool104 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $104pred = call bool104($102compare_op.2, func=bool104, args=(Var($102compare_op.2, distances.py:576),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $104pred, 106, 110
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A28CD57C8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const106.0 = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $108return_value.1 = cast(value=$const106.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $108return_value.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 110
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A28CD57C8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const112.1 = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $114compare_op.2 = norm_x.2 == $const112.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool116 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $116pred = call bool116($114compare_op.2, func=bool116, args=(Var($114compare_op.2, distances.py:578),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $116pred, 126, 118
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 118
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A28CD57C8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const120.1 = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $122compare_op.2 = norm_y.2 == $const120.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool124 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $124pred = call bool124($122compare_op.2, func=bool124, args=(Var($122compare_op.2, distances.py:578),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $124pred, 126, 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 126
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A28CD57C8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const126.0 = const(float, 1.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $128return_value.1 = cast(value=$const126.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $128return_value.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A28CD57C8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const130.0 = const(float, 1.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $134load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $136load_method.3 = getattr(value=$134load_global.2, attr=sqrt)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $142binary_multiply.6 = norm_x.2 * norm_y.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $144call_method.7 = call $136load_method.3($142binary_multiply.6, func=$136load_method.3, args=[Var($142binary_multiply.6, distances.py:581)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $146binary_true_divide.8 = result / $144call_method.7
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $148binary_subtract.9 = $const130.0 - $146binary_true_divide.8
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $150return_value.10 = cast(value=$148binary_subtract.9)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $150return_value.10
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000015A16D32F48>],
             32: [<numba.core.ir.Assign object at 0x0000015A28CBEE88>]})
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A28CAF448>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: x = arg(0, name=x)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: y = arg(1, name=y)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: result = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: norm_x = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: norm_y = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 14
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 14
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A28CAF448>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $16load_global.0 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $20load_attr.2 = getattr(value=x, attr=shape)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const22.3 = const(int, 0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $24binary_subscr.4 = static_getitem(value=$20load_attr.2, index=0, index_var=$const22.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $26call_function.5 = call $16load_global.0($24binary_subscr.4, func=$16load_global.0, args=[Var($24binary_subscr.4, distances.py:571)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $28get_iter.6 = getiter(value=$26call_function.5)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $phi30.0 = $28get_iter.6
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 30
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 30
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A28CAF448>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: norm_x.2 = phi(incoming_values=[Var(norm_x.1, distances.py:573), Var(norm_x, distances.py:569)], incoming_blocks=[32, 14])
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: norm_y.2 = phi(incoming_values=[Var(norm_y.1, distances.py:574), Var(norm_y, distances.py:570)], incoming_blocks=[32, 14])
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $30for_iter.1 = iternext(value=$phi30.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $30for_iter.2 = pair_first(value=$30for_iter.1)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $30for_iter.3 = pair_second(value=$30for_iter.1)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $phi32.1 = $30for_iter.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $30for_iter.3, 32, 88
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 32
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A28CAF448>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: i = $phi32.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $40binary_subscr.5 = getitem(value=x, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $46binary_subscr.8 = getitem(value=y, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $48binary_multiply.9 = $40binary_subscr.5 * $46binary_subscr.8
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $50inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$48binary_multiply.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def var='result' stmt=$50inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$48binary_multiply.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 32
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 30 from label 32
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 30
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 30
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG insert phi node result.2 = phi(incoming_values=[], incoming_blocks=[]) at 30
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 32
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG incoming_def result.1 = $50inplace_add.10
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 14
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 14
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 0 from label 14
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 0
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG incoming_def result = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG replaced with: $50inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result.2, rhs=$48binary_multiply.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: result.1 = $50inplace_add.10
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $60binary_subscr.14 = getitem(value=x, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const62.15 = const(int, 2)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $64binary_power.16 = $60binary_subscr.14 ** $const62.15
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $66inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=norm_x.2, rhs=$64binary_power.16, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: norm_x.1 = $66inplace_add.17
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $76binary_subscr.21 = getitem(value=y, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const78.22 = const(int, 2)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $80binary_power.23 = $76binary_subscr.21 ** $const78.22
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $82inplace_add.24 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=norm_y.2, rhs=$80binary_power.23, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: norm_y.1 = $82inplace_add.24
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 30
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 88
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A28CAF448>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 90
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 90
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A28CAF448>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const92.1 = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $94compare_op.2 = norm_x.2 == $const92.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool96 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $96pred = call bool96($94compare_op.2, func=bool96, args=(Var($94compare_op.2, distances.py:576),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $96pred, 98, 110
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 98
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A28CAF448>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const100.1 = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $102compare_op.2 = norm_y.2 == $const100.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool104 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $104pred = call bool104($102compare_op.2, func=bool104, args=(Var($102compare_op.2, distances.py:576),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $104pred, 106, 110
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A28CAF448>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const106.0 = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $108return_value.1 = cast(value=$const106.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $108return_value.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 110
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A28CAF448>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const112.1 = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $114compare_op.2 = norm_x.2 == $const112.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool116 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $116pred = call bool116($114compare_op.2, func=bool116, args=(Var($114compare_op.2, distances.py:578),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $116pred, 126, 118
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 118
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A28CAF448>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const120.1 = const(float, 0.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $122compare_op.2 = norm_y.2 == $const120.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool124 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $124pred = call bool124($122compare_op.2, func=bool124, args=(Var($122compare_op.2, distances.py:578),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $124pred, 126, 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 126
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A28CAF448>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const126.0 = const(float, 1.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $128return_value.1 = cast(value=$const126.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $128return_value.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A28CAF448>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const130.0 = const(float, 1.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $134load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $136load_method.3 = getattr(value=$134load_global.2, attr=sqrt)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $142binary_multiply.6 = norm_x.2 * norm_y.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $144call_method.7 = call $136load_method.3($142binary_multiply.6, func=$136load_method.3, args=[Var($142binary_multiply.6, distances.py:581)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $146binary_true_divide.8 = result / $144call_method.7
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def var='result' stmt=$146binary_true_divide.8 = result / $144call_method.7
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 118 from label 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 118
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 118
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 110 from label 118
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 110
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 110
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 90 from label 110
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 90
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 90
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 88 from label 90
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 88
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 88
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 30 from label 88
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 30
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG replaced with: $146binary_true_divide.8 = result.2 / $144call_method.7
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $148binary_subtract.9 = $const130.0 - $146binary_true_divide.8
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $150return_value.10 = cast(value=$148binary_subtract.9)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $150return_value.10
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=216)
           2	LOAD_DEREF(arg=1, lineno=216)
           4	LOAD_CONST(arg=1, lineno=216)
           6	CALL_FUNCTION(arg=1, lineno=216)
           8	STORE_FAST(arg=2, lineno=216)
          10	LOAD_DEREF(arg=1, lineno=217)
          12	LOAD_FAST(arg=0, lineno=217)
          14	CALL_FUNCTION(arg=1, lineno=217)
          16	STORE_FAST(arg=0, lineno=217)
          18	LOAD_FAST(arg=1, lineno=218)
          20	LOAD_CONST(arg=2, lineno=218)
          22	COMPARE_OP(arg=0, lineno=218)
          24	POP_JUMP_IF_FALSE(arg=98, lineno=218)
          26	LOAD_CONST(arg=3, lineno=219)
          28	STORE_FAST(arg=3, lineno=219)
          30	LOAD_FAST(arg=1, lineno=220)
          32	UNARY_NEGATIVE(arg=None, lineno=220)
          34	STORE_FAST(arg=4, lineno=220)
          36	LOAD_FAST(arg=4, lineno=221)
          38	LOAD_CONST(arg=2, lineno=221)
          40	COMPARE_OP(arg=0, lineno=221)
          42	POP_JUMP_IF_FALSE(arg=48, lineno=221)
          44	LOAD_GLOBAL(arg=0, lineno=222)
          46	RAISE_VARARGS(arg=1, lineno=222)
>         48	LOAD_DEREF(arg=0, lineno=223)
          50	POP_JUMP_IF_FALSE(arg=106, lineno=223)
          52	LOAD_FAST(arg=0, lineno=224)
          54	LOAD_CONST(arg=2, lineno=224)
          56	COMPARE_OP(arg=2, lineno=224)
          58	POP_JUMP_IF_FALSE(arg=76, lineno=224)
          60	LOAD_DEREF(arg=2, lineno=225)
          62	POP_JUMP_IF_FALSE(arg=68, lineno=225)
          64	LOAD_DEREF(arg=2, lineno=226)
          66	RETURN_VALUE(arg=None, lineno=226)
>         68	LOAD_GLOBAL(arg=1, lineno=228)
          70	LOAD_CONST(arg=4, lineno=228)
          72	CALL_FUNCTION(arg=1, lineno=228)
          74	RAISE_VARARGS(arg=1, lineno=228)
>         76	LOAD_FAST(arg=0, lineno=229)
          78	LOAD_CONST(arg=1, lineno=229)
          80	COMPARE_OP(arg=3, lineno=229)
          82	POP_JUMP_IF_FALSE(arg=106, lineno=229)
          84	LOAD_FAST(arg=0, lineno=229)
          86	LOAD_CONST(arg=5, lineno=229)
          88	COMPARE_OP(arg=3, lineno=229)
          90	POP_JUMP_IF_FALSE(arg=106, lineno=229)
          92	LOAD_CONST(arg=2, lineno=230)
          94	RETURN_VALUE(arg=None, lineno=230)
          96	JUMP_FORWARD(arg=8, lineno=230)
>         98	LOAD_CONST(arg=6, lineno=232)
         100	STORE_FAST(arg=3, lineno=232)
         102	LOAD_FAST(arg=1, lineno=233)
         104	STORE_FAST(arg=4, lineno=233)
>        106	LOAD_FAST(arg=4, lineno=234)
         108	LOAD_CONST(arg=7, lineno=234)
         110	COMPARE_OP(arg=4, lineno=234)
         112	POP_JUMP_IF_FALSE(arg=130, lineno=234)
         114	LOAD_GLOBAL(arg=2, lineno=236)
         116	LOAD_METHOD(arg=3, lineno=236)
         118	LOAD_FAST(arg=0, lineno=236)
         120	LOAD_GLOBAL(arg=4, lineno=236)
         122	LOAD_FAST(arg=1, lineno=236)
         124	CALL_FUNCTION(arg=1, lineno=236)
         126	CALL_METHOD(arg=2, lineno=236)
         128	RETURN_VALUE(arg=None, lineno=236)
>        130	SETUP_LOOP(arg=44, lineno=237)
>        132	LOAD_FAST(arg=4, lineno=237)
         134	LOAD_CONST(arg=2, lineno=237)
         136	COMPARE_OP(arg=3, lineno=237)
         138	POP_JUMP_IF_FALSE(arg=174, lineno=237)
         140	LOAD_FAST(arg=4, lineno=238)
         142	LOAD_CONST(arg=1, lineno=238)
         144	BINARY_AND(arg=None, lineno=238)
         146	POP_JUMP_IF_FALSE(arg=156, lineno=238)
         148	LOAD_FAST(arg=2, lineno=239)
         150	LOAD_FAST(arg=0, lineno=239)
         152	INPLACE_MULTIPLY(arg=None, lineno=239)
         154	STORE_FAST(arg=2, lineno=239)
>        156	LOAD_FAST(arg=4, lineno=240)
         158	LOAD_CONST(arg=1, lineno=240)
         160	INPLACE_RSHIFT(arg=None, lineno=240)
         162	STORE_FAST(arg=4, lineno=240)
         164	LOAD_FAST(arg=0, lineno=241)
         166	LOAD_FAST(arg=0, lineno=241)
         168	INPLACE_MULTIPLY(arg=None, lineno=241)
         170	STORE_FAST(arg=0, lineno=241)
         172	JUMP_ABSOLUTE(arg=132, lineno=241)
>        174	POP_BLOCK(arg=None, lineno=241)
>        176	LOAD_FAST(arg=3, lineno=243)
         178	POP_JUMP_IF_FALSE(arg=188, lineno=243)
         180	LOAD_CONST(arg=8, lineno=243)
         182	LOAD_FAST(arg=2, lineno=243)
         184	BINARY_TRUE_DIVIDE(arg=None, lineno=243)
         186	RETURN_VALUE(arg=None, lineno=243)
>        188	LOAD_FAST(arg=2, lineno=243)
         190	RETURN_VALUE(arg=None, lineno=243)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=216)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=2, inst=LOAD_DEREF(arg=1, lineno=216)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=216)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$2load_deref.0']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=216)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$2load_deref.0', '$const4.1']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=8, inst=STORE_FAST(arg=2, lineno=216)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$6call_function.2']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=10, inst=LOAD_DEREF(arg=1, lineno=217)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=217)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$10load_deref.3']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=217)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$10load_deref.3', '$a12.4']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=16, inst=STORE_FAST(arg=0, lineno=217)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$14call_function.5']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=218)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=218)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$b18.6']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=22, inst=COMPARE_OP(arg=0, lineno=218)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$b18.6', '$const20.7']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=98, lineno=218)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$22compare_op.8']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=98, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=98 nstack_initial=0)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=26, inst=LOAD_CONST(arg=3, lineno=219)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=28, inst=STORE_FAST(arg=3, lineno=219)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$const26.0']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=220)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=32, inst=UNARY_NEGATIVE(arg=None, lineno=220)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$b30.1']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=34, inst=STORE_FAST(arg=4, lineno=220)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$32unary_negative.2']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=221)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=221)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$exp36.3']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=40, inst=COMPARE_OP(arg=0, lineno=221)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$exp36.3', '$const38.4']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=48, lineno=221)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$40compare_op.5']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=98, inst=LOAD_CONST(arg=6, lineno=232)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=100, inst=STORE_FAST(arg=3, lineno=232)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$const98.0']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=102, inst=LOAD_FAST(arg=1, lineno=233)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=104, inst=STORE_FAST(arg=4, lineno=233)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$b102.1']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=44, inst=LOAD_GLOBAL(arg=0, lineno=222)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=46, inst=RAISE_VARARGS(arg=1, lineno=222)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$44load_global.0']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=48, inst=LOAD_DEREF(arg=0, lineno=223)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=106, lineno=223)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$48load_deref.0']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=106, inst=LOAD_FAST(arg=4, lineno=234)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=108, inst=LOAD_CONST(arg=7, lineno=234)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$exp106.0']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=110, inst=COMPARE_OP(arg=4, lineno=234)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$exp106.0', '$const108.1']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=112, inst=POP_JUMP_IF_FALSE(arg=130, lineno=234)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$110compare_op.2']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG end state. edges=[Edge(pc=114, stack=(), blockstack=(), npush=0), Edge(pc=130, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=224)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=224)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$a52.0']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=56, inst=COMPARE_OP(arg=2, lineno=224)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$a52.0', '$const54.1']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=76, lineno=224)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$56compare_op.2']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=76, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=114, inst=LOAD_GLOBAL(arg=2, lineno=236)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=116, inst=LOAD_METHOD(arg=3, lineno=236)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$114load_global.0']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=236)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$116load_method.1']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=120, inst=LOAD_GLOBAL(arg=4, lineno=236)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$116load_method.1', '$a118.2']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=122, inst=LOAD_FAST(arg=1, lineno=236)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$116load_method.1', '$a118.2', '$120load_global.3']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=124, inst=CALL_FUNCTION(arg=1, lineno=236)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$116load_method.1', '$a118.2', '$120load_global.3', '$b122.4']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=126, inst=CALL_METHOD(arg=2, lineno=236)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$116load_method.1', '$a118.2', '$124call_function.5']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=128, inst=RETURN_VALUE(arg=None, lineno=236)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$126call_method.6']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=130, inst=SETUP_LOOP(arg=44, lineno=237)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG end state. edges=[Edge(pc=132, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 176, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=132 nstack_initial=0)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=60, inst=LOAD_DEREF(arg=2, lineno=225)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=62, inst=POP_JUMP_IF_FALSE(arg=68, lineno=225)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$60load_deref.0']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG end state. edges=[Edge(pc=64, stack=(), blockstack=(), npush=0), Edge(pc=68, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=132 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=76, inst=LOAD_FAST(arg=0, lineno=229)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=78, inst=LOAD_CONST(arg=1, lineno=229)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$a76.0']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=80, inst=COMPARE_OP(arg=3, lineno=229)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$a76.0', '$const78.1']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=82, inst=POP_JUMP_IF_FALSE(arg=106, lineno=229)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$80compare_op.2']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG end state. edges=[Edge(pc=84, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=132 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=132, inst=LOAD_FAST(arg=4, lineno=237)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=134, inst=LOAD_CONST(arg=2, lineno=237)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$exp132.0']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=136, inst=COMPARE_OP(arg=3, lineno=237)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$exp132.0', '$const134.1']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=138, inst=POP_JUMP_IF_FALSE(arg=174, lineno=237)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$136compare_op.2']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG end state. edges=[Edge(pc=140, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 176, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=174, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 176, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=140 nstack_initial=0), State(pc_initial=174 nstack_initial=0)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=64, inst=LOAD_DEREF(arg=2, lineno=226)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=226)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$64load_deref.0']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=140 nstack_initial=0), State(pc_initial=174 nstack_initial=0)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=68, inst=LOAD_GLOBAL(arg=1, lineno=228)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=228)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$68load_global.0']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=72, inst=CALL_FUNCTION(arg=1, lineno=228)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$68load_global.0', '$const70.1']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=74, inst=RAISE_VARARGS(arg=1, lineno=228)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$72call_function.2']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=140 nstack_initial=0), State(pc_initial=174 nstack_initial=0)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=84, inst=LOAD_FAST(arg=0, lineno=229)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=86, inst=LOAD_CONST(arg=5, lineno=229)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$a84.0']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=88, inst=COMPARE_OP(arg=3, lineno=229)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$a84.0', '$const86.1']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=90, inst=POP_JUMP_IF_FALSE(arg=106, lineno=229)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$88compare_op.2']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG end state. edges=[Edge(pc=92, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=140 nstack_initial=0), State(pc_initial=174 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=140 nstack_initial=0), State(pc_initial=174 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=140, inst=LOAD_FAST(arg=4, lineno=238)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=142, inst=LOAD_CONST(arg=1, lineno=238)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$exp140.0']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=144, inst=BINARY_AND(arg=None, lineno=238)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$exp140.0', '$const142.1']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=146, inst=POP_JUMP_IF_FALSE(arg=156, lineno=238)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$144binary_and.2']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG end state. edges=[Edge(pc=148, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 176, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=156, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 176, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=174 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=148 nstack_initial=0), State(pc_initial=156 nstack_initial=0)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=174, inst=POP_BLOCK(arg=None, lineno=241)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG end state. edges=[Edge(pc=176, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=148 nstack_initial=0), State(pc_initial=156 nstack_initial=0), State(pc_initial=176 nstack_initial=0)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=92, inst=LOAD_CONST(arg=2, lineno=230)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=94, inst=RETURN_VALUE(arg=None, lineno=230)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$const92.0']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=148 nstack_initial=0), State(pc_initial=156 nstack_initial=0), State(pc_initial=176 nstack_initial=0)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=148 nstack_initial=0), State(pc_initial=156 nstack_initial=0), State(pc_initial=176 nstack_initial=0)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=148, inst=LOAD_FAST(arg=2, lineno=239)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=150, inst=LOAD_FAST(arg=0, lineno=239)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$r148.0']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=152, inst=INPLACE_MULTIPLY(arg=None, lineno=239)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$r148.0', '$a150.1']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=154, inst=STORE_FAST(arg=2, lineno=239)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$152inplace_multiply.2']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG end state. edges=[Edge(pc=156, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 176, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=156 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=156 nstack_initial=0)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=156, inst=LOAD_FAST(arg=4, lineno=240)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=158, inst=LOAD_CONST(arg=1, lineno=240)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$exp156.0']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=160, inst=INPLACE_RSHIFT(arg=None, lineno=240)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$exp156.0', '$const158.1']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=162, inst=STORE_FAST(arg=4, lineno=240)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$160inplace_rshift.2']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=164, inst=LOAD_FAST(arg=0, lineno=241)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=166, inst=LOAD_FAST(arg=0, lineno=241)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$a164.3']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=168, inst=INPLACE_MULTIPLY(arg=None, lineno=241)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$a164.3', '$a166.4']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=170, inst=STORE_FAST(arg=0, lineno=241)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$168inplace_multiply.5']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=172, inst=JUMP_ABSOLUTE(arg=132, lineno=241)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG end state. edges=[Edge(pc=132, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 176, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=176 nstack_initial=0), State(pc_initial=156 nstack_initial=0), State(pc_initial=132 nstack_initial=0)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=176, inst=LOAD_FAST(arg=3, lineno=243)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=178, inst=POP_JUMP_IF_FALSE(arg=188, lineno=243)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$invert176.0']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG end state. edges=[Edge(pc=180, stack=(), blockstack=(), npush=0), Edge(pc=188, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=156 nstack_initial=0), State(pc_initial=132 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=188 nstack_initial=0)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=132 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=188 nstack_initial=0)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=180 nstack_initial=0), State(pc_initial=188 nstack_initial=0)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=180, inst=LOAD_CONST(arg=8, lineno=243)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=182, inst=LOAD_FAST(arg=2, lineno=243)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$const180.0']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=184, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=243)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$const180.0', '$r182.1']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=186, inst=RETURN_VALUE(arg=None, lineno=243)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$184binary_true_divide.2']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG pending: deque([State(pc_initial=188 nstack_initial=0)])
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=188, inst=LOAD_FAST(arg=2, lineno=243)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG dispatch pc=190, inst=RETURN_VALUE(arg=None, lineno=243)
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG stack ['$r188.0']
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG -------------------------Prune PHIs-------------------------
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=84 nstack_initial=0): set(),
             State(pc_initial=92 nstack_initial=0): set(),
             State(pc_initial=98 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=0): set(),
             State(pc_initial=130 nstack_initial=0): set(),
             State(pc_initial=132 nstack_initial=0): set(),
             State(pc_initial=140 nstack_initial=0): set(),
             State(pc_initial=148 nstack_initial=0): set(),
             State(pc_initial=156 nstack_initial=0): set(),
             State(pc_initial=174 nstack_initial=0): set(),
             State(pc_initial=176 nstack_initial=0): set(),
             State(pc_initial=180 nstack_initial=0): set(),
             State(pc_initial=188 nstack_initial=0): set()})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG defmap: {}
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG keep phismap: {}
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG new_out: defaultdict(<class 'dict'>, {})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG ----------------------DONE Prune PHIs-----------------------
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$const4.1'}), (6, {'func': '$2load_deref.0', 'args': ['$const4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_deref.3'}), (12, {'res': '$a12.4'}), (14, {'func': '$10load_deref.3', 'args': ['$a12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5'}), (18, {'res': '$b18.6'}), (20, {'res': '$const20.7'}), (22, {'lhs': '$b18.6', 'rhs': '$const20.7', 'res': '$22compare_op.8'}), (24, {'pred': '$22compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 98: ()})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$const26.0'}), (28, {'value': '$const26.0'}), (30, {'res': '$b30.1'}), (32, {'value': '$b30.1', 'res': '$32unary_negative.2'}), (34, {'value': '$32unary_negative.2'}), (36, {'res': '$exp36.3'}), (38, {'res': '$const38.4'}), (40, {'lhs': '$exp36.3', 'rhs': '$const38.4', 'res': '$40compare_op.5'}), (42, {'pred': '$40compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 48: ()})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'exc': '$44load_global.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$48load_deref.0'}), (50, {'pred': '$48load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: (), 106: ()})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$a52.0'}), (54, {'res': '$const54.1'}), (56, {'lhs': '$a52.0', 'rhs': '$const54.1', 'res': '$56compare_op.2'}), (58, {'pred': '$56compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 76: ()})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$60load_deref.0'}), (62, {'pred': '$60load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: (), 68: ()})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG block_infos State(pc_initial=64 nstack_initial=0):
AdaptBlockInfo(insts=((64, {'res': '$64load_deref.0'}), (66, {'retval': '$64load_deref.0', 'castval': '$66return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$68load_global.0'}), (70, {'res': '$const70.1'}), (72, {'func': '$68load_global.0', 'args': ['$const70.1'], 'res': '$72call_function.2'}), (74, {'exc': '$72call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$a76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$a76.0', 'rhs': '$const78.1', 'res': '$80compare_op.2'}), (82, {'pred': '$80compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={84: (), 106: ()})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG block_infos State(pc_initial=84 nstack_initial=0):
AdaptBlockInfo(insts=((84, {'res': '$a84.0'}), (86, {'res': '$const86.1'}), (88, {'lhs': '$a84.0', 'rhs': '$const86.1', 'res': '$88compare_op.2'}), (90, {'pred': '$88compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={92: (), 106: ()})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG block_infos State(pc_initial=92 nstack_initial=0):
AdaptBlockInfo(insts=((92, {'res': '$const92.0'}), (94, {'retval': '$const92.0', 'castval': '$94return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$const98.0'}), (100, {'value': '$const98.0'}), (102, {'res': '$b102.1'}), (104, {'value': '$b102.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: ()})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$exp106.0'}), (108, {'res': '$const108.1'}), (110, {'lhs': '$exp106.0', 'rhs': '$const108.1', 'res': '$110compare_op.2'}), (112, {'pred': '$110compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: (), 130: ()})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG block_infos State(pc_initial=114 nstack_initial=0):
AdaptBlockInfo(insts=((114, {'res': '$114load_global.0'}), (116, {'item': '$114load_global.0', 'res': '$116load_method.1'}), (118, {'res': '$a118.2'}), (120, {'res': '$120load_global.3'}), (122, {'res': '$b122.4'}), (124, {'func': '$120load_global.3', 'args': ['$b122.4'], 'res': '$124call_function.5'}), (126, {'func': '$116load_method.1', 'args': ['$a118.2', '$124call_function.5'], 'res': '$126call_method.6'}), (128, {'retval': '$126call_method.6', 'castval': '$128return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG block_infos State(pc_initial=130 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={132: ()})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG block_infos State(pc_initial=132 nstack_initial=0):
AdaptBlockInfo(insts=((132, {'res': '$exp132.0'}), (134, {'res': '$const134.1'}), (136, {'lhs': '$exp132.0', 'rhs': '$const134.1', 'res': '$136compare_op.2'}), (138, {'pred': '$136compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 176, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={140: (), 174: ()})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG block_infos State(pc_initial=140 nstack_initial=0):
AdaptBlockInfo(insts=((140, {'res': '$exp140.0'}), (142, {'res': '$const142.1'}), (144, {'lhs': '$exp140.0', 'rhs': '$const142.1', 'res': '$144binary_and.2'}), (146, {'pred': '$144binary_and.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 176, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={148: (), 156: ()})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG block_infos State(pc_initial=148 nstack_initial=0):
AdaptBlockInfo(insts=((148, {'res': '$r148.0'}), (150, {'res': '$a150.1'}), (152, {'lhs': '$r148.0', 'rhs': '$a150.1', 'res': '$152inplace_multiply.2'}), (154, {'value': '$152inplace_multiply.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 176, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={156: ()})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG block_infos State(pc_initial=156 nstack_initial=0):
AdaptBlockInfo(insts=((156, {'res': '$exp156.0'}), (158, {'res': '$const158.1'}), (160, {'lhs': '$exp156.0', 'rhs': '$const158.1', 'res': '$160inplace_rshift.2'}), (162, {'value': '$160inplace_rshift.2'}), (164, {'res': '$a164.3'}), (166, {'res': '$a166.4'}), (168, {'lhs': '$a164.3', 'rhs': '$a166.4', 'res': '$168inplace_multiply.5'}), (170, {'value': '$168inplace_multiply.5'}), (172, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 176, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={132: ()})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG block_infos State(pc_initial=174 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 176, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={176: ()})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG block_infos State(pc_initial=176 nstack_initial=0):
AdaptBlockInfo(insts=((176, {'res': '$invert176.0'}), (178, {'pred': '$invert176.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={180: (), 188: ()})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG block_infos State(pc_initial=180 nstack_initial=0):
AdaptBlockInfo(insts=((180, {'res': '$const180.0'}), (182, {'res': '$r182.1'}), (184, {'lhs': '$const180.0', 'rhs': '$r182.1', 'res': '$184binary_true_divide.2'}), (186, {'retval': '$184binary_true_divide.2', 'castval': '$186return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:40 byteflow.py DEBUG block_infos State(pc_initial=188 nstack_initial=0):
AdaptBlockInfo(insts=((188, {'res': '$r188.0'}), (190, {'retval': '$r188.0', 'castval': '$190return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:40 interpreter.py DEBUG label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $2load_deref.0 = freevar(tp: float32)    ['$2load_deref.0']
    $const4.1 = const(int, 1)                ['$const4.1']
    r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_deref.0', '$const4.1', 'r']
    $10load_deref.3 = freevar(tp: float32)   ['$10load_deref.3']
    a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_deref.3', 'a', 'a.1']
    $const20.7 = const(int, 0)               ['$const20.7']
    $22compare_op.8 = b < $const20.7         ['$22compare_op.8', '$const20.7', 'b']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None) ['$22compare_op.8', '$24pred', 'bool24']
    branch $24pred, 26, 98                   ['$24pred']
label 26:
    invert = const(bool, True)               ['invert']
    exp = unary(fn=<built-in function neg>, value=b) ['b', 'exp']
    $const38.4 = const(int, 0)               ['$const38.4']
    $40compare_op.5 = exp < $const38.4       ['$40compare_op.5', '$const38.4', 'exp']
    bool42 = global(bool: <class 'bool'>)    ['bool42']
    $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None) ['$40compare_op.5', '$42pred', 'bool42']
    branch $42pred, 44, 48                   ['$42pred']
label 44:
    $44load_global.0 = global(OverflowError: <class 'OverflowError'>) ['$44load_global.0']
    raise $44load_global.0                   ['$44load_global.0']
label 48:
    $48load_deref.0 = freevar(is_integer: False) ['$48load_deref.0']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None) ['$48load_deref.0', '$50pred', 'bool50']
    branch $50pred, 52, 106                  ['$50pred']
label 52:
    $const54.1 = const(int, 0)               ['$const54.1']
    $56compare_op.2 = a.1 == $const54.1      ['$56compare_op.2', '$const54.1', 'a.1']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:224),), kws=(), vararg=None, varkwarg=None, target=None) ['$56compare_op.2', '$58pred', 'bool58']
    branch $58pred, 60, 76                   ['$58pred']
label 60:
    $60load_deref.0 = freevar(zerodiv_return: False) ['$60load_deref.0']
    bool62 = global(bool: <class 'bool'>)    ['bool62']
    $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:225),), kws=(), vararg=None, varkwarg=None, target=None) ['$60load_deref.0', '$62pred', 'bool62']
    branch $62pred, 64, 68                   ['$62pred']
label 64:
    $64load_deref.0 = freevar(zerodiv_return: False) ['$64load_deref.0']
    $66return_value.1 = cast(value=$64load_deref.0) ['$64load_deref.0', '$66return_value.1']
    return $66return_value.1                 ['$66return_value.1']
label 68:
    $68load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>) ['$68load_global.0']
    $const70.1 = const(str, 0 cannot be raised to a negative power) ['$const70.1']
    $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, numbers.py:228)], kws=(), vararg=None, varkwarg=None, target=None) ['$68load_global.0', '$72call_function.2', '$const70.1']
    raise $72call_function.2                 ['$72call_function.2']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80compare_op.2 = a.1 != $const78.1      ['$80compare_op.2', '$const78.1', 'a.1']
    bool82 = global(bool: <class 'bool'>)    ['bool82']
    $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None) ['$80compare_op.2', '$82pred', 'bool82']
    branch $82pred, 84, 106                  ['$82pred']
label 84:
    $const86.1 = const(int, -1)              ['$const86.1']
    $88compare_op.2 = a.1 != $const86.1      ['$88compare_op.2', '$const86.1', 'a.1']
    bool90 = global(bool: <class 'bool'>)    ['bool90']
    $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None) ['$88compare_op.2', '$90pred', 'bool90']
    branch $90pred, 92, 106                  ['$90pred']
label 92:
    $const92.0 = const(int, 0)               ['$const92.0']
    $94return_value.1 = cast(value=$const92.0) ['$94return_value.1', '$const92.0']
    return $94return_value.1                 ['$94return_value.1']
label 98:
    invert = const(bool, False)              ['invert']
    exp = b                                  ['b', 'exp']
    jump 106                                 []
label 106:
    $const108.1 = const(int, 65536)          ['$const108.1']
    $110compare_op.2 = exp > $const108.1     ['$110compare_op.2', '$const108.1', 'exp']
    bool112 = global(bool: <class 'bool'>)   ['bool112']
    $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None) ['$110compare_op.2', '$112pred', 'bool112']
    branch $112pred, 114, 130                ['$112pred']
label 114:
    $114load_global.0 = global(math: <module 'math' (built-in)>) ['$114load_global.0']
    $116load_method.1 = getattr(value=$114load_global.0, attr=pow) ['$114load_global.0', '$116load_method.1']
    $120load_global.3 = global(float: <class 'float'>) ['$120load_global.3']
    $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None) ['$120load_global.3', '$124call_function.5', 'b']
    $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None) ['$116load_method.1', '$124call_function.5', '$126call_method.6', 'a.1']
    $128return_value.7 = cast(value=$126call_method.6) ['$126call_method.6', '$128return_value.7']
    return $128return_value.7                ['$128return_value.7']
label 130:
    jump 132                                 []
label 132:
    $const134.1 = const(int, 0)              ['$const134.1']
    $136compare_op.2 = exp != $const134.1    ['$136compare_op.2', '$const134.1', 'exp']
    bool138 = global(bool: <class 'bool'>)   ['bool138']
    $138pred = call bool138($136compare_op.2, func=bool138, args=(Var($136compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None) ['$136compare_op.2', '$138pred', 'bool138']
    branch $138pred, 140, 174                ['$138pred']
label 140:
    $const142.1 = const(int, 1)              ['$const142.1']
    $144binary_and.2 = exp & $const142.1     ['$144binary_and.2', '$const142.1', 'exp']
    bool146 = global(bool: <class 'bool'>)   ['bool146']
    $146pred = call bool146($144binary_and.2, func=bool146, args=(Var($144binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None) ['$144binary_and.2', '$146pred', 'bool146']
    branch $146pred, 148, 156                ['$146pred']
label 148:
    $152inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$152inplace_multiply.2', 'a.1', 'r']
    r = $152inplace_multiply.2               ['$152inplace_multiply.2', 'r']
    jump 156                                 []
label 156:
    $const158.1 = const(int, 1)              ['$const158.1']
    $160inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const158.1, static_lhs=Undefined, static_rhs=Undefined) ['$160inplace_rshift.2', '$const158.1', 'exp']
    exp = $160inplace_rshift.2               ['$160inplace_rshift.2', 'exp']
    $168inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$168inplace_multiply.5', 'a.1', 'a.1']
    a.1 = $168inplace_multiply.5             ['$168inplace_multiply.5', 'a.1']
    jump 132                                 []
label 174:
    jump 176                                 []
label 176:
    bool178 = global(bool: <class 'bool'>)   ['bool178']
    $178pred = call bool178(invert, func=bool178, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None) ['$178pred', 'bool178', 'invert']
    branch $178pred, 180, 188                ['$178pred']
label 180:
    $const180.0 = const(float, 1.0)          ['$const180.0']
    $184binary_true_divide.2 = $const180.0 / r ['$184binary_true_divide.2', '$const180.0', 'r']
    $186return_value.3 = cast(value=$184binary_true_divide.2) ['$184binary_true_divide.2', '$186return_value.3']
    return $186return_value.3                ['$186return_value.3']
label 188:
    $190return_value.1 = cast(value=r)       ['$190return_value.1', 'r']
    return $190return_value.1                ['$190return_value.1']

Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block analysis pass on 0
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: a = arg(0, name=a)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: b = arg(1, name=b)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $2load_deref.0 = freevar(tp: float32)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const4.1 = const(int, 1)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $10load_deref.3 = freevar(tp: float32)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const20.7 = const(int, 0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $22compare_op.8 = b < $const20.7
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $24pred, 26, 98
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block analysis pass on 26
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: invert = const(bool, True)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const38.4 = const(int, 0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $40compare_op.5 = exp < $const38.4
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $42pred, 44, 48
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block analysis pass on 44
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: <static> raise <class 'OverflowError'>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block analysis pass on 48
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $48load_deref.0 = freevar(is_integer: False)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block analysis pass on 98
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: invert = const(bool, False)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: exp = b
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block analysis pass on 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const108.1 = const(int, 65536)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $110compare_op.2 = exp > $const108.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $112pred, 114, 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block analysis pass on 114
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $120load_global.3 = global(float: <class 'float'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $128return_value.7 = cast(value=$126call_method.6)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $128return_value.7
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block analysis pass on 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block analysis pass on 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const134.1 = const(int, 0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $136compare_op.2 = exp != $const134.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool138 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $138pred = call bool138($136compare_op.2, func=bool138, args=(Var($136compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $138pred, 140, 174
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block analysis pass on 140
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const142.1 = const(int, 1)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $144binary_and.2 = exp & $const142.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool146 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $146pred = call bool146($144binary_and.2, func=bool146, args=(Var($144binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $146pred, 148, 156
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block analysis pass on 148
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $152inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: r = $152inplace_multiply.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 156
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block analysis pass on 156
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const158.1 = const(int, 1)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $160inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const158.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: exp = $160inplace_rshift.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $168inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: a.1 = $168inplace_multiply.5
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block analysis pass on 174
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 176
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block analysis pass on 176
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool178 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $178pred = call bool178(invert, func=bool178, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $178pred, 180, 188
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block analysis pass on 180
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const180.0 = const(float, 1.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $184binary_true_divide.2 = $const180.0 / r
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $186return_value.3 = cast(value=$184binary_true_divide.2)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $186return_value.3
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block analysis pass on 188
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $190return_value.1 = cast(value=r)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $190return_value.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG defs defaultdict(<class 'list'>,
            {'$10load_deref.3': [<numba.core.ir.Assign object at 0x0000015A29EDA2C8>],
             '$110compare_op.2': [<numba.core.ir.Assign object at 0x0000015A29EEF3C8>],
             '$112pred': [<numba.core.ir.Assign object at 0x0000015A29EEF688>],
             '$114load_global.0': [<numba.core.ir.Assign object at 0x0000015A29EEF848>],
             '$116load_method.1': [<numba.core.ir.Assign object at 0x0000015A29EEF9C8>],
             '$120load_global.3': [<numba.core.ir.Assign object at 0x0000015A29EEFC88>],
             '$124call_function.5': [<numba.core.ir.Assign object at 0x0000015A29EEFF48>],
             '$126call_method.6': [<numba.core.ir.Assign object at 0x0000015A299230C8>],
             '$128return_value.7': [<numba.core.ir.Assign object at 0x0000015A29923208>],
             '$136compare_op.2': [<numba.core.ir.Assign object at 0x0000015A299236C8>],
             '$138pred': [<numba.core.ir.Assign object at 0x0000015A29923988>],
             '$144binary_and.2': [<numba.core.ir.Assign object at 0x0000015A29923E48>],
             '$146pred': [<numba.core.ir.Assign object at 0x0000015A2993C148>],
             '$152inplace_multiply.2': [<numba.core.ir.Assign object at 0x0000015A2993C5C8>],
             '$160inplace_rshift.2': [<numba.core.ir.Assign object at 0x0000015A2993CA48>],
             '$168inplace_multiply.5': [<numba.core.ir.Assign object at 0x0000015A2993CE88>],
             '$178pred': [<numba.core.ir.Assign object at 0x0000015A2994F448>],
             '$184binary_true_divide.2': [<numba.core.ir.Assign object at 0x0000015A2994F888>],
             '$186return_value.3': [<numba.core.ir.Assign object at 0x0000015A2994F9C8>],
             '$190return_value.1': [<numba.core.ir.Assign object at 0x0000015A2994FCC8>],
             '$22compare_op.8': [<numba.core.ir.Assign object at 0x0000015A29EE1F88>],
             '$24pred': [<numba.core.ir.Assign object at 0x0000015A29EE5248>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x0000015A29ECC048>],
             '$40compare_op.5': [<numba.core.ir.Assign object at 0x0000015A29EE5BC8>],
             '$42pred': [<numba.core.ir.Assign object at 0x0000015A29EE5E48>],
             '$44load_global.0': [<numba.core.ir.Assign object at 0x0000015A29EE5F88>],
             '$48load_deref.0': [<numba.core.ir.Assign object at 0x0000015A29EE7208>],
             '$50pred': [<numba.core.ir.Assign object at 0x0000015A29EE74C8>],
             '$const108.1': [<numba.core.ir.Assign object at 0x0000015A29EEF288>],
             '$const134.1': [<numba.core.ir.Assign object at 0x0000015A29923588>],
             '$const142.1': [<numba.core.ir.Assign object at 0x0000015A29923CC8>],
             '$const158.1': [<numba.core.ir.Assign object at 0x0000015A2993C908>],
             '$const180.0': [<numba.core.ir.Assign object at 0x0000015A2994F5C8>],
             '$const20.7': [<numba.core.ir.Assign object at 0x0000015A29EE1E08>],
             '$const38.4': [<numba.core.ir.Assign object at 0x0000015A29EE5A88>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000015A29EBCF48>],
             'a': [<numba.core.ir.Assign object at 0x0000015A29ECC288>],
             'a.1': [<numba.core.ir.Assign object at 0x0000015A29EDAE48>,
                     <numba.core.ir.Assign object at 0x0000015A2993CB08>],
             'b': [<numba.core.ir.Assign object at 0x0000015A29ECCA48>],
             'bool112': [<numba.core.ir.Assign object at 0x0000015A29EEF548>],
             'bool138': [<numba.core.ir.Assign object at 0x0000015A29923848>],
             'bool146': [<numba.core.ir.Assign object at 0x0000015A29923FC8>],
             'bool178': [<numba.core.ir.Assign object at 0x0000015A2994F308>],
             'bool24': [<numba.core.ir.Assign object at 0x0000015A29EE5108>],
             'bool42': [<numba.core.ir.Assign object at 0x0000015A29EE5D48>],
             'bool50': [<numba.core.ir.Assign object at 0x0000015A29EE7388>],
             'exp': [<numba.core.ir.Assign object at 0x0000015A29EE56C8>,
                     <numba.core.ir.Assign object at 0x0000015A29EECE08>,
                     <numba.core.ir.Assign object at 0x0000015A2993C688>],
             'invert': [<numba.core.ir.Assign object at 0x0000015A29EE5308>,
                        <numba.core.ir.Assign object at 0x0000015A29EECD48>],
             'r': [<numba.core.ir.Assign object at 0x0000015A29EBC788>,
                   <numba.core.ir.Assign object at 0x0000015A29EEF048>]})
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG SSA violators {'r', 'exp', 'a.1', 'invert'}
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Fix SSA violator on var r
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: a = arg(0, name=a)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: b = arg(1, name=b)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $2load_deref.0 = freevar(tp: float32)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const4.1 = const(int, 1)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG first assign: r
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG replaced with: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $10load_deref.3 = freevar(tp: float32)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const20.7 = const(int, 0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $22compare_op.8 = b < $const20.7
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $24pred, 26, 98
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 26
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: invert = const(bool, True)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const38.4 = const(int, 0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $40compare_op.5 = exp < $const38.4
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $42pred, 44, 48
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 44
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: <static> raise <class 'OverflowError'>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 48
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $48load_deref.0 = freevar(is_integer: False)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 98
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: invert = const(bool, False)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: exp = b
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const108.1 = const(int, 65536)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $110compare_op.2 = exp > $const108.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $112pred, 114, 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 114
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $120load_global.3 = global(float: <class 'float'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $128return_value.7 = cast(value=$126call_method.6)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $128return_value.7
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const134.1 = const(int, 0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $136compare_op.2 = exp != $const134.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool138 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $138pred = call bool138($136compare_op.2, func=bool138, args=(Var($136compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $138pred, 140, 174
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 140
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const142.1 = const(int, 1)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $144binary_and.2 = exp & $const142.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool146 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $146pred = call bool146($144binary_and.2, func=bool146, args=(Var($144binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $146pred, 148, 156
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 148
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $152inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: r = $152inplace_multiply.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG replaced with: r.1 = $152inplace_multiply.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 156
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 156
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const158.1 = const(int, 1)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $160inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const158.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: exp = $160inplace_rshift.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $168inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: a.1 = $168inplace_multiply.5
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 174
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 176
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 176
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool178 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $178pred = call bool178(invert, func=bool178, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $178pred, 180, 188
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 180
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const180.0 = const(float, 1.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $184binary_true_divide.2 = $const180.0 / r
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $186return_value.3 = cast(value=$184binary_true_divide.2)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $186return_value.3
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 188
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $190return_value.1 = cast(value=r)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $190return_value.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000015A29913C88>],
             148: [<numba.core.ir.Assign object at 0x0000015A29913808>]})
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: a = arg(0, name=a)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: b = arg(1, name=b)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $2load_deref.0 = freevar(tp: float32)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const4.1 = const(int, 1)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $10load_deref.3 = freevar(tp: float32)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const20.7 = const(int, 0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $22compare_op.8 = b < $const20.7
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $24pred, 26, 98
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 26
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: invert = const(bool, True)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const38.4 = const(int, 0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $40compare_op.5 = exp < $const38.4
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $42pred, 44, 48
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 44
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: <static> raise <class 'OverflowError'>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 48
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $48load_deref.0 = freevar(is_integer: False)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 98
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: invert = const(bool, False)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: exp = b
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const108.1 = const(int, 65536)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $110compare_op.2 = exp > $const108.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $112pred, 114, 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 114
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $120load_global.3 = global(float: <class 'float'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $128return_value.7 = cast(value=$126call_method.6)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $128return_value.7
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const134.1 = const(int, 0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $136compare_op.2 = exp != $const134.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool138 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $138pred = call bool138($136compare_op.2, func=bool138, args=(Var($136compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $138pred, 140, 174
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 140
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const142.1 = const(int, 1)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $144binary_and.2 = exp & $const142.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool146 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $146pred = call bool146($144binary_and.2, func=bool146, args=(Var($144binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $146pred, 148, 156
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 148
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $152inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def var='r' stmt=$152inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 148
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 140 from label 148
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 140
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 140
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 132 from label 140
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG insert phi node r.2 = phi(incoming_values=[], incoming_blocks=[]) at 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 106 from label 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 0 from label 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 0
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG incoming_def r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 156
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 156
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG insert phi node r.3 = phi(incoming_values=[], incoming_blocks=[]) at 156
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 148
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG incoming_def r.1 = $152inplace_multiply.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 140
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 140
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 132 from label 140
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG incoming_def r.2 = phi(incoming_values=[Var(r, numbers.py:216)], incoming_blocks=[130])
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG incoming_def r.3 = phi(incoming_values=[Var(r.1, numbers.py:239), Var(r.2, numbers.py:239)], incoming_blocks=[148, 140])
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG replaced with: $152inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: r.1 = $152inplace_multiply.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 156
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 156
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const158.1 = const(int, 1)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $160inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const158.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: exp = $160inplace_rshift.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $168inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: a.1 = $168inplace_multiply.5
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 174
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 176
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 176
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool178 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $178pred = call bool178(invert, func=bool178, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $178pred, 180, 188
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 180
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const180.0 = const(float, 1.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $184binary_true_divide.2 = $const180.0 / r
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def var='r' stmt=$184binary_true_divide.2 = $const180.0 / r
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 180
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 176 from label 180
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 176
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 176
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 174 from label 176
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 174
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 174
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 132 from label 174
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG replaced with: $184binary_true_divide.2 = $const180.0 / r.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $186return_value.3 = cast(value=$184binary_true_divide.2)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $186return_value.3
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 188
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $190return_value.1 = cast(value=r)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def var='r' stmt=$190return_value.1 = cast(value=r)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 188
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 176 from label 188
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 176
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 176
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 174 from label 176
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 174
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 174
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 132 from label 174
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG replaced with: $190return_value.1 = cast(value=r.2)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $190return_value.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Fix SSA violator on var exp
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29913608>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: a = arg(0, name=a)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: b = arg(1, name=b)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $2load_deref.0 = freevar(tp: float32)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const4.1 = const(int, 1)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $10load_deref.3 = freevar(tp: float32)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const20.7 = const(int, 0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $22compare_op.8 = b < $const20.7
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $24pred, 26, 98
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 26
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29913608>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: invert = const(bool, True)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG first assign: exp
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG replaced with: exp = unary(fn=<built-in function neg>, value=b)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const38.4 = const(int, 0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $40compare_op.5 = exp < $const38.4
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $42pred, 44, 48
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 44
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29913608>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: <static> raise <class 'OverflowError'>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 48
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29913608>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $48load_deref.0 = freevar(is_integer: False)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 98
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29913608>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: invert = const(bool, False)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: exp = b
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG replaced with: exp.1 = b
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29913608>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const108.1 = const(int, 65536)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $110compare_op.2 = exp > $const108.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $112pred, 114, 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 114
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29913608>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $120load_global.3 = global(float: <class 'float'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $128return_value.7 = cast(value=$126call_method.6)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $128return_value.7
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29913608>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29913608>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 156])
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const134.1 = const(int, 0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $136compare_op.2 = exp != $const134.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool138 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $138pred = call bool138($136compare_op.2, func=bool138, args=(Var($136compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $138pred, 140, 174
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 140
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29913608>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const142.1 = const(int, 1)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $144binary_and.2 = exp & $const142.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool146 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $146pred = call bool146($144binary_and.2, func=bool146, args=(Var($144binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $146pred, 148, 156
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 148
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29913608>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $152inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: r.1 = $152inplace_multiply.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 156
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 156
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29913608>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: r.3 = phi(incoming_values=[Var(r.1, numbers.py:239), Var(r.2, numbers.py:239)], incoming_blocks=[148, 140])
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const158.1 = const(int, 1)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $160inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const158.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: exp = $160inplace_rshift.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG replaced with: exp.2 = $160inplace_rshift.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $168inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: a.1 = $168inplace_multiply.5
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 174
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29913608>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 176
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 176
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29913608>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool178 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $178pred = call bool178(invert, func=bool178, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $178pred, 180, 188
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 180
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29913608>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const180.0 = const(float, 1.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $184binary_true_divide.2 = $const180.0 / r.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $186return_value.3 = cast(value=$184binary_true_divide.2)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $186return_value.3
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 188
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29913608>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $190return_value.1 = cast(value=r.2)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $190return_value.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x0000015A29913708>],
             98: [<numba.core.ir.Assign object at 0x0000015A29913AC8>],
             156: [<numba.core.ir.Assign object at 0x0000015A2994C6C8>]})
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29913988>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: a = arg(0, name=a)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: b = arg(1, name=b)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $2load_deref.0 = freevar(tp: float32)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const4.1 = const(int, 1)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $10load_deref.3 = freevar(tp: float32)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const20.7 = const(int, 0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $22compare_op.8 = b < $const20.7
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $24pred, 26, 98
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 26
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29913988>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: invert = const(bool, True)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const38.4 = const(int, 0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $40compare_op.5 = exp < $const38.4
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def var='exp' stmt=$40compare_op.5 = exp < $const38.4
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $42pred, 44, 48
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 44
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29913988>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: <static> raise <class 'OverflowError'>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 48
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29913988>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $48load_deref.0 = freevar(is_integer: False)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 98
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29913988>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: invert = const(bool, False)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: exp.1 = b
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29913988>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const108.1 = const(int, 65536)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $110compare_op.2 = exp > $const108.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def var='exp' stmt=$110compare_op.2 = exp > $const108.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG insert phi node exp.3 = phi(incoming_values=[], incoming_blocks=[]) at 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 48
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 48
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 26 from label 48
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 26
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG incoming_def exp = unary(fn=<built-in function neg>, value=b)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 98
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG incoming_def exp.1 = b
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG replaced with: $110compare_op.2 = exp.3 > $const108.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $112pred, 114, 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 114
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29913988>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $120load_global.3 = global(float: <class 'float'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $128return_value.7 = cast(value=$126call_method.6)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $128return_value.7
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29913988>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29913988>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 156])
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const134.1 = const(int, 0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $136compare_op.2 = exp != $const134.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def var='exp' stmt=$136compare_op.2 = exp != $const134.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG insert phi node exp.4 = phi(incoming_values=[], incoming_blocks=[]) at 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 106 from label 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG incoming_def exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[48, 98])
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 156
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG incoming_def exp.2 = $160inplace_rshift.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG replaced with: $136compare_op.2 = exp.4 != $const134.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool138 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $138pred = call bool138($136compare_op.2, func=bool138, args=(Var($136compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $138pred, 140, 174
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 140
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29913988>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const142.1 = const(int, 1)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $144binary_and.2 = exp & $const142.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def var='exp' stmt=$144binary_and.2 = exp & $const142.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 140
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 132 from label 140
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG replaced with: $144binary_and.2 = exp.4 & $const142.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool146 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $146pred = call bool146($144binary_and.2, func=bool146, args=(Var($144binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $146pred, 148, 156
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 148
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29913988>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $152inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: r.1 = $152inplace_multiply.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 156
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 156
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29913988>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: r.3 = phi(incoming_values=[Var(r.1, numbers.py:239), Var(r.2, numbers.py:239)], incoming_blocks=[148, 140])
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const158.1 = const(int, 1)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $160inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const158.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def var='exp' stmt=$160inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const158.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 156
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 140 from label 156
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 140
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 140
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 132 from label 140
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG replaced with: $160inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const158.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: exp.2 = $160inplace_rshift.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $168inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: a.1 = $168inplace_multiply.5
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 174
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29913988>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 176
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 176
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29913988>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool178 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $178pred = call bool178(invert, func=bool178, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $178pred, 180, 188
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 180
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29913988>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const180.0 = const(float, 1.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $184binary_true_divide.2 = $const180.0 / r.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $186return_value.3 = cast(value=$184binary_true_divide.2)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $186return_value.3
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 188
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29913988>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $190return_value.1 = cast(value=r.2)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $190return_value.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Fix SSA violator on var a.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: a = arg(0, name=a)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: b = arg(1, name=b)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $2load_deref.0 = freevar(tp: float32)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const4.1 = const(int, 1)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $10load_deref.3 = freevar(tp: float32)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG first assign: a.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG replaced with: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const20.7 = const(int, 0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $22compare_op.8 = b < $const20.7
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $24pred, 26, 98
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 26
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: invert = const(bool, True)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const38.4 = const(int, 0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $40compare_op.5 = exp < $const38.4
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $42pred, 44, 48
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 44
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: <static> raise <class 'OverflowError'>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 48
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $48load_deref.0 = freevar(is_integer: False)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 98
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: invert = const(bool, False)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: exp.1 = b
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[48, 98])
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const108.1 = const(int, 65536)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $110compare_op.2 = exp.3 > $const108.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $112pred, 114, 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 114
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $120load_global.3 = global(float: <class 'float'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $128return_value.7 = cast(value=$126call_method.6)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $128return_value.7
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:234), Var(exp.2, numbers.py:240)], incoming_blocks=[130, 156])
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 156])
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const134.1 = const(int, 0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $136compare_op.2 = exp.4 != $const134.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool138 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $138pred = call bool138($136compare_op.2, func=bool138, args=(Var($136compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $138pred, 140, 174
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 140
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const142.1 = const(int, 1)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $144binary_and.2 = exp.4 & $const142.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool146 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $146pred = call bool146($144binary_and.2, func=bool146, args=(Var($144binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $146pred, 148, 156
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 148
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $152inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: r.1 = $152inplace_multiply.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 156
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 156
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: r.3 = phi(incoming_values=[Var(r.1, numbers.py:239), Var(r.2, numbers.py:239)], incoming_blocks=[148, 140])
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const158.1 = const(int, 1)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $160inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const158.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: exp.2 = $160inplace_rshift.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $168inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: a.1 = $168inplace_multiply.5
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG replaced with: a.1.1 = $168inplace_multiply.5
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 174
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 176
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 176
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool178 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $178pred = call bool178(invert, func=bool178, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $178pred, 180, 188
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 180
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const180.0 = const(float, 1.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $184binary_true_divide.2 = $const180.0 / r.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $186return_value.3 = cast(value=$184binary_true_divide.2)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $186return_value.3
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 188
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $190return_value.1 = cast(value=r.2)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $190return_value.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000015A2994C248>],
             156: [<numba.core.ir.Assign object at 0x0000015A299133C8>]})
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A2994CFC8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: a = arg(0, name=a)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: b = arg(1, name=b)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $2load_deref.0 = freevar(tp: float32)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const4.1 = const(int, 1)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $10load_deref.3 = freevar(tp: float32)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const20.7 = const(int, 0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $22compare_op.8 = b < $const20.7
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $24pred, 26, 98
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 26
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A2994CFC8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: invert = const(bool, True)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const38.4 = const(int, 0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $40compare_op.5 = exp < $const38.4
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $42pred, 44, 48
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 44
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A2994CFC8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: <static> raise <class 'OverflowError'>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 48
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A2994CFC8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $48load_deref.0 = freevar(is_integer: False)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 98
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A2994CFC8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: invert = const(bool, False)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: exp.1 = b
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A2994CFC8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[48, 98])
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const108.1 = const(int, 65536)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $110compare_op.2 = exp.3 > $const108.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $112pred, 114, 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 114
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A2994CFC8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $120load_global.3 = global(float: <class 'float'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def var='a.1' stmt=$126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 114
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 106 from label 114
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 0 from label 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 0
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $128return_value.7 = cast(value=$126call_method.6)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $128return_value.7
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A2994CFC8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A2994CFC8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:234), Var(exp.2, numbers.py:240)], incoming_blocks=[130, 156])
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 156])
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const134.1 = const(int, 0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $136compare_op.2 = exp.4 != $const134.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool138 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $138pred = call bool138($136compare_op.2, func=bool138, args=(Var($136compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $138pred, 140, 174
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 140
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A2994CFC8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const142.1 = const(int, 1)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $144binary_and.2 = exp.4 & $const142.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool146 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $146pred = call bool146($144binary_and.2, func=bool146, args=(Var($144binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $146pred, 148, 156
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 148
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A2994CFC8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $152inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def var='a.1' stmt=$152inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 148
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 140 from label 148
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 140
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 140
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 132 from label 140
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG insert phi node a.1.2 = phi(incoming_values=[], incoming_blocks=[]) at 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 106 from label 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 0 from label 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 0
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG incoming_def a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 156
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG incoming_def a.1.1 = $168inplace_multiply.5
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG replaced with: $152inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: r.1 = $152inplace_multiply.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 156
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 156
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A2994CFC8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: r.3 = phi(incoming_values=[Var(r.1, numbers.py:239), Var(r.2, numbers.py:239)], incoming_blocks=[148, 140])
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const158.1 = const(int, 1)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $160inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const158.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: exp.2 = $160inplace_rshift.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $168inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def var='a.1' stmt=$168inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 156
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 140 from label 156
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 140
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 140
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 132 from label 140
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG replaced with: $168inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: a.1.1 = $168inplace_multiply.5
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 174
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A2994CFC8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 176
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 176
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A2994CFC8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool178 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $178pred = call bool178(invert, func=bool178, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $178pred, 180, 188
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 180
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A2994CFC8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const180.0 = const(float, 1.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $184binary_true_divide.2 = $const180.0 / r.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $186return_value.3 = cast(value=$184binary_true_divide.2)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $186return_value.3
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 188
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A2994CFC8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $190return_value.1 = cast(value=r.2)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $190return_value.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Fix SSA violator on var invert
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A299132C8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: a = arg(0, name=a)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: b = arg(1, name=b)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $2load_deref.0 = freevar(tp: float32)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const4.1 = const(int, 1)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $10load_deref.3 = freevar(tp: float32)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const20.7 = const(int, 0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $22compare_op.8 = b < $const20.7
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $24pred, 26, 98
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 26
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A299132C8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: invert = const(bool, True)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG first assign: invert
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG replaced with: invert = const(bool, True)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const38.4 = const(int, 0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $40compare_op.5 = exp < $const38.4
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $42pred, 44, 48
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 44
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A299132C8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: <static> raise <class 'OverflowError'>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 48
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A299132C8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $48load_deref.0 = freevar(is_integer: False)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 98
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A299132C8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: invert = const(bool, False)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG replaced with: invert.1 = const(bool, False)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: exp.1 = b
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A299132C8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[48, 98])
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const108.1 = const(int, 65536)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $110compare_op.2 = exp.3 > $const108.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $112pred, 114, 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 114
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A299132C8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $120load_global.3 = global(float: <class 'float'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $128return_value.7 = cast(value=$126call_method.6)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $128return_value.7
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A299132C8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A299132C8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[130, 156])
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:234), Var(exp.2, numbers.py:240)], incoming_blocks=[130, 156])
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 156])
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const134.1 = const(int, 0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $136compare_op.2 = exp.4 != $const134.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool138 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $138pred = call bool138($136compare_op.2, func=bool138, args=(Var($136compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $138pred, 140, 174
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 140
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A299132C8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const142.1 = const(int, 1)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $144binary_and.2 = exp.4 & $const142.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool146 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $146pred = call bool146($144binary_and.2, func=bool146, args=(Var($144binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $146pred, 148, 156
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 148
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A299132C8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $152inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: r.1 = $152inplace_multiply.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 156
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 156
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A299132C8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: r.3 = phi(incoming_values=[Var(r.1, numbers.py:239), Var(r.2, numbers.py:239)], incoming_blocks=[148, 140])
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const158.1 = const(int, 1)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $160inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const158.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: exp.2 = $160inplace_rshift.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $168inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: a.1.1 = $168inplace_multiply.5
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 174
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A299132C8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 176
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 176
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A299132C8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool178 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $178pred = call bool178(invert, func=bool178, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $178pred, 180, 188
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 180
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A299132C8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const180.0 = const(float, 1.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $184binary_true_divide.2 = $const180.0 / r.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $186return_value.3 = cast(value=$184binary_true_divide.2)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $186return_value.3
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 188
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A299132C8>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $190return_value.1 = cast(value=r.2)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $190return_value.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x0000015A29913BC8>],
             98: [<numba.core.ir.Assign object at 0x0000015A2994C188>]})
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: a = arg(0, name=a)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: b = arg(1, name=b)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $2load_deref.0 = freevar(tp: float32)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const4.1 = const(int, 1)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $10load_deref.3 = freevar(tp: float32)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const20.7 = const(int, 0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $22compare_op.8 = b < $const20.7
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $24pred, 26, 98
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 26
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: invert = const(bool, True)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const38.4 = const(int, 0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $40compare_op.5 = exp < $const38.4
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $42pred, 44, 48
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 44
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: <static> raise <class 'OverflowError'>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 48
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $48load_deref.0 = freevar(is_integer: False)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 98
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: invert.1 = const(bool, False)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: exp.1 = b
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[48, 98])
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const108.1 = const(int, 65536)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $110compare_op.2 = exp.3 > $const108.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $112pred, 114, 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 114
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $120load_global.3 = global(float: <class 'float'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $128return_value.7 = cast(value=$126call_method.6)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $128return_value.7
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[130, 156])
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:234), Var(exp.2, numbers.py:240)], incoming_blocks=[130, 156])
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 156])
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const134.1 = const(int, 0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $136compare_op.2 = exp.4 != $const134.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool138 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $138pred = call bool138($136compare_op.2, func=bool138, args=(Var($136compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $138pred, 140, 174
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 140
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const142.1 = const(int, 1)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $144binary_and.2 = exp.4 & $const142.1
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool146 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $146pred = call bool146($144binary_and.2, func=bool146, args=(Var($144binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $146pred, 148, 156
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 148
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $152inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: r.1 = $152inplace_multiply.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 156
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 156
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: r.3 = phi(incoming_values=[Var(r.1, numbers.py:239), Var(r.2, numbers.py:239)], incoming_blocks=[148, 140])
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const158.1 = const(int, 1)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $160inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const158.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: exp.2 = $160inplace_rshift.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $168inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: a.1.1 = $168inplace_multiply.5
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 174
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: jump 176
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 176
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: bool178 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $178pred = call bool178(invert, func=bool178, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def var='invert' stmt=$178pred = call bool178(invert, func=bool178, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 176
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 174 from label 176
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 174
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 174
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 132 from label 174
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 130 from label 132
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 106 from label 130
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG insert phi node invert.2 = phi(incoming_values=[], incoming_blocks=[]) at 106
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 48
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_top label 48
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG idom 26 from label 48
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 26
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG incoming_def invert = const(bool, True)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG find_def_from_bottom label 98
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG incoming_def invert.1 = const(bool, False)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG replaced with: $178pred = call bool178(invert.2, func=bool178, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: branch $178pred, 180, 188
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 180
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $const180.0 = const(float, 1.0)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $184binary_true_divide.2 = $const180.0 / r.2
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $186return_value.3 = cast(value=$184binary_true_divide.2)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $186return_value.3
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG ==== SSA block rewrite pass on 188
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A29EA1188>
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: $190return_value.1 = cast(value=r.2)
Sat 01 Jul 2023 19:39:40 ssa.py DEBUG on stmt: return $190return_value.1
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=31)
           2	LOAD_GLOBAL(arg=0, lineno=31)
           4	LOAD_ATTR(arg=1, lineno=31)
           6	LOAD_FAST(arg=0, lineno=31)
           8	LOAD_ATTR(arg=2, lineno=31)
          10	LOAD_CONST(arg=1, lineno=31)
          12	BINARY_SUBSCR(arg=None, lineno=31)
          14	LOAD_FAST(arg=1, lineno=31)
          16	BUILD_TUPLE(arg=2, lineno=31)
          18	LOAD_GLOBAL(arg=0, lineno=31)
          20	LOAD_ATTR(arg=3, lineno=31)
          22	LOAD_CONST(arg=2, lineno=31)
          24	CALL_FUNCTION_KW(arg=2, lineno=31)
          26	STORE_FAST(arg=2, lineno=31)
          28	SETUP_LOOP(arg=60, lineno=32)
          30	LOAD_GLOBAL(arg=4, lineno=32)
          32	LOAD_METHOD(arg=5, lineno=32)
          34	LOAD_FAST(arg=0, lineno=32)
          36	LOAD_ATTR(arg=2, lineno=32)
          38	LOAD_CONST(arg=1, lineno=32)
          40	BINARY_SUBSCR(arg=None, lineno=32)
          42	CALL_METHOD(arg=1, lineno=32)
          44	GET_ITER(arg=None, lineno=32)
>         46	FOR_ITER(arg=40, lineno=32)
          48	STORE_FAST(arg=3, lineno=32)
          50	LOAD_FAST(arg=0, lineno=34)
          52	LOAD_FAST(arg=3, lineno=34)
          54	BINARY_SUBSCR(arg=None, lineno=34)
          56	LOAD_ATTR(arg=6, lineno=34)
          58	LOAD_CONST(arg=3, lineno=34)
          60	LOAD_CONST(arg=4, lineno=34)
          62	CALL_FUNCTION_KW(arg=1, lineno=34)
          64	STORE_FAST(arg=4, lineno=34)
          66	LOAD_FAST(arg=4, lineno=35)
          68	LOAD_CONST(arg=5, lineno=35)
          70	LOAD_FAST(arg=1, lineno=35)
          72	BUILD_SLICE(arg=2, lineno=35)
          74	BINARY_SUBSCR(arg=None, lineno=35)
          76	STORE_FAST(arg=4, lineno=35)
          78	LOAD_FAST(arg=4, lineno=36)
          80	LOAD_FAST(arg=2, lineno=36)
          82	LOAD_FAST(arg=3, lineno=36)
          84	STORE_SUBSCR(arg=None, lineno=36)
          86	JUMP_ABSOLUTE(arg=46, lineno=36)
>         88	POP_BLOCK(arg=None, lineno=36)
>         90	LOAD_FAST(arg=2, lineno=37)
          92	RETURN_VALUE(arg=None, lineno=37)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=31)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=31)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=31)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$2load_global.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=31)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$4load_attr.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=8, inst=LOAD_ATTR(arg=2, lineno=31)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$4load_attr.1', '$X6.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=31)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$4load_attr.1', '$8load_attr.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=31)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$4load_attr.1', '$8load_attr.3', '$const10.4']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=31)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$4load_attr.1', '$12binary_subscr.5']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=16, inst=BUILD_TUPLE(arg=2, lineno=31)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$4load_attr.1', '$12binary_subscr.5', '$n_neighbors14.6']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=31)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$4load_attr.1', '$16build_tuple.7']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=20, inst=LOAD_ATTR(arg=3, lineno=31)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$4load_attr.1', '$16build_tuple.7', '$18load_global.8']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=22, inst=LOAD_CONST(arg=2, lineno=31)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$4load_attr.1', '$16build_tuple.7', '$20load_attr.9']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=24, inst=CALL_FUNCTION_KW(arg=2, lineno=31)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$4load_attr.1', '$16build_tuple.7', '$20load_attr.9', '$const22.10']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=26, inst=STORE_FAST(arg=2, lineno=31)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$24call_function_kw.11']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=28, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=28 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=28, inst=SETUP_LOOP(arg=60, lineno=32)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=30, inst=LOAD_GLOBAL(arg=4, lineno=32)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=32, inst=LOAD_METHOD(arg=5, lineno=32)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$30load_global.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=34, inst=LOAD_FAST(arg=0, lineno=32)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$32load_method.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=36, inst=LOAD_ATTR(arg=2, lineno=32)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$32load_method.1', '$X34.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=38, inst=LOAD_CONST(arg=1, lineno=32)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$32load_method.1', '$36load_attr.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=32)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$32load_method.1', '$36load_attr.3', '$const38.4']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=42, inst=CALL_METHOD(arg=1, lineno=32)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$32load_method.1', '$40binary_subscr.5']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=44, inst=GET_ITER(arg=None, lineno=32)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$42call_method.6']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=46, stack=('$44get_iter.7',), blockstack=({'kind': BlockKind(LOOP), 'end': 90, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=46 nstack_initial=1)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: ['$phi46.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=46, inst=FOR_ITER(arg=40, lineno=32)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi46.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=88, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 90, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=48, stack=('$phi46.0', '$46for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 90, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=48 nstack_initial=2)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=88, inst=POP_BLOCK(arg=None, lineno=36)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=48 nstack_initial=2), State(pc_initial=90 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: ['$phi48.0', '$phi48.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=48, inst=STORE_FAST(arg=3, lineno=32)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi48.0', '$phi48.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=50, inst=LOAD_FAST(arg=0, lineno=34)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi48.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=52, inst=LOAD_FAST(arg=3, lineno=34)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi48.0', '$X50.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=54, inst=BINARY_SUBSCR(arg=None, lineno=34)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi48.0', '$X50.2', '$row52.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=56, inst=LOAD_ATTR(arg=6, lineno=34)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi48.0', '$54binary_subscr.4']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=58, inst=LOAD_CONST(arg=3, lineno=34)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi48.0', '$56load_attr.5']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=60, inst=LOAD_CONST(arg=4, lineno=34)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi48.0', '$56load_attr.5', '$const58.6']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=62, inst=CALL_FUNCTION_KW(arg=1, lineno=34)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi48.0', '$56load_attr.5', '$const58.6', '$const60.7']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=64, inst=STORE_FAST(arg=4, lineno=34)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi48.0', '$62call_function_kw.8']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=66, inst=LOAD_FAST(arg=4, lineno=35)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi48.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=68, inst=LOAD_CONST(arg=5, lineno=35)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi48.0', '$v66.9']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=70, inst=LOAD_FAST(arg=1, lineno=35)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi48.0', '$v66.9', '$const68.10']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=72, inst=BUILD_SLICE(arg=2, lineno=35)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi48.0', '$v66.9', '$const68.10', '$n_neighbors70.11']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=74, inst=BINARY_SUBSCR(arg=None, lineno=35)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi48.0', '$v66.9', '$72build_slice.13']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=76, inst=STORE_FAST(arg=4, lineno=35)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi48.0', '$74binary_subscr.14']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=78, inst=LOAD_FAST(arg=4, lineno=36)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi48.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=80, inst=LOAD_FAST(arg=2, lineno=36)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi48.0', '$v78.15']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=82, inst=LOAD_FAST(arg=3, lineno=36)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi48.0', '$v78.15', '$knn_indices80.16']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=84, inst=STORE_SUBSCR(arg=None, lineno=36)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi48.0', '$v78.15', '$knn_indices80.16', '$row82.17']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=86, inst=JUMP_ABSOLUTE(arg=46, lineno=36)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi48.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=46, stack=('$phi48.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 90, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=46 nstack_initial=1)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=90, inst=LOAD_FAST(arg=2, lineno=37)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=37)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$knn_indices90.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=46 nstack_initial=1)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG -------------------------Prune PHIs-------------------------
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=46 nstack_initial=1): {'$phi46.0'},
             State(pc_initial=48 nstack_initial=2): {'$phi48.1'},
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=90 nstack_initial=0): set()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG defmap: {'$phi46.0': State(pc_initial=28 nstack_initial=0),
 '$phi48.1': State(pc_initial=46 nstack_initial=1)}
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.7',
                           State(pc_initial=28 nstack_initial=0)),
                          ('$phi48.0', State(pc_initial=48 nstack_initial=2))},
             '$phi48.0': {('$phi46.0', State(pc_initial=46 nstack_initial=1))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.7',
                           State(pc_initial=28 nstack_initial=0)),
                          ('$phi46.0', State(pc_initial=46 nstack_initial=1))},
             '$phi48.0': {('$44get_iter.7',
                           State(pc_initial=28 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.7',
                           State(pc_initial=28 nstack_initial=0))},
             '$phi48.0': {('$44get_iter.7',
                           State(pc_initial=28 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi46.0': {('$44get_iter.7',
                           State(pc_initial=28 nstack_initial=0))},
             '$phi48.0': {('$44get_iter.7',
                           State(pc_initial=28 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG keep phismap: {'$phi46.0': {('$44get_iter.7', State(pc_initial=28 nstack_initial=0))},
 '$phi48.1': {('$46for_iter.2', State(pc_initial=46 nstack_initial=1))}}
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=28 nstack_initial=0): {'$phi46.0': '$44get_iter.7'},
             State(pc_initial=46 nstack_initial=1): {'$phi48.1': '$46for_iter.2'}})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG ----------------------DONE Prune PHIs-----------------------
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'res': '$X6.2'}), (8, {'item': '$X6.2', 'res': '$8load_attr.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$8load_attr.3', 'res': '$12binary_subscr.5'}), (14, {'res': '$n_neighbors14.6'}), (16, {'items': ['$12binary_subscr.5', '$n_neighbors14.6'], 'res': '$16build_tuple.7'}), (18, {'res': '$18load_global.8'}), (20, {'item': '$18load_global.8', 'res': '$20load_attr.9'}), (22, {'res': '$const22.10'}), (24, {'func': '$4load_attr.1', 'args': ['$16build_tuple.7', '$20load_attr.9'], 'names': '$const22.10', 'res': '$24call_function_kw.11'}), (26, {'value': '$24call_function_kw.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((30, {'res': '$30load_global.0'}), (32, {'item': '$30load_global.0', 'res': '$32load_method.1'}), (34, {'res': '$X34.2'}), (36, {'item': '$X34.2', 'res': '$36load_attr.3'}), (38, {'res': '$const38.4'}), (40, {'index': '$const38.4', 'target': '$36load_attr.3', 'res': '$40binary_subscr.5'}), (42, {'func': '$32load_method.1', 'args': ['$40binary_subscr.5'], 'res': '$42call_method.6'}), (44, {'value': '$42call_method.6', 'res': '$44get_iter.7'})), outgoing_phis={'$phi46.0': '$44get_iter.7'}, blockstack=(), active_try_block=None, outgoing_edgepushed={46: ('$44get_iter.7',)})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=46 nstack_initial=1):
AdaptBlockInfo(insts=((46, {'iterator': '$phi46.0', 'pair': '$46for_iter.1', 'indval': '$46for_iter.2', 'pred': '$46for_iter.3'}),), outgoing_phis={'$phi48.1': '$46for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 90, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={88: (), 48: ('$phi46.0', '$46for_iter.2')})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=48 nstack_initial=2):
AdaptBlockInfo(insts=((48, {'value': '$phi48.1'}), (50, {'res': '$X50.2'}), (52, {'res': '$row52.3'}), (54, {'index': '$row52.3', 'target': '$X50.2', 'res': '$54binary_subscr.4'}), (56, {'item': '$54binary_subscr.4', 'res': '$56load_attr.5'}), (58, {'res': '$const58.6'}), (60, {'res': '$const60.7'}), (62, {'func': '$56load_attr.5', 'args': ['$const58.6'], 'names': '$const60.7', 'res': '$62call_function_kw.8'}), (64, {'value': '$62call_function_kw.8'}), (66, {'res': '$v66.9'}), (68, {'res': '$const68.10'}), (70, {'res': '$n_neighbors70.11'}), (72, {'start': '$const68.10', 'stop': '$n_neighbors70.11', 'step': None, 'res': '$72build_slice.13', 'slicevar': '$72build_slice.12'}), (74, {'index': '$72build_slice.13', 'target': '$v66.9', 'res': '$74binary_subscr.14'}), (76, {'value': '$74binary_subscr.14'}), (78, {'res': '$v78.15'}), (80, {'res': '$knn_indices80.16'}), (82, {'res': '$row82.17'}), (84, {'target': '$knn_indices80.16', 'index': '$row82.17', 'value': '$v78.15'}), (86, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 90, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={46: ('$phi48.0',)})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 90, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={90: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$knn_indices90.0'}), (92, {'retval': '$knn_indices90.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:41 interpreter.py DEBUG label 0:
    X = arg(0, name=X)                       ['X']
    n_neighbors = arg(1, name=n_neighbors)   ['n_neighbors']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_attr.1']
    $8load_attr.3 = getattr(value=X, attr=shape) ['$8load_attr.3', 'X']
    $const10.4 = const(int, 0)               ['$const10.4']
    $12binary_subscr.5 = getitem(value=$8load_attr.3, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$8load_attr.3', '$const10.4']
    $16build_tuple.7 = build_tuple(items=[Var($12binary_subscr.5, utils.py:31), Var(n_neighbors, utils.py:31)]) ['$12binary_subscr.5', '$16build_tuple.7', 'n_neighbors']
    $18load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>) ['$18load_global.8']
    $20load_attr.9 = getattr(value=$18load_global.8, attr=int32) ['$18load_global.8', '$20load_attr.9']
    knn_indices = call $4load_attr.1($16build_tuple.7, func=$4load_attr.1, args=[Var($16build_tuple.7, utils.py:31)], kws=[('dtype', Var($20load_attr.9, utils.py:31))], vararg=None, varkwarg=None, target=None) ['$16build_tuple.7', '$20load_attr.9', '$4load_attr.1', 'knn_indices']
    jump 28                                  []
label 28:
    $30load_global.0 = global(numba: <module 'numba' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numba\\__init__.py'>) ['$30load_global.0']
    $32load_method.1 = getattr(value=$30load_global.0, attr=prange) ['$30load_global.0', '$32load_method.1']
    $36load_attr.3 = getattr(value=X, attr=shape) ['$36load_attr.3', 'X']
    $const38.4 = const(int, 0)               ['$const38.4']
    $40binary_subscr.5 = getitem(value=$36load_attr.3, index=$const38.4, fn=<built-in function getitem>) ['$36load_attr.3', '$40binary_subscr.5', '$const38.4']
    $42call_method.6 = call $32load_method.1($40binary_subscr.5, func=$32load_method.1, args=[Var($40binary_subscr.5, utils.py:32)], kws=(), vararg=None, varkwarg=None, target=None) ['$32load_method.1', '$40binary_subscr.5', '$42call_method.6']
    $44get_iter.7 = getiter(value=$42call_method.6) ['$42call_method.6', '$44get_iter.7']
    $phi46.0 = $44get_iter.7                 ['$44get_iter.7', '$phi46.0']
    jump 46                                  []
label 46:
    $46for_iter.1 = iternext(value=$phi46.0) ['$46for_iter.1', '$phi46.0']
    $46for_iter.2 = pair_first(value=$46for_iter.1) ['$46for_iter.1', '$46for_iter.2']
    $46for_iter.3 = pair_second(value=$46for_iter.1) ['$46for_iter.1', '$46for_iter.3']
    $phi48.1 = $46for_iter.2                 ['$46for_iter.2', '$phi48.1']
    branch $46for_iter.3, 48, 88             ['$46for_iter.3']
label 48:
    row = $phi48.1                           ['$phi48.1', 'row']
    $54binary_subscr.4 = getitem(value=X, index=row, fn=<built-in function getitem>) ['$54binary_subscr.4', 'X', 'row']
    $56load_attr.5 = getattr(value=$54binary_subscr.4, attr=argsort) ['$54binary_subscr.4', '$56load_attr.5']
    $const58.6 = const(str, quicksort)       ['$const58.6']
    v = call $56load_attr.5(func=$56load_attr.5, args=[], kws=[('kind', Var($const58.6, utils.py:34))], vararg=None, varkwarg=None, target=None) ['$56load_attr.5', '$const58.6', 'v']
    $const68.10 = const(NoneType, None)      ['$const68.10']
    $72build_slice.12 = global(slice: <class 'slice'>) ['$72build_slice.12']
    $72build_slice.13 = call $72build_slice.12($const68.10, n_neighbors, func=$72build_slice.12, args=(Var($const68.10, utils.py:35), Var(n_neighbors, utils.py:31)), kws=(), vararg=None, varkwarg=None, target=None) ['$72build_slice.12', '$72build_slice.13', '$const68.10', 'n_neighbors']
    v = getitem(value=v, index=$72build_slice.13, fn=<built-in function getitem>) ['$72build_slice.13', 'v', 'v']
    knn_indices[row] = v                     ['knn_indices', 'row', 'v']
    jump 46                                  []
label 88:
    jump 90                                  []
label 90:
    $92return_value.1 = cast(value=knn_indices) ['$92return_value.1', 'knn_indices']
    return $92return_value.1                 ['$92return_value.1']

Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015B38E64F08>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: X = arg(0, name=X)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n_neighbors = arg(1, name=n_neighbors)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $8load_attr.3 = getattr(value=X, attr=shape)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const10.4 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $12binary_subscr.5 = static_getitem(value=$8load_attr.3, index=0, index_var=$const10.4, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $16build_tuple.7 = build_tuple(items=[Var($12binary_subscr.5, utils.py:31), Var(n_neighbors, utils.py:31)])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $18load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $20load_attr.9 = getattr(value=$18load_global.8, attr=int32)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: knn_indices = call $4load_attr.1($16build_tuple.7, func=$4load_attr.1, args=[Var($16build_tuple.7, utils.py:31)], kws=[('dtype', Var($20load_attr.9, utils.py:31))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 28
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 28
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015B38E64F08>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $30load_global.0 = global(numba: <module 'numba' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numba\\__init__.py'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $32load_method.1 = getattr(value=$30load_global.0, attr=prange)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $36load_attr.3 = getattr(value=X, attr=shape)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const38.4 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $40binary_subscr.5 = static_getitem(value=$36load_attr.3, index=0, index_var=$const38.4, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $42call_method.6 = call $32load_method.1($40binary_subscr.5, func=$32load_method.1, args=[Var($40binary_subscr.5, utils.py:32)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $44get_iter.7 = getiter(value=$42call_method.6)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi46.0 = $44get_iter.7
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 46
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 46
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015B38E64F08>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $46for_iter.1 = iternext(value=$phi46.0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $46for_iter.2 = pair_first(value=$46for_iter.1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $46for_iter.3 = pair_second(value=$46for_iter.1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi48.1 = $46for_iter.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $46for_iter.3, 48, 88
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 48
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015B38E64F08>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: row = $phi48.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $54binary_subscr.4 = getitem(value=X, index=row, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $56load_attr.5 = getattr(value=$54binary_subscr.4, attr=argsort)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const58.6 = const(str, quicksort)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: v = call $56load_attr.5(func=$56load_attr.5, args=[], kws=[('kind', Var($const58.6, utils.py:34))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const68.10 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $72build_slice.12 = global(slice: <class 'slice'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $72build_slice.13 = call $72build_slice.12($const68.10, n_neighbors, func=$72build_slice.12, args=(Var($const68.10, utils.py:35), Var(n_neighbors, utils.py:31)), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: v = getitem(value=v, index=$72build_slice.13, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: knn_indices[row] = v
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 46
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 88
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015B38E64F08>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 90
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 90
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015B38E64F08>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $92return_value.1 = cast(value=knn_indices)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $92return_value.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG defs defaultdict(<class 'list'>,
            {'$12binary_subscr.5': [<numba.core.ir.Assign object at 0x0000015B37EEC148>],
             '$16build_tuple.7': [<numba.core.ir.Assign object at 0x0000015B37ED6B88>],
             '$18load_global.8': [<numba.core.ir.Assign object at 0x0000015B37ED6CC8>],
             '$20load_attr.9': [<numba.core.ir.Assign object at 0x0000015B37ED6E08>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000015A26F65448>],
             '$30load_global.0': [<numba.core.ir.Assign object at 0x0000015A28C8F288>],
             '$32load_method.1': [<numba.core.ir.Assign object at 0x0000015A28C8F388>],
             '$36load_attr.3': [<numba.core.ir.Assign object at 0x0000015A28C8F688>],
             '$40binary_subscr.5': [<numba.core.ir.Assign object at 0x0000015B37EEC088>],
             '$42call_method.6': [<numba.core.ir.Assign object at 0x0000015A28C8FA88>],
             '$44get_iter.7': [<numba.core.ir.Assign object at 0x0000015A28C8FC08>],
             '$46for_iter.1': [<numba.core.ir.Assign object at 0x0000015A28C8FE48>],
             '$46for_iter.2': [<numba.core.ir.Assign object at 0x0000015A28C8FF48>],
             '$46for_iter.3': [<numba.core.ir.Assign object at 0x0000015B37EE4088>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x0000015A28CDBB88>],
             '$54binary_subscr.4': [<numba.core.ir.Assign object at 0x0000015B37EE4748>],
             '$56load_attr.5': [<numba.core.ir.Assign object at 0x0000015B37EE4888>],
             '$72build_slice.12': [<numba.core.ir.Assign object at 0x0000015B37EE63C8>],
             '$72build_slice.13': [<numba.core.ir.Assign object at 0x0000015B37EE64C8>],
             '$8load_attr.3': [<numba.core.ir.Assign object at 0x0000015B28678AC8>],
             '$92return_value.1': [<numba.core.ir.Assign object at 0x0000015B37EE6CC8>],
             '$const10.4': [<numba.core.ir.Assign object at 0x0000015B286786C8>],
             '$const38.4': [<numba.core.ir.Assign object at 0x0000015A28C8F7C8>],
             '$const58.6': [<numba.core.ir.Assign object at 0x0000015B37EE4A08>],
             '$const68.10': [<numba.core.ir.Assign object at 0x0000015B37EE6108>],
             '$phi46.0': [<numba.core.ir.Assign object at 0x0000015A28C8F808>],
             '$phi48.1': [<numba.core.ir.Assign object at 0x0000015B37EE4148>],
             'X': [<numba.core.ir.Assign object at 0x0000015A16D40688>],
             'knn_indices': [<numba.core.ir.Assign object at 0x0000015A28C8F088>],
             'n_neighbors': [<numba.core.ir.Assign object at 0x0000015A26F74688>],
             'row': [<numba.core.ir.Assign object at 0x0000015B37EE4348>],
             'v': [<numba.core.ir.Assign object at 0x0000015B37EE4D88>,
                   <numba.core.ir.Assign object at 0x0000015B37EE6608>]})
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG SSA violators {'v'}
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Fix SSA violator on var v
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A28CD56C8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: X = arg(0, name=X)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n_neighbors = arg(1, name=n_neighbors)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $8load_attr.3 = getattr(value=X, attr=shape)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const10.4 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $12binary_subscr.5 = static_getitem(value=$8load_attr.3, index=0, index_var=$const10.4, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $16build_tuple.7 = build_tuple(items=[Var($12binary_subscr.5, utils.py:31), Var(n_neighbors, utils.py:31)])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $18load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $20load_attr.9 = getattr(value=$18load_global.8, attr=int32)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: knn_indices = call $4load_attr.1($16build_tuple.7, func=$4load_attr.1, args=[Var($16build_tuple.7, utils.py:31)], kws=[('dtype', Var($20load_attr.9, utils.py:31))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 28
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 28
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A28CD56C8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $30load_global.0 = global(numba: <module 'numba' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numba\\__init__.py'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $32load_method.1 = getattr(value=$30load_global.0, attr=prange)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $36load_attr.3 = getattr(value=X, attr=shape)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const38.4 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $40binary_subscr.5 = static_getitem(value=$36load_attr.3, index=0, index_var=$const38.4, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $42call_method.6 = call $32load_method.1($40binary_subscr.5, func=$32load_method.1, args=[Var($40binary_subscr.5, utils.py:32)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $44get_iter.7 = getiter(value=$42call_method.6)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi46.0 = $44get_iter.7
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 46
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 46
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A28CD56C8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $46for_iter.1 = iternext(value=$phi46.0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $46for_iter.2 = pair_first(value=$46for_iter.1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $46for_iter.3 = pair_second(value=$46for_iter.1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi48.1 = $46for_iter.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $46for_iter.3, 48, 88
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 48
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A28CD56C8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: row = $phi48.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $54binary_subscr.4 = getitem(value=X, index=row, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $56load_attr.5 = getattr(value=$54binary_subscr.4, attr=argsort)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const58.6 = const(str, quicksort)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: v = call $56load_attr.5(func=$56load_attr.5, args=[], kws=[('kind', Var($const58.6, utils.py:34))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG first assign: v
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: v = call $56load_attr.5(func=$56load_attr.5, args=[], kws=[('kind', Var($const58.6, utils.py:34))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const68.10 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $72build_slice.12 = global(slice: <class 'slice'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $72build_slice.13 = call $72build_slice.12($const68.10, n_neighbors, func=$72build_slice.12, args=(Var($const68.10, utils.py:35), Var(n_neighbors, utils.py:31)), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: v = getitem(value=v, index=$72build_slice.13, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: v.1 = getitem(value=v, index=$72build_slice.13, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: knn_indices[row] = v
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 46
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 88
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A28CD56C8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 90
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 90
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A28CD56C8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $92return_value.1 = cast(value=knn_indices)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $92return_value.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {48: [<numba.core.ir.Assign object at 0x0000015B38E649C8>,
                  <numba.core.ir.Assign object at 0x0000015B38E64AC8>]})
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A28CD56C8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: X = arg(0, name=X)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n_neighbors = arg(1, name=n_neighbors)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $8load_attr.3 = getattr(value=X, attr=shape)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const10.4 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $12binary_subscr.5 = static_getitem(value=$8load_attr.3, index=0, index_var=$const10.4, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $16build_tuple.7 = build_tuple(items=[Var($12binary_subscr.5, utils.py:31), Var(n_neighbors, utils.py:31)])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $18load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $20load_attr.9 = getattr(value=$18load_global.8, attr=int32)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: knn_indices = call $4load_attr.1($16build_tuple.7, func=$4load_attr.1, args=[Var($16build_tuple.7, utils.py:31)], kws=[('dtype', Var($20load_attr.9, utils.py:31))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 28
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 28
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A28CD56C8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $30load_global.0 = global(numba: <module 'numba' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numba\\__init__.py'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $32load_method.1 = getattr(value=$30load_global.0, attr=prange)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $36load_attr.3 = getattr(value=X, attr=shape)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const38.4 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $40binary_subscr.5 = static_getitem(value=$36load_attr.3, index=0, index_var=$const38.4, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $42call_method.6 = call $32load_method.1($40binary_subscr.5, func=$32load_method.1, args=[Var($40binary_subscr.5, utils.py:32)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $44get_iter.7 = getiter(value=$42call_method.6)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi46.0 = $44get_iter.7
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 46
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 46
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A28CD56C8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $46for_iter.1 = iternext(value=$phi46.0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $46for_iter.2 = pair_first(value=$46for_iter.1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $46for_iter.3 = pair_second(value=$46for_iter.1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi48.1 = $46for_iter.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $46for_iter.3, 48, 88
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 48
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A28CD56C8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: row = $phi48.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $54binary_subscr.4 = getitem(value=X, index=row, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $56load_attr.5 = getattr(value=$54binary_subscr.4, attr=argsort)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const58.6 = const(str, quicksort)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: v = call $56load_attr.5(func=$56load_attr.5, args=[], kws=[('kind', Var($const58.6, utils.py:34))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const68.10 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $72build_slice.12 = global(slice: <class 'slice'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $72build_slice.13 = call $72build_slice.12($const68.10, n_neighbors, func=$72build_slice.12, args=(Var($const68.10, utils.py:35), Var(n_neighbors, utils.py:31)), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: v.1 = getitem(value=v, index=$72build_slice.13, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='v' stmt=v.1 = getitem(value=v, index=$72build_slice.13, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: knn_indices[row] = v
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='v' stmt=knn_indices[row] = v
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: knn_indices[row] = v.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 46
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 88
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A28CD56C8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 90
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 90
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A28CD56C8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $92return_value.1 = cast(value=knn_indices)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $92return_value.1
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4101)
           2	LOAD_GLOBAL(arg=0, lineno=4101)
           4	LOAD_FAST(arg=0, lineno=4101)
           6	LOAD_FAST(arg=1, lineno=4101)
           8	LOAD_DEREF(arg=0, lineno=4101)
          10	CALL_FUNCTION(arg=3, lineno=4101)
          12	RETURN_VALUE(arg=None, lineno=4101)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4101)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4101)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4101)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$2load_global.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4101)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$2load_global.0', '$shape4.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=8, inst=LOAD_DEREF(arg=0, lineno=4101)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=4101)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2', '$8load_deref.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4101)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$10call_function.4']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG -------------------------Prune PHIs-------------------------
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG defmap: {}
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG keep phismap: {}
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG new_out: defaultdict(<class 'dict'>, {})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG ----------------------DONE Prune PHIs-----------------------
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'res': '$dtype6.2'}), (8, {'res': '$8load_deref.3'}), (10, {'func': '$2load_global.0', 'args': ['$shape4.1', '$dtype6.2', '$8load_deref.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:41 interpreter.py DEBUG label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$2load_global.0']
    $8load_deref.3 = freevar(retty: array(int32, 2d, C)) ['$8load_deref.3']
    $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8load_deref.3', 'dtype', 'shape']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015B37EEADC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: shape = arg(0, name=shape)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: dtype = arg(1, name=dtype)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $8load_deref.3 = freevar(retty: array(int32, 2d, C))
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $12return_value.5 = cast(value=$10call_function.4)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $12return_value.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x0000015A29EF08C8>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x0000015A29EF0A48>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000015A29EF0308>],
             '$8load_deref.3': [<numba.core.ir.Assign object at 0x0000015A29EF0788>],
             'dtype': [<numba.core.ir.Assign object at 0x0000015A29EF01C8>],
             'shape': [<numba.core.ir.Assign object at 0x0000015A29EF00C8>]})
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG SSA violators set()
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=2)
           2	SETUP_LOOP(arg=40, lineno=2)
           4	LOAD_GLOBAL(arg=0, lineno=2)
           6	LOAD_FAST(arg=0, lineno=2)
           8	LOAD_CONST(arg=1, lineno=2)
          10	BINARY_SUBSCR(arg=None, lineno=2)
          12	LOAD_FAST(arg=0, lineno=2)
          14	LOAD_CONST(arg=2, lineno=2)
          16	BINARY_SUBSCR(arg=None, lineno=2)
          18	LOAD_GLOBAL(arg=1, lineno=2)
          20	LOAD_METHOD(arg=2, lineno=2)
          22	LOAD_CONST(arg=2, lineno=2)
          24	CALL_METHOD(arg=1, lineno=2)
          26	BINARY_ADD(arg=None, lineno=2)
          28	CALL_FUNCTION(arg=2, lineno=2)
          30	GET_ITER(arg=None, lineno=2)
>         32	FOR_ITER(arg=8, lineno=2)
          34	STORE_FAST(arg=4, lineno=2)
          36	LOAD_CONST(arg=1, lineno=3)
          38	STORE_FAST(arg=5, lineno=3)
          40	JUMP_ABSOLUTE(arg=32, lineno=3)
>         42	POP_BLOCK(arg=None, lineno=3)
>         44	LOAD_CONST(arg=0, lineno=4)
          46	RETURN_VALUE(arg=None, lineno=4)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=2)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=2, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=2 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=2, inst=SETUP_LOOP(arg=40, lineno=2)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=4, inst=LOAD_GLOBAL(arg=0, lineno=2)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=2)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$4load_global.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=2)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$4load_global.0', '$sched6.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=10, inst=BINARY_SUBSCR(arg=None, lineno=2)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$4load_global.0', '$sched6.1', '$const8.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=2)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=14, inst=LOAD_CONST(arg=2, lineno=2)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3', '$sched12.4']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=16, inst=BINARY_SUBSCR(arg=None, lineno=2)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3', '$sched12.4', '$const14.5']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=18, inst=LOAD_GLOBAL(arg=1, lineno=2)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3', '$16binary_subscr.6']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=20, inst=LOAD_METHOD(arg=2, lineno=2)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3', '$16binary_subscr.6', '$18load_global.7']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=22, inst=LOAD_CONST(arg=2, lineno=2)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3', '$16binary_subscr.6', '$20load_method.8']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=24, inst=CALL_METHOD(arg=1, lineno=2)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3', '$16binary_subscr.6', '$20load_method.8', '$const22.9']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=26, inst=BINARY_ADD(arg=None, lineno=2)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3', '$16binary_subscr.6', '$24call_method.10']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=28, inst=CALL_FUNCTION(arg=2, lineno=2)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3', '$26binary_add.11']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=30, inst=GET_ITER(arg=None, lineno=2)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$28call_function.12']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=32, stack=('$30get_iter.13',), blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=32 nstack_initial=1)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: ['$phi32.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=32, inst=FOR_ITER(arg=8, lineno=2)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi32.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=42, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=34, stack=('$phi32.0', '$32for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=34 nstack_initial=2)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=42, inst=POP_BLOCK(arg=None, lineno=3)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=34 nstack_initial=2), State(pc_initial=44 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: ['$phi34.0', '$phi34.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=34, inst=STORE_FAST(arg=4, lineno=2)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi34.0', '$phi34.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=3)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi34.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=38, inst=STORE_FAST(arg=5, lineno=3)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi34.0', '$const36.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=40, inst=JUMP_ABSOLUTE(arg=32, lineno=3)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi34.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=32, stack=('$phi34.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=32 nstack_initial=1)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=44, inst=LOAD_CONST(arg=0, lineno=4)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=4)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$const44.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=32 nstack_initial=1)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG -------------------------Prune PHIs-------------------------
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=2 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=1): {'$phi32.0'},
             State(pc_initial=34 nstack_initial=2): {'$phi34.1'},
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG defmap: {'$phi32.0': State(pc_initial=2 nstack_initial=0),
 '$phi34.1': State(pc_initial=32 nstack_initial=1)}
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi32.0': {('$30get_iter.13',
                           State(pc_initial=2 nstack_initial=0)),
                          ('$phi34.0', State(pc_initial=34 nstack_initial=2))},
             '$phi34.0': {('$phi32.0', State(pc_initial=32 nstack_initial=1))},
             '$phi34.1': {('$32for_iter.2',
                           State(pc_initial=32 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi32.0': {('$30get_iter.13',
                           State(pc_initial=2 nstack_initial=0)),
                          ('$phi32.0', State(pc_initial=32 nstack_initial=1))},
             '$phi34.0': {('$30get_iter.13',
                           State(pc_initial=2 nstack_initial=0))},
             '$phi34.1': {('$32for_iter.2',
                           State(pc_initial=32 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi32.0': {('$30get_iter.13',
                           State(pc_initial=2 nstack_initial=0))},
             '$phi34.0': {('$30get_iter.13',
                           State(pc_initial=2 nstack_initial=0))},
             '$phi34.1': {('$32for_iter.2',
                           State(pc_initial=32 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi32.0': {('$30get_iter.13',
                           State(pc_initial=2 nstack_initial=0))},
             '$phi34.0': {('$30get_iter.13',
                           State(pc_initial=2 nstack_initial=0))},
             '$phi34.1': {('$32for_iter.2',
                           State(pc_initial=32 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG keep phismap: {'$phi32.0': {('$30get_iter.13', State(pc_initial=2 nstack_initial=0))},
 '$phi34.1': {('$32for_iter.2', State(pc_initial=32 nstack_initial=1))}}
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=2 nstack_initial=0): {'$phi32.0': '$30get_iter.13'},
             State(pc_initial=32 nstack_initial=1): {'$phi34.1': '$32for_iter.2'}})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG ----------------------DONE Prune PHIs-----------------------
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={2: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=2 nstack_initial=0):
AdaptBlockInfo(insts=((4, {'res': '$4load_global.0'}), (6, {'res': '$sched6.1'}), (8, {'res': '$const8.2'}), (10, {'index': '$const8.2', 'target': '$sched6.1', 'res': '$10binary_subscr.3'}), (12, {'res': '$sched12.4'}), (14, {'res': '$const14.5'}), (16, {'index': '$const14.5', 'target': '$sched12.4', 'res': '$16binary_subscr.6'}), (18, {'res': '$18load_global.7'}), (20, {'item': '$18load_global.7', 'res': '$20load_method.8'}), (22, {'res': '$const22.9'}), (24, {'func': '$20load_method.8', 'args': ['$const22.9'], 'res': '$24call_method.10'}), (26, {'lhs': '$16binary_subscr.6', 'rhs': '$24call_method.10', 'res': '$26binary_add.11'}), (28, {'func': '$4load_global.0', 'args': ['$10binary_subscr.3', '$26binary_add.11'], 'res': '$28call_function.12'}), (30, {'value': '$28call_function.12', 'res': '$30get_iter.13'})), outgoing_phis={'$phi32.0': '$30get_iter.13'}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: ('$30get_iter.13',)})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=32 nstack_initial=1):
AdaptBlockInfo(insts=((32, {'iterator': '$phi32.0', 'pair': '$32for_iter.1', 'indval': '$32for_iter.2', 'pred': '$32for_iter.3'}),), outgoing_phis={'$phi34.1': '$32for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={42: (), 34: ('$phi32.0', '$32for_iter.2')})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=34 nstack_initial=2):
AdaptBlockInfo(insts=((34, {'value': '$phi34.1'}), (36, {'res': '$const36.2'}), (38, {'value': '$const36.2'}), (40, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={32: ('$phi34.0',)})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={44: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$const44.0'}), (46, {'retval': '$const44.0', 'castval': '$46return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:41 interpreter.py DEBUG label 0:
    sched = arg(0, name=sched)               ['sched']
    X = arg(1, name=X)                       ['X']
    n__neighbors = arg(2, name=n__neighbors) ['n__neighbors']
    knn__indices = arg(3, name=knn__indices) ['knn__indices']
    jump 2                                   []
label 2:
    $4load_global.0 = global(range: <class 'range'>) ['$4load_global.0']
    $const8.2 = const(int, 0)                ['$const8.2']
    $10binary_subscr.3 = getitem(value=sched, index=$const8.2, fn=<built-in function getitem>) ['$10binary_subscr.3', '$const8.2', 'sched']
    $const14.5 = const(int, 1)               ['$const14.5']
    $16binary_subscr.6 = getitem(value=sched, index=$const14.5, fn=<built-in function getitem>) ['$16binary_subscr.6', '$const14.5', 'sched']
    $18load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>) ['$18load_global.7']
    $20load_method.8 = getattr(value=$18load_global.7, attr=uint8) ['$18load_global.7', '$20load_method.8']
    $const22.9 = const(int, 1)               ['$const22.9']
    $24call_method.10 = call $20load_method.8($const22.9, func=$20load_method.8, args=[Var($const22.9, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None) ['$20load_method.8', '$24call_method.10', '$const22.9']
    $26binary_add.11 = $16binary_subscr.6 + $24call_method.10 ['$16binary_subscr.6', '$24call_method.10', '$26binary_add.11']
    $28call_function.12 = call $4load_global.0($10binary_subscr.3, $26binary_add.11, func=$4load_global.0, args=[Var($10binary_subscr.3, <string>:2), Var($26binary_add.11, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None) ['$10binary_subscr.3', '$26binary_add.11', '$28call_function.12', '$4load_global.0']
    $30get_iter.13 = getiter(value=$28call_function.12) ['$28call_function.12', '$30get_iter.13']
    $phi32.0 = $30get_iter.13                ['$30get_iter.13', '$phi32.0']
    jump 32                                  []
label 32:
    $32for_iter.1 = iternext(value=$phi32.0) ['$32for_iter.1', '$phi32.0']
    $32for_iter.2 = pair_first(value=$32for_iter.1) ['$32for_iter.1', '$32for_iter.2']
    $32for_iter.3 = pair_second(value=$32for_iter.1) ['$32for_iter.1', '$32for_iter.3']
    $phi34.1 = $32for_iter.2                 ['$32for_iter.2', '$phi34.1']
    branch $32for_iter.3, 34, 42             ['$32for_iter.3']
label 34:
    parfor__index_18 = $phi34.1              ['$phi34.1', 'parfor__index_18']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 32                                  []
label 42:
    jump 44                                  []
label 44:
    $const44.0 = const(NoneType, None)       ['$const44.0']
    $46return_value.1 = cast(value=$const44.0) ['$46return_value.1', '$const44.0']
    return $46return_value.1                 ['$46return_value.1']

Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015B2868E4C8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: sched.33 = arg(0, name=sched)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: X = arg(1, name=X)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n__neighbors = arg(2, name=n__neighbors)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: knn__indices = arg(3, name=knn__indices)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const58.6 = const(str, quicksort)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $72build_slice.12 = global(slice: <class 'slice'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: zero.11 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: replacement_slice.12 = call $72build_slice.12(zero.11, n__neighbors, func=$72build_slice.12, args=(Var(zero.11, utils.py:35), Var(n__neighbors, utils.py:31)), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015B2868E4C8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $4load_global.0.34 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const8.2.35 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $10binary_subscr.3.36 = getitem(value=sched.33, index=$const8.2.35, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const14.5.37 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $16binary_subscr.6.38 = getitem(value=sched.33, index=$const14.5.37, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $18load_global.7.39 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $20load_method.8.40 = getattr(value=$18load_global.7.39, attr=uint8)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const22.9.41 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $24call_method.10.42 = call $20load_method.8.40($const22.9.41, func=$20load_method.8.40, args=[Var($const22.9.41, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $26binary_add.11.43 = $16binary_subscr.6.38 + $24call_method.10.42
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $28call_function.12.44 = call $4load_global.0.34($10binary_subscr.3.36, $26binary_add.11.43, func=$4load_global.0.34, args=[Var($10binary_subscr.3.36, <string>:2), Var($26binary_add.11.43, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $30get_iter.13.45 = getiter(value=$28call_function.12.44)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi32.0.46 = $30get_iter.13.45
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 32
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 32
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015B2868E4C8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $32for_iter.1.47 = iternext(value=$phi32.0.46)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $32for_iter.2.48 = pair_first(value=$32for_iter.1.47)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $32for_iter.3.49 = pair_second(value=$32for_iter.1.47)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi34.1.50 = $32for_iter.2.48
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $32for_iter.3.49, 34, 93
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 34
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015B2868E4C8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: parfor__index_18 = $phi34.1.50
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 42
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 93
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015B2868E4C8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 94
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 94
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015B2868E4C8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const44.0.51 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $46return_value.1.52 = cast(value=$const44.0.51)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $46return_value.1.52
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 42
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015B2868E4C8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $54binary_subscr.4 = getitem(value=X, index=parfor__index_18, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $np_g_var.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $56load_attr.5 = getattr(value=$np_g_var.0, attr=argsort)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: v = call $56load_attr.5($54binary_subscr.4, func=$56load_attr.5, args=[Var($54binary_subscr.4, utils.py:34)], kws=[('kind', Var($const58.6, utils.py:34))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: v.1 = getitem(value=v, index=replacement_slice.12, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: knn__indices[parfor__index_18] = v.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 44
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 44
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015B2868E4C8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 32
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG defs defaultdict(<class 'list'>,
            {'$10binary_subscr.3.36': [<numba.core.ir.Assign object at 0x0000015B28686D48>],
             '$16binary_subscr.6.38': [<numba.core.ir.Assign object at 0x0000015B28686EC8>],
             '$18load_global.7.39': [<numba.core.ir.Assign object at 0x0000015B28686088>],
             '$20load_method.8.40': [<numba.core.ir.Assign object at 0x0000015B28686AC8>],
             '$24call_method.10.42': [<numba.core.ir.Assign object at 0x0000015B28686448>],
             '$26binary_add.11.43': [<numba.core.ir.Assign object at 0x0000015B28686048>],
             '$28call_function.12.44': [<numba.core.ir.Assign object at 0x0000015B286AFDC8>],
             '$30get_iter.13.45': [<numba.core.ir.Assign object at 0x0000015B286AFB08>],
             '$32for_iter.1.47': [<numba.core.ir.Assign object at 0x0000015B286AFD48>],
             '$32for_iter.2.48': [<numba.core.ir.Assign object at 0x0000015B286AF208>],
             '$32for_iter.3.49': [<numba.core.ir.Assign object at 0x0000015B286AF0C8>],
             '$46return_value.1.52': [<numba.core.ir.Assign object at 0x0000015B286741C8>],
             '$4load_global.0.34': [<numba.core.ir.Assign object at 0x0000015B286863C8>],
             '$54binary_subscr.4': [<numba.core.ir.Assign object at 0x0000015B37EE4748>],
             '$56load_attr.5': [<numba.core.ir.Assign object at 0x0000015B37EE4888>],
             '$72build_slice.12': [<numba.core.ir.Assign object at 0x0000015B37EE63C8>],
             '$const14.5.37': [<numba.core.ir.Assign object at 0x0000015B28686208>],
             '$const22.9.41': [<numba.core.ir.Assign object at 0x0000015B28686788>],
             '$const44.0.51': [<numba.core.ir.Assign object at 0x0000015B28674C08>],
             '$const58.6': [<numba.core.ir.Assign object at 0x0000015B37EE4A08>],
             '$const8.2.35': [<numba.core.ir.Assign object at 0x0000015B28686B88>],
             '$np_g_var.0': [<numba.core.ir.Assign object at 0x0000015A38B1C108>],
             '$phi32.0.46': [<numba.core.ir.Assign object at 0x0000015B28686688>],
             '$phi34.1.50': [<numba.core.ir.Assign object at 0x0000015B286AF948>],
             'X': [<numba.core.ir.Assign object at 0x0000015B28691908>],
             'knn__indices': [<numba.core.ir.Assign object at 0x0000015B286913C8>],
             'n__neighbors': [<numba.core.ir.Assign object at 0x0000015B28691788>],
             'parfor__index_18': [<numba.core.ir.Assign object at 0x0000015B286AFE88>],
             'replacement_slice.12': [<numba.core.ir.Assign object at 0x0000015A38B27C08>],
             'sched.33': [<numba.core.ir.Assign object at 0x0000015B28691248>],
             'v': [<numba.core.ir.Assign object at 0x0000015B38E649C8>],
             'v.1': [<numba.core.ir.Assign object at 0x0000015B38E64AC8>],
             'zero.11': [<numba.core.ir.Assign object at 0x0000015A38B27B48>]})
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG SSA violators set()
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=5798)
           2	LOAD_DEREF(arg=0, lineno=5798)
           4	LOAD_FAST(arg=0, lineno=5798)
           6	CALL_FUNCTION(arg=1, lineno=5798)
           8	RETURN_VALUE(arg=None, lineno=5798)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=5798)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=5798)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=5798)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$2load_deref.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=5798)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$2load_deref.0', '$arr4.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=5798)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$6call_function.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG -------------------------Prune PHIs-------------------------
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG defmap: {}
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG keep phismap: {}
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG new_out: defaultdict(<class 'dict'>, {})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG ----------------------DONE Prune PHIs-----------------------
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$arr4.1'}), (6, {'func': '$2load_deref.0', 'args': ['$arr4.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:41 interpreter.py DEBUG label 0:
    arr = arg(0, name=arr)                   ['arr']
    $2load_deref.0 = freevar(sort_func: <function make_quicksort_impl.<locals>.run_quicksort at 0x0000015B37EFC5E8>) ['$2load_deref.0']
    $6call_function.2 = call $2load_deref.0(arr, func=$2load_deref.0, args=[Var(arr, arrayobj.py:5798)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_deref.0', '$6call_function.2', 'arr']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A38B7F388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: arr = arg(0, name=arr)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $2load_deref.0 = freevar(sort_func: <function make_quicksort_impl.<locals>.run_quicksort at 0x0000015B37EFC5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $6call_function.2 = call $2load_deref.0(arr, func=$2load_deref.0, args=[Var(arr, arrayobj.py:5798)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $8return_value.3 = cast(value=$6call_function.2)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $8return_value.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG defs defaultdict(<class 'list'>,
            {'$2load_deref.0': [<numba.core.ir.Assign object at 0x0000015A38B77348>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x0000015A38B77608>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x0000015A38B77788>],
             'arr': [<numba.core.ir.Assign object at 0x0000015A38B771C8>]})
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG SSA violators set()
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=202)
           2	LOAD_FAST(arg=0, lineno=202)
           4	LOAD_ATTR(arg=0, lineno=202)
           6	LOAD_CONST(arg=1, lineno=202)
           8	COMPARE_OP(arg=2, lineno=202)
          10	POP_JUMP_IF_FALSE(arg=20, lineno=202)
          12	LOAD_DEREF(arg=0, lineno=203)
          14	LOAD_FAST(arg=0, lineno=203)
          16	CALL_FUNCTION(arg=1, lineno=203)
          18	RETURN_VALUE(arg=None, lineno=203)
>         20	SETUP_LOOP(arg=40, lineno=205)
          22	LOAD_GLOBAL(arg=1, lineno=205)
          24	LOAD_METHOD(arg=2, lineno=205)
          26	LOAD_FAST(arg=0, lineno=205)
          28	LOAD_ATTR(arg=3, lineno=205)
          30	LOAD_CONST(arg=0, lineno=205)
          32	LOAD_CONST(arg=2, lineno=205)
          34	BUILD_SLICE(arg=2, lineno=205)
          36	BINARY_SUBSCR(arg=None, lineno=205)
          38	CALL_METHOD(arg=1, lineno=205)
          40	GET_ITER(arg=None, lineno=205)
>         42	FOR_ITER(arg=16, lineno=205)
          44	STORE_FAST(arg=1, lineno=205)
          46	LOAD_DEREF(arg=0, lineno=206)
          48	LOAD_FAST(arg=0, lineno=206)
          50	LOAD_FAST(arg=1, lineno=206)
          52	BINARY_SUBSCR(arg=None, lineno=206)
          54	CALL_FUNCTION(arg=1, lineno=206)
          56	POP_TOP(arg=None, lineno=206)
          58	JUMP_ABSOLUTE(arg=42, lineno=206)
>         60	POP_BLOCK(arg=None, lineno=206)
>         62	LOAD_FAST(arg=0, lineno=207)
          64	RETURN_VALUE(arg=None, lineno=207)
          66	LOAD_CONST(arg=0, lineno=207)
          68	RETURN_VALUE(arg=None, lineno=207)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=202)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=202)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=202)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$A2.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=202)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$4load_attr.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=8, inst=COMPARE_OP(arg=2, lineno=202)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$4load_attr.1', '$const6.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=10, inst=POP_JUMP_IF_FALSE(arg=20, lineno=202)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$8compare_op.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=12, stack=(), blockstack=(), npush=0), Edge(pc=20, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=12 nstack_initial=0), State(pc_initial=20 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=12, inst=LOAD_DEREF(arg=0, lineno=203)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=203)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$12load_deref.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=203)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$12load_deref.0', '$A14.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=18, inst=RETURN_VALUE(arg=None, lineno=203)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$16call_function.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=20 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=20, inst=SETUP_LOOP(arg=40, lineno=205)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=22, inst=LOAD_GLOBAL(arg=1, lineno=205)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=24, inst=LOAD_METHOD(arg=2, lineno=205)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$22load_global.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=205)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$24load_method.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=28, inst=LOAD_ATTR(arg=3, lineno=205)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$24load_method.1', '$A26.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=30, inst=LOAD_CONST(arg=0, lineno=205)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$24load_method.1', '$28load_attr.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=32, inst=LOAD_CONST(arg=2, lineno=205)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$24load_method.1', '$28load_attr.3', '$const30.4']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=34, inst=BUILD_SLICE(arg=2, lineno=205)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$24load_method.1', '$28load_attr.3', '$const30.4', '$const32.5']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=36, inst=BINARY_SUBSCR(arg=None, lineno=205)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$24load_method.1', '$28load_attr.3', '$34build_slice.7']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=205)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$24load_method.1', '$36binary_subscr.8']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=40, inst=GET_ITER(arg=None, lineno=205)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$38call_method.9']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=42, stack=('$40get_iter.10',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=42 nstack_initial=1)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: ['$phi42.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=42, inst=FOR_ITER(arg=16, lineno=205)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi42.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=44, stack=('$phi42.0', '$42for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=44 nstack_initial=2)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=60, inst=POP_BLOCK(arg=None, lineno=206)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=44 nstack_initial=2), State(pc_initial=62 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: ['$phi44.0', '$phi44.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=44, inst=STORE_FAST(arg=1, lineno=205)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi44.0', '$phi44.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=46, inst=LOAD_DEREF(arg=0, lineno=206)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi44.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=48, inst=LOAD_FAST(arg=0, lineno=206)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi44.0', '$46load_deref.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=50, inst=LOAD_FAST(arg=1, lineno=206)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi44.0', '$46load_deref.2', '$A48.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=52, inst=BINARY_SUBSCR(arg=None, lineno=206)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi44.0', '$46load_deref.2', '$A48.3', '$idx50.4']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=54, inst=CALL_FUNCTION(arg=1, lineno=206)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi44.0', '$46load_deref.2', '$52binary_subscr.5']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=56, inst=POP_TOP(arg=None, lineno=206)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi44.0', '$54call_function.6']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=58, inst=JUMP_ABSOLUTE(arg=42, lineno=206)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi44.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=42, stack=('$phi44.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=42 nstack_initial=1)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=62, inst=LOAD_FAST(arg=0, lineno=207)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=64, inst=RETURN_VALUE(arg=None, lineno=207)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$A62.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=42 nstack_initial=1)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG -------------------------Prune PHIs-------------------------
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=12 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=42 nstack_initial=1): {'$phi42.0'},
             State(pc_initial=44 nstack_initial=2): {'$phi44.1'},
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG defmap: {'$phi42.0': State(pc_initial=20 nstack_initial=0),
 '$phi44.1': State(pc_initial=42 nstack_initial=1)}
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi42.0': {('$40get_iter.10',
                           State(pc_initial=20 nstack_initial=0)),
                          ('$phi44.0', State(pc_initial=44 nstack_initial=2))},
             '$phi44.0': {('$phi42.0', State(pc_initial=42 nstack_initial=1))},
             '$phi44.1': {('$42for_iter.2',
                           State(pc_initial=42 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi42.0': {('$40get_iter.10',
                           State(pc_initial=20 nstack_initial=0)),
                          ('$phi42.0', State(pc_initial=42 nstack_initial=1))},
             '$phi44.0': {('$40get_iter.10',
                           State(pc_initial=20 nstack_initial=0))},
             '$phi44.1': {('$42for_iter.2',
                           State(pc_initial=42 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi42.0': {('$40get_iter.10',
                           State(pc_initial=20 nstack_initial=0))},
             '$phi44.0': {('$40get_iter.10',
                           State(pc_initial=20 nstack_initial=0))},
             '$phi44.1': {('$42for_iter.2',
                           State(pc_initial=42 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi42.0': {('$40get_iter.10',
                           State(pc_initial=20 nstack_initial=0))},
             '$phi44.0': {('$40get_iter.10',
                           State(pc_initial=20 nstack_initial=0))},
             '$phi44.1': {('$42for_iter.2',
                           State(pc_initial=42 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG keep phismap: {'$phi42.0': {('$40get_iter.10', State(pc_initial=20 nstack_initial=0))},
 '$phi44.1': {('$42for_iter.2', State(pc_initial=42 nstack_initial=1))}}
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=20 nstack_initial=0): {'$phi42.0': '$40get_iter.10'},
             State(pc_initial=42 nstack_initial=1): {'$phi44.1': '$42for_iter.2'}})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG ----------------------DONE Prune PHIs-----------------------
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$A2.0'}), (4, {'item': '$A2.0', 'res': '$4load_attr.1'}), (6, {'res': '$const6.2'}), (8, {'lhs': '$4load_attr.1', 'rhs': '$const6.2', 'res': '$8compare_op.3'}), (10, {'pred': '$8compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: (), 20: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=12 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_deref.0'}), (14, {'res': '$A14.1'}), (16, {'func': '$12load_deref.0', 'args': ['$A14.1'], 'res': '$16call_function.2'}), (18, {'retval': '$16call_function.2', 'castval': '$18return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((22, {'res': '$22load_global.0'}), (24, {'item': '$22load_global.0', 'res': '$24load_method.1'}), (26, {'res': '$A26.2'}), (28, {'item': '$A26.2', 'res': '$28load_attr.3'}), (30, {'res': '$const30.4'}), (32, {'res': '$const32.5'}), (34, {'start': '$const30.4', 'stop': '$const32.5', 'step': None, 'res': '$34build_slice.7', 'slicevar': '$34build_slice.6'}), (36, {'index': '$34build_slice.7', 'target': '$28load_attr.3', 'res': '$36binary_subscr.8'}), (38, {'func': '$24load_method.1', 'args': ['$36binary_subscr.8'], 'res': '$38call_method.9'}), (40, {'value': '$38call_method.9', 'res': '$40get_iter.10'})), outgoing_phis={'$phi42.0': '$40get_iter.10'}, blockstack=(), active_try_block=None, outgoing_edgepushed={42: ('$40get_iter.10',)})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=42 nstack_initial=1):
AdaptBlockInfo(insts=((42, {'iterator': '$phi42.0', 'pair': '$42for_iter.1', 'indval': '$42for_iter.2', 'pred': '$42for_iter.3'}),), outgoing_phis={'$phi44.1': '$42for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 44: ('$phi42.0', '$42for_iter.2')})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=44 nstack_initial=2):
AdaptBlockInfo(insts=((44, {'value': '$phi44.1'}), (46, {'res': '$46load_deref.2'}), (48, {'res': '$A48.3'}), (50, {'res': '$idx50.4'}), (52, {'index': '$idx50.4', 'target': '$A48.3', 'res': '$52binary_subscr.5'}), (54, {'func': '$46load_deref.2', 'args': ['$52binary_subscr.5'], 'res': '$54call_function.6'}), (58, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={42: ('$phi44.0',)})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$A62.0'}), (64, {'retval': '$A62.0', 'castval': '$64return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:41 interpreter.py DEBUG label 0:
    A = arg(0, name=A)                       ['A']
    $4load_attr.1 = getattr(value=A, attr=ndim) ['$4load_attr.1', 'A']
    $const6.2 = const(int, 1)                ['$const6.2']
    $8compare_op.3 = $4load_attr.1 == $const6.2 ['$4load_attr.1', '$8compare_op.3', '$const6.2']
    bool10 = global(bool: <class 'bool'>)    ['bool10']
    $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, quicksort.py:202),), kws=(), vararg=None, varkwarg=None, target=None) ['$10pred', '$8compare_op.3', 'bool10']
    branch $10pred, 12, 20                   ['$10pred']
label 12:
    $12load_deref.0 = freevar(run_quicksort1: <function make_quicksort_impl.<locals>.run_quicksort1 at 0x0000015B37EFCC18>) ['$12load_deref.0']
    $16call_function.2 = call $12load_deref.0(A, func=$12load_deref.0, args=[Var(A, quicksort.py:202)], kws=(), vararg=None, varkwarg=None, target=None) ['$12load_deref.0', '$16call_function.2', 'A']
    $18return_value.3 = cast(value=$16call_function.2) ['$16call_function.2', '$18return_value.3']
    return $18return_value.3                 ['$18return_value.3']
label 20:
    $22load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>) ['$22load_global.0']
    $24load_method.1 = getattr(value=$22load_global.0, attr=ndindex) ['$22load_global.0', '$24load_method.1']
    $28load_attr.3 = getattr(value=A, attr=shape) ['$28load_attr.3', 'A']
    $const30.4 = const(NoneType, None)       ['$const30.4']
    $const32.5 = const(int, -1)              ['$const32.5']
    $34build_slice.6 = global(slice: <class 'slice'>) ['$34build_slice.6']
    $34build_slice.7 = call $34build_slice.6($const30.4, $const32.5, func=$34build_slice.6, args=(Var($const30.4, quicksort.py:205), Var($const32.5, quicksort.py:205)), kws=(), vararg=None, varkwarg=None, target=None) ['$34build_slice.6', '$34build_slice.7', '$const30.4', '$const32.5']
    $36binary_subscr.8 = getitem(value=$28load_attr.3, index=$34build_slice.7, fn=<built-in function getitem>) ['$28load_attr.3', '$34build_slice.7', '$36binary_subscr.8']
    $38call_method.9 = call $24load_method.1($36binary_subscr.8, func=$24load_method.1, args=[Var($36binary_subscr.8, quicksort.py:205)], kws=(), vararg=None, varkwarg=None, target=None) ['$24load_method.1', '$36binary_subscr.8', '$38call_method.9']
    $40get_iter.10 = getiter(value=$38call_method.9) ['$38call_method.9', '$40get_iter.10']
    $phi42.0 = $40get_iter.10                ['$40get_iter.10', '$phi42.0']
    jump 42                                  []
label 42:
    $42for_iter.1 = iternext(value=$phi42.0) ['$42for_iter.1', '$phi42.0']
    $42for_iter.2 = pair_first(value=$42for_iter.1) ['$42for_iter.1', '$42for_iter.2']
    $42for_iter.3 = pair_second(value=$42for_iter.1) ['$42for_iter.1', '$42for_iter.3']
    $phi44.1 = $42for_iter.2                 ['$42for_iter.2', '$phi44.1']
    branch $42for_iter.3, 44, 60             ['$42for_iter.3']
label 44:
    idx = $phi44.1                           ['$phi44.1', 'idx']
    $46load_deref.2 = freevar(run_quicksort1: <function make_quicksort_impl.<locals>.run_quicksort1 at 0x0000015B37EFCC18>) ['$46load_deref.2']
    $52binary_subscr.5 = getitem(value=A, index=idx, fn=<built-in function getitem>) ['$52binary_subscr.5', 'A', 'idx']
    $54call_function.6 = call $46load_deref.2($52binary_subscr.5, func=$46load_deref.2, args=[Var($52binary_subscr.5, quicksort.py:206)], kws=(), vararg=None, varkwarg=None, target=None) ['$46load_deref.2', '$52binary_subscr.5', '$54call_function.6']
    jump 42                                  []
label 60:
    jump 62                                  []
label 62:
    $64return_value.1 = cast(value=A)        ['$64return_value.1', 'A']
    return $64return_value.1                 ['$64return_value.1']

Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015B2869E888>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: A = arg(0, name=A)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $4load_attr.1 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const6.2 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $8compare_op.3 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool10 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, quicksort.py:202),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 12
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 12
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015B2869E888>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $12load_deref.0 = freevar(run_quicksort1: <function make_quicksort_impl.<locals>.run_quicksort1 at 0x0000015B37EFCC18>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $16call_function.2 = call $12load_deref.0(A, func=$12load_deref.0, args=[Var(A, quicksort.py:202)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $18return_value.3 = cast(value=$16call_function.2)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $18return_value.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG defs defaultdict(<class 'list'>,
            {'$10pred': [<numba.core.ir.Assign object at 0x0000015A38B7FE08>],
             '$12load_deref.0': [<numba.core.ir.Assign object at 0x0000015A38B7FF88>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x0000015A38B88288>],
             '$18return_value.3': [<numba.core.ir.Assign object at 0x0000015A38B88408>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x0000015A38B7F848>],
             '$8compare_op.3': [<numba.core.ir.Assign object at 0x0000015A38B7FB08>],
             '$const6.2': [<numba.core.ir.Assign object at 0x0000015A38B7F988>],
             'A': [<numba.core.ir.Assign object at 0x0000015A38B77EC8>],
             'bool10': [<numba.core.ir.Assign object at 0x0000015A38B7FCC8>]})
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG SSA violators set()
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=166)
           2	LOAD_DEREF(arg=1, lineno=166)
           4	LOAD_FAST(arg=0, lineno=166)
           6	CALL_FUNCTION(arg=1, lineno=166)
           8	STORE_FAST(arg=1, lineno=166)
          10	LOAD_GLOBAL(arg=0, lineno=168)
          12	LOAD_FAST(arg=0, lineno=168)
          14	CALL_FUNCTION(arg=1, lineno=168)
          16	LOAD_CONST(arg=1, lineno=168)
          18	COMPARE_OP(arg=0, lineno=168)
          20	POP_JUMP_IF_FALSE(arg=26, lineno=168)
          22	LOAD_FAST(arg=1, lineno=169)
          24	RETURN_VALUE(arg=None, lineno=169)
>         26	LOAD_GLOBAL(arg=1, lineno=171)
          28	LOAD_DEREF(arg=3, lineno=171)
          30	LOAD_DEREF(arg=3, lineno=171)
          32	CALL_FUNCTION(arg=2, lineno=171)
          34	BUILD_LIST(arg=1, lineno=171)
          36	LOAD_GLOBAL(arg=2, lineno=171)
          38	BINARY_MULTIPLY(arg=None, lineno=171)
          40	STORE_FAST(arg=2, lineno=171)
          42	LOAD_GLOBAL(arg=1, lineno=172)
          44	LOAD_DEREF(arg=3, lineno=172)
          46	LOAD_GLOBAL(arg=0, lineno=172)
          48	LOAD_FAST(arg=0, lineno=172)
          50	CALL_FUNCTION(arg=1, lineno=172)
          52	LOAD_CONST(arg=2, lineno=172)
          54	BINARY_SUBTRACT(arg=None, lineno=172)
          56	CALL_FUNCTION(arg=2, lineno=172)
          58	LOAD_FAST(arg=2, lineno=172)
          60	LOAD_CONST(arg=3, lineno=172)
          62	STORE_SUBSCR(arg=None, lineno=172)
          64	LOAD_CONST(arg=2, lineno=173)
          66	STORE_FAST(arg=3, lineno=173)
          68	SETUP_LOOP(arg=194, lineno=175)
>         70	LOAD_FAST(arg=3, lineno=175)
          72	LOAD_CONST(arg=3, lineno=175)
          74	COMPARE_OP(arg=4, lineno=175)
          76	POP_JUMP_IF_FALSE(arg=262, lineno=175)
          80	LOAD_FAST(arg=3, lineno=176)
          82	LOAD_CONST(arg=2, lineno=176)
          84	INPLACE_SUBTRACT(arg=None, lineno=176)
          86	STORE_FAST(arg=3, lineno=176)
          88	LOAD_FAST(arg=2, lineno=177)
          90	LOAD_FAST(arg=3, lineno=177)
          92	BINARY_SUBSCR(arg=None, lineno=177)
          94	UNPACK_SEQUENCE(arg=2, lineno=177)
          96	STORE_FAST(arg=4, lineno=177)
          98	STORE_FAST(arg=5, lineno=177)
         100	SETUP_LOOP(arg=144, lineno=179)
>        102	LOAD_FAST(arg=5, lineno=179)
         104	LOAD_FAST(arg=4, lineno=179)
         106	BINARY_SUBTRACT(arg=None, lineno=179)
         108	LOAD_GLOBAL(arg=3, lineno=179)
         110	COMPARE_OP(arg=5, lineno=179)
         112	POP_JUMP_IF_FALSE(arg=244, lineno=179)
         114	LOAD_FAST(arg=3, lineno=180)
         116	LOAD_GLOBAL(arg=2, lineno=180)
         118	COMPARE_OP(arg=0, lineno=180)
         120	POP_JUMP_IF_TRUE(arg=126, lineno=180)
         122	LOAD_GLOBAL(arg=4, lineno=180)
         124	RAISE_VARARGS(arg=1, lineno=180)
>        126	LOAD_DEREF(arg=2, lineno=181)
         128	LOAD_FAST(arg=0, lineno=181)
         130	LOAD_FAST(arg=1, lineno=181)
         132	LOAD_FAST(arg=4, lineno=181)
         134	LOAD_FAST(arg=5, lineno=181)
         136	CALL_FUNCTION(arg=4, lineno=181)
         138	STORE_FAST(arg=6, lineno=181)
         140	LOAD_FAST(arg=5, lineno=183)
         142	LOAD_FAST(arg=6, lineno=183)
         144	BINARY_SUBTRACT(arg=None, lineno=183)
         146	LOAD_FAST(arg=6, lineno=183)
         148	LOAD_FAST(arg=4, lineno=183)
         150	BINARY_SUBTRACT(arg=None, lineno=183)
         152	COMPARE_OP(arg=4, lineno=183)
         154	POP_JUMP_IF_FALSE(arg=200, lineno=183)
         156	LOAD_FAST(arg=5, lineno=185)
         158	LOAD_FAST(arg=6, lineno=185)
         160	COMPARE_OP(arg=4, lineno=185)
         162	POP_JUMP_IF_FALSE(arg=190, lineno=185)
         164	LOAD_GLOBAL(arg=1, lineno=186)
         166	LOAD_FAST(arg=6, lineno=186)
         168	LOAD_CONST(arg=2, lineno=186)
         170	BINARY_ADD(arg=None, lineno=186)
         172	LOAD_FAST(arg=5, lineno=186)
         174	CALL_FUNCTION(arg=2, lineno=186)
         176	LOAD_FAST(arg=2, lineno=186)
         178	LOAD_FAST(arg=3, lineno=186)
         180	STORE_SUBSCR(arg=None, lineno=186)
         182	LOAD_FAST(arg=3, lineno=187)
         184	LOAD_CONST(arg=2, lineno=187)
         186	INPLACE_ADD(arg=None, lineno=187)
         188	STORE_FAST(arg=3, lineno=187)
>        190	LOAD_FAST(arg=6, lineno=188)
         192	LOAD_CONST(arg=2, lineno=188)
         194	BINARY_SUBTRACT(arg=None, lineno=188)
         196	STORE_FAST(arg=5, lineno=188)
         198	JUMP_ABSOLUTE(arg=102, lineno=188)
>        200	LOAD_FAST(arg=6, lineno=190)
         202	LOAD_FAST(arg=4, lineno=190)
         204	COMPARE_OP(arg=4, lineno=190)
         206	POP_JUMP_IF_FALSE(arg=234, lineno=190)
         208	LOAD_GLOBAL(arg=1, lineno=191)
         210	LOAD_FAST(arg=4, lineno=191)
         212	LOAD_FAST(arg=6, lineno=191)
         214	LOAD_CONST(arg=2, lineno=191)
         216	BINARY_SUBTRACT(arg=None, lineno=191)
         218	CALL_FUNCTION(arg=2, lineno=191)
         220	LOAD_FAST(arg=2, lineno=191)
         222	LOAD_FAST(arg=3, lineno=191)
         224	STORE_SUBSCR(arg=None, lineno=191)
         226	LOAD_FAST(arg=3, lineno=192)
         228	LOAD_CONST(arg=2, lineno=192)
         230	INPLACE_ADD(arg=None, lineno=192)
         232	STORE_FAST(arg=3, lineno=192)
>        234	LOAD_FAST(arg=6, lineno=193)
         236	LOAD_CONST(arg=2, lineno=193)
         238	BINARY_ADD(arg=None, lineno=193)
         240	STORE_FAST(arg=4, lineno=193)
         242	JUMP_ABSOLUTE(arg=102, lineno=193)
>        244	POP_BLOCK(arg=None, lineno=193)
>        246	LOAD_DEREF(arg=0, lineno=195)
         248	LOAD_FAST(arg=0, lineno=195)
         250	LOAD_FAST(arg=1, lineno=195)
         252	LOAD_FAST(arg=4, lineno=195)
         254	LOAD_FAST(arg=5, lineno=195)
         256	CALL_FUNCTION(arg=4, lineno=195)
         258	POP_TOP(arg=None, lineno=195)
         260	JUMP_ABSOLUTE(arg=70, lineno=195)
>        262	POP_BLOCK(arg=None, lineno=195)
>        264	LOAD_FAST(arg=1, lineno=197)
         266	RETURN_VALUE(arg=None, lineno=197)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=166)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=2, inst=LOAD_DEREF(arg=1, lineno=166)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=166)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$2load_deref.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=166)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$2load_deref.0', '$A4.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=8, inst=STORE_FAST(arg=1, lineno=166)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$6call_function.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=10, inst=LOAD_GLOBAL(arg=0, lineno=168)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=168)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$10load_global.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=168)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$10load_global.3', '$A12.4']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=16, inst=LOAD_CONST(arg=1, lineno=168)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$14call_function.5']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=18, inst=COMPARE_OP(arg=0, lineno=168)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$14call_function.5', '$const16.6']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=20, inst=POP_JUMP_IF_FALSE(arg=26, lineno=168)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$18compare_op.7']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=22, stack=(), blockstack=(), npush=0), Edge(pc=26, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=22 nstack_initial=0), State(pc_initial=26 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=22, inst=LOAD_FAST(arg=1, lineno=169)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=24, inst=RETURN_VALUE(arg=None, lineno=169)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$R22.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=26 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=26, inst=LOAD_GLOBAL(arg=1, lineno=171)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=28, inst=LOAD_DEREF(arg=3, lineno=171)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$26load_global.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=30, inst=LOAD_DEREF(arg=3, lineno=171)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$26load_global.0', '$28load_deref.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=32, inst=CALL_FUNCTION(arg=2, lineno=171)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$26load_global.0', '$28load_deref.1', '$30load_deref.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=34, inst=BUILD_LIST(arg=1, lineno=171)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$32call_function.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=36, inst=LOAD_GLOBAL(arg=2, lineno=171)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$34build_list.4']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=38, inst=BINARY_MULTIPLY(arg=None, lineno=171)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$34build_list.4', '$36load_global.5']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=40, inst=STORE_FAST(arg=2, lineno=171)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$38binary_multiply.6']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=42, inst=LOAD_GLOBAL(arg=1, lineno=172)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=44, inst=LOAD_DEREF(arg=3, lineno=172)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$42load_global.7']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=46, inst=LOAD_GLOBAL(arg=0, lineno=172)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$42load_global.7', '$44load_deref.8']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=48, inst=LOAD_FAST(arg=0, lineno=172)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$42load_global.7', '$44load_deref.8', '$46load_global.9']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=50, inst=CALL_FUNCTION(arg=1, lineno=172)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$42load_global.7', '$44load_deref.8', '$46load_global.9', '$A48.10']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=172)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$42load_global.7', '$44load_deref.8', '$50call_function.11']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=54, inst=BINARY_SUBTRACT(arg=None, lineno=172)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$42load_global.7', '$44load_deref.8', '$50call_function.11', '$const52.12']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=172)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$42load_global.7', '$44load_deref.8', '$54binary_subtract.13']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=58, inst=LOAD_FAST(arg=2, lineno=172)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$56call_function.14']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=60, inst=LOAD_CONST(arg=3, lineno=172)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$56call_function.14', '$stack58.15']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=62, inst=STORE_SUBSCR(arg=None, lineno=172)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$56call_function.14', '$stack58.15', '$const60.16']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=64, inst=LOAD_CONST(arg=2, lineno=173)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=66, inst=STORE_FAST(arg=3, lineno=173)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$const64.17']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=68, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=68 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=68, inst=SETUP_LOOP(arg=194, lineno=175)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=70, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 264, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=70 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=70, inst=LOAD_FAST(arg=3, lineno=175)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=72, inst=LOAD_CONST(arg=3, lineno=175)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$n70.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=74, inst=COMPARE_OP(arg=4, lineno=175)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$n70.0', '$const72.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=262, lineno=175)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$74compare_op.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=80, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 264, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=262, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 264, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=80 nstack_initial=0), State(pc_initial=262 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=80, inst=LOAD_FAST(arg=3, lineno=176)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=82, inst=LOAD_CONST(arg=2, lineno=176)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$n80.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=84, inst=INPLACE_SUBTRACT(arg=None, lineno=176)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$n80.0', '$const82.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=86, inst=STORE_FAST(arg=3, lineno=176)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$84inplace_subtract.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=177)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=90, inst=LOAD_FAST(arg=3, lineno=177)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$stack88.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=92, inst=BINARY_SUBSCR(arg=None, lineno=177)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$stack88.3', '$n90.4']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=94, inst=UNPACK_SEQUENCE(arg=2, lineno=177)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$92binary_subscr.5']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=96, inst=STORE_FAST(arg=4, lineno=177)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$94unpack_sequence.7', '$94unpack_sequence.6']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=98, inst=STORE_FAST(arg=5, lineno=177)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$94unpack_sequence.7']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=100, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 264, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=262 nstack_initial=0), State(pc_initial=100 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=262, inst=POP_BLOCK(arg=None, lineno=195)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=264, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=100 nstack_initial=0), State(pc_initial=264 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=100, inst=SETUP_LOOP(arg=144, lineno=179)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=102, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 264, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 246, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=264 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=264, inst=LOAD_FAST(arg=1, lineno=197)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=266, inst=RETURN_VALUE(arg=None, lineno=197)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$R264.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=102 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=102, inst=LOAD_FAST(arg=5, lineno=179)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=104, inst=LOAD_FAST(arg=4, lineno=179)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$high102.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=106, inst=BINARY_SUBTRACT(arg=None, lineno=179)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$high102.0', '$low104.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=108, inst=LOAD_GLOBAL(arg=3, lineno=179)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$106binary_subtract.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=110, inst=COMPARE_OP(arg=5, lineno=179)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$106binary_subtract.2', '$108load_global.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=112, inst=POP_JUMP_IF_FALSE(arg=244, lineno=179)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$110compare_op.4']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=114, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 264, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 246, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), npush=0), Edge(pc=244, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 264, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 246, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=114 nstack_initial=0), State(pc_initial=244 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=114, inst=LOAD_FAST(arg=3, lineno=180)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=116, inst=LOAD_GLOBAL(arg=2, lineno=180)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$n114.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=118, inst=COMPARE_OP(arg=0, lineno=180)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$n114.0', '$116load_global.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=120, inst=POP_JUMP_IF_TRUE(arg=126, lineno=180)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$118compare_op.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=122, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 264, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 246, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), npush=0), Edge(pc=126, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 264, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 246, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=244 nstack_initial=0), State(pc_initial=122 nstack_initial=0), State(pc_initial=126 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=244, inst=POP_BLOCK(arg=None, lineno=193)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=246, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 264, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=126 nstack_initial=0), State(pc_initial=246 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=122, inst=LOAD_GLOBAL(arg=4, lineno=180)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=124, inst=RAISE_VARARGS(arg=1, lineno=180)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$122load_global.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=126 nstack_initial=0), State(pc_initial=246 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=126, inst=LOAD_DEREF(arg=2, lineno=181)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=128, inst=LOAD_FAST(arg=0, lineno=181)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$126load_deref.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=130, inst=LOAD_FAST(arg=1, lineno=181)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$126load_deref.0', '$A128.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=132, inst=LOAD_FAST(arg=4, lineno=181)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$126load_deref.0', '$A128.1', '$R130.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=134, inst=LOAD_FAST(arg=5, lineno=181)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$126load_deref.0', '$A128.1', '$R130.2', '$low132.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=136, inst=CALL_FUNCTION(arg=4, lineno=181)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$126load_deref.0', '$A128.1', '$R130.2', '$low132.3', '$high134.4']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=138, inst=STORE_FAST(arg=6, lineno=181)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$136call_function.5']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=140, inst=LOAD_FAST(arg=5, lineno=183)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=142, inst=LOAD_FAST(arg=6, lineno=183)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$high140.6']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=144, inst=BINARY_SUBTRACT(arg=None, lineno=183)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$high140.6', '$i142.7']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=146, inst=LOAD_FAST(arg=6, lineno=183)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$144binary_subtract.8']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=148, inst=LOAD_FAST(arg=4, lineno=183)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$144binary_subtract.8', '$i146.9']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=150, inst=BINARY_SUBTRACT(arg=None, lineno=183)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$144binary_subtract.8', '$i146.9', '$low148.10']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=152, inst=COMPARE_OP(arg=4, lineno=183)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$144binary_subtract.8', '$150binary_subtract.11']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=154, inst=POP_JUMP_IF_FALSE(arg=200, lineno=183)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$152compare_op.12']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=156, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 264, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 246, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), npush=0), Edge(pc=200, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 264, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 246, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=246 nstack_initial=0), State(pc_initial=156 nstack_initial=0), State(pc_initial=200 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=246, inst=LOAD_DEREF(arg=0, lineno=195)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=248, inst=LOAD_FAST(arg=0, lineno=195)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$246load_deref.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=250, inst=LOAD_FAST(arg=1, lineno=195)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$246load_deref.0', '$A248.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=252, inst=LOAD_FAST(arg=4, lineno=195)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$246load_deref.0', '$A248.1', '$R250.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=254, inst=LOAD_FAST(arg=5, lineno=195)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$246load_deref.0', '$A248.1', '$R250.2', '$low252.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=256, inst=CALL_FUNCTION(arg=4, lineno=195)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$246load_deref.0', '$A248.1', '$R250.2', '$low252.3', '$high254.4']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=258, inst=POP_TOP(arg=None, lineno=195)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$256call_function.5']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=260, inst=JUMP_ABSOLUTE(arg=70, lineno=195)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=70, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 264, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=156 nstack_initial=0), State(pc_initial=200 nstack_initial=0), State(pc_initial=70 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=156, inst=LOAD_FAST(arg=5, lineno=185)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=158, inst=LOAD_FAST(arg=6, lineno=185)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$high156.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=160, inst=COMPARE_OP(arg=4, lineno=185)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$high156.0', '$i158.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=162, inst=POP_JUMP_IF_FALSE(arg=190, lineno=185)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$160compare_op.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=164, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 264, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 246, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), npush=0), Edge(pc=190, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 264, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 246, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=200 nstack_initial=0), State(pc_initial=70 nstack_initial=0), State(pc_initial=164 nstack_initial=0), State(pc_initial=190 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=200, inst=LOAD_FAST(arg=6, lineno=190)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=202, inst=LOAD_FAST(arg=4, lineno=190)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$i200.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=204, inst=COMPARE_OP(arg=4, lineno=190)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$i200.0', '$low202.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=206, inst=POP_JUMP_IF_FALSE(arg=234, lineno=190)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$204compare_op.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=208, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 264, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 246, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), npush=0), Edge(pc=234, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 264, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 246, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=164 nstack_initial=0), State(pc_initial=190 nstack_initial=0), State(pc_initial=208 nstack_initial=0), State(pc_initial=234 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=164 nstack_initial=0), State(pc_initial=190 nstack_initial=0), State(pc_initial=208 nstack_initial=0), State(pc_initial=234 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=164, inst=LOAD_GLOBAL(arg=1, lineno=186)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=166, inst=LOAD_FAST(arg=6, lineno=186)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$164load_global.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=168, inst=LOAD_CONST(arg=2, lineno=186)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$164load_global.0', '$i166.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=170, inst=BINARY_ADD(arg=None, lineno=186)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$164load_global.0', '$i166.1', '$const168.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=172, inst=LOAD_FAST(arg=5, lineno=186)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$164load_global.0', '$170binary_add.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=174, inst=CALL_FUNCTION(arg=2, lineno=186)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$164load_global.0', '$170binary_add.3', '$high172.4']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=176, inst=LOAD_FAST(arg=2, lineno=186)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$174call_function.5']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=178, inst=LOAD_FAST(arg=3, lineno=186)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$174call_function.5', '$stack176.6']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=180, inst=STORE_SUBSCR(arg=None, lineno=186)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$174call_function.5', '$stack176.6', '$n178.7']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=182, inst=LOAD_FAST(arg=3, lineno=187)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=184, inst=LOAD_CONST(arg=2, lineno=187)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$n182.8']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=186, inst=INPLACE_ADD(arg=None, lineno=187)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$n182.8', '$const184.9']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=188, inst=STORE_FAST(arg=3, lineno=187)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$186inplace_add.10']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=190, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 264, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 246, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=190 nstack_initial=0), State(pc_initial=208 nstack_initial=0), State(pc_initial=234 nstack_initial=0), State(pc_initial=190 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=190, inst=LOAD_FAST(arg=6, lineno=188)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=192, inst=LOAD_CONST(arg=2, lineno=188)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$i190.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=194, inst=BINARY_SUBTRACT(arg=None, lineno=188)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$i190.0', '$const192.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=196, inst=STORE_FAST(arg=5, lineno=188)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$194binary_subtract.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=198, inst=JUMP_ABSOLUTE(arg=102, lineno=188)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=102, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 264, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 246, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=208 nstack_initial=0), State(pc_initial=234 nstack_initial=0), State(pc_initial=190 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=208, inst=LOAD_GLOBAL(arg=1, lineno=191)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=210, inst=LOAD_FAST(arg=4, lineno=191)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$208load_global.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=212, inst=LOAD_FAST(arg=6, lineno=191)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$208load_global.0', '$low210.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=214, inst=LOAD_CONST(arg=2, lineno=191)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$208load_global.0', '$low210.1', '$i212.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=216, inst=BINARY_SUBTRACT(arg=None, lineno=191)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$208load_global.0', '$low210.1', '$i212.2', '$const214.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=218, inst=CALL_FUNCTION(arg=2, lineno=191)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$208load_global.0', '$low210.1', '$216binary_subtract.4']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=220, inst=LOAD_FAST(arg=2, lineno=191)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$218call_function.5']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=222, inst=LOAD_FAST(arg=3, lineno=191)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$218call_function.5', '$stack220.6']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=224, inst=STORE_SUBSCR(arg=None, lineno=191)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$218call_function.5', '$stack220.6', '$n222.7']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=226, inst=LOAD_FAST(arg=3, lineno=192)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=228, inst=LOAD_CONST(arg=2, lineno=192)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$n226.8']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=230, inst=INPLACE_ADD(arg=None, lineno=192)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$n226.8', '$const228.9']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=232, inst=STORE_FAST(arg=3, lineno=192)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$230inplace_add.10']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=234, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 264, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 246, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=234 nstack_initial=0), State(pc_initial=190 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=234 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=234, inst=LOAD_FAST(arg=6, lineno=193)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=236, inst=LOAD_CONST(arg=2, lineno=193)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$i234.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=238, inst=BINARY_ADD(arg=None, lineno=193)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$i234.0', '$const236.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=240, inst=STORE_FAST(arg=4, lineno=193)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$238binary_add.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=242, inst=JUMP_ABSOLUTE(arg=102, lineno=193)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=102, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 264, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 246, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=190 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=234 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=234 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=234 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=102 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG -------------------------Prune PHIs-------------------------
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=22 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=0): set(),
             State(pc_initial=100 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=126 nstack_initial=0): set(),
             State(pc_initial=156 nstack_initial=0): set(),
             State(pc_initial=164 nstack_initial=0): set(),
             State(pc_initial=190 nstack_initial=0): set(),
             State(pc_initial=200 nstack_initial=0): set(),
             State(pc_initial=208 nstack_initial=0): set(),
             State(pc_initial=234 nstack_initial=0): set(),
             State(pc_initial=244 nstack_initial=0): set(),
             State(pc_initial=246 nstack_initial=0): set(),
             State(pc_initial=262 nstack_initial=0): set(),
             State(pc_initial=264 nstack_initial=0): set()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG defmap: {}
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG keep phismap: {}
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG new_out: defaultdict(<class 'dict'>, {})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG ----------------------DONE Prune PHIs-----------------------
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$A4.1'}), (6, {'func': '$2load_deref.0', 'args': ['$A4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_global.3'}), (12, {'res': '$A12.4'}), (14, {'func': '$10load_global.3', 'args': ['$A12.4'], 'res': '$14call_function.5'}), (16, {'res': '$const16.6'}), (18, {'lhs': '$14call_function.5', 'rhs': '$const16.6', 'res': '$18compare_op.7'}), (20, {'pred': '$18compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: (), 26: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=22 nstack_initial=0):
AdaptBlockInfo(insts=((22, {'res': '$R22.0'}), (24, {'retval': '$R22.0', 'castval': '$24return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$26load_global.0'}), (28, {'res': '$28load_deref.1'}), (30, {'res': '$30load_deref.2'}), (32, {'func': '$26load_global.0', 'args': ['$28load_deref.1', '$30load_deref.2'], 'res': '$32call_function.3'}), (34, {'items': ['$32call_function.3'], 'res': '$34build_list.4'}), (36, {'res': '$36load_global.5'}), (38, {'lhs': '$34build_list.4', 'rhs': '$36load_global.5', 'res': '$38binary_multiply.6'}), (40, {'value': '$38binary_multiply.6'}), (42, {'res': '$42load_global.7'}), (44, {'res': '$44load_deref.8'}), (46, {'res': '$46load_global.9'}), (48, {'res': '$A48.10'}), (50, {'func': '$46load_global.9', 'args': ['$A48.10'], 'res': '$50call_function.11'}), (52, {'res': '$const52.12'}), (54, {'lhs': '$50call_function.11', 'rhs': '$const52.12', 'res': '$54binary_subtract.13'}), (56, {'func': '$42load_global.7', 'args': ['$44load_deref.8', '$54binary_subtract.13'], 'res': '$56call_function.14'}), (58, {'res': '$stack58.15'}), (60, {'res': '$const60.16'}), (62, {'target': '$stack58.15', 'index': '$const60.16', 'value': '$56call_function.14'}), (64, {'res': '$const64.17'}), (66, {'value': '$const64.17'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={68: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$n70.0'}), (72, {'res': '$const72.1'}), (74, {'lhs': '$n70.0', 'rhs': '$const72.1', 'res': '$74compare_op.2'}), (76, {'pred': '$74compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 264, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={80: (), 262: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=80 nstack_initial=0):
AdaptBlockInfo(insts=((80, {'res': '$n80.0'}), (82, {'res': '$const82.1'}), (84, {'lhs': '$n80.0', 'rhs': '$const82.1', 'res': '$84inplace_subtract.2'}), (86, {'value': '$84inplace_subtract.2'}), (88, {'res': '$stack88.3'}), (90, {'res': '$n90.4'}), (92, {'index': '$n90.4', 'target': '$stack88.3', 'res': '$92binary_subscr.5'}), (94, {'iterable': '$92binary_subscr.5', 'stores': ['$94unpack_sequence.6', '$94unpack_sequence.7'], 'tupleobj': '$94unpack_sequence.8'}), (96, {'value': '$94unpack_sequence.6'}), (98, {'value': '$94unpack_sequence.7'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 264, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={100: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=100 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 264, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={102: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$high102.0'}), (104, {'res': '$low104.1'}), (106, {'lhs': '$high102.0', 'rhs': '$low104.1', 'res': '$106binary_subtract.2'}), (108, {'res': '$108load_global.3'}), (110, {'lhs': '$106binary_subtract.2', 'rhs': '$108load_global.3', 'res': '$110compare_op.4'}), (112, {'pred': '$110compare_op.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 264, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 246, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), active_try_block=None, outgoing_edgepushed={114: (), 244: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=114 nstack_initial=0):
AdaptBlockInfo(insts=((114, {'res': '$n114.0'}), (116, {'res': '$116load_global.1'}), (118, {'lhs': '$n114.0', 'rhs': '$116load_global.1', 'res': '$118compare_op.2'}), (120, {'pred': '$118compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 264, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 246, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), active_try_block=None, outgoing_edgepushed={122: (), 126: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=((122, {'res': '$122load_global.0'}), (124, {'exc': '$122load_global.0'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 264, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 246, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=126 nstack_initial=0):
AdaptBlockInfo(insts=((126, {'res': '$126load_deref.0'}), (128, {'res': '$A128.1'}), (130, {'res': '$R130.2'}), (132, {'res': '$low132.3'}), (134, {'res': '$high134.4'}), (136, {'func': '$126load_deref.0', 'args': ['$A128.1', '$R130.2', '$low132.3', '$high134.4'], 'res': '$136call_function.5'}), (138, {'value': '$136call_function.5'}), (140, {'res': '$high140.6'}), (142, {'res': '$i142.7'}), (144, {'lhs': '$high140.6', 'rhs': '$i142.7', 'res': '$144binary_subtract.8'}), (146, {'res': '$i146.9'}), (148, {'res': '$low148.10'}), (150, {'lhs': '$i146.9', 'rhs': '$low148.10', 'res': '$150binary_subtract.11'}), (152, {'lhs': '$144binary_subtract.8', 'rhs': '$150binary_subtract.11', 'res': '$152compare_op.12'}), (154, {'pred': '$152compare_op.12'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 264, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 246, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), active_try_block=None, outgoing_edgepushed={156: (), 200: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=156 nstack_initial=0):
AdaptBlockInfo(insts=((156, {'res': '$high156.0'}), (158, {'res': '$i158.1'}), (160, {'lhs': '$high156.0', 'rhs': '$i158.1', 'res': '$160compare_op.2'}), (162, {'pred': '$160compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 264, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 246, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), active_try_block=None, outgoing_edgepushed={164: (), 190: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=164 nstack_initial=0):
AdaptBlockInfo(insts=((164, {'res': '$164load_global.0'}), (166, {'res': '$i166.1'}), (168, {'res': '$const168.2'}), (170, {'lhs': '$i166.1', 'rhs': '$const168.2', 'res': '$170binary_add.3'}), (172, {'res': '$high172.4'}), (174, {'func': '$164load_global.0', 'args': ['$170binary_add.3', '$high172.4'], 'res': '$174call_function.5'}), (176, {'res': '$stack176.6'}), (178, {'res': '$n178.7'}), (180, {'target': '$stack176.6', 'index': '$n178.7', 'value': '$174call_function.5'}), (182, {'res': '$n182.8'}), (184, {'res': '$const184.9'}), (186, {'lhs': '$n182.8', 'rhs': '$const184.9', 'res': '$186inplace_add.10'}), (188, {'value': '$186inplace_add.10'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 264, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 246, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), active_try_block=None, outgoing_edgepushed={190: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=190 nstack_initial=0):
AdaptBlockInfo(insts=((190, {'res': '$i190.0'}), (192, {'res': '$const192.1'}), (194, {'lhs': '$i190.0', 'rhs': '$const192.1', 'res': '$194binary_subtract.2'}), (196, {'value': '$194binary_subtract.2'}), (198, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 264, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 246, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), active_try_block=None, outgoing_edgepushed={102: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=200 nstack_initial=0):
AdaptBlockInfo(insts=((200, {'res': '$i200.0'}), (202, {'res': '$low202.1'}), (204, {'lhs': '$i200.0', 'rhs': '$low202.1', 'res': '$204compare_op.2'}), (206, {'pred': '$204compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 264, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 246, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), active_try_block=None, outgoing_edgepushed={208: (), 234: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=208 nstack_initial=0):
AdaptBlockInfo(insts=((208, {'res': '$208load_global.0'}), (210, {'res': '$low210.1'}), (212, {'res': '$i212.2'}), (214, {'res': '$const214.3'}), (216, {'lhs': '$i212.2', 'rhs': '$const214.3', 'res': '$216binary_subtract.4'}), (218, {'func': '$208load_global.0', 'args': ['$low210.1', '$216binary_subtract.4'], 'res': '$218call_function.5'}), (220, {'res': '$stack220.6'}), (222, {'res': '$n222.7'}), (224, {'target': '$stack220.6', 'index': '$n222.7', 'value': '$218call_function.5'}), (226, {'res': '$n226.8'}), (228, {'res': '$const228.9'}), (230, {'lhs': '$n226.8', 'rhs': '$const228.9', 'res': '$230inplace_add.10'}), (232, {'value': '$230inplace_add.10'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 264, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 246, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), active_try_block=None, outgoing_edgepushed={234: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=234 nstack_initial=0):
AdaptBlockInfo(insts=((234, {'res': '$i234.0'}), (236, {'res': '$const236.1'}), (238, {'lhs': '$i234.0', 'rhs': '$const236.1', 'res': '$238binary_add.2'}), (240, {'value': '$238binary_add.2'}), (242, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 264, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 246, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), active_try_block=None, outgoing_edgepushed={102: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=244 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 264, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 246, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), active_try_block=None, outgoing_edgepushed={246: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=246 nstack_initial=0):
AdaptBlockInfo(insts=((246, {'res': '$246load_deref.0'}), (248, {'res': '$A248.1'}), (250, {'res': '$R250.2'}), (252, {'res': '$low252.3'}), (254, {'res': '$high254.4'}), (256, {'func': '$246load_deref.0', 'args': ['$A248.1', '$R250.2', '$low252.3', '$high254.4'], 'res': '$256call_function.5'}), (260, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 264, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={70: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=262 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 264, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={264: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=264 nstack_initial=0):
AdaptBlockInfo(insts=((264, {'res': '$R264.0'}), (266, {'retval': '$R264.0', 'castval': '$266return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:41 interpreter.py DEBUG label 0:
    A = arg(0, name=A)                       ['A']
    $2load_deref.0 = freevar(make_res: <function make_quicksort_impl.<locals>.make_res at 0x0000015A28C7CC18>) ['$2load_deref.0']
    R = call $2load_deref.0(A, func=$2load_deref.0, args=[Var(A, quicksort.py:166)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_deref.0', 'A', 'R']
    $10load_global.3 = global(len: <built-in function len>) ['$10load_global.3']
    $14call_function.5 = call $10load_global.3(A, func=$10load_global.3, args=[Var(A, quicksort.py:166)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_global.3', '$14call_function.5', 'A']
    $const16.6 = const(int, 2)               ['$const16.6']
    $18compare_op.7 = $14call_function.5 < $const16.6 ['$14call_function.5', '$18compare_op.7', '$const16.6']
    bool20 = global(bool: <class 'bool'>)    ['bool20']
    $20pred = call bool20($18compare_op.7, func=bool20, args=(Var($18compare_op.7, quicksort.py:168),), kws=(), vararg=None, varkwarg=None, target=None) ['$18compare_op.7', '$20pred', 'bool20']
    branch $20pred, 22, 26                   ['$20pred']
label 22:
    $24return_value.1 = cast(value=R)        ['$24return_value.1', 'R']
    return $24return_value.1                 ['$24return_value.1']
label 26:
    $26load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>) ['$26load_global.0']
    $28load_deref.1 = freevar(zero: 0)       ['$28load_deref.1']
    $30load_deref.2 = freevar(zero: 0)       ['$30load_deref.2']
    $32call_function.3 = call $26load_global.0($28load_deref.1, $30load_deref.2, func=$26load_global.0, args=[Var($28load_deref.1, quicksort.py:171), Var($30load_deref.2, quicksort.py:171)], kws=(), vararg=None, varkwarg=None, target=None) ['$26load_global.0', '$28load_deref.1', '$30load_deref.2', '$32call_function.3']
    $34build_list.4 = build_list(items=[Var($32call_function.3, quicksort.py:171)]) ['$32call_function.3', '$34build_list.4']
    $36load_global.5 = global(MAX_STACK: 100) ['$36load_global.5']
    stack = $34build_list.4 * $36load_global.5 ['$34build_list.4', '$36load_global.5', 'stack']
    $42load_global.7 = global(Partition: <class 'numba.misc.quicksort.Partition'>) ['$42load_global.7']
    $44load_deref.8 = freevar(zero: 0)       ['$44load_deref.8']
    $46load_global.9 = global(len: <built-in function len>) ['$46load_global.9']
    $50call_function.11 = call $46load_global.9(A, func=$46load_global.9, args=[Var(A, quicksort.py:166)], kws=(), vararg=None, varkwarg=None, target=None) ['$46load_global.9', '$50call_function.11', 'A']
    $const52.12 = const(int, 1)              ['$const52.12']
    $54binary_subtract.13 = $50call_function.11 - $const52.12 ['$50call_function.11', '$54binary_subtract.13', '$const52.12']
    $56call_function.14 = call $42load_global.7($44load_deref.8, $54binary_subtract.13, func=$42load_global.7, args=[Var($44load_deref.8, quicksort.py:172), Var($54binary_subtract.13, quicksort.py:172)], kws=(), vararg=None, varkwarg=None, target=None) ['$42load_global.7', '$44load_deref.8', '$54binary_subtract.13', '$56call_function.14']
    $const60.16 = const(int, 0)              ['$const60.16']
    stack[$const60.16] = $56call_function.14 ['$56call_function.14', '$const60.16', 'stack']
    n = const(int, 1)                        ['n']
    jump 68                                  []
label 68:
    jump 70                                  []
label 70:
    $const72.1 = const(int, 0)               ['$const72.1']
    $74compare_op.2 = n > $const72.1         ['$74compare_op.2', '$const72.1', 'n']
    bool76 = global(bool: <class 'bool'>)    ['bool76']
    $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, quicksort.py:175),), kws=(), vararg=None, varkwarg=None, target=None) ['$74compare_op.2', '$76pred', 'bool76']
    branch $76pred, 80, 262                  ['$76pred']
label 80:
    $const82.1 = const(int, 1)               ['$const82.1']
    $84inplace_subtract.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=n, rhs=$const82.1, static_lhs=Undefined, static_rhs=Undefined) ['$84inplace_subtract.2', '$const82.1', 'n']
    n = $84inplace_subtract.2                ['$84inplace_subtract.2', 'n']
    $92binary_subscr.5 = getitem(value=stack, index=n, fn=<built-in function getitem>) ['$92binary_subscr.5', 'n', 'stack']
    $94unpack_sequence.8 = exhaust_iter(value=$92binary_subscr.5, count=2) ['$92binary_subscr.5', '$94unpack_sequence.8']
    $94unpack_sequence.6 = static_getitem(value=$94unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>) ['$94unpack_sequence.6', '$94unpack_sequence.8']
    $94unpack_sequence.7 = static_getitem(value=$94unpack_sequence.8, index=1, index_var=None, fn=<built-in function getitem>) ['$94unpack_sequence.7', '$94unpack_sequence.8']
    low = $94unpack_sequence.6               ['$94unpack_sequence.6', 'low']
    high = $94unpack_sequence.7              ['$94unpack_sequence.7', 'high']
    jump 100                                 []
label 100:
    jump 102                                 []
label 102:
    $106binary_subtract.2 = high - low       ['$106binary_subtract.2', 'high', 'low']
    $108load_global.3 = global(SMALL_QUICKSORT: 15) ['$108load_global.3']
    $110compare_op.4 = $106binary_subtract.2 >= $108load_global.3 ['$106binary_subtract.2', '$108load_global.3', '$110compare_op.4']
    bool112 = global(bool: <class 'bool'>)   ['bool112']
    $112pred = call bool112($110compare_op.4, func=bool112, args=(Var($110compare_op.4, quicksort.py:179),), kws=(), vararg=None, varkwarg=None, target=None) ['$110compare_op.4', '$112pred', 'bool112']
    branch $112pred, 114, 244                ['$112pred']
label 114:
    $116load_global.1 = global(MAX_STACK: 100) ['$116load_global.1']
    $118compare_op.2 = n < $116load_global.1 ['$116load_global.1', '$118compare_op.2', 'n']
    bool120 = global(bool: <class 'bool'>)   ['bool120']
    $120pred = call bool120($118compare_op.2, func=bool120, args=(Var($118compare_op.2, quicksort.py:180),), kws=(), vararg=None, varkwarg=None, target=None) ['$118compare_op.2', '$120pred', 'bool120']
    branch $120pred, 126, 122                ['$120pred']
label 122:
    $122load_global.0 = global(AssertionError: <class 'AssertionError'>) ['$122load_global.0']
    raise $122load_global.0                  ['$122load_global.0']
label 126:
    $126load_deref.0 = freevar(partition: <function make_quicksort_impl.<locals>.partition at 0x0000015B2868B3A8>) ['$126load_deref.0']
    i = call $126load_deref.0(A, R, low, high, func=$126load_deref.0, args=[Var(A, quicksort.py:166), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None) ['$126load_deref.0', 'A', 'R', 'high', 'i', 'low']
    $144binary_subtract.8 = high - i         ['$144binary_subtract.8', 'high', 'i']
    $150binary_subtract.11 = i - low         ['$150binary_subtract.11', 'i', 'low']
    $152compare_op.12 = $144binary_subtract.8 > $150binary_subtract.11 ['$144binary_subtract.8', '$150binary_subtract.11', '$152compare_op.12']
    bool154 = global(bool: <class 'bool'>)   ['bool154']
    $154pred = call bool154($152compare_op.12, func=bool154, args=(Var($152compare_op.12, quicksort.py:183),), kws=(), vararg=None, varkwarg=None, target=None) ['$152compare_op.12', '$154pred', 'bool154']
    branch $154pred, 156, 200                ['$154pred']
label 156:
    $160compare_op.2 = high > i              ['$160compare_op.2', 'high', 'i']
    bool162 = global(bool: <class 'bool'>)   ['bool162']
    $162pred = call bool162($160compare_op.2, func=bool162, args=(Var($160compare_op.2, quicksort.py:185),), kws=(), vararg=None, varkwarg=None, target=None) ['$160compare_op.2', '$162pred', 'bool162']
    branch $162pred, 164, 190                ['$162pred']
label 164:
    $164load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>) ['$164load_global.0']
    $const168.2 = const(int, 1)              ['$const168.2']
    $170binary_add.3 = i + $const168.2       ['$170binary_add.3', '$const168.2', 'i']
    $174call_function.5 = call $164load_global.0($170binary_add.3, high, func=$164load_global.0, args=[Var($170binary_add.3, quicksort.py:186), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None) ['$164load_global.0', '$170binary_add.3', '$174call_function.5', 'high']
    stack[n] = $174call_function.5           ['$174call_function.5', 'n', 'stack']
    $const184.9 = const(int, 1)              ['$const184.9']
    $186inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const184.9, static_lhs=Undefined, static_rhs=Undefined) ['$186inplace_add.10', '$const184.9', 'n']
    n = $186inplace_add.10                   ['$186inplace_add.10', 'n']
    jump 190                                 []
label 190:
    $const192.1 = const(int, 1)              ['$const192.1']
    high = i - $const192.1                   ['$const192.1', 'high', 'i']
    jump 102                                 []
label 200:
    $204compare_op.2 = i > low               ['$204compare_op.2', 'i', 'low']
    bool206 = global(bool: <class 'bool'>)   ['bool206']
    $206pred = call bool206($204compare_op.2, func=bool206, args=(Var($204compare_op.2, quicksort.py:190),), kws=(), vararg=None, varkwarg=None, target=None) ['$204compare_op.2', '$206pred', 'bool206']
    branch $206pred, 208, 234                ['$206pred']
label 208:
    $208load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>) ['$208load_global.0']
    $const214.3 = const(int, 1)              ['$const214.3']
    $216binary_subtract.4 = i - $const214.3  ['$216binary_subtract.4', '$const214.3', 'i']
    $218call_function.5 = call $208load_global.0(low, $216binary_subtract.4, func=$208load_global.0, args=[Var(low, quicksort.py:177), Var($216binary_subtract.4, quicksort.py:191)], kws=(), vararg=None, varkwarg=None, target=None) ['$208load_global.0', '$216binary_subtract.4', '$218call_function.5', 'low']
    stack[n] = $218call_function.5           ['$218call_function.5', 'n', 'stack']
    $const228.9 = const(int, 1)              ['$const228.9']
    $230inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const228.9, static_lhs=Undefined, static_rhs=Undefined) ['$230inplace_add.10', '$const228.9', 'n']
    n = $230inplace_add.10                   ['$230inplace_add.10', 'n']
    jump 234                                 []
label 234:
    $const236.1 = const(int, 1)              ['$const236.1']
    low = i + $const236.1                    ['$const236.1', 'i', 'low']
    jump 102                                 []
label 244:
    jump 246                                 []
label 246:
    $246load_deref.0 = freevar(insertion_sort: <function make_quicksort_impl.<locals>.insertion_sort at 0x0000015B2868B708>) ['$246load_deref.0']
    $256call_function.5 = call $246load_deref.0(A, R, low, high, func=$246load_deref.0, args=[Var(A, quicksort.py:166), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None) ['$246load_deref.0', '$256call_function.5', 'A', 'R', 'high', 'low']
    jump 70                                  []
label 262:
    jump 264                                 []
label 264:
    $266return_value.1 = cast(value=R)       ['$266return_value.1', 'R']
    return $266return_value.1                ['$266return_value.1']

Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: A = arg(0, name=A)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $2load_deref.0 = freevar(make_res: <function make_quicksort_impl.<locals>.make_res at 0x0000015A28C7CC18>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R = call $2load_deref.0(A, func=$2load_deref.0, args=[Var(A, quicksort.py:166)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $10load_global.3 = global(len: <built-in function len>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $14call_function.5 = call $10load_global.3(A, func=$10load_global.3, args=[Var(A, quicksort.py:166)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const16.6 = const(int, 2)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $18compare_op.7 = $14call_function.5 < $const16.6
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool20 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $20pred = call bool20($18compare_op.7, func=bool20, args=(Var($18compare_op.7, quicksort.py:168),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $20pred, 22, 26
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 22
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $24return_value.1 = cast(value=R)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $24return_value.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 26
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $26load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $28load_deref.1 = freevar(zero: 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $30load_deref.2 = freevar(zero: 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $32call_function.3 = call $26load_global.0($28load_deref.1, $30load_deref.2, func=$26load_global.0, args=[Var($28load_deref.1, quicksort.py:171), Var($30load_deref.2, quicksort.py:171)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $34build_list.4 = build_list(items=[Var($32call_function.3, quicksort.py:171)])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $36load_global.5 = global(MAX_STACK: 100)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: stack = $34build_list.4 * $36load_global.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $42load_global.7 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $44load_deref.8 = freevar(zero: 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $46load_global.9 = global(len: <built-in function len>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $50call_function.11 = call $46load_global.9(A, func=$46load_global.9, args=[Var(A, quicksort.py:166)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const52.12 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $54binary_subtract.13 = $50call_function.11 - $const52.12
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $56call_function.14 = call $42load_global.7($44load_deref.8, $54binary_subtract.13, func=$42load_global.7, args=[Var($44load_deref.8, quicksort.py:172), Var($54binary_subtract.13, quicksort.py:172)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const60.16 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: stack[0] = $56call_function.14
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 68
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 68
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 70
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 70
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const72.1 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $74compare_op.2 = n > $const72.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool76 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, quicksort.py:175),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $76pred, 80, 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 80
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const82.1 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $84inplace_subtract.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=n, rhs=$const82.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n = $84inplace_subtract.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $92binary_subscr.5 = getitem(value=stack, index=n, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $94unpack_sequence.8 = exhaust_iter(value=$92binary_subscr.5, count=2)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $94unpack_sequence.6 = static_getitem(value=$94unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $94unpack_sequence.7 = static_getitem(value=$94unpack_sequence.8, index=1, index_var=None, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: low = $94unpack_sequence.6
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: high = $94unpack_sequence.7
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 100
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 100
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $106binary_subtract.2 = high - low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $108load_global.3 = global(SMALL_QUICKSORT: 15)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $110compare_op.4 = $106binary_subtract.2 >= $108load_global.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $112pred = call bool112($110compare_op.4, func=bool112, args=(Var($110compare_op.4, quicksort.py:179),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $112pred, 114, 244
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $116load_global.1 = global(MAX_STACK: 100)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $118compare_op.2 = n < $116load_global.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool120 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $120pred = call bool120($118compare_op.2, func=bool120, args=(Var($118compare_op.2, quicksort.py:180),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $120pred, 126, 122
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 122
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $122load_global.0 = global(AssertionError: <class 'AssertionError'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: <static> raise <class 'AssertionError'>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $126load_deref.0 = freevar(partition: <function make_quicksort_impl.<locals>.partition at 0x0000015B2868B3A8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: i = call $126load_deref.0(A, R, low, high, func=$126load_deref.0, args=[Var(A, quicksort.py:166), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $144binary_subtract.8 = high - i
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $150binary_subtract.11 = i - low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $152compare_op.12 = $144binary_subtract.8 > $150binary_subtract.11
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool154 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $154pred = call bool154($152compare_op.12, func=bool154, args=(Var($152compare_op.12, quicksort.py:183),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $154pred, 156, 200
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 156
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $160compare_op.2 = high > i
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool162 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $162pred = call bool162($160compare_op.2, func=bool162, args=(Var($160compare_op.2, quicksort.py:185),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $162pred, 164, 190
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 164
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $164load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const168.2 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $170binary_add.3 = i + $const168.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $174call_function.5 = call $164load_global.0($170binary_add.3, high, func=$164load_global.0, args=[Var($170binary_add.3, quicksort.py:186), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: stack[n] = $174call_function.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const184.9 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $186inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const184.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n = $186inplace_add.10
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 190
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 190
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const192.1 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: high = i - $const192.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 265
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 200
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $204compare_op.2 = i > low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool206 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $206pred = call bool206($204compare_op.2, func=bool206, args=(Var($204compare_op.2, quicksort.py:190),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $206pred, 208, 234
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 208
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $208load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const214.3 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $216binary_subtract.4 = i - $const214.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $218call_function.5 = call $208load_global.0(low, $216binary_subtract.4, func=$208load_global.0, args=[Var(low, quicksort.py:177), Var($216binary_subtract.4, quicksort.py:191)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: stack[n] = $218call_function.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const228.9 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $230inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const228.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n = $230inplace_add.10
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 234
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 234
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const236.1 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: low = i + $const236.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 265
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 244
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 246
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 246
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $246load_deref.0 = freevar(insertion_sort: <function make_quicksort_impl.<locals>.insertion_sort at 0x0000015B2868B708>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $256call_function.5 = call $246load_deref.0(A, R, low, high, func=$246load_deref.0, args=[Var(A, quicksort.py:166), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 70
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 264
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 264
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $266return_value.1 = cast(value=R)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $266return_value.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 265
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG defs defaultdict(<class 'list'>,
            {'$106binary_subtract.2': [<numba.core.ir.Assign object at 0x0000015A39C66E08>],
             '$108load_global.3': [<numba.core.ir.Assign object at 0x0000015A39C66F48>],
             '$10load_global.3': [<numba.core.ir.Assign object at 0x0000015A38B7F0C8>],
             '$110compare_op.4': [<numba.core.ir.Assign object at 0x0000015A39C690C8>],
             '$112pred': [<numba.core.ir.Assign object at 0x0000015A39C693C8>],
             '$116load_global.1': [<numba.core.ir.Assign object at 0x0000015A39C69688>],
             '$118compare_op.2': [<numba.core.ir.Assign object at 0x0000015A39C697C8>],
             '$120pred': [<numba.core.ir.Assign object at 0x0000015A39C69A88>],
             '$122load_global.0': [<numba.core.ir.Assign object at 0x0000015A39C69C48>],
             '$126load_deref.0': [<numba.core.ir.Assign object at 0x0000015A39C69E88>],
             '$144binary_subtract.8': [<numba.core.ir.Assign object at 0x0000015A39C6B9C8>],
             '$14call_function.5': [<numba.core.ir.Assign object at 0x0000015A38B9CA88>],
             '$150binary_subtract.11': [<numba.core.ir.Assign object at 0x0000015A39C6BD08>],
             '$152compare_op.12': [<numba.core.ir.Assign object at 0x0000015A39C6BE48>],
             '$154pred': [<numba.core.ir.Assign object at 0x0000015A39C6E148>],
             '$160compare_op.2': [<numba.core.ir.Assign object at 0x0000015A39C6E3C8>],
             '$162pred': [<numba.core.ir.Assign object at 0x0000015A39C6E688>],
             '$164load_global.0': [<numba.core.ir.Assign object at 0x0000015A39C6E7C8>],
             '$170binary_add.3': [<numba.core.ir.Assign object at 0x0000015A39C6EBC8>],
             '$174call_function.5': [<numba.core.ir.Assign object at 0x0000015A39C6EE88>],
             '$186inplace_add.10': [<numba.core.ir.Assign object at 0x0000015A39C70508>],
             '$18compare_op.7': [<numba.core.ir.Assign object at 0x0000015A38B9CC48>],
             '$204compare_op.2': [<numba.core.ir.Assign object at 0x0000015A39C70D48>],
             '$206pred': [<numba.core.ir.Assign object at 0x0000015A39C74048>],
             '$208load_global.0': [<numba.core.ir.Assign object at 0x0000015A39C74188>],
             '$20pred': [<numba.core.ir.Assign object at 0x0000015A38B8F948>],
             '$216binary_subtract.4': [<numba.core.ir.Assign object at 0x0000015A39C746C8>],
             '$218call_function.5': [<numba.core.ir.Assign object at 0x0000015A39C74848>],
             '$230inplace_add.10': [<numba.core.ir.Assign object at 0x0000015A39C74E88>],
             '$246load_deref.0': [<numba.core.ir.Assign object at 0x0000015A39C75508>],
             '$24return_value.1': [<numba.core.ir.Assign object at 0x0000015A38BA9EC8>],
             '$256call_function.5': [<numba.core.ir.Assign object at 0x0000015A39C75BC8>],
             '$266return_value.1': [<numba.core.ir.Assign object at 0x0000015A39C75EC8>],
             '$26load_global.0': [<numba.core.ir.Assign object at 0x0000015A38BAEBC8>],
             '$28load_deref.1': [<numba.core.ir.Assign object at 0x0000015A38BAED08>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x0000015A38BA02C8>],
             '$30load_deref.2': [<numba.core.ir.Assign object at 0x0000015A38BAEE48>],
             '$32call_function.3': [<numba.core.ir.Assign object at 0x0000015A38BAEF88>],
             '$34build_list.4': [<numba.core.ir.Assign object at 0x0000015A38BAF108>],
             '$36load_global.5': [<numba.core.ir.Assign object at 0x0000015A38BAF288>],
             '$42load_global.7': [<numba.core.ir.Assign object at 0x0000015A38BAF608>],
             '$44load_deref.8': [<numba.core.ir.Assign object at 0x0000015A38BAF708>],
             '$46load_global.9': [<numba.core.ir.Assign object at 0x0000015A38BAF848>],
             '$50call_function.11': [<numba.core.ir.Assign object at 0x0000015A38BAFB08>],
             '$54binary_subtract.13': [<numba.core.ir.Assign object at 0x0000015A38BAFD88>],
             '$56call_function.14': [<numba.core.ir.Assign object at 0x0000015A38BAFEC8>],
             '$74compare_op.2': [<numba.core.ir.Assign object at 0x0000015A39C64888>],
             '$76pred': [<numba.core.ir.Assign object at 0x0000015A39C64B48>],
             '$84inplace_subtract.2': [<numba.core.ir.Assign object at 0x0000015A39C64FC8>],
             '$92binary_subscr.5': [<numba.core.ir.Assign object at 0x0000015A39C66488>],
             '$94unpack_sequence.6': [<numba.core.ir.Assign object at 0x0000015A39C66708>],
             '$94unpack_sequence.7': [<numba.core.ir.Assign object at 0x0000015A39C667C8>],
             '$94unpack_sequence.8': [<numba.core.ir.Assign object at 0x0000015A39C665C8>],
             '$const16.6': [<numba.core.ir.Assign object at 0x0000015A38B9C948>],
             '$const168.2': [<numba.core.ir.Assign object at 0x0000015A39C6EA88>],
             '$const184.9': [<numba.core.ir.Assign object at 0x0000015A39C703C8>],
             '$const192.1': [<numba.core.ir.Assign object at 0x0000015A39C70788>],
             '$const214.3': [<numba.core.ir.Assign object at 0x0000015A39C74588>],
             '$const228.9': [<numba.core.ir.Assign object at 0x0000015A39C74D48>],
             '$const236.1': [<numba.core.ir.Assign object at 0x0000015A39C75148>],
             '$const52.12': [<numba.core.ir.Assign object at 0x0000015A38BAFC48>],
             '$const60.16': [<numba.core.ir.Assign object at 0x0000015A39C64188>],
             '$const72.1': [<numba.core.ir.Assign object at 0x0000015A39C64748>],
             '$const82.1': [<numba.core.ir.Assign object at 0x0000015A39C64E88>],
             'A': [<numba.core.ir.Assign object at 0x0000015A38BA0F08>],
             'R': [<numba.core.ir.Assign object at 0x0000015A38BA0048>],
             'bool112': [<numba.core.ir.Assign object at 0x0000015A39C69288>],
             'bool120': [<numba.core.ir.Assign object at 0x0000015A39C69948>],
             'bool154': [<numba.core.ir.Assign object at 0x0000015A39C6BFC8>],
             'bool162': [<numba.core.ir.Assign object at 0x0000015A39C6E548>],
             'bool20': [<numba.core.ir.Assign object at 0x0000015A38B9C548>],
             'bool206': [<numba.core.ir.Assign object at 0x0000015A39C70EC8>],
             'bool76': [<numba.core.ir.Assign object at 0x0000015A39C64A08>],
             'high': [<numba.core.ir.Assign object at 0x0000015A39C66988>,
                      <numba.core.ir.Assign object at 0x0000015A39C708C8>],
             'i': [<numba.core.ir.Assign object at 0x0000015A39C6B588>],
             'low': [<numba.core.ir.Assign object at 0x0000015A39C66888>,
                     <numba.core.ir.Assign object at 0x0000015A39C75288>],
             'n': [<numba.core.ir.Assign object at 0x0000015A39C64348>,
                   <numba.core.ir.Assign object at 0x0000015A39C64408>,
                   <numba.core.ir.Assign object at 0x0000015A39C6B648>,
                   <numba.core.ir.Assign object at 0x0000015A39C70988>],
             'stack': [<numba.core.ir.Assign object at 0x0000015A38BAF3C8>]})
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG SSA violators {'high', 'n', 'low'}
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Fix SSA violator on var high
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: A = arg(0, name=A)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $2load_deref.0 = freevar(make_res: <function make_quicksort_impl.<locals>.make_res at 0x0000015A28C7CC18>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R = call $2load_deref.0(A, func=$2load_deref.0, args=[Var(A, quicksort.py:166)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $10load_global.3 = global(len: <built-in function len>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $14call_function.5 = call $10load_global.3(A, func=$10load_global.3, args=[Var(A, quicksort.py:166)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const16.6 = const(int, 2)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $18compare_op.7 = $14call_function.5 < $const16.6
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool20 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $20pred = call bool20($18compare_op.7, func=bool20, args=(Var($18compare_op.7, quicksort.py:168),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $20pred, 22, 26
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 22
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $24return_value.1 = cast(value=R)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $24return_value.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 26
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $26load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $28load_deref.1 = freevar(zero: 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $30load_deref.2 = freevar(zero: 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $32call_function.3 = call $26load_global.0($28load_deref.1, $30load_deref.2, func=$26load_global.0, args=[Var($28load_deref.1, quicksort.py:171), Var($30load_deref.2, quicksort.py:171)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $34build_list.4 = build_list(items=[Var($32call_function.3, quicksort.py:171)])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $36load_global.5 = global(MAX_STACK: 100)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: stack = $34build_list.4 * $36load_global.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $42load_global.7 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $44load_deref.8 = freevar(zero: 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $46load_global.9 = global(len: <built-in function len>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $50call_function.11 = call $46load_global.9(A, func=$46load_global.9, args=[Var(A, quicksort.py:166)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const52.12 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $54binary_subtract.13 = $50call_function.11 - $const52.12
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $56call_function.14 = call $42load_global.7($44load_deref.8, $54binary_subtract.13, func=$42load_global.7, args=[Var($44load_deref.8, quicksort.py:172), Var($54binary_subtract.13, quicksort.py:172)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const60.16 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: stack[0] = $56call_function.14
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 68
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 68
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 70
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 70
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const72.1 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $74compare_op.2 = n > $const72.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool76 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, quicksort.py:175),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $76pred, 80, 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 80
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const82.1 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $84inplace_subtract.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=n, rhs=$const82.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n = $84inplace_subtract.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $92binary_subscr.5 = getitem(value=stack, index=n, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $94unpack_sequence.8 = exhaust_iter(value=$92binary_subscr.5, count=2)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $94unpack_sequence.6 = static_getitem(value=$94unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $94unpack_sequence.7 = static_getitem(value=$94unpack_sequence.8, index=1, index_var=None, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: low = $94unpack_sequence.6
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: high = $94unpack_sequence.7
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG first assign: high
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: high = $94unpack_sequence.7
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 100
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 100
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $106binary_subtract.2 = high - low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $108load_global.3 = global(SMALL_QUICKSORT: 15)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $110compare_op.4 = $106binary_subtract.2 >= $108load_global.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $112pred = call bool112($110compare_op.4, func=bool112, args=(Var($110compare_op.4, quicksort.py:179),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $112pred, 114, 244
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $116load_global.1 = global(MAX_STACK: 100)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $118compare_op.2 = n < $116load_global.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool120 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $120pred = call bool120($118compare_op.2, func=bool120, args=(Var($118compare_op.2, quicksort.py:180),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $120pred, 126, 122
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 122
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $122load_global.0 = global(AssertionError: <class 'AssertionError'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: <static> raise <class 'AssertionError'>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $126load_deref.0 = freevar(partition: <function make_quicksort_impl.<locals>.partition at 0x0000015B2868B3A8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: i = call $126load_deref.0(A, R, low, high, func=$126load_deref.0, args=[Var(A, quicksort.py:166), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $144binary_subtract.8 = high - i
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $150binary_subtract.11 = i - low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $152compare_op.12 = $144binary_subtract.8 > $150binary_subtract.11
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool154 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $154pred = call bool154($152compare_op.12, func=bool154, args=(Var($152compare_op.12, quicksort.py:183),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $154pred, 156, 200
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 156
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $160compare_op.2 = high > i
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool162 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $162pred = call bool162($160compare_op.2, func=bool162, args=(Var($160compare_op.2, quicksort.py:185),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $162pred, 164, 190
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 164
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $164load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const168.2 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $170binary_add.3 = i + $const168.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $174call_function.5 = call $164load_global.0($170binary_add.3, high, func=$164load_global.0, args=[Var($170binary_add.3, quicksort.py:186), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: stack[n] = $174call_function.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const184.9 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $186inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const184.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n = $186inplace_add.10
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 190
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 190
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const192.1 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: high = i - $const192.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: high.1 = i - $const192.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 265
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 200
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $204compare_op.2 = i > low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool206 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $206pred = call bool206($204compare_op.2, func=bool206, args=(Var($204compare_op.2, quicksort.py:190),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $206pred, 208, 234
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 208
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $208load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const214.3 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $216binary_subtract.4 = i - $const214.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $218call_function.5 = call $208load_global.0(low, $216binary_subtract.4, func=$208load_global.0, args=[Var(low, quicksort.py:177), Var($216binary_subtract.4, quicksort.py:191)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: stack[n] = $218call_function.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const228.9 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $230inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const228.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n = $230inplace_add.10
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 234
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 234
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const236.1 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: low = i + $const236.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 265
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 244
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 246
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 246
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $246load_deref.0 = freevar(insertion_sort: <function make_quicksort_impl.<locals>.insertion_sort at 0x0000015B2868B708>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $256call_function.5 = call $246load_deref.0(A, R, low, high, func=$246load_deref.0, args=[Var(A, quicksort.py:166), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 70
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 264
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 264
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $266return_value.1 = cast(value=R)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $266return_value.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 265
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {80: [<numba.core.ir.Assign object at 0x0000015A38BA5348>],
             190: [<numba.core.ir.Assign object at 0x0000015A38B9C708>]})
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: A = arg(0, name=A)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $2load_deref.0 = freevar(make_res: <function make_quicksort_impl.<locals>.make_res at 0x0000015A28C7CC18>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R = call $2load_deref.0(A, func=$2load_deref.0, args=[Var(A, quicksort.py:166)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $10load_global.3 = global(len: <built-in function len>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $14call_function.5 = call $10load_global.3(A, func=$10load_global.3, args=[Var(A, quicksort.py:166)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const16.6 = const(int, 2)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $18compare_op.7 = $14call_function.5 < $const16.6
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool20 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $20pred = call bool20($18compare_op.7, func=bool20, args=(Var($18compare_op.7, quicksort.py:168),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $20pred, 22, 26
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 22
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $24return_value.1 = cast(value=R)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $24return_value.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 26
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $26load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $28load_deref.1 = freevar(zero: 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $30load_deref.2 = freevar(zero: 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $32call_function.3 = call $26load_global.0($28load_deref.1, $30load_deref.2, func=$26load_global.0, args=[Var($28load_deref.1, quicksort.py:171), Var($30load_deref.2, quicksort.py:171)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $34build_list.4 = build_list(items=[Var($32call_function.3, quicksort.py:171)])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $36load_global.5 = global(MAX_STACK: 100)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: stack = $34build_list.4 * $36load_global.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $42load_global.7 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $44load_deref.8 = freevar(zero: 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $46load_global.9 = global(len: <built-in function len>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $50call_function.11 = call $46load_global.9(A, func=$46load_global.9, args=[Var(A, quicksort.py:166)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const52.12 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $54binary_subtract.13 = $50call_function.11 - $const52.12
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $56call_function.14 = call $42load_global.7($44load_deref.8, $54binary_subtract.13, func=$42load_global.7, args=[Var($44load_deref.8, quicksort.py:172), Var($54binary_subtract.13, quicksort.py:172)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const60.16 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: stack[0] = $56call_function.14
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 68
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 68
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 70
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 70
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const72.1 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $74compare_op.2 = n > $const72.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool76 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, quicksort.py:175),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $76pred, 80, 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 80
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const82.1 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $84inplace_subtract.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=n, rhs=$const82.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n = $84inplace_subtract.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $92binary_subscr.5 = getitem(value=stack, index=n, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $94unpack_sequence.8 = exhaust_iter(value=$92binary_subscr.5, count=2)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $94unpack_sequence.6 = static_getitem(value=$94unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $94unpack_sequence.7 = static_getitem(value=$94unpack_sequence.8, index=1, index_var=None, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: low = $94unpack_sequence.6
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: high = $94unpack_sequence.7
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 100
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 100
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $106binary_subtract.2 = high - low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='high' stmt=$106binary_subtract.2 = high - low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG insert phi node high.2 = phi(incoming_values=[], incoming_blocks=[]) at 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 265
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 265
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG insert phi node high.3 = phi(incoming_values=[], incoming_blocks=[]) at 265
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 234
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 234
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 200 from label 234
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 200
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 200
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 126 from label 200
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 114 from label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 102 from label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG incoming_def high.2 = phi(incoming_values=[], incoming_blocks=[])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 190
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG incoming_def high.1 = i - $const192.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG incoming_def high.3 = phi(incoming_values=[Var(high.2, quicksort.py:179), Var(high.1, quicksort.py:188)], incoming_blocks=[234, 190])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 100
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 100
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 80 from label 100
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 80
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG incoming_def high = $94unpack_sequence.7
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: $106binary_subtract.2 = high.2 - low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $108load_global.3 = global(SMALL_QUICKSORT: 15)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $110compare_op.4 = $106binary_subtract.2 >= $108load_global.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $112pred = call bool112($110compare_op.4, func=bool112, args=(Var($110compare_op.4, quicksort.py:179),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $112pred, 114, 244
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $116load_global.1 = global(MAX_STACK: 100)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $118compare_op.2 = n < $116load_global.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool120 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $120pred = call bool120($118compare_op.2, func=bool120, args=(Var($118compare_op.2, quicksort.py:180),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $120pred, 126, 122
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 122
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $122load_global.0 = global(AssertionError: <class 'AssertionError'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: <static> raise <class 'AssertionError'>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $126load_deref.0 = freevar(partition: <function make_quicksort_impl.<locals>.partition at 0x0000015B2868B3A8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: i = call $126load_deref.0(A, R, low, high, func=$126load_deref.0, args=[Var(A, quicksort.py:166), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='high' stmt=i = call $126load_deref.0(A, R, low, high, func=$126load_deref.0, args=[Var(A, quicksort.py:166), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 114 from label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 102 from label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: i = call $126load_deref.0(A, R, low, high.2, func=$126load_deref.0, args=[Var(A, quicksort.py:166), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high.2, quicksort.py:179)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $144binary_subtract.8 = high - i
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='high' stmt=$144binary_subtract.8 = high - i
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 114 from label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 102 from label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: $144binary_subtract.8 = high.2 - i
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $150binary_subtract.11 = i - low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $152compare_op.12 = $144binary_subtract.8 > $150binary_subtract.11
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool154 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $154pred = call bool154($152compare_op.12, func=bool154, args=(Var($152compare_op.12, quicksort.py:183),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $154pred, 156, 200
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 156
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $160compare_op.2 = high > i
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='high' stmt=$160compare_op.2 = high > i
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 156
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 126 from label 156
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 114 from label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 102 from label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: $160compare_op.2 = high.2 > i
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool162 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $162pred = call bool162($160compare_op.2, func=bool162, args=(Var($160compare_op.2, quicksort.py:185),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $162pred, 164, 190
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 164
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $164load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const168.2 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $170binary_add.3 = i + $const168.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $174call_function.5 = call $164load_global.0($170binary_add.3, high, func=$164load_global.0, args=[Var($170binary_add.3, quicksort.py:186), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='high' stmt=$174call_function.5 = call $164load_global.0($170binary_add.3, high, func=$164load_global.0, args=[Var($170binary_add.3, quicksort.py:186), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 164
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 156 from label 164
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 156
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 156
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 126 from label 156
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 114 from label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 102 from label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: $174call_function.5 = call $164load_global.0($170binary_add.3, high.2, func=$164load_global.0, args=[Var($170binary_add.3, quicksort.py:186), Var(high.2, quicksort.py:179)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: stack[n] = $174call_function.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const184.9 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $186inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const184.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n = $186inplace_add.10
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 190
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 190
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const192.1 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: high.1 = i - $const192.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 265
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 200
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $204compare_op.2 = i > low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool206 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $206pred = call bool206($204compare_op.2, func=bool206, args=(Var($204compare_op.2, quicksort.py:190),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $206pred, 208, 234
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 208
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $208load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const214.3 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $216binary_subtract.4 = i - $const214.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $218call_function.5 = call $208load_global.0(low, $216binary_subtract.4, func=$208load_global.0, args=[Var(low, quicksort.py:177), Var($216binary_subtract.4, quicksort.py:191)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: stack[n] = $218call_function.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const228.9 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $230inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const228.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n = $230inplace_add.10
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 234
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 234
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const236.1 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: low = i + $const236.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 265
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 244
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 246
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 246
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $246load_deref.0 = freevar(insertion_sort: <function make_quicksort_impl.<locals>.insertion_sort at 0x0000015B2868B708>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $256call_function.5 = call $246load_deref.0(A, R, low, high, func=$246load_deref.0, args=[Var(A, quicksort.py:166), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='high' stmt=$256call_function.5 = call $246load_deref.0(A, R, low, high, func=$246load_deref.0, args=[Var(A, quicksort.py:166), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 246
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 244 from label 246
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 244
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 244
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 102 from label 244
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: $256call_function.5 = call $246load_deref.0(A, R, low, high.2, func=$246load_deref.0, args=[Var(A, quicksort.py:166), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high.2, quicksort.py:179)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 70
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 264
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 264
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $266return_value.1 = cast(value=R)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $266return_value.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 265
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A38B72EC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Fix SSA violator on var n
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: A = arg(0, name=A)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $2load_deref.0 = freevar(make_res: <function make_quicksort_impl.<locals>.make_res at 0x0000015A28C7CC18>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R = call $2load_deref.0(A, func=$2load_deref.0, args=[Var(A, quicksort.py:166)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $10load_global.3 = global(len: <built-in function len>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $14call_function.5 = call $10load_global.3(A, func=$10load_global.3, args=[Var(A, quicksort.py:166)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const16.6 = const(int, 2)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $18compare_op.7 = $14call_function.5 < $const16.6
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool20 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $20pred = call bool20($18compare_op.7, func=bool20, args=(Var($18compare_op.7, quicksort.py:168),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $20pred, 22, 26
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 22
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $24return_value.1 = cast(value=R)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $24return_value.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 26
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $26load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $28load_deref.1 = freevar(zero: 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $30load_deref.2 = freevar(zero: 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $32call_function.3 = call $26load_global.0($28load_deref.1, $30load_deref.2, func=$26load_global.0, args=[Var($28load_deref.1, quicksort.py:171), Var($30load_deref.2, quicksort.py:171)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $34build_list.4 = build_list(items=[Var($32call_function.3, quicksort.py:171)])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $36load_global.5 = global(MAX_STACK: 100)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: stack = $34build_list.4 * $36load_global.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $42load_global.7 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $44load_deref.8 = freevar(zero: 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $46load_global.9 = global(len: <built-in function len>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $50call_function.11 = call $46load_global.9(A, func=$46load_global.9, args=[Var(A, quicksort.py:166)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const52.12 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $54binary_subtract.13 = $50call_function.11 - $const52.12
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $56call_function.14 = call $42load_global.7($44load_deref.8, $54binary_subtract.13, func=$42load_global.7, args=[Var($44load_deref.8, quicksort.py:172), Var($54binary_subtract.13, quicksort.py:172)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const60.16 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: stack[0] = $56call_function.14
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG first assign: n
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: n = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 68
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 68
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 70
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 70
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const72.1 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $74compare_op.2 = n > $const72.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool76 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, quicksort.py:175),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $76pred, 80, 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 80
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const82.1 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $84inplace_subtract.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=n, rhs=$const82.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n = $84inplace_subtract.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: n.1 = $84inplace_subtract.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $92binary_subscr.5 = getitem(value=stack, index=n, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $94unpack_sequence.8 = exhaust_iter(value=$92binary_subscr.5, count=2)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $94unpack_sequence.6 = static_getitem(value=$94unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $94unpack_sequence.7 = static_getitem(value=$94unpack_sequence.8, index=1, index_var=None, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: low = $94unpack_sequence.6
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: high = $94unpack_sequence.7
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 100
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 100
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: high.2 = phi(incoming_values=[Var(high.3, quicksort.py:179), Var(high, quicksort.py:177)], incoming_blocks=[265, 100])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $106binary_subtract.2 = high.2 - low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $108load_global.3 = global(SMALL_QUICKSORT: 15)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $110compare_op.4 = $106binary_subtract.2 >= $108load_global.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $112pred = call bool112($110compare_op.4, func=bool112, args=(Var($110compare_op.4, quicksort.py:179),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $112pred, 114, 244
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $116load_global.1 = global(MAX_STACK: 100)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $118compare_op.2 = n < $116load_global.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool120 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $120pred = call bool120($118compare_op.2, func=bool120, args=(Var($118compare_op.2, quicksort.py:180),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $120pred, 126, 122
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 122
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $122load_global.0 = global(AssertionError: <class 'AssertionError'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: <static> raise <class 'AssertionError'>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $126load_deref.0 = freevar(partition: <function make_quicksort_impl.<locals>.partition at 0x0000015B2868B3A8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: i = call $126load_deref.0(A, R, low, high.2, func=$126load_deref.0, args=[Var(A, quicksort.py:166), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high.2, quicksort.py:179)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $144binary_subtract.8 = high.2 - i
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $150binary_subtract.11 = i - low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $152compare_op.12 = $144binary_subtract.8 > $150binary_subtract.11
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool154 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $154pred = call bool154($152compare_op.12, func=bool154, args=(Var($152compare_op.12, quicksort.py:183),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $154pred, 156, 200
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 156
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $160compare_op.2 = high.2 > i
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool162 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $162pred = call bool162($160compare_op.2, func=bool162, args=(Var($160compare_op.2, quicksort.py:185),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $162pred, 164, 190
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 164
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $164load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const168.2 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $170binary_add.3 = i + $const168.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $174call_function.5 = call $164load_global.0($170binary_add.3, high.2, func=$164load_global.0, args=[Var($170binary_add.3, quicksort.py:186), Var(high.2, quicksort.py:179)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: stack[n] = $174call_function.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const184.9 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $186inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const184.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n = $186inplace_add.10
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: n.2 = $186inplace_add.10
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 190
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 190
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const192.1 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: high.1 = i - $const192.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 265
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 200
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $204compare_op.2 = i > low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool206 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $206pred = call bool206($204compare_op.2, func=bool206, args=(Var($204compare_op.2, quicksort.py:190),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $206pred, 208, 234
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 208
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $208load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const214.3 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $216binary_subtract.4 = i - $const214.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $218call_function.5 = call $208load_global.0(low, $216binary_subtract.4, func=$208load_global.0, args=[Var(low, quicksort.py:177), Var($216binary_subtract.4, quicksort.py:191)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: stack[n] = $218call_function.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const228.9 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $230inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const228.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n = $230inplace_add.10
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: n.3 = $230inplace_add.10
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 234
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 234
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const236.1 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: low = i + $const236.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 265
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 244
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 246
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 246
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $246load_deref.0 = freevar(insertion_sort: <function make_quicksort_impl.<locals>.insertion_sort at 0x0000015B2868B708>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $256call_function.5 = call $246load_deref.0(A, R, low, high.2, func=$246load_deref.0, args=[Var(A, quicksort.py:166), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high.2, quicksort.py:179)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 70
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 264
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 264
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $266return_value.1 = cast(value=R)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $266return_value.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 265
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A38B77388>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: high.3 = phi(incoming_values=[Var(high.2, quicksort.py:179), Var(high.1, quicksort.py:188)], incoming_blocks=[234, 190])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x0000015B2868E788>],
             80: [<numba.core.ir.Assign object at 0x0000015B286A1808>],
             164: [<numba.core.ir.Assign object at 0x0000015A39C90D48>],
             208: [<numba.core.ir.Assign object at 0x0000015A39C92048>]})
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C90B08>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: A = arg(0, name=A)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $2load_deref.0 = freevar(make_res: <function make_quicksort_impl.<locals>.make_res at 0x0000015A28C7CC18>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R = call $2load_deref.0(A, func=$2load_deref.0, args=[Var(A, quicksort.py:166)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $10load_global.3 = global(len: <built-in function len>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $14call_function.5 = call $10load_global.3(A, func=$10load_global.3, args=[Var(A, quicksort.py:166)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const16.6 = const(int, 2)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $18compare_op.7 = $14call_function.5 < $const16.6
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool20 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $20pred = call bool20($18compare_op.7, func=bool20, args=(Var($18compare_op.7, quicksort.py:168),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $20pred, 22, 26
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 22
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C90B08>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $24return_value.1 = cast(value=R)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $24return_value.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 26
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C90B08>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $26load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $28load_deref.1 = freevar(zero: 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $30load_deref.2 = freevar(zero: 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $32call_function.3 = call $26load_global.0($28load_deref.1, $30load_deref.2, func=$26load_global.0, args=[Var($28load_deref.1, quicksort.py:171), Var($30load_deref.2, quicksort.py:171)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $34build_list.4 = build_list(items=[Var($32call_function.3, quicksort.py:171)])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $36load_global.5 = global(MAX_STACK: 100)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: stack = $34build_list.4 * $36load_global.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $42load_global.7 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $44load_deref.8 = freevar(zero: 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $46load_global.9 = global(len: <built-in function len>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $50call_function.11 = call $46load_global.9(A, func=$46load_global.9, args=[Var(A, quicksort.py:166)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const52.12 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $54binary_subtract.13 = $50call_function.11 - $const52.12
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $56call_function.14 = call $42load_global.7($44load_deref.8, $54binary_subtract.13, func=$42load_global.7, args=[Var($44load_deref.8, quicksort.py:172), Var($54binary_subtract.13, quicksort.py:172)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const60.16 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: stack[0] = $56call_function.14
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 68
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 68
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C90B08>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 70
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 70
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C90B08>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const72.1 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $74compare_op.2 = n > $const72.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='n' stmt=$74compare_op.2 = n > $const72.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 70
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG insert phi node n.4 = phi(incoming_values=[], incoming_blocks=[]) at 70
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 68
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 68
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 26 from label 68
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 26
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG incoming_def n = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 246
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 246
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 244 from label 246
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 244
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 244
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 102 from label 244
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG insert phi node n.5 = phi(incoming_values=[], incoming_blocks=[]) at 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 265
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 265
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG insert phi node n.6 = phi(incoming_values=[], incoming_blocks=[]) at 265
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 234
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 234
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG insert phi node n.7 = phi(incoming_values=[], incoming_blocks=[]) at 234
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 200
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 200
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 126 from label 200
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 114 from label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 102 from label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG incoming_def n.5 = phi(incoming_values=[], incoming_blocks=[])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 208
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG incoming_def n.3 = $230inplace_add.10
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG incoming_def n.7 = phi(incoming_values=[Var(n.5, quicksort.py:175), Var(n.3, quicksort.py:192)], incoming_blocks=[200, 208])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 190
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 190
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG insert phi node n.8 = phi(incoming_values=[], incoming_blocks=[]) at 190
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 164
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG incoming_def n.2 = $186inplace_add.10
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 156
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 156
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 126 from label 156
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 114 from label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 102 from label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG incoming_def n.5 = phi(incoming_values=[], incoming_blocks=[])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG incoming_def n.8 = phi(incoming_values=[Var(n.2, quicksort.py:187), Var(n.5, quicksort.py:175)], incoming_blocks=[164, 156])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG incoming_def n.6 = phi(incoming_values=[Var(n.7, quicksort.py:175), Var(n.8, quicksort.py:175)], incoming_blocks=[234, 190])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 100
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 100
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 80 from label 100
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 80
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG incoming_def n.1 = $84inplace_subtract.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG incoming_def n.5 = phi(incoming_values=[Var(n.6, quicksort.py:175), Var(n.1, quicksort.py:176)], incoming_blocks=[265, 100])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: $74compare_op.2 = n.4 > $const72.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool76 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, quicksort.py:175),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $76pred, 80, 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 80
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C90B08>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const82.1 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $84inplace_subtract.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=n, rhs=$const82.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='n' stmt=$84inplace_subtract.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=n, rhs=$const82.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 80
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 70 from label 80
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 70
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: $84inplace_subtract.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=n.4, rhs=$const82.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n.1 = $84inplace_subtract.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $92binary_subscr.5 = getitem(value=stack, index=n, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='n' stmt=$92binary_subscr.5 = getitem(value=stack, index=n, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: $92binary_subscr.5 = getitem(value=stack, index=n.1, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $94unpack_sequence.8 = exhaust_iter(value=$92binary_subscr.5, count=2)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $94unpack_sequence.6 = static_getitem(value=$94unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $94unpack_sequence.7 = static_getitem(value=$94unpack_sequence.8, index=1, index_var=None, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: low = $94unpack_sequence.6
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: high = $94unpack_sequence.7
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 100
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 100
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C90B08>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C90B08>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: high.2 = phi(incoming_values=[Var(high.3, quicksort.py:179), Var(high, quicksort.py:177)], incoming_blocks=[265, 100])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $106binary_subtract.2 = high.2 - low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $108load_global.3 = global(SMALL_QUICKSORT: 15)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $110compare_op.4 = $106binary_subtract.2 >= $108load_global.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $112pred = call bool112($110compare_op.4, func=bool112, args=(Var($110compare_op.4, quicksort.py:179),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $112pred, 114, 244
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C90B08>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $116load_global.1 = global(MAX_STACK: 100)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $118compare_op.2 = n < $116load_global.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='n' stmt=$118compare_op.2 = n < $116load_global.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 102 from label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: $118compare_op.2 = n.5 < $116load_global.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool120 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $120pred = call bool120($118compare_op.2, func=bool120, args=(Var($118compare_op.2, quicksort.py:180),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $120pred, 126, 122
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 122
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C90B08>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $122load_global.0 = global(AssertionError: <class 'AssertionError'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: <static> raise <class 'AssertionError'>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C90B08>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $126load_deref.0 = freevar(partition: <function make_quicksort_impl.<locals>.partition at 0x0000015B2868B3A8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: i = call $126load_deref.0(A, R, low, high.2, func=$126load_deref.0, args=[Var(A, quicksort.py:166), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high.2, quicksort.py:179)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $144binary_subtract.8 = high.2 - i
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $150binary_subtract.11 = i - low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $152compare_op.12 = $144binary_subtract.8 > $150binary_subtract.11
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool154 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $154pred = call bool154($152compare_op.12, func=bool154, args=(Var($152compare_op.12, quicksort.py:183),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $154pred, 156, 200
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 156
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C90B08>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $160compare_op.2 = high.2 > i
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool162 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $162pred = call bool162($160compare_op.2, func=bool162, args=(Var($160compare_op.2, quicksort.py:185),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $162pred, 164, 190
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 164
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C90B08>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $164load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const168.2 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $170binary_add.3 = i + $const168.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $174call_function.5 = call $164load_global.0($170binary_add.3, high.2, func=$164load_global.0, args=[Var($170binary_add.3, quicksort.py:186), Var(high.2, quicksort.py:179)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: stack[n] = $174call_function.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='n' stmt=stack[n] = $174call_function.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 164
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 156 from label 164
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 156
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 156
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 126 from label 156
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 114 from label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 102 from label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: stack[n.5] = $174call_function.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const184.9 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $186inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const184.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='n' stmt=$186inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const184.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 164
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 156 from label 164
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 156
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 156
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 126 from label 156
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 114 from label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 102 from label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: $186inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n.5, rhs=$const184.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n.2 = $186inplace_add.10
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 190
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 190
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C90B08>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const192.1 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: high.1 = i - $const192.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 265
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 200
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C90B08>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $204compare_op.2 = i > low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool206 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $206pred = call bool206($204compare_op.2, func=bool206, args=(Var($204compare_op.2, quicksort.py:190),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $206pred, 208, 234
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 208
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C90B08>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $208load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const214.3 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $216binary_subtract.4 = i - $const214.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $218call_function.5 = call $208load_global.0(low, $216binary_subtract.4, func=$208load_global.0, args=[Var(low, quicksort.py:177), Var($216binary_subtract.4, quicksort.py:191)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: stack[n] = $218call_function.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='n' stmt=stack[n] = $218call_function.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 208
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 200 from label 208
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 200
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 200
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 126 from label 200
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 114 from label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 102 from label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: stack[n.5] = $218call_function.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const228.9 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $230inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const228.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='n' stmt=$230inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const228.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 208
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 200 from label 208
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 200
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 200
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 126 from label 200
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 114 from label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 102 from label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: $230inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n.5, rhs=$const228.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n.3 = $230inplace_add.10
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 234
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 234
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C90B08>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const236.1 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: low = i + $const236.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 265
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 244
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C90B08>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 246
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 246
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C90B08>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $246load_deref.0 = freevar(insertion_sort: <function make_quicksort_impl.<locals>.insertion_sort at 0x0000015B2868B708>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $256call_function.5 = call $246load_deref.0(A, R, low, high.2, func=$246load_deref.0, args=[Var(A, quicksort.py:166), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high.2, quicksort.py:179)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 70
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C90B08>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 264
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 264
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C90B08>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $266return_value.1 = cast(value=R)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $266return_value.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 265
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C90B08>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: high.3 = phi(incoming_values=[Var(high.2, quicksort.py:179), Var(high.1, quicksort.py:188)], incoming_blocks=[234, 190])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Fix SSA violator on var low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39C7ACC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: A = arg(0, name=A)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $2load_deref.0 = freevar(make_res: <function make_quicksort_impl.<locals>.make_res at 0x0000015A28C7CC18>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R = call $2load_deref.0(A, func=$2load_deref.0, args=[Var(A, quicksort.py:166)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $10load_global.3 = global(len: <built-in function len>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $14call_function.5 = call $10load_global.3(A, func=$10load_global.3, args=[Var(A, quicksort.py:166)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const16.6 = const(int, 2)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $18compare_op.7 = $14call_function.5 < $const16.6
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool20 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $20pred = call bool20($18compare_op.7, func=bool20, args=(Var($18compare_op.7, quicksort.py:168),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $20pred, 22, 26
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 22
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39C7ACC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $24return_value.1 = cast(value=R)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $24return_value.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 26
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39C7ACC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $26load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $28load_deref.1 = freevar(zero: 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $30load_deref.2 = freevar(zero: 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $32call_function.3 = call $26load_global.0($28load_deref.1, $30load_deref.2, func=$26load_global.0, args=[Var($28load_deref.1, quicksort.py:171), Var($30load_deref.2, quicksort.py:171)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $34build_list.4 = build_list(items=[Var($32call_function.3, quicksort.py:171)])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $36load_global.5 = global(MAX_STACK: 100)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: stack = $34build_list.4 * $36load_global.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $42load_global.7 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $44load_deref.8 = freevar(zero: 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $46load_global.9 = global(len: <built-in function len>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $50call_function.11 = call $46load_global.9(A, func=$46load_global.9, args=[Var(A, quicksort.py:166)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const52.12 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $54binary_subtract.13 = $50call_function.11 - $const52.12
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $56call_function.14 = call $42load_global.7($44load_deref.8, $54binary_subtract.13, func=$42load_global.7, args=[Var($44load_deref.8, quicksort.py:172), Var($54binary_subtract.13, quicksort.py:172)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const60.16 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: stack[0] = $56call_function.14
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 68
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 68
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39C7ACC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 70
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 70
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39C7ACC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n.4 = phi(incoming_values=[Var(n, quicksort.py:173), Var(n.5, quicksort.py:175)], incoming_blocks=[68, 246])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const72.1 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $74compare_op.2 = n.4 > $const72.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool76 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, quicksort.py:175),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $76pred, 80, 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 80
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39C7ACC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const82.1 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $84inplace_subtract.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=n.4, rhs=$const82.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n.1 = $84inplace_subtract.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $92binary_subscr.5 = getitem(value=stack, index=n.1, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $94unpack_sequence.8 = exhaust_iter(value=$92binary_subscr.5, count=2)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $94unpack_sequence.6 = static_getitem(value=$94unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $94unpack_sequence.7 = static_getitem(value=$94unpack_sequence.8, index=1, index_var=None, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: low = $94unpack_sequence.6
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG first assign: low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: low = $94unpack_sequence.6
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: high = $94unpack_sequence.7
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 100
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 100
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39C7ACC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39C7ACC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n.5 = phi(incoming_values=[Var(n.6, quicksort.py:175), Var(n.1, quicksort.py:176)], incoming_blocks=[265, 100])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: high.2 = phi(incoming_values=[Var(high.3, quicksort.py:179), Var(high, quicksort.py:177)], incoming_blocks=[265, 100])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $106binary_subtract.2 = high.2 - low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $108load_global.3 = global(SMALL_QUICKSORT: 15)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $110compare_op.4 = $106binary_subtract.2 >= $108load_global.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $112pred = call bool112($110compare_op.4, func=bool112, args=(Var($110compare_op.4, quicksort.py:179),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $112pred, 114, 244
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39C7ACC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $116load_global.1 = global(MAX_STACK: 100)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $118compare_op.2 = n.5 < $116load_global.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool120 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $120pred = call bool120($118compare_op.2, func=bool120, args=(Var($118compare_op.2, quicksort.py:180),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $120pred, 126, 122
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 122
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39C7ACC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $122load_global.0 = global(AssertionError: <class 'AssertionError'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: <static> raise <class 'AssertionError'>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39C7ACC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $126load_deref.0 = freevar(partition: <function make_quicksort_impl.<locals>.partition at 0x0000015B2868B3A8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: i = call $126load_deref.0(A, R, low, high.2, func=$126load_deref.0, args=[Var(A, quicksort.py:166), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high.2, quicksort.py:179)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $144binary_subtract.8 = high.2 - i
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $150binary_subtract.11 = i - low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $152compare_op.12 = $144binary_subtract.8 > $150binary_subtract.11
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool154 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $154pred = call bool154($152compare_op.12, func=bool154, args=(Var($152compare_op.12, quicksort.py:183),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $154pred, 156, 200
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 156
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39C7ACC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $160compare_op.2 = high.2 > i
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool162 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $162pred = call bool162($160compare_op.2, func=bool162, args=(Var($160compare_op.2, quicksort.py:185),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $162pred, 164, 190
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 164
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39C7ACC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $164load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const168.2 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $170binary_add.3 = i + $const168.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $174call_function.5 = call $164load_global.0($170binary_add.3, high.2, func=$164load_global.0, args=[Var($170binary_add.3, quicksort.py:186), Var(high.2, quicksort.py:179)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: stack[n.5] = $174call_function.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const184.9 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $186inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n.5, rhs=$const184.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n.2 = $186inplace_add.10
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 190
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 190
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39C7ACC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n.8 = phi(incoming_values=[Var(n.2, quicksort.py:187), Var(n.5, quicksort.py:175)], incoming_blocks=[164, 156])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const192.1 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: high.1 = i - $const192.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 265
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 200
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39C7ACC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $204compare_op.2 = i > low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool206 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $206pred = call bool206($204compare_op.2, func=bool206, args=(Var($204compare_op.2, quicksort.py:190),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $206pred, 208, 234
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 208
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39C7ACC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $208load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const214.3 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $216binary_subtract.4 = i - $const214.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $218call_function.5 = call $208load_global.0(low, $216binary_subtract.4, func=$208load_global.0, args=[Var(low, quicksort.py:177), Var($216binary_subtract.4, quicksort.py:191)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: stack[n.5] = $218call_function.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const228.9 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $230inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n.5, rhs=$const228.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n.3 = $230inplace_add.10
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 234
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 234
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39C7ACC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n.7 = phi(incoming_values=[Var(n.5, quicksort.py:175), Var(n.3, quicksort.py:192)], incoming_blocks=[200, 208])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const236.1 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: low = i + $const236.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: low.1 = i + $const236.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 265
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 244
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39C7ACC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 246
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 246
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39C7ACC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $246load_deref.0 = freevar(insertion_sort: <function make_quicksort_impl.<locals>.insertion_sort at 0x0000015B2868B708>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $256call_function.5 = call $246load_deref.0(A, R, low, high.2, func=$246load_deref.0, args=[Var(A, quicksort.py:166), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high.2, quicksort.py:179)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 70
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39C7ACC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 264
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 264
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39C7ACC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $266return_value.1 = cast(value=R)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $266return_value.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 265
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39C7ACC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n.6 = phi(incoming_values=[Var(n.7, quicksort.py:175), Var(n.8, quicksort.py:175)], incoming_blocks=[234, 190])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: high.3 = phi(incoming_values=[Var(high.2, quicksort.py:179), Var(high.1, quicksort.py:188)], incoming_blocks=[234, 190])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {80: [<numba.core.ir.Assign object at 0x0000015A38BA0988>],
             234: [<numba.core.ir.Assign object at 0x0000015A39C90F48>]})
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C92F88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: A = arg(0, name=A)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $2load_deref.0 = freevar(make_res: <function make_quicksort_impl.<locals>.make_res at 0x0000015A28C7CC18>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R = call $2load_deref.0(A, func=$2load_deref.0, args=[Var(A, quicksort.py:166)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $10load_global.3 = global(len: <built-in function len>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $14call_function.5 = call $10load_global.3(A, func=$10load_global.3, args=[Var(A, quicksort.py:166)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const16.6 = const(int, 2)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $18compare_op.7 = $14call_function.5 < $const16.6
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool20 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $20pred = call bool20($18compare_op.7, func=bool20, args=(Var($18compare_op.7, quicksort.py:168),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $20pred, 22, 26
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 22
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C92F88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $24return_value.1 = cast(value=R)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $24return_value.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 26
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C92F88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $26load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $28load_deref.1 = freevar(zero: 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $30load_deref.2 = freevar(zero: 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $32call_function.3 = call $26load_global.0($28load_deref.1, $30load_deref.2, func=$26load_global.0, args=[Var($28load_deref.1, quicksort.py:171), Var($30load_deref.2, quicksort.py:171)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $34build_list.4 = build_list(items=[Var($32call_function.3, quicksort.py:171)])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $36load_global.5 = global(MAX_STACK: 100)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: stack = $34build_list.4 * $36load_global.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $42load_global.7 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $44load_deref.8 = freevar(zero: 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $46load_global.9 = global(len: <built-in function len>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $50call_function.11 = call $46load_global.9(A, func=$46load_global.9, args=[Var(A, quicksort.py:166)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const52.12 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $54binary_subtract.13 = $50call_function.11 - $const52.12
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $56call_function.14 = call $42load_global.7($44load_deref.8, $54binary_subtract.13, func=$42load_global.7, args=[Var($44load_deref.8, quicksort.py:172), Var($54binary_subtract.13, quicksort.py:172)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const60.16 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: stack[0] = $56call_function.14
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 68
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 68
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C92F88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 70
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 70
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C92F88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n.4 = phi(incoming_values=[Var(n, quicksort.py:173), Var(n.5, quicksort.py:175)], incoming_blocks=[68, 246])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const72.1 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $74compare_op.2 = n.4 > $const72.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool76 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, quicksort.py:175),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $76pred, 80, 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 80
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C92F88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const82.1 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $84inplace_subtract.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=n.4, rhs=$const82.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n.1 = $84inplace_subtract.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $92binary_subscr.5 = getitem(value=stack, index=n.1, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $94unpack_sequence.8 = exhaust_iter(value=$92binary_subscr.5, count=2)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $94unpack_sequence.6 = static_getitem(value=$94unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $94unpack_sequence.7 = static_getitem(value=$94unpack_sequence.8, index=1, index_var=None, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: low = $94unpack_sequence.6
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: high = $94unpack_sequence.7
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 100
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 100
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C92F88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C92F88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n.5 = phi(incoming_values=[Var(n.6, quicksort.py:175), Var(n.1, quicksort.py:176)], incoming_blocks=[265, 100])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: high.2 = phi(incoming_values=[Var(high.3, quicksort.py:179), Var(high, quicksort.py:177)], incoming_blocks=[265, 100])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $106binary_subtract.2 = high.2 - low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='low' stmt=$106binary_subtract.2 = high.2 - low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG insert phi node low.2 = phi(incoming_values=[], incoming_blocks=[]) at 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 265
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 265
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG insert phi node low.3 = phi(incoming_values=[], incoming_blocks=[]) at 265
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 234
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG incoming_def low.1 = i + $const236.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 190
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 190
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 156 from label 190
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 156
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 156
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 126 from label 156
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 114 from label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 102 from label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG incoming_def low.2 = phi(incoming_values=[], incoming_blocks=[])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG incoming_def low.3 = phi(incoming_values=[Var(low.1, quicksort.py:193), Var(low.2, quicksort.py:179)], incoming_blocks=[234, 190])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 100
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 100
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 80 from label 100
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 80
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG incoming_def low = $94unpack_sequence.6
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: $106binary_subtract.2 = high.2 - low.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $108load_global.3 = global(SMALL_QUICKSORT: 15)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $110compare_op.4 = $106binary_subtract.2 >= $108load_global.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $112pred = call bool112($110compare_op.4, func=bool112, args=(Var($110compare_op.4, quicksort.py:179),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $112pred, 114, 244
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C92F88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $116load_global.1 = global(MAX_STACK: 100)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $118compare_op.2 = n.5 < $116load_global.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool120 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $120pred = call bool120($118compare_op.2, func=bool120, args=(Var($118compare_op.2, quicksort.py:180),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $120pred, 126, 122
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 122
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C92F88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $122load_global.0 = global(AssertionError: <class 'AssertionError'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: <static> raise <class 'AssertionError'>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C92F88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $126load_deref.0 = freevar(partition: <function make_quicksort_impl.<locals>.partition at 0x0000015B2868B3A8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: i = call $126load_deref.0(A, R, low, high.2, func=$126load_deref.0, args=[Var(A, quicksort.py:166), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high.2, quicksort.py:179)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='low' stmt=i = call $126load_deref.0(A, R, low, high.2, func=$126load_deref.0, args=[Var(A, quicksort.py:166), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high.2, quicksort.py:179)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 114 from label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 102 from label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: i = call $126load_deref.0(A, R, low.2, high.2, func=$126load_deref.0, args=[Var(A, quicksort.py:166), Var(R, quicksort.py:166), Var(low.2, quicksort.py:179), Var(high.2, quicksort.py:179)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $144binary_subtract.8 = high.2 - i
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $150binary_subtract.11 = i - low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='low' stmt=$150binary_subtract.11 = i - low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 114 from label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 102 from label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: $150binary_subtract.11 = i - low.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $152compare_op.12 = $144binary_subtract.8 > $150binary_subtract.11
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool154 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $154pred = call bool154($152compare_op.12, func=bool154, args=(Var($152compare_op.12, quicksort.py:183),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $154pred, 156, 200
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 156
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C92F88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $160compare_op.2 = high.2 > i
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool162 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $162pred = call bool162($160compare_op.2, func=bool162, args=(Var($160compare_op.2, quicksort.py:185),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $162pred, 164, 190
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 164
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C92F88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $164load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const168.2 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $170binary_add.3 = i + $const168.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $174call_function.5 = call $164load_global.0($170binary_add.3, high.2, func=$164load_global.0, args=[Var($170binary_add.3, quicksort.py:186), Var(high.2, quicksort.py:179)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: stack[n.5] = $174call_function.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const184.9 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $186inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n.5, rhs=$const184.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n.2 = $186inplace_add.10
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 190
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 190
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C92F88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n.8 = phi(incoming_values=[Var(n.2, quicksort.py:187), Var(n.5, quicksort.py:175)], incoming_blocks=[164, 156])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const192.1 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: high.1 = i - $const192.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 265
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 200
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C92F88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $204compare_op.2 = i > low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='low' stmt=$204compare_op.2 = i > low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 200
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 126 from label 200
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 114 from label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 102 from label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: $204compare_op.2 = i > low.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool206 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $206pred = call bool206($204compare_op.2, func=bool206, args=(Var($204compare_op.2, quicksort.py:190),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $206pred, 208, 234
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 208
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C92F88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $208load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const214.3 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $216binary_subtract.4 = i - $const214.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $218call_function.5 = call $208load_global.0(low, $216binary_subtract.4, func=$208load_global.0, args=[Var(low, quicksort.py:177), Var($216binary_subtract.4, quicksort.py:191)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='low' stmt=$218call_function.5 = call $208load_global.0(low, $216binary_subtract.4, func=$208load_global.0, args=[Var(low, quicksort.py:177), Var($216binary_subtract.4, quicksort.py:191)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 208
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 200 from label 208
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 200
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 200
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 126 from label 200
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 114 from label 126
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 102 from label 114
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: $218call_function.5 = call $208load_global.0(low.2, $216binary_subtract.4, func=$208load_global.0, args=[Var(low.2, quicksort.py:179), Var($216binary_subtract.4, quicksort.py:191)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: stack[n.5] = $218call_function.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const228.9 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $230inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n.5, rhs=$const228.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n.3 = $230inplace_add.10
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 234
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 234
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C92F88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n.7 = phi(incoming_values=[Var(n.5, quicksort.py:175), Var(n.3, quicksort.py:192)], incoming_blocks=[200, 208])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const236.1 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: low.1 = i + $const236.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 265
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 244
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C92F88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 246
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 246
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C92F88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $246load_deref.0 = freevar(insertion_sort: <function make_quicksort_impl.<locals>.insertion_sort at 0x0000015B2868B708>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $256call_function.5 = call $246load_deref.0(A, R, low, high.2, func=$246load_deref.0, args=[Var(A, quicksort.py:166), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high.2, quicksort.py:179)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='low' stmt=$256call_function.5 = call $246load_deref.0(A, R, low, high.2, func=$246load_deref.0, args=[Var(A, quicksort.py:166), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high.2, quicksort.py:179)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 246
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 244 from label 246
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 244
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 244
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 102 from label 244
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 102
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: $256call_function.5 = call $246load_deref.0(A, R, low.2, high.2, func=$246load_deref.0, args=[Var(A, quicksort.py:166), Var(R, quicksort.py:166), Var(low.2, quicksort.py:179), Var(high.2, quicksort.py:179)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 70
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C92F88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 264
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 264
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C92F88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $266return_value.1 = cast(value=R)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $266return_value.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 265
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39C92F88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: n.6 = phi(incoming_values=[Var(n.7, quicksort.py:175), Var(n.8, quicksort.py:175)], incoming_blocks=[234, 190])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: high.3 = phi(incoming_values=[Var(high.2, quicksort.py:179), Var(high.1, quicksort.py:188)], incoming_blocks=[234, 190])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 102
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=43)
           2	LOAD_GLOBAL(arg=0, lineno=43)
           4	LOAD_METHOD(arg=1, lineno=43)
           6	LOAD_FAST(arg=0, lineno=43)
           8	LOAD_ATTR(arg=2, lineno=43)
          10	CALL_METHOD(arg=1, lineno=43)
          12	RETURN_VALUE(arg=None, lineno=43)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=43)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=43)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=43)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$2load_global.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=43)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$4load_method.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=8, inst=LOAD_ATTR(arg=2, lineno=43)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$4load_method.1', '$A6.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=10, inst=CALL_METHOD(arg=1, lineno=43)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$4load_method.1', '$8load_attr.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=43)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$10call_method.4']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG -------------------------Prune PHIs-------------------------
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG defmap: {}
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG keep phismap: {}
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG new_out: defaultdict(<class 'dict'>, {})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG ----------------------DONE Prune PHIs-----------------------
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$A6.2'}), (8, {'item': '$A6.2', 'res': '$8load_attr.3'}), (10, {'func': '$4load_method.1', 'args': ['$8load_attr.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:41 interpreter.py DEBUG label 0:
    A = arg(0, name=A)                       ['A']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=arange) ['$2load_global.0', '$4load_method.1']
    $8load_attr.3 = getattr(value=A, attr=size) ['$8load_attr.3', 'A']
    $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, quicksort.py:43)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_method.4', '$4load_method.1', '$8load_attr.3']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A38B8B488>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: A = arg(0, name=A)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=arange)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $8load_attr.3 = getattr(value=A, attr=size)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, quicksort.py:43)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $12return_value.5 = cast(value=$10call_method.4)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $12return_value.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x0000015A39C75948>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x0000015A39C92A88>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000015A39C96088>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x0000015A38B72848>],
             '$8load_attr.3': [<numba.core.ir.Assign object at 0x0000015A39C75D48>],
             'A': [<numba.core.ir.Assign object at 0x0000015A39C961C8>]})
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG SSA violators set()
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4516)
           2	LOAD_DEREF(arg=0, lineno=4516)
           4	LOAD_CONST(arg=0, lineno=4516)
           6	COMPARE_OP(arg=9, lineno=4516)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=4516)
          10	LOAD_DEREF(arg=0, lineno=4516)
          12	JUMP_FORWARD(arg=2, lineno=4516)
>         14	LOAD_FAST(arg=0, lineno=4516)
>         16	STORE_FAST(arg=4, lineno=4516)
          18	LOAD_DEREF(arg=2, lineno=4517)
          20	LOAD_CONST(arg=0, lineno=4517)
          22	COMPARE_OP(arg=9, lineno=4517)
          24	POP_JUMP_IF_FALSE(arg=30, lineno=4517)
          26	LOAD_DEREF(arg=2, lineno=4517)
          28	JUMP_FORWARD(arg=2, lineno=4517)
>         30	LOAD_FAST(arg=1, lineno=4517)
>         32	STORE_FAST(arg=5, lineno=4517)
          34	LOAD_DEREF(arg=1, lineno=4518)
          36	LOAD_CONST(arg=0, lineno=4518)
          38	COMPARE_OP(arg=9, lineno=4518)
          40	POP_JUMP_IF_FALSE(arg=46, lineno=4518)
          42	LOAD_DEREF(arg=1, lineno=4518)
          44	JUMP_FORWARD(arg=2, lineno=4518)
>         46	LOAD_FAST(arg=2, lineno=4518)
>         48	STORE_FAST(arg=6, lineno=4518)
          50	LOAD_FAST(arg=6, lineno=4520)
          52	LOAD_CONST(arg=0, lineno=4520)
          54	COMPARE_OP(arg=9, lineno=4520)
          56	POP_JUMP_IF_FALSE(arg=62, lineno=4520)
          58	LOAD_FAST(arg=6, lineno=4520)
          60	JUMP_FORWARD(arg=2, lineno=4520)
>         62	LOAD_CONST(arg=1, lineno=4520)
>         64	STORE_FAST(arg=7, lineno=4520)
          66	LOAD_FAST(arg=5, lineno=4521)
          68	LOAD_CONST(arg=0, lineno=4521)
          70	COMPARE_OP(arg=8, lineno=4521)
          72	POP_JUMP_IF_FALSE(arg=86, lineno=4521)
          74	LOAD_CONST(arg=2, lineno=4522)
          76	LOAD_FAST(arg=4, lineno=4522)
          78	ROT_TWO(arg=None, lineno=4522)
          80	STORE_FAST(arg=8, lineno=4522)
          82	STORE_FAST(arg=9, lineno=4522)
          84	JUMP_FORWARD(arg=10, lineno=4522)
>         86	LOAD_FAST(arg=4, lineno=4524)
          88	LOAD_FAST(arg=5, lineno=4524)
          90	ROT_TWO(arg=None, lineno=4524)
          92	STORE_FAST(arg=8, lineno=4524)
          94	STORE_FAST(arg=9, lineno=4524)
>         96	LOAD_FAST(arg=7, lineno=4526)
          98	LOAD_CONST(arg=2, lineno=4526)
         100	COMPARE_OP(arg=2, lineno=4526)
         102	POP_JUMP_IF_FALSE(arg=112, lineno=4526)
         104	LOAD_GLOBAL(arg=0, lineno=4527)
         106	LOAD_CONST(arg=3, lineno=4527)
         108	CALL_FUNCTION(arg=1, lineno=4527)
         110	RAISE_VARARGS(arg=1, lineno=4527)
>        112	LOAD_FAST(arg=9, lineno=4529)
         114	LOAD_FAST(arg=8, lineno=4529)
         116	BINARY_SUBTRACT(arg=None, lineno=4529)
         118	LOAD_FAST(arg=7, lineno=4529)
         120	BINARY_TRUE_DIVIDE(arg=None, lineno=4529)
         122	STORE_FAST(arg=10, lineno=4529)
         124	LOAD_GLOBAL(arg=1, lineno=4530)
         126	LOAD_GLOBAL(arg=2, lineno=4530)
         128	LOAD_METHOD(arg=3, lineno=4530)
         130	LOAD_FAST(arg=10, lineno=4530)
         132	LOAD_ATTR(arg=4, lineno=4530)
         134	CALL_METHOD(arg=1, lineno=4530)
         136	CALL_FUNCTION(arg=1, lineno=4530)
         138	STORE_FAST(arg=11, lineno=4530)
         140	LOAD_DEREF(arg=4, lineno=4533)
         142	LOAD_CONST(arg=4, lineno=4533)
         144	COMPARE_OP(arg=8, lineno=4533)
         146	POP_JUMP_IF_FALSE(arg=182, lineno=4533)
         148	LOAD_GLOBAL(arg=1, lineno=4534)
         150	LOAD_GLOBAL(arg=2, lineno=4534)
         152	LOAD_METHOD(arg=3, lineno=4534)
         154	LOAD_FAST(arg=10, lineno=4534)
         156	LOAD_ATTR(arg=5, lineno=4534)
         158	CALL_METHOD(arg=1, lineno=4534)
         160	CALL_FUNCTION(arg=1, lineno=4534)
         162	STORE_FAST(arg=12, lineno=4534)
         164	LOAD_GLOBAL(arg=6, lineno=4535)
         166	LOAD_GLOBAL(arg=7, lineno=4535)
         168	LOAD_FAST(arg=12, lineno=4535)
         170	LOAD_FAST(arg=11, lineno=4535)
         172	CALL_FUNCTION(arg=2, lineno=4535)
         174	LOAD_CONST(arg=2, lineno=4535)
         176	CALL_FUNCTION(arg=2, lineno=4535)
         178	STORE_FAST(arg=13, lineno=4535)
         180	JUMP_FORWARD(arg=10, lineno=4535)
>        182	LOAD_GLOBAL(arg=6, lineno=4537)
         184	LOAD_FAST(arg=11, lineno=4537)
         186	LOAD_CONST(arg=2, lineno=4537)
         188	CALL_FUNCTION(arg=2, lineno=4537)
         190	STORE_FAST(arg=13, lineno=4537)
>        192	LOAD_GLOBAL(arg=8, lineno=4538)
         194	LOAD_METHOD(arg=9, lineno=4538)
         196	LOAD_FAST(arg=13, lineno=4538)
         198	LOAD_DEREF(arg=3, lineno=4538)
         200	CALL_METHOD(arg=2, lineno=4538)
         202	STORE_FAST(arg=14, lineno=4538)
         204	LOAD_FAST(arg=8, lineno=4539)
         206	STORE_FAST(arg=15, lineno=4539)
         208	SETUP_LOOP(arg=32, lineno=4540)
         210	LOAD_GLOBAL(arg=10, lineno=4540)
         212	LOAD_FAST(arg=13, lineno=4540)
         214	CALL_FUNCTION(arg=1, lineno=4540)
         216	GET_ITER(arg=None, lineno=4540)
>        218	FOR_ITER(arg=20, lineno=4540)
         220	STORE_FAST(arg=16, lineno=4540)
         222	LOAD_FAST(arg=15, lineno=4541)
         224	LOAD_FAST(arg=16, lineno=4541)
         226	LOAD_FAST(arg=7, lineno=4541)
         228	BINARY_MULTIPLY(arg=None, lineno=4541)
         230	BINARY_ADD(arg=None, lineno=4541)
         232	LOAD_FAST(arg=14, lineno=4541)
         234	LOAD_FAST(arg=16, lineno=4541)
         236	STORE_SUBSCR(arg=None, lineno=4541)
         238	JUMP_ABSOLUTE(arg=218, lineno=4541)
>        240	POP_BLOCK(arg=None, lineno=4541)
>        242	LOAD_FAST(arg=14, lineno=4542)
         244	RETURN_VALUE(arg=None, lineno=4542)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4516)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=4516)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=4, inst=LOAD_CONST(arg=0, lineno=4516)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$2load_deref.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=6, inst=COMPARE_OP(arg=9, lineno=4516)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$2load_deref.0', '$const4.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=4516)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$6compare_op.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=10, inst=LOAD_DEREF(arg=0, lineno=4516)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=12, inst=JUMP_FORWARD(arg=2, lineno=4516)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$10load_deref.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=16, stack=('$10load_deref.0',), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=14 nstack_initial=0), State(pc_initial=16 nstack_initial=1)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=4516)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=16, stack=('$start14.0',), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=16 nstack_initial=1), State(pc_initial=16 nstack_initial=1)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: ['$phi16.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=16, inst=STORE_FAST(arg=4, lineno=4516)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi16.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=18, inst=LOAD_DEREF(arg=2, lineno=4517)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=20, inst=LOAD_CONST(arg=0, lineno=4517)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$18load_deref.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=22, inst=COMPARE_OP(arg=9, lineno=4517)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$18load_deref.1', '$const20.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=30, lineno=4517)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$22compare_op.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=30, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=16 nstack_initial=1), State(pc_initial=26 nstack_initial=0), State(pc_initial=30 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=30 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=26, inst=LOAD_DEREF(arg=2, lineno=4517)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=28, inst=JUMP_FORWARD(arg=2, lineno=4517)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$26load_deref.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=32, stack=('$26load_deref.0',), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=32 nstack_initial=1)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=4517)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=32, stack=('$stop30.0',), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=32 nstack_initial=1), State(pc_initial=32 nstack_initial=1)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: ['$phi32.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=32, inst=STORE_FAST(arg=5, lineno=4517)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi32.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=34, inst=LOAD_DEREF(arg=1, lineno=4518)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=36, inst=LOAD_CONST(arg=0, lineno=4518)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$34load_deref.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=38, inst=COMPARE_OP(arg=9, lineno=4518)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$34load_deref.1', '$const36.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=40, inst=POP_JUMP_IF_FALSE(arg=46, lineno=4518)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$38compare_op.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=42, stack=(), blockstack=(), npush=0), Edge(pc=46, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=32 nstack_initial=1), State(pc_initial=42 nstack_initial=0), State(pc_initial=46 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=46 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=42, inst=LOAD_DEREF(arg=1, lineno=4518)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=44, inst=JUMP_FORWARD(arg=2, lineno=4518)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$42load_deref.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=48, stack=('$42load_deref.0',), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=46 nstack_initial=0), State(pc_initial=48 nstack_initial=1)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=4518)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=48, stack=('$step46.0',), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=48 nstack_initial=1), State(pc_initial=48 nstack_initial=1)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: ['$phi48.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=48, inst=STORE_FAST(arg=6, lineno=4518)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi48.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=50, inst=LOAD_FAST(arg=6, lineno=4520)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=52, inst=LOAD_CONST(arg=0, lineno=4520)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$lit_step50.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=54, inst=COMPARE_OP(arg=9, lineno=4520)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$lit_step50.1', '$const52.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=56, inst=POP_JUMP_IF_FALSE(arg=62, lineno=4520)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$54compare_op.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=48 nstack_initial=1), State(pc_initial=58 nstack_initial=0), State(pc_initial=62 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=62 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=58, inst=LOAD_FAST(arg=6, lineno=4520)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=60, inst=JUMP_FORWARD(arg=2, lineno=4520)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$lit_step58.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=64, stack=('$lit_step58.0',), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=64 nstack_initial=1)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=62, inst=LOAD_CONST(arg=1, lineno=4520)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=64, stack=('$const62.0',), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=64 nstack_initial=1), State(pc_initial=64 nstack_initial=1)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: ['$phi64.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=64, inst=STORE_FAST(arg=7, lineno=4520)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi64.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=66, inst=LOAD_FAST(arg=5, lineno=4521)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=68, inst=LOAD_CONST(arg=0, lineno=4521)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$lit_stop66.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=70, inst=COMPARE_OP(arg=8, lineno=4521)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$lit_stop66.1', '$const68.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=72, inst=POP_JUMP_IF_FALSE(arg=86, lineno=4521)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$70compare_op.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0), Edge(pc=86, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=64 nstack_initial=1), State(pc_initial=74 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=74, inst=LOAD_CONST(arg=2, lineno=4522)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=76, inst=LOAD_FAST(arg=4, lineno=4522)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$const74.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=78, inst=ROT_TWO(arg=None, lineno=4522)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$const74.0', '$lit_start76.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=80, inst=STORE_FAST(arg=8, lineno=4522)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$lit_start76.1', '$const74.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=82, inst=STORE_FAST(arg=9, lineno=4522)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$lit_start76.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=84, inst=JUMP_FORWARD(arg=10, lineno=4522)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=86 nstack_initial=0), State(pc_initial=96 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=86, inst=LOAD_FAST(arg=4, lineno=4524)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=88, inst=LOAD_FAST(arg=5, lineno=4524)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$lit_start86.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=90, inst=ROT_TWO(arg=None, lineno=4524)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$lit_start86.0', '$lit_stop88.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=92, inst=STORE_FAST(arg=8, lineno=4524)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$lit_stop88.1', '$lit_start86.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=94, inst=STORE_FAST(arg=9, lineno=4524)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$lit_stop88.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=96 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=96, inst=LOAD_FAST(arg=7, lineno=4526)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=98, inst=LOAD_CONST(arg=2, lineno=4526)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$_step96.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=4526)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$_step96.0', '$const98.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=112, lineno=4526)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$100compare_op.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=112, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=112 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=112 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=104, inst=LOAD_GLOBAL(arg=0, lineno=4527)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=106, inst=LOAD_CONST(arg=3, lineno=4527)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$104load_global.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=108, inst=CALL_FUNCTION(arg=1, lineno=4527)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$104load_global.0', '$const106.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=110, inst=RAISE_VARARGS(arg=1, lineno=4527)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$108call_function.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=112 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=112, inst=LOAD_FAST(arg=9, lineno=4529)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=114, inst=LOAD_FAST(arg=8, lineno=4529)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$_stop112.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=116, inst=BINARY_SUBTRACT(arg=None, lineno=4529)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$_stop112.0', '$_start114.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=118, inst=LOAD_FAST(arg=7, lineno=4529)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$116binary_subtract.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=120, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=4529)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$116binary_subtract.2', '$_step118.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=122, inst=STORE_FAST(arg=10, lineno=4529)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$120binary_true_divide.4']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=124, inst=LOAD_GLOBAL(arg=1, lineno=4530)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=126, inst=LOAD_GLOBAL(arg=2, lineno=4530)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$124load_global.5']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=128, inst=LOAD_METHOD(arg=3, lineno=4530)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$124load_global.5', '$126load_global.6']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=130, inst=LOAD_FAST(arg=10, lineno=4530)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$124load_global.5', '$128load_method.7']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=132, inst=LOAD_ATTR(arg=4, lineno=4530)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$124load_global.5', '$128load_method.7', '$nitems_c130.8']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=134, inst=CALL_METHOD(arg=1, lineno=4530)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$124load_global.5', '$128load_method.7', '$132load_attr.9']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=136, inst=CALL_FUNCTION(arg=1, lineno=4530)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$124load_global.5', '$134call_method.10']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=138, inst=STORE_FAST(arg=11, lineno=4530)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$136call_function.11']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=140, inst=LOAD_DEREF(arg=4, lineno=4533)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=142, inst=LOAD_CONST(arg=4, lineno=4533)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$140load_deref.12']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=144, inst=COMPARE_OP(arg=8, lineno=4533)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$140load_deref.12', '$const142.13']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=146, inst=POP_JUMP_IF_FALSE(arg=182, lineno=4533)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$144compare_op.14']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=148, stack=(), blockstack=(), npush=0), Edge(pc=182, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=148 nstack_initial=0), State(pc_initial=182 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=148, inst=LOAD_GLOBAL(arg=1, lineno=4534)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=150, inst=LOAD_GLOBAL(arg=2, lineno=4534)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$148load_global.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=152, inst=LOAD_METHOD(arg=3, lineno=4534)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$148load_global.0', '$150load_global.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=154, inst=LOAD_FAST(arg=10, lineno=4534)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$148load_global.0', '$152load_method.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=156, inst=LOAD_ATTR(arg=5, lineno=4534)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$148load_global.0', '$152load_method.2', '$nitems_c154.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=158, inst=CALL_METHOD(arg=1, lineno=4534)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$148load_global.0', '$152load_method.2', '$156load_attr.4']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=160, inst=CALL_FUNCTION(arg=1, lineno=4534)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$148load_global.0', '$158call_method.5']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=162, inst=STORE_FAST(arg=12, lineno=4534)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$160call_function.6']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=164, inst=LOAD_GLOBAL(arg=6, lineno=4535)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=166, inst=LOAD_GLOBAL(arg=7, lineno=4535)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$164load_global.7']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=168, inst=LOAD_FAST(arg=12, lineno=4535)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$164load_global.7', '$166load_global.8']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=170, inst=LOAD_FAST(arg=11, lineno=4535)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$164load_global.7', '$166load_global.8', '$nitems_i168.9']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=172, inst=CALL_FUNCTION(arg=2, lineno=4535)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$164load_global.7', '$166load_global.8', '$nitems_i168.9', '$nitems_r170.10']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=174, inst=LOAD_CONST(arg=2, lineno=4535)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$164load_global.7', '$172call_function.11']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=176, inst=CALL_FUNCTION(arg=2, lineno=4535)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$164load_global.7', '$172call_function.11', '$const174.12']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=178, inst=STORE_FAST(arg=13, lineno=4535)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$176call_function.13']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=180, inst=JUMP_FORWARD(arg=10, lineno=4535)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=192, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=182 nstack_initial=0), State(pc_initial=192 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=182, inst=LOAD_GLOBAL(arg=6, lineno=4537)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=184, inst=LOAD_FAST(arg=11, lineno=4537)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$182load_global.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=186, inst=LOAD_CONST(arg=2, lineno=4537)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$182load_global.0', '$nitems_r184.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=188, inst=CALL_FUNCTION(arg=2, lineno=4537)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$182load_global.0', '$nitems_r184.1', '$const186.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=190, inst=STORE_FAST(arg=13, lineno=4537)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$188call_function.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=192, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=192 nstack_initial=0), State(pc_initial=192 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=192, inst=LOAD_GLOBAL(arg=8, lineno=4538)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=194, inst=LOAD_METHOD(arg=9, lineno=4538)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$192load_global.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=196, inst=LOAD_FAST(arg=13, lineno=4538)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$194load_method.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=198, inst=LOAD_DEREF(arg=3, lineno=4538)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$194load_method.1', '$nitems196.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=200, inst=CALL_METHOD(arg=2, lineno=4538)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$194load_method.1', '$nitems196.2', '$198load_deref.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=202, inst=STORE_FAST(arg=14, lineno=4538)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$200call_method.4']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=204, inst=LOAD_FAST(arg=8, lineno=4539)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=206, inst=STORE_FAST(arg=15, lineno=4539)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$_start204.5']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=208, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=192 nstack_initial=0), State(pc_initial=208 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=208 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=208, inst=SETUP_LOOP(arg=32, lineno=4540)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=210, inst=LOAD_GLOBAL(arg=10, lineno=4540)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=212, inst=LOAD_FAST(arg=13, lineno=4540)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$210load_global.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=214, inst=CALL_FUNCTION(arg=1, lineno=4540)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$210load_global.0', '$nitems212.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=216, inst=GET_ITER(arg=None, lineno=4540)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$214call_function.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=218, stack=('$216get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 242, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=218 nstack_initial=1)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: ['$phi218.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=218, inst=FOR_ITER(arg=20, lineno=4540)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi218.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=240, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 242, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=220, stack=('$phi218.0', '$218for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 242, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=240 nstack_initial=0), State(pc_initial=220 nstack_initial=2)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=240, inst=POP_BLOCK(arg=None, lineno=4541)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=242, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=220 nstack_initial=2), State(pc_initial=242 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: ['$phi220.0', '$phi220.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=220, inst=STORE_FAST(arg=16, lineno=4540)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi220.0', '$phi220.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=222, inst=LOAD_FAST(arg=15, lineno=4541)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi220.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=224, inst=LOAD_FAST(arg=16, lineno=4541)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi220.0', '$val222.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=226, inst=LOAD_FAST(arg=7, lineno=4541)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi220.0', '$val222.2', '$i224.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=228, inst=BINARY_MULTIPLY(arg=None, lineno=4541)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi220.0', '$val222.2', '$i224.3', '$_step226.4']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=230, inst=BINARY_ADD(arg=None, lineno=4541)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi220.0', '$val222.2', '$228binary_multiply.5']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=232, inst=LOAD_FAST(arg=14, lineno=4541)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi220.0', '$230binary_add.6']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=234, inst=LOAD_FAST(arg=16, lineno=4541)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi220.0', '$230binary_add.6', '$arr232.7']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=236, inst=STORE_SUBSCR(arg=None, lineno=4541)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi220.0', '$230binary_add.6', '$arr232.7', '$i234.8']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=238, inst=JUMP_ABSOLUTE(arg=218, lineno=4541)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi220.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=218, stack=('$phi220.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 242, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=242 nstack_initial=0), State(pc_initial=218 nstack_initial=1)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=242, inst=LOAD_FAST(arg=14, lineno=4542)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=244, inst=RETURN_VALUE(arg=None, lineno=4542)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$arr242.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=218 nstack_initial=1)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG -------------------------Prune PHIs-------------------------
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=1): {'$phi16.0'},
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=1): {'$phi32.0'},
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=46 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=1): {'$phi48.0'},
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=1): {'$phi64.0'},
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=86 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=112 nstack_initial=0): set(),
             State(pc_initial=148 nstack_initial=0): set(),
             State(pc_initial=182 nstack_initial=0): set(),
             State(pc_initial=192 nstack_initial=0): set(),
             State(pc_initial=208 nstack_initial=0): set(),
             State(pc_initial=218 nstack_initial=1): {'$phi218.0'},
             State(pc_initial=220 nstack_initial=2): {'$phi220.1'},
             State(pc_initial=240 nstack_initial=0): set(),
             State(pc_initial=242 nstack_initial=0): set()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG defmap: {'$phi16.0': State(pc_initial=10 nstack_initial=0),
 '$phi218.0': State(pc_initial=208 nstack_initial=0),
 '$phi220.1': State(pc_initial=218 nstack_initial=1),
 '$phi32.0': State(pc_initial=26 nstack_initial=0),
 '$phi48.0': State(pc_initial=42 nstack_initial=0),
 '$phi64.0': State(pc_initial=58 nstack_initial=0)}
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$10load_deref.0',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$start14.0',
                           State(pc_initial=14 nstack_initial=0))},
             '$phi218.0': {('$216get_iter.3',
                            State(pc_initial=208 nstack_initial=0)),
                           ('$phi220.0',
                            State(pc_initial=220 nstack_initial=2))},
             '$phi220.0': {('$phi218.0',
                            State(pc_initial=218 nstack_initial=1))},
             '$phi220.1': {('$218for_iter.2',
                            State(pc_initial=218 nstack_initial=1))},
             '$phi32.0': {('$26load_deref.0',
                           State(pc_initial=26 nstack_initial=0)),
                          ('$stop30.0', State(pc_initial=30 nstack_initial=0))},
             '$phi48.0': {('$42load_deref.0',
                           State(pc_initial=42 nstack_initial=0)),
                          ('$step46.0', State(pc_initial=46 nstack_initial=0))},
             '$phi64.0': {('$const62.0', State(pc_initial=62 nstack_initial=0)),
                          ('$lit_step58.0',
                           State(pc_initial=58 nstack_initial=0))}})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$10load_deref.0',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$start14.0',
                           State(pc_initial=14 nstack_initial=0))},
             '$phi218.0': {('$216get_iter.3',
                            State(pc_initial=208 nstack_initial=0)),
                           ('$phi218.0',
                            State(pc_initial=218 nstack_initial=1))},
             '$phi220.0': {('$216get_iter.3',
                            State(pc_initial=208 nstack_initial=0))},
             '$phi220.1': {('$218for_iter.2',
                            State(pc_initial=218 nstack_initial=1))},
             '$phi32.0': {('$26load_deref.0',
                           State(pc_initial=26 nstack_initial=0)),
                          ('$stop30.0', State(pc_initial=30 nstack_initial=0))},
             '$phi48.0': {('$42load_deref.0',
                           State(pc_initial=42 nstack_initial=0)),
                          ('$step46.0', State(pc_initial=46 nstack_initial=0))},
             '$phi64.0': {('$const62.0', State(pc_initial=62 nstack_initial=0)),
                          ('$lit_step58.0',
                           State(pc_initial=58 nstack_initial=0))}})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$10load_deref.0',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$start14.0',
                           State(pc_initial=14 nstack_initial=0))},
             '$phi218.0': {('$216get_iter.3',
                            State(pc_initial=208 nstack_initial=0))},
             '$phi220.0': {('$216get_iter.3',
                            State(pc_initial=208 nstack_initial=0))},
             '$phi220.1': {('$218for_iter.2',
                            State(pc_initial=218 nstack_initial=1))},
             '$phi32.0': {('$26load_deref.0',
                           State(pc_initial=26 nstack_initial=0)),
                          ('$stop30.0', State(pc_initial=30 nstack_initial=0))},
             '$phi48.0': {('$42load_deref.0',
                           State(pc_initial=42 nstack_initial=0)),
                          ('$step46.0', State(pc_initial=46 nstack_initial=0))},
             '$phi64.0': {('$const62.0', State(pc_initial=62 nstack_initial=0)),
                          ('$lit_step58.0',
                           State(pc_initial=58 nstack_initial=0))}})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$10load_deref.0',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$start14.0',
                           State(pc_initial=14 nstack_initial=0))},
             '$phi218.0': {('$216get_iter.3',
                            State(pc_initial=208 nstack_initial=0))},
             '$phi220.0': {('$216get_iter.3',
                            State(pc_initial=208 nstack_initial=0))},
             '$phi220.1': {('$218for_iter.2',
                            State(pc_initial=218 nstack_initial=1))},
             '$phi32.0': {('$26load_deref.0',
                           State(pc_initial=26 nstack_initial=0)),
                          ('$stop30.0', State(pc_initial=30 nstack_initial=0))},
             '$phi48.0': {('$42load_deref.0',
                           State(pc_initial=42 nstack_initial=0)),
                          ('$step46.0', State(pc_initial=46 nstack_initial=0))},
             '$phi64.0': {('$const62.0', State(pc_initial=62 nstack_initial=0)),
                          ('$lit_step58.0',
                           State(pc_initial=58 nstack_initial=0))}})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG keep phismap: {'$phi16.0': {('$10load_deref.0', State(pc_initial=10 nstack_initial=0)),
              ('$start14.0', State(pc_initial=14 nstack_initial=0))},
 '$phi218.0': {('$216get_iter.3', State(pc_initial=208 nstack_initial=0))},
 '$phi220.1': {('$218for_iter.2', State(pc_initial=218 nstack_initial=1))},
 '$phi32.0': {('$26load_deref.0', State(pc_initial=26 nstack_initial=0)),
              ('$stop30.0', State(pc_initial=30 nstack_initial=0))},
 '$phi48.0': {('$42load_deref.0', State(pc_initial=42 nstack_initial=0)),
              ('$step46.0', State(pc_initial=46 nstack_initial=0))},
 '$phi64.0': {('$const62.0', State(pc_initial=62 nstack_initial=0)),
              ('$lit_step58.0', State(pc_initial=58 nstack_initial=0))}}
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi16.0': '$10load_deref.0'},
             State(pc_initial=14 nstack_initial=0): {'$phi16.0': '$start14.0'},
             State(pc_initial=26 nstack_initial=0): {'$phi32.0': '$26load_deref.0'},
             State(pc_initial=30 nstack_initial=0): {'$phi32.0': '$stop30.0'},
             State(pc_initial=42 nstack_initial=0): {'$phi48.0': '$42load_deref.0'},
             State(pc_initial=46 nstack_initial=0): {'$phi48.0': '$step46.0'},
             State(pc_initial=58 nstack_initial=0): {'$phi64.0': '$lit_step58.0'},
             State(pc_initial=62 nstack_initial=0): {'$phi64.0': '$const62.0'},
             State(pc_initial=208 nstack_initial=0): {'$phi218.0': '$216get_iter.3'},
             State(pc_initial=218 nstack_initial=1): {'$phi220.1': '$218for_iter.2'}})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG ----------------------DONE Prune PHIs-----------------------
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$2load_deref.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$10load_deref.0'}), (12, {})), outgoing_phis={'$phi16.0': '$10load_deref.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$10load_deref.0',)})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$start14.0'}),), outgoing_phis={'$phi16.0': '$start14.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$start14.0',)})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=16 nstack_initial=1):
AdaptBlockInfo(insts=((16, {'value': '$phi16.0'}), (18, {'res': '$18load_deref.1'}), (20, {'res': '$const20.2'}), (22, {'lhs': '$18load_deref.1', 'rhs': '$const20.2', 'res': '$22compare_op.3'}), (24, {'pred': '$22compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 30: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$26load_deref.0'}), (28, {})), outgoing_phis={'$phi32.0': '$26load_deref.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: ('$26load_deref.0',)})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {'res': '$stop30.0'}),), outgoing_phis={'$phi32.0': '$stop30.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: ('$stop30.0',)})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=32 nstack_initial=1):
AdaptBlockInfo(insts=((32, {'value': '$phi32.0'}), (34, {'res': '$34load_deref.1'}), (36, {'res': '$const36.2'}), (38, {'lhs': '$34load_deref.1', 'rhs': '$const36.2', 'res': '$38compare_op.3'}), (40, {'pred': '$38compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={42: (), 46: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=((42, {'res': '$42load_deref.0'}), (44, {})), outgoing_phis={'$phi48.0': '$42load_deref.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={48: ('$42load_deref.0',)})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=46 nstack_initial=0):
AdaptBlockInfo(insts=((46, {'res': '$step46.0'}),), outgoing_phis={'$phi48.0': '$step46.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={48: ('$step46.0',)})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=48 nstack_initial=1):
AdaptBlockInfo(insts=((48, {'value': '$phi48.0'}), (50, {'res': '$lit_step50.1'}), (52, {'res': '$const52.2'}), (54, {'lhs': '$lit_step50.1', 'rhs': '$const52.2', 'res': '$54compare_op.3'}), (56, {'pred': '$54compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: (), 62: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$lit_step58.0'}), (60, {})), outgoing_phis={'$phi64.0': '$lit_step58.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: ('$lit_step58.0',)})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$const62.0'}),), outgoing_phis={'$phi64.0': '$const62.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: ('$const62.0',)})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=64 nstack_initial=1):
AdaptBlockInfo(insts=((64, {'value': '$phi64.0'}), (66, {'res': '$lit_stop66.1'}), (68, {'res': '$const68.2'}), (70, {'lhs': '$lit_stop66.1', 'rhs': '$const68.2', 'res': '$70compare_op.3'}), (72, {'pred': '$70compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: (), 86: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$const74.0'}), (76, {'res': '$lit_start76.1'}), (80, {'value': '$const74.0'}), (82, {'value': '$lit_start76.1'}), (84, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=86 nstack_initial=0):
AdaptBlockInfo(insts=((86, {'res': '$lit_start86.0'}), (88, {'res': '$lit_stop88.1'}), (92, {'value': '$lit_start86.0'}), (94, {'value': '$lit_stop88.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$_step96.0'}), (98, {'res': '$const98.1'}), (100, {'lhs': '$_step96.0', 'rhs': '$const98.1', 'res': '$100compare_op.2'}), (102, {'pred': '$100compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 112: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$104load_global.0'}), (106, {'res': '$const106.1'}), (108, {'func': '$104load_global.0', 'args': ['$const106.1'], 'res': '$108call_function.2'}), (110, {'exc': '$108call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=112 nstack_initial=0):
AdaptBlockInfo(insts=((112, {'res': '$_stop112.0'}), (114, {'res': '$_start114.1'}), (116, {'lhs': '$_stop112.0', 'rhs': '$_start114.1', 'res': '$116binary_subtract.2'}), (118, {'res': '$_step118.3'}), (120, {'lhs': '$116binary_subtract.2', 'rhs': '$_step118.3', 'res': '$120binary_true_divide.4'}), (122, {'value': '$120binary_true_divide.4'}), (124, {'res': '$124load_global.5'}), (126, {'res': '$126load_global.6'}), (128, {'item': '$126load_global.6', 'res': '$128load_method.7'}), (130, {'res': '$nitems_c130.8'}), (132, {'item': '$nitems_c130.8', 'res': '$132load_attr.9'}), (134, {'func': '$128load_method.7', 'args': ['$132load_attr.9'], 'res': '$134call_method.10'}), (136, {'func': '$124load_global.5', 'args': ['$134call_method.10'], 'res': '$136call_function.11'}), (138, {'value': '$136call_function.11'}), (140, {'res': '$140load_deref.12'}), (142, {'res': '$const142.13'}), (144, {'lhs': '$140load_deref.12', 'rhs': '$const142.13', 'res': '$144compare_op.14'}), (146, {'pred': '$144compare_op.14'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={148: (), 182: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=148 nstack_initial=0):
AdaptBlockInfo(insts=((148, {'res': '$148load_global.0'}), (150, {'res': '$150load_global.1'}), (152, {'item': '$150load_global.1', 'res': '$152load_method.2'}), (154, {'res': '$nitems_c154.3'}), (156, {'item': '$nitems_c154.3', 'res': '$156load_attr.4'}), (158, {'func': '$152load_method.2', 'args': ['$156load_attr.4'], 'res': '$158call_method.5'}), (160, {'func': '$148load_global.0', 'args': ['$158call_method.5'], 'res': '$160call_function.6'}), (162, {'value': '$160call_function.6'}), (164, {'res': '$164load_global.7'}), (166, {'res': '$166load_global.8'}), (168, {'res': '$nitems_i168.9'}), (170, {'res': '$nitems_r170.10'}), (172, {'func': '$166load_global.8', 'args': ['$nitems_i168.9', '$nitems_r170.10'], 'res': '$172call_function.11'}), (174, {'res': '$const174.12'}), (176, {'func': '$164load_global.7', 'args': ['$172call_function.11', '$const174.12'], 'res': '$176call_function.13'}), (178, {'value': '$176call_function.13'}), (180, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={192: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=182 nstack_initial=0):
AdaptBlockInfo(insts=((182, {'res': '$182load_global.0'}), (184, {'res': '$nitems_r184.1'}), (186, {'res': '$const186.2'}), (188, {'func': '$182load_global.0', 'args': ['$nitems_r184.1', '$const186.2'], 'res': '$188call_function.3'}), (190, {'value': '$188call_function.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={192: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=192 nstack_initial=0):
AdaptBlockInfo(insts=((192, {'res': '$192load_global.0'}), (194, {'item': '$192load_global.0', 'res': '$194load_method.1'}), (196, {'res': '$nitems196.2'}), (198, {'res': '$198load_deref.3'}), (200, {'func': '$194load_method.1', 'args': ['$nitems196.2', '$198load_deref.3'], 'res': '$200call_method.4'}), (202, {'value': '$200call_method.4'}), (204, {'res': '$_start204.5'}), (206, {'value': '$_start204.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={208: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=208 nstack_initial=0):
AdaptBlockInfo(insts=((210, {'res': '$210load_global.0'}), (212, {'res': '$nitems212.1'}), (214, {'func': '$210load_global.0', 'args': ['$nitems212.1'], 'res': '$214call_function.2'}), (216, {'value': '$214call_function.2', 'res': '$216get_iter.3'})), outgoing_phis={'$phi218.0': '$216get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={218: ('$216get_iter.3',)})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=218 nstack_initial=1):
AdaptBlockInfo(insts=((218, {'iterator': '$phi218.0', 'pair': '$218for_iter.1', 'indval': '$218for_iter.2', 'pred': '$218for_iter.3'}),), outgoing_phis={'$phi220.1': '$218for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 242, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={240: (), 220: ('$phi218.0', '$218for_iter.2')})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=220 nstack_initial=2):
AdaptBlockInfo(insts=((220, {'value': '$phi220.1'}), (222, {'res': '$val222.2'}), (224, {'res': '$i224.3'}), (226, {'res': '$_step226.4'}), (228, {'lhs': '$i224.3', 'rhs': '$_step226.4', 'res': '$228binary_multiply.5'}), (230, {'lhs': '$val222.2', 'rhs': '$228binary_multiply.5', 'res': '$230binary_add.6'}), (232, {'res': '$arr232.7'}), (234, {'res': '$i234.8'}), (236, {'target': '$arr232.7', 'index': '$i234.8', 'value': '$230binary_add.6'}), (238, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 242, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={218: ('$phi220.0',)})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=240 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 242, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={242: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=242 nstack_initial=0):
AdaptBlockInfo(insts=((242, {'res': '$arr242.0'}), (244, {'retval': '$arr242.0', 'castval': '$244return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:41 interpreter.py DEBUG label 0:
    start = arg(0, name=start)               ['start']
    stop = arg(1, name=stop)                 ['stop']
    step = arg(2, name=step)                 ['step']
    dtype = arg(3, name=dtype)               ['dtype']
    $2load_deref.0 = freevar(start_value: None) ['$2load_deref.0']
    $const4.1 = const(NoneType, None)        ['$const4.1']
    $6compare_op.2 = $2load_deref.0 is not $const4.1 ['$2load_deref.0', '$6compare_op.2', '$const4.1']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, arrayobj.py:4516),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $10load_deref.0 = freevar(start_value: None) ['$10load_deref.0']
    $phi16.0 = $10load_deref.0               ['$10load_deref.0', '$phi16.0']
    jump 16                                  []
label 14:
    $phi16.0 = start                         ['$phi16.0', 'start']
    jump 16                                  []
label 16:
    lit_start = $phi16.0                     ['$phi16.0', 'lit_start']
    $18load_deref.1 = freevar(stop_value: None) ['$18load_deref.1']
    $const20.2 = const(NoneType, None)       ['$const20.2']
    $22compare_op.3 = $18load_deref.1 is not $const20.2 ['$18load_deref.1', '$22compare_op.3', '$const20.2']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.3, func=bool24, args=(Var($22compare_op.3, arrayobj.py:4517),), kws=(), vararg=None, varkwarg=None, target=None) ['$22compare_op.3', '$24pred', 'bool24']
    branch $24pred, 26, 30                   ['$24pred']
label 26:
    $26load_deref.0 = freevar(stop_value: None) ['$26load_deref.0']
    $phi32.0 = $26load_deref.0               ['$26load_deref.0', '$phi32.0']
    jump 32                                  []
label 30:
    $phi32.0 = stop                          ['$phi32.0', 'stop']
    jump 32                                  []
label 32:
    lit_stop = $phi32.0                      ['$phi32.0', 'lit_stop']
    $34load_deref.1 = freevar(step_value: None) ['$34load_deref.1']
    $const36.2 = const(NoneType, None)       ['$const36.2']
    $38compare_op.3 = $34load_deref.1 is not $const36.2 ['$34load_deref.1', '$38compare_op.3', '$const36.2']
    bool40 = global(bool: <class 'bool'>)    ['bool40']
    $40pred = call bool40($38compare_op.3, func=bool40, args=(Var($38compare_op.3, arrayobj.py:4518),), kws=(), vararg=None, varkwarg=None, target=None) ['$38compare_op.3', '$40pred', 'bool40']
    branch $40pred, 42, 46                   ['$40pred']
label 42:
    $42load_deref.0 = freevar(step_value: None) ['$42load_deref.0']
    $phi48.0 = $42load_deref.0               ['$42load_deref.0', '$phi48.0']
    jump 48                                  []
label 46:
    $phi48.0 = step                          ['$phi48.0', 'step']
    jump 48                                  []
label 48:
    lit_step = $phi48.0                      ['$phi48.0', 'lit_step']
    $const52.2 = const(NoneType, None)       ['$const52.2']
    $54compare_op.3 = lit_step is not $const52.2 ['$54compare_op.3', '$const52.2', 'lit_step']
    bool56 = global(bool: <class 'bool'>)    ['bool56']
    $56pred = call bool56($54compare_op.3, func=bool56, args=(Var($54compare_op.3, arrayobj.py:4520),), kws=(), vararg=None, varkwarg=None, target=None) ['$54compare_op.3', '$56pred', 'bool56']
    branch $56pred, 58, 62                   ['$56pred']
label 58:
    $phi64.0 = lit_step                      ['$phi64.0', 'lit_step']
    jump 64                                  []
label 62:
    $const62.0 = const(int, 1)               ['$const62.0']
    $phi64.0 = $const62.0                    ['$const62.0', '$phi64.0']
    jump 64                                  []
label 64:
    _step = $phi64.0                         ['$phi64.0', '_step']
    $const68.2 = const(NoneType, None)       ['$const68.2']
    $70compare_op.3 = lit_stop is $const68.2 ['$70compare_op.3', '$const68.2', 'lit_stop']
    bool72 = global(bool: <class 'bool'>)    ['bool72']
    $72pred = call bool72($70compare_op.3, func=bool72, args=(Var($70compare_op.3, arrayobj.py:4521),), kws=(), vararg=None, varkwarg=None, target=None) ['$70compare_op.3', '$72pred', 'bool72']
    branch $72pred, 74, 86                   ['$72pred']
label 74:
    _start = const(int, 0)                   ['_start']
    _stop = lit_start                        ['_stop', 'lit_start']
    jump 96                                  []
label 86:
    _start = lit_start                       ['_start', 'lit_start']
    _stop = lit_stop                         ['_stop', 'lit_stop']
    jump 96                                  []
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = _step == $const98.1   ['$100compare_op.2', '$const98.1', '_step']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:4526),), kws=(), vararg=None, varkwarg=None, target=None) ['$100compare_op.2', '$102pred', 'bool102']
    branch $102pred, 104, 112                ['$102pred']
label 104:
    $104load_global.0 = global(ValueError: <class 'ValueError'>) ['$104load_global.0']
    $const106.1 = const(str, Maximum allowed size exceeded) ['$const106.1']
    $108call_function.2 = call $104load_global.0($const106.1, func=$104load_global.0, args=[Var($const106.1, arrayobj.py:4527)], kws=(), vararg=None, varkwarg=None, target=None) ['$104load_global.0', '$108call_function.2', '$const106.1']
    raise $108call_function.2                ['$108call_function.2']
label 112:
    $116binary_subtract.2 = _stop - _start   ['$116binary_subtract.2', '_start', '_stop']
    nitems_c = $116binary_subtract.2 / _step ['$116binary_subtract.2', '_step', 'nitems_c']
    $124load_global.5 = global(int: <class 'int'>) ['$124load_global.5']
    $126load_global.6 = global(math: <module 'math' (built-in)>) ['$126load_global.6']
    $128load_method.7 = getattr(value=$126load_global.6, attr=ceil) ['$126load_global.6', '$128load_method.7']
    $132load_attr.9 = getattr(value=nitems_c, attr=real) ['$132load_attr.9', 'nitems_c']
    $134call_method.10 = call $128load_method.7($132load_attr.9, func=$128load_method.7, args=[Var($132load_attr.9, arrayobj.py:4530)], kws=(), vararg=None, varkwarg=None, target=None) ['$128load_method.7', '$132load_attr.9', '$134call_method.10']
    nitems_r = call $124load_global.5($134call_method.10, func=$124load_global.5, args=[Var($134call_method.10, arrayobj.py:4530)], kws=(), vararg=None, varkwarg=None, target=None) ['$124load_global.5', '$134call_method.10', 'nitems_r']
    $140load_deref.12 = freevar(use_complex: False) ['$140load_deref.12']
    $const142.13 = const(bool, True)         ['$const142.13']
    $144compare_op.14 = $140load_deref.12 is $const142.13 ['$140load_deref.12', '$144compare_op.14', '$const142.13']
    bool146 = global(bool: <class 'bool'>)   ['bool146']
    $146pred = call bool146($144compare_op.14, func=bool146, args=(Var($144compare_op.14, arrayobj.py:4533),), kws=(), vararg=None, varkwarg=None, target=None) ['$144compare_op.14', '$146pred', 'bool146']
    branch $146pred, 148, 182                ['$146pred']
label 148:
    $148load_global.0 = global(int: <class 'int'>) ['$148load_global.0']
    $150load_global.1 = global(math: <module 'math' (built-in)>) ['$150load_global.1']
    $152load_method.2 = getattr(value=$150load_global.1, attr=ceil) ['$150load_global.1', '$152load_method.2']
    $156load_attr.4 = getattr(value=nitems_c, attr=imag) ['$156load_attr.4', 'nitems_c']
    $158call_method.5 = call $152load_method.2($156load_attr.4, func=$152load_method.2, args=[Var($156load_attr.4, arrayobj.py:4534)], kws=(), vararg=None, varkwarg=None, target=None) ['$152load_method.2', '$156load_attr.4', '$158call_method.5']
    nitems_i = call $148load_global.0($158call_method.5, func=$148load_global.0, args=[Var($158call_method.5, arrayobj.py:4534)], kws=(), vararg=None, varkwarg=None, target=None) ['$148load_global.0', '$158call_method.5', 'nitems_i']
    $164load_global.7 = global(max: <built-in function max>) ['$164load_global.7']
    $166load_global.8 = global(min: <built-in function min>) ['$166load_global.8']
    $172call_function.11 = call $166load_global.8(nitems_i, nitems_r, func=$166load_global.8, args=[Var(nitems_i, arrayobj.py:4534), Var(nitems_r, arrayobj.py:4530)], kws=(), vararg=None, varkwarg=None, target=None) ['$166load_global.8', '$172call_function.11', 'nitems_i', 'nitems_r']
    $const174.12 = const(int, 0)             ['$const174.12']
    nitems = call $164load_global.7($172call_function.11, $const174.12, func=$164load_global.7, args=[Var($172call_function.11, arrayobj.py:4535), Var($const174.12, arrayobj.py:4535)], kws=(), vararg=None, varkwarg=None, target=None) ['$164load_global.7', '$172call_function.11', '$const174.12', 'nitems']
    jump 192                                 []
label 182:
    $182load_global.0 = global(max: <built-in function max>) ['$182load_global.0']
    $const186.2 = const(int, 0)              ['$const186.2']
    nitems = call $182load_global.0(nitems_r, $const186.2, func=$182load_global.0, args=[Var(nitems_r, arrayobj.py:4530), Var($const186.2, arrayobj.py:4537)], kws=(), vararg=None, varkwarg=None, target=None) ['$182load_global.0', '$const186.2', 'nitems', 'nitems_r']
    jump 192                                 []
label 192:
    $192load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>) ['$192load_global.0']
    $194load_method.1 = getattr(value=$192load_global.0, attr=empty) ['$192load_global.0', '$194load_method.1']
    $198load_deref.3 = freevar(true_dtype: int64) ['$198load_deref.3']
    arr = call $194load_method.1(nitems, $198load_deref.3, func=$194load_method.1, args=[Var(nitems, arrayobj.py:4535), Var($198load_deref.3, arrayobj.py:4538)], kws=(), vararg=None, varkwarg=None, target=None) ['$194load_method.1', '$198load_deref.3', 'arr', 'nitems']
    val = _start                             ['_start', 'val']
    jump 208                                 []
label 208:
    $210load_global.0 = global(range: <class 'range'>) ['$210load_global.0']
    $214call_function.2 = call $210load_global.0(nitems, func=$210load_global.0, args=[Var(nitems, arrayobj.py:4535)], kws=(), vararg=None, varkwarg=None, target=None) ['$210load_global.0', '$214call_function.2', 'nitems']
    $216get_iter.3 = getiter(value=$214call_function.2) ['$214call_function.2', '$216get_iter.3']
    $phi218.0 = $216get_iter.3               ['$216get_iter.3', '$phi218.0']
    jump 218                                 []
label 218:
    $218for_iter.1 = iternext(value=$phi218.0) ['$218for_iter.1', '$phi218.0']
    $218for_iter.2 = pair_first(value=$218for_iter.1) ['$218for_iter.1', '$218for_iter.2']
    $218for_iter.3 = pair_second(value=$218for_iter.1) ['$218for_iter.1', '$218for_iter.3']
    $phi220.1 = $218for_iter.2               ['$218for_iter.2', '$phi220.1']
    branch $218for_iter.3, 220, 240          ['$218for_iter.3']
label 220:
    i = $phi220.1                            ['$phi220.1', 'i']
    $228binary_multiply.5 = i * _step        ['$228binary_multiply.5', '_step', 'i']
    $230binary_add.6 = val + $228binary_multiply.5 ['$228binary_multiply.5', '$230binary_add.6', 'val']
    arr[i] = $230binary_add.6                ['$230binary_add.6', 'arr', 'i']
    jump 218                                 []
label 240:
    jump 242                                 []
label 242:
    $244return_value.1 = cast(value=arr)     ['$244return_value.1', 'arr']
    return $244return_value.1                ['$244return_value.1']

Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A39C64BC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: start = arg(0, name=start)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: stop = arg(1, name=stop)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: step = arg(2, name=step)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: dtype = arg(3, name=dtype)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $2load_deref.0 = freevar(start_value: None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const4.1 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $6compare_op.2 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, arrayobj.py:4516),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 14
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 14
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A39C64BC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi16.0 = start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 16
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 16
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A39C64BC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: lit_start = $phi16.0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $18load_deref.1 = freevar(stop_value: None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const20.2 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $22compare_op.3 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $24pred = call bool24($22compare_op.3, func=bool24, args=(Var($22compare_op.3, arrayobj.py:4517),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 30
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 30
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A39C64BC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi32.0 = stop
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 32
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 32
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A39C64BC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: lit_stop = $phi32.0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $34load_deref.1 = freevar(step_value: None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const36.2 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $38compare_op.3 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool40 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $40pred = call bool40($38compare_op.3, func=bool40, args=(Var($38compare_op.3, arrayobj.py:4518),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 46
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 46
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A39C64BC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi48.0 = step
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 48
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 48
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A39C64BC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: lit_step = $phi48.0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const52.2 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $54compare_op.3 = lit_step is not $const52.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool56 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $56pred = call bool56($54compare_op.3, func=bool56, args=(Var($54compare_op.3, arrayobj.py:4520),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $56pred, 58, 62
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 58
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A39C64BC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi64.0 = lit_step
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 64
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 62
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A39C64BC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const62.0 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi64.0 = $const62.0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 64
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 64
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A39C64BC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: _step = $phi64.0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const68.2 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $70compare_op.3 = lit_stop is $const68.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool72 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $72pred = call bool72($70compare_op.3, func=bool72, args=(Var($70compare_op.3, arrayobj.py:4521),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $72pred, 74, 86
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 74
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A39C64BC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: _start = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: _stop = lit_start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 96
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 86
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A39C64BC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: _start = lit_start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: _stop = lit_stop
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 96
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 96
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A39C64BC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const98.1 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $100compare_op.2 = _step == $const98.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool102 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:4526),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $102pred, 104, 112
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 104
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A39C64BC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $104load_global.0 = global(ValueError: <class 'ValueError'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const106.1 = const(str, Maximum allowed size exceeded)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $108call_function.2 = call $104load_global.0($const106.1, func=$104load_global.0, args=[Var($const106.1, arrayobj.py:4527)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 112
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A39C64BC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $116binary_subtract.2 = _stop - _start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: nitems_c = $116binary_subtract.2 / _step
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $124load_global.5 = global(int: <class 'int'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $126load_global.6 = global(math: <module 'math' (built-in)>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $128load_method.7 = getattr(value=$126load_global.6, attr=ceil)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $132load_attr.9 = getattr(value=nitems_c, attr=real)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $134call_method.10 = call $128load_method.7($132load_attr.9, func=$128load_method.7, args=[Var($132load_attr.9, arrayobj.py:4530)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: nitems_r = call $124load_global.5($134call_method.10, func=$124load_global.5, args=[Var($134call_method.10, arrayobj.py:4530)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $140load_deref.12 = freevar(use_complex: False)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const142.13 = const(bool, True)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $144compare_op.14 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool146 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $146pred = call bool146($144compare_op.14, func=bool146, args=(Var($144compare_op.14, arrayobj.py:4533),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 182
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 182
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A39C64BC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $182load_global.0 = global(max: <built-in function max>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const186.2 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: nitems = call $182load_global.0(nitems_r, $const186.2, func=$182load_global.0, args=[Var(nitems_r, arrayobj.py:4530), Var($const186.2, arrayobj.py:4537)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 192
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 192
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A39C64BC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $192load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $194load_method.1 = getattr(value=$192load_global.0, attr=empty)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $198load_deref.3 = freevar(true_dtype: int64)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: arr = call $194load_method.1(nitems, $198load_deref.3, func=$194load_method.1, args=[Var(nitems, arrayobj.py:4535), Var($198load_deref.3, arrayobj.py:4538)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: val = _start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 208
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 208
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A39C64BC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $210load_global.0 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $214call_function.2 = call $210load_global.0(nitems, func=$210load_global.0, args=[Var(nitems, arrayobj.py:4535)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $216get_iter.3 = getiter(value=$214call_function.2)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi218.0 = $216get_iter.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 218
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 218
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A39C64BC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $218for_iter.1 = iternext(value=$phi218.0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $218for_iter.2 = pair_first(value=$218for_iter.1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $218for_iter.3 = pair_second(value=$218for_iter.1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi220.1 = $218for_iter.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $218for_iter.3, 220, 240
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 220
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A39C64BC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: i = $phi220.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $228binary_multiply.5 = i * _step
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $230binary_add.6 = val + $228binary_multiply.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: arr[i] = $230binary_add.6
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 218
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 240
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A39C64BC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 242
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 242
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A39C64BC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $244return_value.1 = cast(value=arr)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $244return_value.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG defs defaultdict(<class 'list'>,
            {'$100compare_op.2': [<numba.core.ir.Assign object at 0x0000015A39CE65C8>],
             '$102pred': [<numba.core.ir.Assign object at 0x0000015A39CE6888>],
             '$104load_global.0': [<numba.core.ir.Assign object at 0x0000015A39CE6A48>],
             '$108call_function.2': [<numba.core.ir.Assign object at 0x0000015A39CE6CC8>],
             '$116binary_subtract.2': [<numba.core.ir.Assign object at 0x0000015A39CE9208>],
             '$124load_global.5': [<numba.core.ir.Assign object at 0x0000015A39CE9708>],
             '$126load_global.6': [<numba.core.ir.Assign object at 0x0000015A39CE9848>],
             '$128load_method.7': [<numba.core.ir.Assign object at 0x0000015A39CE99C8>],
             '$132load_attr.9': [<numba.core.ir.Assign object at 0x0000015A39CE9C48>],
             '$134call_method.10': [<numba.core.ir.Assign object at 0x0000015A39CE9D88>],
             '$140load_deref.12': [<numba.core.ir.Assign object at 0x0000015A39CEB148>],
             '$144compare_op.14': [<numba.core.ir.Assign object at 0x0000015A39CEB3C8>],
             '$146pred': [<numba.core.ir.Assign object at 0x0000015A39CEB688>],
             '$182load_global.0': [<numba.core.ir.Assign object at 0x0000015A39CEE988>],
             '$18load_deref.1': [<numba.core.ir.Assign object at 0x0000015A39CC37C8>],
             '$192load_global.0': [<numba.core.ir.Assign object at 0x0000015A39CEEFC8>],
             '$194load_method.1': [<numba.core.ir.Assign object at 0x0000015A39CF1108>],
             '$198load_deref.3': [<numba.core.ir.Assign object at 0x0000015A39CF13C8>],
             '$210load_global.0': [<numba.core.ir.Assign object at 0x0000015A39CF1988>],
             '$214call_function.2': [<numba.core.ir.Assign object at 0x0000015A39CF1C48>],
             '$216get_iter.3': [<numba.core.ir.Assign object at 0x0000015A39CF1D88>],
             '$218for_iter.1': [<numba.core.ir.Assign object at 0x0000015A39CF4088>],
             '$218for_iter.2': [<numba.core.ir.Assign object at 0x0000015A39CF4188>],
             '$218for_iter.3': [<numba.core.ir.Assign object at 0x0000015A39CF4288>],
             '$228binary_multiply.5': [<numba.core.ir.Assign object at 0x0000015A39CF4A88>],
             '$22compare_op.3': [<numba.core.ir.Assign object at 0x0000015A39CC3808>],
             '$230binary_add.6': [<numba.core.ir.Assign object at 0x0000015A39CF4C08>],
             '$244return_value.1': [<numba.core.ir.Assign object at 0x0000015A39CF7248>],
             '$24pred': [<numba.core.ir.Assign object at 0x0000015A39CC3748>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x0000015A39CA57C8>],
             '$34load_deref.1': [<numba.core.ir.Assign object at 0x0000015A39CDD708>],
             '$38compare_op.3': [<numba.core.ir.Assign object at 0x0000015A39CDDA08>],
             '$40pred': [<numba.core.ir.Assign object at 0x0000015A39CDDD08>],
             '$54compare_op.3': [<numba.core.ir.Assign object at 0x0000015A39CE1808>],
             '$56pred': [<numba.core.ir.Assign object at 0x0000015A39CE1B08>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x0000015A39CC4EC8>],
             '$70compare_op.3': [<numba.core.ir.Assign object at 0x0000015A39CE4588>],
             '$72pred': [<numba.core.ir.Assign object at 0x0000015A39CE4888>],
             '$8pred': [<numba.core.ir.Assign object at 0x0000015A39CC49C8>],
             '$const106.1': [<numba.core.ir.Assign object at 0x0000015A39CE6B88>],
             '$const142.13': [<numba.core.ir.Assign object at 0x0000015A39CEB288>],
             '$const186.2': [<numba.core.ir.Assign object at 0x0000015A39CEED08>],
             '$const20.2': [<numba.core.ir.Assign object at 0x0000015A39CC38C8>],
             '$const36.2': [<numba.core.ir.Assign object at 0x0000015A39CDD8C8>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000015A39CC43C8>],
             '$const52.2': [<numba.core.ir.Assign object at 0x0000015A39CE16C8>],
             '$const62.0': [<numba.core.ir.Assign object at 0x0000015A39CE1F48>],
             '$const68.2': [<numba.core.ir.Assign object at 0x0000015A39CE4448>],
             '$const98.1': [<numba.core.ir.Assign object at 0x0000015A39CE6488>],
             '$phi16.0': [<numba.core.ir.Assign object at 0x0000015A39CC44C8>],
             '$phi218.0': [<numba.core.ir.Assign object at 0x0000015A39CF1B08>],
             '$phi220.1': [<numba.core.ir.Assign object at 0x0000015A39CF4348>],
             '$phi32.0': [<numba.core.ir.Assign object at 0x0000015A39CC3648>],
             '$phi48.0': [<numba.core.ir.Assign object at 0x0000015A39CDDE08>],
             '$phi64.0': [<numba.core.ir.Assign object at 0x0000015A39CE1CC8>,
                          <numba.core.ir.Assign object at 0x0000015A39CE1588>],
             '_start': [<numba.core.ir.Assign object at 0x0000015A39CE4A08>,
                        <numba.core.ir.Assign object at 0x0000015A39CE4D48>],
             '_step': [<numba.core.ir.Assign object at 0x0000015A39CE4188>],
             '_stop': [<numba.core.ir.Assign object at 0x0000015A39CE4D88>,
                       <numba.core.ir.Assign object at 0x0000015A39CE6188>],
             'arr': [<numba.core.ir.Assign object at 0x0000015A39CF1508>],
             'bool102': [<numba.core.ir.Assign object at 0x0000015A39CE6748>],
             'bool146': [<numba.core.ir.Assign object at 0x0000015A39CEB548>],
             'bool24': [<numba.core.ir.Assign object at 0x0000015A39CC3B88>],
             'bool40': [<numba.core.ir.Assign object at 0x0000015A39CDDB88>],
             'bool56': [<numba.core.ir.Assign object at 0x0000015A39CE1988>],
             'bool72': [<numba.core.ir.Assign object at 0x0000015A39CE4708>],
             'bool8': [<numba.core.ir.Assign object at 0x0000015A39CC4948>],
             'dtype': [<numba.core.ir.Assign object at 0x0000015A39CAFDC8>],
             'i': [<numba.core.ir.Assign object at 0x0000015A39CF4548>],
             'lit_start': [<numba.core.ir.Assign object at 0x0000015A39CD35C8>],
             'lit_step': [<numba.core.ir.Assign object at 0x0000015A39CE1408>],
             'lit_stop': [<numba.core.ir.Assign object at 0x0000015A39CDD748>],
             'nitems': [<numba.core.ir.Assign object at 0x0000015A39CEEE48>],
             'nitems_c': [<numba.core.ir.Assign object at 0x0000015A39CE9488>],
             'nitems_r': [<numba.core.ir.Assign object at 0x0000015A39CE9EC8>],
             'start': [<numba.core.ir.Assign object at 0x0000015A39C664C8>],
             'step': [<numba.core.ir.Assign object at 0x0000015A39C741C8>],
             'stop': [<numba.core.ir.Assign object at 0x0000015A39C66BC8>],
             'val': [<numba.core.ir.Assign object at 0x0000015A39CF1888>]})
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG SSA violators {'$phi64.0', '_stop', '_start'}
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Fix SSA violator on var $phi64.0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: start = arg(0, name=start)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: stop = arg(1, name=stop)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: step = arg(2, name=step)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: dtype = arg(3, name=dtype)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $2load_deref.0 = freevar(start_value: None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const4.1 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $6compare_op.2 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, arrayobj.py:4516),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 14
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 14
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi16.0 = start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 16
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 16
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: lit_start = $phi16.0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $18load_deref.1 = freevar(stop_value: None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const20.2 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $22compare_op.3 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $24pred = call bool24($22compare_op.3, func=bool24, args=(Var($22compare_op.3, arrayobj.py:4517),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 30
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 30
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi32.0 = stop
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 32
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 32
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: lit_stop = $phi32.0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $34load_deref.1 = freevar(step_value: None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const36.2 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $38compare_op.3 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool40 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $40pred = call bool40($38compare_op.3, func=bool40, args=(Var($38compare_op.3, arrayobj.py:4518),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 46
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 46
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi48.0 = step
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 48
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 48
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: lit_step = $phi48.0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const52.2 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $54compare_op.3 = lit_step is not $const52.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool56 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $56pred = call bool56($54compare_op.3, func=bool56, args=(Var($54compare_op.3, arrayobj.py:4520),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $56pred, 58, 62
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 58
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi64.0 = lit_step
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG first assign: $phi64.0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: $phi64.0 = lit_step
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 64
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 62
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const62.0 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi64.0 = $const62.0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: $phi64.0.1 = $const62.0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 64
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 64
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: _step = $phi64.0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const68.2 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $70compare_op.3 = lit_stop is $const68.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool72 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $72pred = call bool72($70compare_op.3, func=bool72, args=(Var($70compare_op.3, arrayobj.py:4521),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $72pred, 74, 86
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 74
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: _start = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: _stop = lit_start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 96
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 86
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: _start = lit_start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: _stop = lit_stop
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 96
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 96
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const98.1 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $100compare_op.2 = _step == $const98.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool102 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:4526),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $102pred, 104, 112
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 104
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $104load_global.0 = global(ValueError: <class 'ValueError'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const106.1 = const(str, Maximum allowed size exceeded)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $108call_function.2 = call $104load_global.0($const106.1, func=$104load_global.0, args=[Var($const106.1, arrayobj.py:4527)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 112
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $116binary_subtract.2 = _stop - _start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: nitems_c = $116binary_subtract.2 / _step
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $124load_global.5 = global(int: <class 'int'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $126load_global.6 = global(math: <module 'math' (built-in)>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $128load_method.7 = getattr(value=$126load_global.6, attr=ceil)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $132load_attr.9 = getattr(value=nitems_c, attr=real)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $134call_method.10 = call $128load_method.7($132load_attr.9, func=$128load_method.7, args=[Var($132load_attr.9, arrayobj.py:4530)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: nitems_r = call $124load_global.5($134call_method.10, func=$124load_global.5, args=[Var($134call_method.10, arrayobj.py:4530)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $140load_deref.12 = freevar(use_complex: False)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const142.13 = const(bool, True)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $144compare_op.14 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool146 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $146pred = call bool146($144compare_op.14, func=bool146, args=(Var($144compare_op.14, arrayobj.py:4533),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 182
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 182
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $182load_global.0 = global(max: <built-in function max>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const186.2 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: nitems = call $182load_global.0(nitems_r, $const186.2, func=$182load_global.0, args=[Var(nitems_r, arrayobj.py:4530), Var($const186.2, arrayobj.py:4537)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 192
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 192
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $192load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $194load_method.1 = getattr(value=$192load_global.0, attr=empty)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $198load_deref.3 = freevar(true_dtype: int64)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: arr = call $194load_method.1(nitems, $198load_deref.3, func=$194load_method.1, args=[Var(nitems, arrayobj.py:4535), Var($198load_deref.3, arrayobj.py:4538)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: val = _start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 208
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 208
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $210load_global.0 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $214call_function.2 = call $210load_global.0(nitems, func=$210load_global.0, args=[Var(nitems, arrayobj.py:4535)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $216get_iter.3 = getiter(value=$214call_function.2)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi218.0 = $216get_iter.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 218
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 218
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $218for_iter.1 = iternext(value=$phi218.0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $218for_iter.2 = pair_first(value=$218for_iter.1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $218for_iter.3 = pair_second(value=$218for_iter.1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi220.1 = $218for_iter.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $218for_iter.3, 220, 240
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 220
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: i = $phi220.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $228binary_multiply.5 = i * _step
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $230binary_add.6 = val + $228binary_multiply.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: arr[i] = $230binary_add.6
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 218
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 240
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 242
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 242
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $244return_value.1 = cast(value=arr)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $244return_value.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {58: [<numba.core.ir.Assign object at 0x0000015A39D03D88>],
             62: [<numba.core.ir.Assign object at 0x0000015A39D03B88>]})
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: start = arg(0, name=start)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: stop = arg(1, name=stop)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: step = arg(2, name=step)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: dtype = arg(3, name=dtype)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $2load_deref.0 = freevar(start_value: None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const4.1 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $6compare_op.2 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, arrayobj.py:4516),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 14
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 14
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi16.0 = start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 16
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 16
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: lit_start = $phi16.0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $18load_deref.1 = freevar(stop_value: None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const20.2 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $22compare_op.3 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $24pred = call bool24($22compare_op.3, func=bool24, args=(Var($22compare_op.3, arrayobj.py:4517),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 30
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 30
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi32.0 = stop
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 32
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 32
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: lit_stop = $phi32.0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $34load_deref.1 = freevar(step_value: None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const36.2 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $38compare_op.3 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool40 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $40pred = call bool40($38compare_op.3, func=bool40, args=(Var($38compare_op.3, arrayobj.py:4518),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 46
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 46
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi48.0 = step
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 48
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 48
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: lit_step = $phi48.0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const52.2 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $54compare_op.3 = lit_step is not $const52.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool56 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $56pred = call bool56($54compare_op.3, func=bool56, args=(Var($54compare_op.3, arrayobj.py:4520),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $56pred, 58, 62
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 58
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi64.0 = lit_step
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 64
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 62
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const62.0 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi64.0.1 = $const62.0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 64
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 64
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: _step = $phi64.0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='$phi64.0' stmt=_step = $phi64.0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 64
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG insert phi node $phi64.0.2 = phi(incoming_values=[], incoming_blocks=[]) at 64
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 58
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG incoming_def $phi64.0 = lit_step
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 62
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG incoming_def $phi64.0.1 = $const62.0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: _step = $phi64.0.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const68.2 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $70compare_op.3 = lit_stop is $const68.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool72 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $72pred = call bool72($70compare_op.3, func=bool72, args=(Var($70compare_op.3, arrayobj.py:4521),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $72pred, 74, 86
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 74
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: _start = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: _stop = lit_start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 96
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 86
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: _start = lit_start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: _stop = lit_stop
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 96
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 96
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const98.1 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $100compare_op.2 = _step == $const98.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool102 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:4526),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $102pred, 104, 112
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 104
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $104load_global.0 = global(ValueError: <class 'ValueError'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const106.1 = const(str, Maximum allowed size exceeded)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $108call_function.2 = call $104load_global.0($const106.1, func=$104load_global.0, args=[Var($const106.1, arrayobj.py:4527)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 112
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $116binary_subtract.2 = _stop - _start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: nitems_c = $116binary_subtract.2 / _step
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $124load_global.5 = global(int: <class 'int'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $126load_global.6 = global(math: <module 'math' (built-in)>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $128load_method.7 = getattr(value=$126load_global.6, attr=ceil)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $132load_attr.9 = getattr(value=nitems_c, attr=real)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $134call_method.10 = call $128load_method.7($132load_attr.9, func=$128load_method.7, args=[Var($132load_attr.9, arrayobj.py:4530)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: nitems_r = call $124load_global.5($134call_method.10, func=$124load_global.5, args=[Var($134call_method.10, arrayobj.py:4530)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $140load_deref.12 = freevar(use_complex: False)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const142.13 = const(bool, True)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $144compare_op.14 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool146 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $146pred = call bool146($144compare_op.14, func=bool146, args=(Var($144compare_op.14, arrayobj.py:4533),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 182
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 182
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $182load_global.0 = global(max: <built-in function max>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const186.2 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: nitems = call $182load_global.0(nitems_r, $const186.2, func=$182load_global.0, args=[Var(nitems_r, arrayobj.py:4530), Var($const186.2, arrayobj.py:4537)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 192
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 192
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $192load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $194load_method.1 = getattr(value=$192load_global.0, attr=empty)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $198load_deref.3 = freevar(true_dtype: int64)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: arr = call $194load_method.1(nitems, $198load_deref.3, func=$194load_method.1, args=[Var(nitems, arrayobj.py:4535), Var($198load_deref.3, arrayobj.py:4538)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: val = _start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 208
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 208
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $210load_global.0 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $214call_function.2 = call $210load_global.0(nitems, func=$210load_global.0, args=[Var(nitems, arrayobj.py:4535)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $216get_iter.3 = getiter(value=$214call_function.2)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi218.0 = $216get_iter.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 218
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 218
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $218for_iter.1 = iternext(value=$phi218.0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $218for_iter.2 = pair_first(value=$218for_iter.1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $218for_iter.3 = pair_second(value=$218for_iter.1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi220.1 = $218for_iter.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $218for_iter.3, 220, 240
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 220
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: i = $phi220.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $228binary_multiply.5 = i * _step
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $230binary_add.6 = val + $228binary_multiply.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: arr[i] = $230binary_add.6
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 218
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 240
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 242
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 242
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39D03E88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $244return_value.1 = cast(value=arr)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $244return_value.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Fix SSA violator on var _stop
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03248>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: start = arg(0, name=start)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: stop = arg(1, name=stop)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: step = arg(2, name=step)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: dtype = arg(3, name=dtype)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $2load_deref.0 = freevar(start_value: None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const4.1 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $6compare_op.2 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, arrayobj.py:4516),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 14
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 14
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03248>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi16.0 = start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 16
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 16
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03248>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: lit_start = $phi16.0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $18load_deref.1 = freevar(stop_value: None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const20.2 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $22compare_op.3 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $24pred = call bool24($22compare_op.3, func=bool24, args=(Var($22compare_op.3, arrayobj.py:4517),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 30
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 30
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03248>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi32.0 = stop
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 32
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 32
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03248>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: lit_stop = $phi32.0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $34load_deref.1 = freevar(step_value: None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const36.2 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $38compare_op.3 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool40 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $40pred = call bool40($38compare_op.3, func=bool40, args=(Var($38compare_op.3, arrayobj.py:4518),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 46
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 46
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03248>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi48.0 = step
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 48
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 48
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03248>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: lit_step = $phi48.0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const52.2 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $54compare_op.3 = lit_step is not $const52.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool56 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $56pred = call bool56($54compare_op.3, func=bool56, args=(Var($54compare_op.3, arrayobj.py:4520),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $56pred, 58, 62
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 58
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03248>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi64.0 = lit_step
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 64
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 62
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03248>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const62.0 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi64.0.1 = $const62.0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 64
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 64
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03248>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi64.0.2 = phi(incoming_values=[Var($phi64.0, arrayobj.py:4520), Var($phi64.0.1, arrayobj.py:4520)], incoming_blocks=[58, 62])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: _step = $phi64.0.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const68.2 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $70compare_op.3 = lit_stop is $const68.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool72 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $72pred = call bool72($70compare_op.3, func=bool72, args=(Var($70compare_op.3, arrayobj.py:4521),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $72pred, 74, 86
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 74
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03248>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: _start = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: _stop = lit_start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG first assign: _stop
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: _stop = lit_start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 96
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 86
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03248>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: _start = lit_start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: _stop = lit_stop
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: _stop.1 = lit_stop
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 96
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 96
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03248>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const98.1 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $100compare_op.2 = _step == $const98.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool102 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:4526),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $102pred, 104, 112
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 104
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03248>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $104load_global.0 = global(ValueError: <class 'ValueError'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const106.1 = const(str, Maximum allowed size exceeded)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $108call_function.2 = call $104load_global.0($const106.1, func=$104load_global.0, args=[Var($const106.1, arrayobj.py:4527)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 112
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03248>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $116binary_subtract.2 = _stop - _start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: nitems_c = $116binary_subtract.2 / _step
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $124load_global.5 = global(int: <class 'int'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $126load_global.6 = global(math: <module 'math' (built-in)>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $128load_method.7 = getattr(value=$126load_global.6, attr=ceil)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $132load_attr.9 = getattr(value=nitems_c, attr=real)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $134call_method.10 = call $128load_method.7($132load_attr.9, func=$128load_method.7, args=[Var($132load_attr.9, arrayobj.py:4530)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: nitems_r = call $124load_global.5($134call_method.10, func=$124load_global.5, args=[Var($134call_method.10, arrayobj.py:4530)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $140load_deref.12 = freevar(use_complex: False)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const142.13 = const(bool, True)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $144compare_op.14 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool146 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $146pred = call bool146($144compare_op.14, func=bool146, args=(Var($144compare_op.14, arrayobj.py:4533),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 182
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 182
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03248>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $182load_global.0 = global(max: <built-in function max>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const186.2 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: nitems = call $182load_global.0(nitems_r, $const186.2, func=$182load_global.0, args=[Var(nitems_r, arrayobj.py:4530), Var($const186.2, arrayobj.py:4537)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 192
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 192
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03248>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $192load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $194load_method.1 = getattr(value=$192load_global.0, attr=empty)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $198load_deref.3 = freevar(true_dtype: int64)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: arr = call $194load_method.1(nitems, $198load_deref.3, func=$194load_method.1, args=[Var(nitems, arrayobj.py:4535), Var($198load_deref.3, arrayobj.py:4538)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: val = _start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 208
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 208
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03248>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $210load_global.0 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $214call_function.2 = call $210load_global.0(nitems, func=$210load_global.0, args=[Var(nitems, arrayobj.py:4535)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $216get_iter.3 = getiter(value=$214call_function.2)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi218.0 = $216get_iter.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 218
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 218
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03248>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $218for_iter.1 = iternext(value=$phi218.0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $218for_iter.2 = pair_first(value=$218for_iter.1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $218for_iter.3 = pair_second(value=$218for_iter.1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi220.1 = $218for_iter.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $218for_iter.3, 220, 240
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 220
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03248>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: i = $phi220.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $228binary_multiply.5 = i * _step
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $230binary_add.6 = val + $228binary_multiply.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: arr[i] = $230binary_add.6
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 218
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 240
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03248>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 242
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 242
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39D03248>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $244return_value.1 = cast(value=arr)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $244return_value.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {74: [<numba.core.ir.Assign object at 0x0000015A39D03CC8>],
             86: [<numba.core.ir.Assign object at 0x0000015A39D03A48>]})
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CF1708>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: start = arg(0, name=start)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: stop = arg(1, name=stop)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: step = arg(2, name=step)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: dtype = arg(3, name=dtype)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $2load_deref.0 = freevar(start_value: None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const4.1 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $6compare_op.2 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, arrayobj.py:4516),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 14
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 14
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CF1708>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi16.0 = start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 16
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 16
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CF1708>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: lit_start = $phi16.0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $18load_deref.1 = freevar(stop_value: None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const20.2 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $22compare_op.3 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $24pred = call bool24($22compare_op.3, func=bool24, args=(Var($22compare_op.3, arrayobj.py:4517),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 30
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 30
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CF1708>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi32.0 = stop
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 32
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 32
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CF1708>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: lit_stop = $phi32.0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $34load_deref.1 = freevar(step_value: None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const36.2 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $38compare_op.3 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool40 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $40pred = call bool40($38compare_op.3, func=bool40, args=(Var($38compare_op.3, arrayobj.py:4518),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 46
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 46
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CF1708>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi48.0 = step
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 48
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 48
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CF1708>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: lit_step = $phi48.0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const52.2 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $54compare_op.3 = lit_step is not $const52.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool56 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $56pred = call bool56($54compare_op.3, func=bool56, args=(Var($54compare_op.3, arrayobj.py:4520),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $56pred, 58, 62
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 58
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CF1708>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi64.0 = lit_step
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 64
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 62
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CF1708>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const62.0 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi64.0.1 = $const62.0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 64
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 64
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CF1708>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi64.0.2 = phi(incoming_values=[Var($phi64.0, arrayobj.py:4520), Var($phi64.0.1, arrayobj.py:4520)], incoming_blocks=[58, 62])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: _step = $phi64.0.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const68.2 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $70compare_op.3 = lit_stop is $const68.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool72 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $72pred = call bool72($70compare_op.3, func=bool72, args=(Var($70compare_op.3, arrayobj.py:4521),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $72pred, 74, 86
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 74
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CF1708>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: _start = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: _stop = lit_start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 96
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 86
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CF1708>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: _start = lit_start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: _stop.1 = lit_stop
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 96
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 96
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CF1708>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const98.1 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $100compare_op.2 = _step == $const98.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool102 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:4526),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $102pred, 104, 112
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 104
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CF1708>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $104load_global.0 = global(ValueError: <class 'ValueError'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const106.1 = const(str, Maximum allowed size exceeded)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $108call_function.2 = call $104load_global.0($const106.1, func=$104load_global.0, args=[Var($const106.1, arrayobj.py:4527)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 112
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CF1708>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $116binary_subtract.2 = _stop - _start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='_stop' stmt=$116binary_subtract.2 = _stop - _start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 112
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 96 from label 112
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 96
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 96
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG insert phi node _stop.2 = phi(incoming_values=[], incoming_blocks=[]) at 96
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 74
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG incoming_def _stop = lit_start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 86
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG incoming_def _stop.1 = lit_stop
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: $116binary_subtract.2 = _stop.2 - _start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: nitems_c = $116binary_subtract.2 / _step
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $124load_global.5 = global(int: <class 'int'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $126load_global.6 = global(math: <module 'math' (built-in)>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $128load_method.7 = getattr(value=$126load_global.6, attr=ceil)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $132load_attr.9 = getattr(value=nitems_c, attr=real)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $134call_method.10 = call $128load_method.7($132load_attr.9, func=$128load_method.7, args=[Var($132load_attr.9, arrayobj.py:4530)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: nitems_r = call $124load_global.5($134call_method.10, func=$124load_global.5, args=[Var($134call_method.10, arrayobj.py:4530)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $140load_deref.12 = freevar(use_complex: False)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const142.13 = const(bool, True)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $144compare_op.14 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool146 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $146pred = call bool146($144compare_op.14, func=bool146, args=(Var($144compare_op.14, arrayobj.py:4533),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 182
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 182
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CF1708>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $182load_global.0 = global(max: <built-in function max>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const186.2 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: nitems = call $182load_global.0(nitems_r, $const186.2, func=$182load_global.0, args=[Var(nitems_r, arrayobj.py:4530), Var($const186.2, arrayobj.py:4537)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 192
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 192
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CF1708>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $192load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $194load_method.1 = getattr(value=$192load_global.0, attr=empty)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $198load_deref.3 = freevar(true_dtype: int64)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: arr = call $194load_method.1(nitems, $198load_deref.3, func=$194load_method.1, args=[Var(nitems, arrayobj.py:4535), Var($198load_deref.3, arrayobj.py:4538)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: val = _start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 208
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 208
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CF1708>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $210load_global.0 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $214call_function.2 = call $210load_global.0(nitems, func=$210load_global.0, args=[Var(nitems, arrayobj.py:4535)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $216get_iter.3 = getiter(value=$214call_function.2)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi218.0 = $216get_iter.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 218
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 218
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CF1708>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $218for_iter.1 = iternext(value=$phi218.0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $218for_iter.2 = pair_first(value=$218for_iter.1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $218for_iter.3 = pair_second(value=$218for_iter.1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi220.1 = $218for_iter.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $218for_iter.3, 220, 240
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 220
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CF1708>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: i = $phi220.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $228binary_multiply.5 = i * _step
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $230binary_add.6 = val + $228binary_multiply.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: arr[i] = $230binary_add.6
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 218
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 240
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CF1708>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 242
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 242
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CF1708>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $244return_value.1 = cast(value=arr)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $244return_value.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Fix SSA violator on var _start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39CACA48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: start = arg(0, name=start)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: stop = arg(1, name=stop)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: step = arg(2, name=step)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: dtype = arg(3, name=dtype)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $2load_deref.0 = freevar(start_value: None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const4.1 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $6compare_op.2 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, arrayobj.py:4516),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 14
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 14
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39CACA48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi16.0 = start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 16
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 16
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39CACA48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: lit_start = $phi16.0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $18load_deref.1 = freevar(stop_value: None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const20.2 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $22compare_op.3 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $24pred = call bool24($22compare_op.3, func=bool24, args=(Var($22compare_op.3, arrayobj.py:4517),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 30
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 30
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39CACA48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi32.0 = stop
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 32
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 32
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39CACA48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: lit_stop = $phi32.0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $34load_deref.1 = freevar(step_value: None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const36.2 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $38compare_op.3 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool40 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $40pred = call bool40($38compare_op.3, func=bool40, args=(Var($38compare_op.3, arrayobj.py:4518),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 46
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 46
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39CACA48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi48.0 = step
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 48
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 48
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39CACA48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: lit_step = $phi48.0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const52.2 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $54compare_op.3 = lit_step is not $const52.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool56 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $56pred = call bool56($54compare_op.3, func=bool56, args=(Var($54compare_op.3, arrayobj.py:4520),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $56pred, 58, 62
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 58
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39CACA48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi64.0 = lit_step
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 64
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 62
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39CACA48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const62.0 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi64.0.1 = $const62.0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 64
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 64
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39CACA48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi64.0.2 = phi(incoming_values=[Var($phi64.0, arrayobj.py:4520), Var($phi64.0.1, arrayobj.py:4520)], incoming_blocks=[58, 62])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: _step = $phi64.0.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const68.2 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $70compare_op.3 = lit_stop is $const68.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool72 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $72pred = call bool72($70compare_op.3, func=bool72, args=(Var($70compare_op.3, arrayobj.py:4521),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $72pred, 74, 86
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 74
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39CACA48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: _start = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG first assign: _start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: _start = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: _stop = lit_start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 96
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 86
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39CACA48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: _start = lit_start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: _start.1 = lit_start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: _stop.1 = lit_stop
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 96
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 96
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39CACA48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: _stop.2 = phi(incoming_values=[Var(_stop, arrayobj.py:4522), Var(_stop.1, arrayobj.py:4524)], incoming_blocks=[74, 86])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const98.1 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $100compare_op.2 = _step == $const98.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool102 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:4526),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $102pred, 104, 112
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 104
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39CACA48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $104load_global.0 = global(ValueError: <class 'ValueError'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const106.1 = const(str, Maximum allowed size exceeded)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $108call_function.2 = call $104load_global.0($const106.1, func=$104load_global.0, args=[Var($const106.1, arrayobj.py:4527)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 112
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39CACA48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $116binary_subtract.2 = _stop.2 - _start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: nitems_c = $116binary_subtract.2 / _step
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $124load_global.5 = global(int: <class 'int'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $126load_global.6 = global(math: <module 'math' (built-in)>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $128load_method.7 = getattr(value=$126load_global.6, attr=ceil)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $132load_attr.9 = getattr(value=nitems_c, attr=real)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $134call_method.10 = call $128load_method.7($132load_attr.9, func=$128load_method.7, args=[Var($132load_attr.9, arrayobj.py:4530)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: nitems_r = call $124load_global.5($134call_method.10, func=$124load_global.5, args=[Var($134call_method.10, arrayobj.py:4530)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $140load_deref.12 = freevar(use_complex: False)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const142.13 = const(bool, True)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $144compare_op.14 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool146 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $146pred = call bool146($144compare_op.14, func=bool146, args=(Var($144compare_op.14, arrayobj.py:4533),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 182
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 182
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39CACA48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $182load_global.0 = global(max: <built-in function max>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const186.2 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: nitems = call $182load_global.0(nitems_r, $const186.2, func=$182load_global.0, args=[Var(nitems_r, arrayobj.py:4530), Var($const186.2, arrayobj.py:4537)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 192
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 192
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39CACA48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $192load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $194load_method.1 = getattr(value=$192load_global.0, attr=empty)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $198load_deref.3 = freevar(true_dtype: int64)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: arr = call $194load_method.1(nitems, $198load_deref.3, func=$194load_method.1, args=[Var(nitems, arrayobj.py:4535), Var($198load_deref.3, arrayobj.py:4538)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: val = _start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 208
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 208
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39CACA48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $210load_global.0 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $214call_function.2 = call $210load_global.0(nitems, func=$210load_global.0, args=[Var(nitems, arrayobj.py:4535)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $216get_iter.3 = getiter(value=$214call_function.2)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi218.0 = $216get_iter.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 218
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 218
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39CACA48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $218for_iter.1 = iternext(value=$phi218.0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $218for_iter.2 = pair_first(value=$218for_iter.1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $218for_iter.3 = pair_second(value=$218for_iter.1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi220.1 = $218for_iter.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $218for_iter.3, 220, 240
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 220
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39CACA48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: i = $phi220.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $228binary_multiply.5 = i * _step
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $230binary_add.6 = val + $228binary_multiply.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: arr[i] = $230binary_add.6
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 218
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 240
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39CACA48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 242
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 242
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39CACA48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $244return_value.1 = cast(value=arr)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $244return_value.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {74: [<numba.core.ir.Assign object at 0x0000015A39D03108>],
             86: [<numba.core.ir.Assign object at 0x0000015A39D03888>]})
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CA5648>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: start = arg(0, name=start)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: stop = arg(1, name=stop)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: step = arg(2, name=step)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: dtype = arg(3, name=dtype)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $2load_deref.0 = freevar(start_value: None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const4.1 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $6compare_op.2 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, arrayobj.py:4516),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 14
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 14
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CA5648>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi16.0 = start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 16
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 16
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CA5648>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: lit_start = $phi16.0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $18load_deref.1 = freevar(stop_value: None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const20.2 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $22compare_op.3 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $24pred = call bool24($22compare_op.3, func=bool24, args=(Var($22compare_op.3, arrayobj.py:4517),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 30
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 30
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CA5648>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi32.0 = stop
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 32
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 32
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CA5648>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: lit_stop = $phi32.0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $34load_deref.1 = freevar(step_value: None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const36.2 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $38compare_op.3 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool40 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $40pred = call bool40($38compare_op.3, func=bool40, args=(Var($38compare_op.3, arrayobj.py:4518),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 46
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 46
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CA5648>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi48.0 = step
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 48
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 48
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CA5648>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: lit_step = $phi48.0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const52.2 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $54compare_op.3 = lit_step is not $const52.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool56 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $56pred = call bool56($54compare_op.3, func=bool56, args=(Var($54compare_op.3, arrayobj.py:4520),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $56pred, 58, 62
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 58
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CA5648>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi64.0 = lit_step
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 64
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 62
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CA5648>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const62.0 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi64.0.1 = $const62.0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 64
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 64
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CA5648>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi64.0.2 = phi(incoming_values=[Var($phi64.0, arrayobj.py:4520), Var($phi64.0.1, arrayobj.py:4520)], incoming_blocks=[58, 62])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: _step = $phi64.0.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const68.2 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $70compare_op.3 = lit_stop is $const68.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool72 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $72pred = call bool72($70compare_op.3, func=bool72, args=(Var($70compare_op.3, arrayobj.py:4521),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $72pred, 74, 86
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 74
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CA5648>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: _start = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: _stop = lit_start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 96
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 86
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CA5648>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: _start.1 = lit_start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: _stop.1 = lit_stop
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 96
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 96
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CA5648>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: _stop.2 = phi(incoming_values=[Var(_stop, arrayobj.py:4522), Var(_stop.1, arrayobj.py:4524)], incoming_blocks=[74, 86])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const98.1 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $100compare_op.2 = _step == $const98.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool102 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:4526),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $102pred, 104, 112
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 104
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CA5648>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $104load_global.0 = global(ValueError: <class 'ValueError'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const106.1 = const(str, Maximum allowed size exceeded)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $108call_function.2 = call $104load_global.0($const106.1, func=$104load_global.0, args=[Var($const106.1, arrayobj.py:4527)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 112
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CA5648>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $116binary_subtract.2 = _stop.2 - _start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='_start' stmt=$116binary_subtract.2 = _stop.2 - _start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 112
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 96 from label 112
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 96
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 96
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG insert phi node _start.2 = phi(incoming_values=[], incoming_blocks=[]) at 96
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 74
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG incoming_def _start = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 86
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG incoming_def _start.1 = lit_start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: $116binary_subtract.2 = _stop.2 - _start.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: nitems_c = $116binary_subtract.2 / _step
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $124load_global.5 = global(int: <class 'int'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $126load_global.6 = global(math: <module 'math' (built-in)>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $128load_method.7 = getattr(value=$126load_global.6, attr=ceil)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $132load_attr.9 = getattr(value=nitems_c, attr=real)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $134call_method.10 = call $128load_method.7($132load_attr.9, func=$128load_method.7, args=[Var($132load_attr.9, arrayobj.py:4530)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: nitems_r = call $124load_global.5($134call_method.10, func=$124load_global.5, args=[Var($134call_method.10, arrayobj.py:4530)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $140load_deref.12 = freevar(use_complex: False)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const142.13 = const(bool, True)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $144compare_op.14 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool146 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $146pred = call bool146($144compare_op.14, func=bool146, args=(Var($144compare_op.14, arrayobj.py:4533),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 182
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 182
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CA5648>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $182load_global.0 = global(max: <built-in function max>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const186.2 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: nitems = call $182load_global.0(nitems_r, $const186.2, func=$182load_global.0, args=[Var(nitems_r, arrayobj.py:4530), Var($const186.2, arrayobj.py:4537)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 192
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 192
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CA5648>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $192load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $194load_method.1 = getattr(value=$192load_global.0, attr=empty)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $198load_deref.3 = freevar(true_dtype: int64)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: arr = call $194load_method.1(nitems, $198load_deref.3, func=$194load_method.1, args=[Var(nitems, arrayobj.py:4535), Var($198load_deref.3, arrayobj.py:4538)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: val = _start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='_start' stmt=val = _start
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 192
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 182 from label 192
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 182
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 182
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 112 from label 182
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 112
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 112
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 96 from label 112
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 96
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: val = _start.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 208
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 208
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CA5648>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $210load_global.0 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $214call_function.2 = call $210load_global.0(nitems, func=$210load_global.0, args=[Var(nitems, arrayobj.py:4535)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $216get_iter.3 = getiter(value=$214call_function.2)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi218.0 = $216get_iter.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 218
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 218
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CA5648>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $218for_iter.1 = iternext(value=$phi218.0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $218for_iter.2 = pair_first(value=$218for_iter.1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $218for_iter.3 = pair_second(value=$218for_iter.1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi220.1 = $218for_iter.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $218for_iter.3, 220, 240
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 220
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CA5648>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: i = $phi220.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $228binary_multiply.5 = i * _step
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $230binary_add.6 = val + $228binary_multiply.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: arr[i] = $230binary_add.6
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 218
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 240
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CA5648>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 242
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 242
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CA5648>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $244return_value.1 = cast(value=arr)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $244return_value.1
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4101)
           2	LOAD_GLOBAL(arg=0, lineno=4101)
           4	LOAD_FAST(arg=0, lineno=4101)
           6	LOAD_FAST(arg=1, lineno=4101)
           8	LOAD_DEREF(arg=0, lineno=4101)
          10	CALL_FUNCTION(arg=3, lineno=4101)
          12	RETURN_VALUE(arg=None, lineno=4101)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4101)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4101)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4101)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$2load_global.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4101)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$2load_global.0', '$shape4.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=8, inst=LOAD_DEREF(arg=0, lineno=4101)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=4101)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2', '$8load_deref.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4101)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$10call_function.4']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG -------------------------Prune PHIs-------------------------
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG defmap: {}
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG keep phismap: {}
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG new_out: defaultdict(<class 'dict'>, {})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG ----------------------DONE Prune PHIs-----------------------
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'res': '$dtype6.2'}), (8, {'res': '$8load_deref.3'}), (10, {'func': '$2load_global.0', 'args': ['$shape4.1', '$dtype6.2', '$8load_deref.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:41 interpreter.py DEBUG label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$2load_global.0']
    $8load_deref.3 = freevar(retty: array(int64, 1d, C)) ['$8load_deref.3']
    $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8load_deref.3', 'dtype', 'shape']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A39D17688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: shape = arg(0, name=shape)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: dtype = arg(1, name=dtype)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $8load_deref.3 = freevar(retty: array(int64, 1d, C))
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $12return_value.5 = cast(value=$10call_function.4)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $12return_value.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x0000015A39D032C8>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x0000015A39D039C8>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000015A39D17D48>],
             '$8load_deref.3': [<numba.core.ir.Assign object at 0x0000015A39D14148>],
             'dtype': [<numba.core.ir.Assign object at 0x0000015A39D17C08>],
             'shape': [<numba.core.ir.Assign object at 0x0000015A39D17B08>]})
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG SSA violators set()
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=92)
           2	LOAD_FAST(arg=2, lineno=92)
           4	LOAD_CONST(arg=1, lineno=92)
           6	COMPARE_OP(arg=5, lineno=92)
           8	POP_JUMP_IF_TRUE(arg=14, lineno=92)
          10	LOAD_GLOBAL(arg=0, lineno=92)
          12	RAISE_VARARGS(arg=1, lineno=92)
>         14	LOAD_FAST(arg=3, lineno=93)
          16	LOAD_FAST(arg=2, lineno=93)
          18	COMPARE_OP(arg=4, lineno=93)
          20	POP_JUMP_IF_TRUE(arg=26, lineno=93)
          22	LOAD_GLOBAL(arg=0, lineno=93)
          24	RAISE_VARARGS(arg=1, lineno=93)
>         26	LOAD_FAST(arg=2, lineno=95)
          28	LOAD_FAST(arg=3, lineno=95)
          30	BINARY_ADD(arg=None, lineno=95)
          32	LOAD_CONST(arg=2, lineno=95)
          34	BINARY_RSHIFT(arg=None, lineno=95)
          36	STORE_FAST(arg=4, lineno=95)
          38	LOAD_DEREF(arg=1, lineno=102)
          40	LOAD_DEREF(arg=0, lineno=102)
          42	LOAD_FAST(arg=0, lineno=102)
          44	LOAD_FAST(arg=1, lineno=102)
          46	LOAD_FAST(arg=4, lineno=102)
          48	BINARY_SUBSCR(arg=None, lineno=102)
          50	CALL_FUNCTION(arg=2, lineno=102)
          52	LOAD_DEREF(arg=0, lineno=102)
          54	LOAD_FAST(arg=0, lineno=102)
          56	LOAD_FAST(arg=1, lineno=102)
          58	LOAD_FAST(arg=2, lineno=102)
          60	BINARY_SUBSCR(arg=None, lineno=102)
          62	CALL_FUNCTION(arg=2, lineno=102)
          64	CALL_FUNCTION(arg=2, lineno=102)
          66	POP_JUMP_IF_FALSE(arg=94, lineno=102)
          68	LOAD_FAST(arg=1, lineno=103)
          70	LOAD_FAST(arg=4, lineno=103)
          72	BINARY_SUBSCR(arg=None, lineno=103)
          74	LOAD_FAST(arg=1, lineno=103)
          76	LOAD_FAST(arg=2, lineno=103)
          78	BINARY_SUBSCR(arg=None, lineno=103)
          80	ROT_TWO(arg=None, lineno=103)
          82	LOAD_FAST(arg=1, lineno=103)
          84	LOAD_FAST(arg=2, lineno=103)
          86	STORE_SUBSCR(arg=None, lineno=103)
          88	LOAD_FAST(arg=1, lineno=103)
          90	LOAD_FAST(arg=4, lineno=103)
          92	STORE_SUBSCR(arg=None, lineno=103)
>         94	LOAD_DEREF(arg=1, lineno=104)
          96	LOAD_DEREF(arg=0, lineno=104)
          98	LOAD_FAST(arg=0, lineno=104)
         100	LOAD_FAST(arg=1, lineno=104)
         102	LOAD_FAST(arg=3, lineno=104)
         104	BINARY_SUBSCR(arg=None, lineno=104)
         106	CALL_FUNCTION(arg=2, lineno=104)
         108	LOAD_DEREF(arg=0, lineno=104)
         110	LOAD_FAST(arg=0, lineno=104)
         112	LOAD_FAST(arg=1, lineno=104)
         114	LOAD_FAST(arg=4, lineno=104)
         116	BINARY_SUBSCR(arg=None, lineno=104)
         118	CALL_FUNCTION(arg=2, lineno=104)
         120	CALL_FUNCTION(arg=2, lineno=104)
         122	POP_JUMP_IF_FALSE(arg=150, lineno=104)
         124	LOAD_FAST(arg=1, lineno=105)
         126	LOAD_FAST(arg=4, lineno=105)
         128	BINARY_SUBSCR(arg=None, lineno=105)
         130	LOAD_FAST(arg=1, lineno=105)
         132	LOAD_FAST(arg=3, lineno=105)
         134	BINARY_SUBSCR(arg=None, lineno=105)
         136	ROT_TWO(arg=None, lineno=105)
         138	LOAD_FAST(arg=1, lineno=105)
         140	LOAD_FAST(arg=3, lineno=105)
         142	STORE_SUBSCR(arg=None, lineno=105)
         144	LOAD_FAST(arg=1, lineno=105)
         146	LOAD_FAST(arg=4, lineno=105)
         148	STORE_SUBSCR(arg=None, lineno=105)
>        150	LOAD_DEREF(arg=1, lineno=106)
         152	LOAD_DEREF(arg=0, lineno=106)
         154	LOAD_FAST(arg=0, lineno=106)
         156	LOAD_FAST(arg=1, lineno=106)
         158	LOAD_FAST(arg=4, lineno=106)
         160	BINARY_SUBSCR(arg=None, lineno=106)
         162	CALL_FUNCTION(arg=2, lineno=106)
         164	LOAD_DEREF(arg=0, lineno=106)
         166	LOAD_FAST(arg=0, lineno=106)
         168	LOAD_FAST(arg=1, lineno=106)
         170	LOAD_FAST(arg=2, lineno=106)
         172	BINARY_SUBSCR(arg=None, lineno=106)
         174	CALL_FUNCTION(arg=2, lineno=106)
         176	CALL_FUNCTION(arg=2, lineno=106)
         178	POP_JUMP_IF_FALSE(arg=206, lineno=106)
         180	LOAD_FAST(arg=1, lineno=107)
         182	LOAD_FAST(arg=4, lineno=107)
         184	BINARY_SUBSCR(arg=None, lineno=107)
         186	LOAD_FAST(arg=1, lineno=107)
         188	LOAD_FAST(arg=2, lineno=107)
         190	BINARY_SUBSCR(arg=None, lineno=107)
         192	ROT_TWO(arg=None, lineno=107)
         194	LOAD_FAST(arg=1, lineno=107)
         196	LOAD_FAST(arg=2, lineno=107)
         198	STORE_SUBSCR(arg=None, lineno=107)
         200	LOAD_FAST(arg=1, lineno=107)
         202	LOAD_FAST(arg=4, lineno=107)
         204	STORE_SUBSCR(arg=None, lineno=107)
>        206	LOAD_DEREF(arg=0, lineno=108)
         208	LOAD_FAST(arg=0, lineno=108)
         210	LOAD_FAST(arg=1, lineno=108)
         212	LOAD_FAST(arg=4, lineno=108)
         214	BINARY_SUBSCR(arg=None, lineno=108)
         216	CALL_FUNCTION(arg=2, lineno=108)
         218	STORE_FAST(arg=5, lineno=108)
         220	LOAD_FAST(arg=1, lineno=111)
         222	LOAD_FAST(arg=4, lineno=111)
         224	BINARY_SUBSCR(arg=None, lineno=111)
         226	LOAD_FAST(arg=1, lineno=111)
         228	LOAD_FAST(arg=3, lineno=111)
         230	BINARY_SUBSCR(arg=None, lineno=111)
         232	ROT_TWO(arg=None, lineno=111)
         234	LOAD_FAST(arg=1, lineno=111)
         236	LOAD_FAST(arg=3, lineno=111)
         238	STORE_SUBSCR(arg=None, lineno=111)
         240	LOAD_FAST(arg=1, lineno=111)
         242	LOAD_FAST(arg=4, lineno=111)
         244	STORE_SUBSCR(arg=None, lineno=111)
         246	LOAD_FAST(arg=2, lineno=112)
         248	STORE_FAST(arg=6, lineno=112)
         250	LOAD_FAST(arg=3, lineno=113)
         252	LOAD_CONST(arg=2, lineno=113)
         254	BINARY_SUBTRACT(arg=None, lineno=113)
         256	STORE_FAST(arg=7, lineno=113)
         258	SETUP_LOOP(arg=156, lineno=114)
>        260	SETUP_LOOP(arg=46, lineno=115)
>        262	LOAD_FAST(arg=6, lineno=115)
         264	LOAD_FAST(arg=3, lineno=115)
         266	COMPARE_OP(arg=0, lineno=115)
         268	POP_JUMP_IF_FALSE(arg=306, lineno=115)
         272	LOAD_DEREF(arg=1, lineno=115)
         274	LOAD_DEREF(arg=0, lineno=115)
         276	LOAD_FAST(arg=0, lineno=115)
         278	LOAD_FAST(arg=1, lineno=115)
         280	LOAD_FAST(arg=6, lineno=115)
         282	BINARY_SUBSCR(arg=None, lineno=115)
         284	CALL_FUNCTION(arg=2, lineno=115)
         286	LOAD_FAST(arg=5, lineno=115)
         288	CALL_FUNCTION(arg=2, lineno=115)
         290	POP_JUMP_IF_FALSE(arg=306, lineno=115)
         294	LOAD_FAST(arg=6, lineno=116)
         296	LOAD_CONST(arg=2, lineno=116)
         298	INPLACE_ADD(arg=None, lineno=116)
         300	STORE_FAST(arg=6, lineno=116)
         302	JUMP_ABSOLUTE(arg=262, lineno=116)
>        306	POP_BLOCK(arg=None, lineno=116)
>        308	SETUP_LOOP(arg=46, lineno=117)
>        310	LOAD_FAST(arg=7, lineno=117)
         312	LOAD_FAST(arg=2, lineno=117)
         314	COMPARE_OP(arg=5, lineno=117)
         316	POP_JUMP_IF_FALSE(arg=354, lineno=117)
         320	LOAD_DEREF(arg=1, lineno=117)
         322	LOAD_FAST(arg=5, lineno=117)
         324	LOAD_DEREF(arg=0, lineno=117)
         326	LOAD_FAST(arg=0, lineno=117)
         328	LOAD_FAST(arg=1, lineno=117)
         330	LOAD_FAST(arg=7, lineno=117)
         332	BINARY_SUBSCR(arg=None, lineno=117)
         334	CALL_FUNCTION(arg=2, lineno=117)
         336	CALL_FUNCTION(arg=2, lineno=117)
         338	POP_JUMP_IF_FALSE(arg=354, lineno=117)
         342	LOAD_FAST(arg=7, lineno=118)
         344	LOAD_CONST(arg=2, lineno=118)
         346	INPLACE_SUBTRACT(arg=None, lineno=118)
         348	STORE_FAST(arg=7, lineno=118)
         350	JUMP_ABSOLUTE(arg=310, lineno=118)
>        354	POP_BLOCK(arg=None, lineno=118)
>        356	LOAD_FAST(arg=6, lineno=119)
         358	LOAD_FAST(arg=7, lineno=119)
         360	COMPARE_OP(arg=5, lineno=119)
         362	POP_JUMP_IF_FALSE(arg=368, lineno=119)
         366	BREAK_LOOP(arg=None, lineno=120)
>        368	LOAD_FAST(arg=1, lineno=121)
         370	LOAD_FAST(arg=7, lineno=121)
         372	BINARY_SUBSCR(arg=None, lineno=121)
         374	LOAD_FAST(arg=1, lineno=121)
         376	LOAD_FAST(arg=6, lineno=121)
         378	BINARY_SUBSCR(arg=None, lineno=121)
         380	ROT_TWO(arg=None, lineno=121)
         382	LOAD_FAST(arg=1, lineno=121)
         384	LOAD_FAST(arg=6, lineno=121)
         386	STORE_SUBSCR(arg=None, lineno=121)
         388	LOAD_FAST(arg=1, lineno=121)
         390	LOAD_FAST(arg=7, lineno=121)
         392	STORE_SUBSCR(arg=None, lineno=121)
         394	LOAD_FAST(arg=6, lineno=122)
         396	LOAD_CONST(arg=2, lineno=122)
         398	INPLACE_ADD(arg=None, lineno=122)
         400	STORE_FAST(arg=6, lineno=122)
         402	LOAD_FAST(arg=7, lineno=123)
         404	LOAD_CONST(arg=2, lineno=123)
         406	INPLACE_SUBTRACT(arg=None, lineno=123)
         408	STORE_FAST(arg=7, lineno=123)
         410	JUMP_ABSOLUTE(arg=260, lineno=123)
         414	POP_BLOCK(arg=None, lineno=123)
>        416	LOAD_FAST(arg=1, lineno=126)
         418	LOAD_FAST(arg=3, lineno=126)
         420	BINARY_SUBSCR(arg=None, lineno=126)
         422	LOAD_FAST(arg=1, lineno=126)
         424	LOAD_FAST(arg=6, lineno=126)
         426	BINARY_SUBSCR(arg=None, lineno=126)
         428	ROT_TWO(arg=None, lineno=126)
         430	LOAD_FAST(arg=1, lineno=126)
         432	LOAD_FAST(arg=6, lineno=126)
         434	STORE_SUBSCR(arg=None, lineno=126)
         436	LOAD_FAST(arg=1, lineno=126)
         438	LOAD_FAST(arg=3, lineno=126)
         440	STORE_SUBSCR(arg=None, lineno=126)
         442	LOAD_FAST(arg=6, lineno=127)
         444	RETURN_VALUE(arg=None, lineno=127)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=92)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=92)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=92)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$low2.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=6, inst=COMPARE_OP(arg=5, lineno=92)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$low2.0', '$const4.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=8, inst=POP_JUMP_IF_TRUE(arg=14, lineno=92)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$6compare_op.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=10, inst=LOAD_GLOBAL(arg=0, lineno=92)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=12, inst=RAISE_VARARGS(arg=1, lineno=92)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$10load_global.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=14 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=14, inst=LOAD_FAST(arg=3, lineno=93)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=16, inst=LOAD_FAST(arg=2, lineno=93)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$high14.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=18, inst=COMPARE_OP(arg=4, lineno=93)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$high14.0', '$low16.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=20, inst=POP_JUMP_IF_TRUE(arg=26, lineno=93)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$18compare_op.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=22, stack=(), blockstack=(), npush=0), Edge(pc=26, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=22 nstack_initial=0), State(pc_initial=26 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=22, inst=LOAD_GLOBAL(arg=0, lineno=93)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=24, inst=RAISE_VARARGS(arg=1, lineno=93)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$22load_global.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=26 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=95)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=28, inst=LOAD_FAST(arg=3, lineno=95)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$low26.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=30, inst=BINARY_ADD(arg=None, lineno=95)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$low26.0', '$high28.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=32, inst=LOAD_CONST(arg=2, lineno=95)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$30binary_add.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=34, inst=BINARY_RSHIFT(arg=None, lineno=95)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$30binary_add.2', '$const32.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=36, inst=STORE_FAST(arg=4, lineno=95)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$34binary_rshift.4']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=38, inst=LOAD_DEREF(arg=1, lineno=102)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=40, inst=LOAD_DEREF(arg=0, lineno=102)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$38load_deref.5']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=42, inst=LOAD_FAST(arg=0, lineno=102)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$38load_deref.5', '$40load_deref.6']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=44, inst=LOAD_FAST(arg=1, lineno=102)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$38load_deref.5', '$40load_deref.6', '$A42.7']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=46, inst=LOAD_FAST(arg=4, lineno=102)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$38load_deref.5', '$40load_deref.6', '$A42.7', '$R44.8']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=102)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$38load_deref.5', '$40load_deref.6', '$A42.7', '$R44.8', '$mid46.9']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=50, inst=CALL_FUNCTION(arg=2, lineno=102)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$38load_deref.5', '$40load_deref.6', '$A42.7', '$48binary_subscr.10']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=52, inst=LOAD_DEREF(arg=0, lineno=102)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$38load_deref.5', '$50call_function.11']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=54, inst=LOAD_FAST(arg=0, lineno=102)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$38load_deref.5', '$50call_function.11', '$52load_deref.12']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=56, inst=LOAD_FAST(arg=1, lineno=102)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$38load_deref.5', '$50call_function.11', '$52load_deref.12', '$A54.13']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=58, inst=LOAD_FAST(arg=2, lineno=102)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$38load_deref.5', '$50call_function.11', '$52load_deref.12', '$A54.13', '$R56.14']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=60, inst=BINARY_SUBSCR(arg=None, lineno=102)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$38load_deref.5', '$50call_function.11', '$52load_deref.12', '$A54.13', '$R56.14', '$low58.15']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=62, inst=CALL_FUNCTION(arg=2, lineno=102)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$38load_deref.5', '$50call_function.11', '$52load_deref.12', '$A54.13', '$60binary_subscr.16']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=64, inst=CALL_FUNCTION(arg=2, lineno=102)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$38load_deref.5', '$50call_function.11', '$62call_function.17']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=94, lineno=102)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$64call_function.18']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=68, stack=(), blockstack=(), npush=0), Edge(pc=94, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=94 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=68, inst=LOAD_FAST(arg=1, lineno=103)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=70, inst=LOAD_FAST(arg=4, lineno=103)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$R68.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=72, inst=BINARY_SUBSCR(arg=None, lineno=103)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$R68.0', '$mid70.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=74, inst=LOAD_FAST(arg=1, lineno=103)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$72binary_subscr.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=76, inst=LOAD_FAST(arg=2, lineno=103)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$72binary_subscr.2', '$R74.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=78, inst=BINARY_SUBSCR(arg=None, lineno=103)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$72binary_subscr.2', '$R74.3', '$low76.4']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=80, inst=ROT_TWO(arg=None, lineno=103)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$72binary_subscr.2', '$78binary_subscr.5']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=82, inst=LOAD_FAST(arg=1, lineno=103)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$78binary_subscr.5', '$72binary_subscr.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=84, inst=LOAD_FAST(arg=2, lineno=103)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$78binary_subscr.5', '$72binary_subscr.2', '$R82.6']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=86, inst=STORE_SUBSCR(arg=None, lineno=103)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$78binary_subscr.5', '$72binary_subscr.2', '$R82.6', '$low84.7']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=88, inst=LOAD_FAST(arg=1, lineno=103)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$78binary_subscr.5']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=90, inst=LOAD_FAST(arg=4, lineno=103)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$78binary_subscr.5', '$R88.8']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=92, inst=STORE_SUBSCR(arg=None, lineno=103)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$78binary_subscr.5', '$R88.8', '$mid90.9']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=94, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=94 nstack_initial=0), State(pc_initial=94 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=94, inst=LOAD_DEREF(arg=1, lineno=104)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=96, inst=LOAD_DEREF(arg=0, lineno=104)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$94load_deref.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=98, inst=LOAD_FAST(arg=0, lineno=104)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$94load_deref.0', '$96load_deref.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=100, inst=LOAD_FAST(arg=1, lineno=104)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$94load_deref.0', '$96load_deref.1', '$A98.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=102, inst=LOAD_FAST(arg=3, lineno=104)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$94load_deref.0', '$96load_deref.1', '$A98.2', '$R100.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=104, inst=BINARY_SUBSCR(arg=None, lineno=104)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$94load_deref.0', '$96load_deref.1', '$A98.2', '$R100.3', '$high102.4']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=106, inst=CALL_FUNCTION(arg=2, lineno=104)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$94load_deref.0', '$96load_deref.1', '$A98.2', '$104binary_subscr.5']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=108, inst=LOAD_DEREF(arg=0, lineno=104)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$94load_deref.0', '$106call_function.6']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=110, inst=LOAD_FAST(arg=0, lineno=104)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$94load_deref.0', '$106call_function.6', '$108load_deref.7']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=112, inst=LOAD_FAST(arg=1, lineno=104)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$94load_deref.0', '$106call_function.6', '$108load_deref.7', '$A110.8']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=114, inst=LOAD_FAST(arg=4, lineno=104)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$94load_deref.0', '$106call_function.6', '$108load_deref.7', '$A110.8', '$R112.9']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=116, inst=BINARY_SUBSCR(arg=None, lineno=104)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$94load_deref.0', '$106call_function.6', '$108load_deref.7', '$A110.8', '$R112.9', '$mid114.10']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=118, inst=CALL_FUNCTION(arg=2, lineno=104)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$94load_deref.0', '$106call_function.6', '$108load_deref.7', '$A110.8', '$116binary_subscr.11']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=120, inst=CALL_FUNCTION(arg=2, lineno=104)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$94load_deref.0', '$106call_function.6', '$118call_function.12']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=122, inst=POP_JUMP_IF_FALSE(arg=150, lineno=104)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$120call_function.13']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=94 nstack_initial=0), State(pc_initial=124 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=124, inst=LOAD_FAST(arg=1, lineno=105)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=126, inst=LOAD_FAST(arg=4, lineno=105)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$R124.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=128, inst=BINARY_SUBSCR(arg=None, lineno=105)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$R124.0', '$mid126.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=130, inst=LOAD_FAST(arg=1, lineno=105)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$128binary_subscr.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=132, inst=LOAD_FAST(arg=3, lineno=105)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$128binary_subscr.2', '$R130.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=134, inst=BINARY_SUBSCR(arg=None, lineno=105)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$128binary_subscr.2', '$R130.3', '$high132.4']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=136, inst=ROT_TWO(arg=None, lineno=105)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$128binary_subscr.2', '$134binary_subscr.5']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=138, inst=LOAD_FAST(arg=1, lineno=105)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$134binary_subscr.5', '$128binary_subscr.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=140, inst=LOAD_FAST(arg=3, lineno=105)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$134binary_subscr.5', '$128binary_subscr.2', '$R138.6']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=142, inst=STORE_SUBSCR(arg=None, lineno=105)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$134binary_subscr.5', '$128binary_subscr.2', '$R138.6', '$high140.7']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=144, inst=LOAD_FAST(arg=1, lineno=105)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$134binary_subscr.5']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=146, inst=LOAD_FAST(arg=4, lineno=105)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$134binary_subscr.5', '$R144.8']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=148, inst=STORE_SUBSCR(arg=None, lineno=105)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$134binary_subscr.5', '$R144.8', '$mid146.9']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=150, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=150 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=150, inst=LOAD_DEREF(arg=1, lineno=106)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=152, inst=LOAD_DEREF(arg=0, lineno=106)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$150load_deref.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=154, inst=LOAD_FAST(arg=0, lineno=106)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$150load_deref.0', '$152load_deref.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=156, inst=LOAD_FAST(arg=1, lineno=106)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$150load_deref.0', '$152load_deref.1', '$A154.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=158, inst=LOAD_FAST(arg=4, lineno=106)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$150load_deref.0', '$152load_deref.1', '$A154.2', '$R156.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=160, inst=BINARY_SUBSCR(arg=None, lineno=106)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$150load_deref.0', '$152load_deref.1', '$A154.2', '$R156.3', '$mid158.4']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=162, inst=CALL_FUNCTION(arg=2, lineno=106)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$150load_deref.0', '$152load_deref.1', '$A154.2', '$160binary_subscr.5']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=164, inst=LOAD_DEREF(arg=0, lineno=106)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$150load_deref.0', '$162call_function.6']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=166, inst=LOAD_FAST(arg=0, lineno=106)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$150load_deref.0', '$162call_function.6', '$164load_deref.7']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=168, inst=LOAD_FAST(arg=1, lineno=106)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$150load_deref.0', '$162call_function.6', '$164load_deref.7', '$A166.8']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=170, inst=LOAD_FAST(arg=2, lineno=106)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$150load_deref.0', '$162call_function.6', '$164load_deref.7', '$A166.8', '$R168.9']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=172, inst=BINARY_SUBSCR(arg=None, lineno=106)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$150load_deref.0', '$162call_function.6', '$164load_deref.7', '$A166.8', '$R168.9', '$low170.10']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=174, inst=CALL_FUNCTION(arg=2, lineno=106)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$150load_deref.0', '$162call_function.6', '$164load_deref.7', '$A166.8', '$172binary_subscr.11']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=176, inst=CALL_FUNCTION(arg=2, lineno=106)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$150load_deref.0', '$162call_function.6', '$174call_function.12']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=178, inst=POP_JUMP_IF_FALSE(arg=206, lineno=106)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$176call_function.13']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=180, stack=(), blockstack=(), npush=0), Edge(pc=206, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=150 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=206 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=180 nstack_initial=0), State(pc_initial=206 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=180, inst=LOAD_FAST(arg=1, lineno=107)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=182, inst=LOAD_FAST(arg=4, lineno=107)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$R180.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=184, inst=BINARY_SUBSCR(arg=None, lineno=107)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$R180.0', '$mid182.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=186, inst=LOAD_FAST(arg=1, lineno=107)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$184binary_subscr.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=188, inst=LOAD_FAST(arg=2, lineno=107)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$184binary_subscr.2', '$R186.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=190, inst=BINARY_SUBSCR(arg=None, lineno=107)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$184binary_subscr.2', '$R186.3', '$low188.4']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=192, inst=ROT_TWO(arg=None, lineno=107)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$184binary_subscr.2', '$190binary_subscr.5']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=194, inst=LOAD_FAST(arg=1, lineno=107)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$190binary_subscr.5', '$184binary_subscr.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=196, inst=LOAD_FAST(arg=2, lineno=107)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$190binary_subscr.5', '$184binary_subscr.2', '$R194.6']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=198, inst=STORE_SUBSCR(arg=None, lineno=107)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$190binary_subscr.5', '$184binary_subscr.2', '$R194.6', '$low196.7']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=200, inst=LOAD_FAST(arg=1, lineno=107)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$190binary_subscr.5']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=202, inst=LOAD_FAST(arg=4, lineno=107)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$190binary_subscr.5', '$R200.8']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=204, inst=STORE_SUBSCR(arg=None, lineno=107)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$190binary_subscr.5', '$R200.8', '$mid202.9']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=206, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=206 nstack_initial=0), State(pc_initial=206 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=206, inst=LOAD_DEREF(arg=0, lineno=108)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=208, inst=LOAD_FAST(arg=0, lineno=108)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$206load_deref.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=210, inst=LOAD_FAST(arg=1, lineno=108)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$206load_deref.0', '$A208.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=212, inst=LOAD_FAST(arg=4, lineno=108)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$206load_deref.0', '$A208.1', '$R210.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=214, inst=BINARY_SUBSCR(arg=None, lineno=108)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$206load_deref.0', '$A208.1', '$R210.2', '$mid212.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=216, inst=CALL_FUNCTION(arg=2, lineno=108)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$206load_deref.0', '$A208.1', '$214binary_subscr.4']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=218, inst=STORE_FAST(arg=5, lineno=108)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$216call_function.5']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=220, inst=LOAD_FAST(arg=1, lineno=111)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=222, inst=LOAD_FAST(arg=4, lineno=111)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$R220.6']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=224, inst=BINARY_SUBSCR(arg=None, lineno=111)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$R220.6', '$mid222.7']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=226, inst=LOAD_FAST(arg=1, lineno=111)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$224binary_subscr.8']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=228, inst=LOAD_FAST(arg=3, lineno=111)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$224binary_subscr.8', '$R226.9']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=230, inst=BINARY_SUBSCR(arg=None, lineno=111)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$224binary_subscr.8', '$R226.9', '$high228.10']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=232, inst=ROT_TWO(arg=None, lineno=111)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$224binary_subscr.8', '$230binary_subscr.11']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=234, inst=LOAD_FAST(arg=1, lineno=111)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$230binary_subscr.11', '$224binary_subscr.8']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=236, inst=LOAD_FAST(arg=3, lineno=111)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$230binary_subscr.11', '$224binary_subscr.8', '$R234.12']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=238, inst=STORE_SUBSCR(arg=None, lineno=111)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$230binary_subscr.11', '$224binary_subscr.8', '$R234.12', '$high236.13']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=240, inst=LOAD_FAST(arg=1, lineno=111)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$230binary_subscr.11']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=242, inst=LOAD_FAST(arg=4, lineno=111)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$230binary_subscr.11', '$R240.14']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=244, inst=STORE_SUBSCR(arg=None, lineno=111)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$230binary_subscr.11', '$R240.14', '$mid242.15']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=246, inst=LOAD_FAST(arg=2, lineno=112)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=248, inst=STORE_FAST(arg=6, lineno=112)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$low246.16']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=250, inst=LOAD_FAST(arg=3, lineno=113)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=252, inst=LOAD_CONST(arg=2, lineno=113)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$high250.17']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=254, inst=BINARY_SUBTRACT(arg=None, lineno=113)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$high250.17', '$const252.18']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=256, inst=STORE_FAST(arg=7, lineno=113)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$254binary_subtract.19']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=258, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=206 nstack_initial=0), State(pc_initial=258 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=258 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=258, inst=SETUP_LOOP(arg=156, lineno=114)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=260, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 416, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=260 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=260, inst=SETUP_LOOP(arg=46, lineno=115)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=262, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 416, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 308, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=262 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=262, inst=LOAD_FAST(arg=6, lineno=115)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=264, inst=LOAD_FAST(arg=3, lineno=115)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$i262.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=266, inst=COMPARE_OP(arg=0, lineno=115)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$i262.0', '$high264.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=268, inst=POP_JUMP_IF_FALSE(arg=306, lineno=115)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$266compare_op.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=272, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 416, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 308, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), npush=0), Edge(pc=306, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 416, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 308, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=272 nstack_initial=0), State(pc_initial=306 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=272, inst=LOAD_DEREF(arg=1, lineno=115)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=274, inst=LOAD_DEREF(arg=0, lineno=115)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$272load_deref.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=276, inst=LOAD_FAST(arg=0, lineno=115)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$272load_deref.0', '$274load_deref.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=278, inst=LOAD_FAST(arg=1, lineno=115)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$272load_deref.0', '$274load_deref.1', '$A276.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=280, inst=LOAD_FAST(arg=6, lineno=115)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$272load_deref.0', '$274load_deref.1', '$A276.2', '$R278.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=282, inst=BINARY_SUBSCR(arg=None, lineno=115)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$272load_deref.0', '$274load_deref.1', '$A276.2', '$R278.3', '$i280.4']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=284, inst=CALL_FUNCTION(arg=2, lineno=115)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$272load_deref.0', '$274load_deref.1', '$A276.2', '$282binary_subscr.5']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=286, inst=LOAD_FAST(arg=5, lineno=115)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$272load_deref.0', '$284call_function.6']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=288, inst=CALL_FUNCTION(arg=2, lineno=115)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$272load_deref.0', '$284call_function.6', '$pivot286.7']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=290, inst=POP_JUMP_IF_FALSE(arg=306, lineno=115)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$288call_function.8']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=294, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 416, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 308, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), npush=0), Edge(pc=306, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 416, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 308, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=306 nstack_initial=0), State(pc_initial=294 nstack_initial=0), State(pc_initial=306 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=306, inst=POP_BLOCK(arg=None, lineno=116)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=308, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 416, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=294 nstack_initial=0), State(pc_initial=306 nstack_initial=0), State(pc_initial=308 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=294, inst=LOAD_FAST(arg=6, lineno=116)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=296, inst=LOAD_CONST(arg=2, lineno=116)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$i294.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=298, inst=INPLACE_ADD(arg=None, lineno=116)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$i294.0', '$const296.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=300, inst=STORE_FAST(arg=6, lineno=116)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$298inplace_add.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=302, inst=JUMP_ABSOLUTE(arg=262, lineno=116)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=262, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 416, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 308, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=306 nstack_initial=0), State(pc_initial=308 nstack_initial=0), State(pc_initial=262 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=308 nstack_initial=0), State(pc_initial=262 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=308, inst=SETUP_LOOP(arg=46, lineno=117)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=310, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 416, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 356, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=262 nstack_initial=0), State(pc_initial=310 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=310 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=310, inst=LOAD_FAST(arg=7, lineno=117)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=312, inst=LOAD_FAST(arg=2, lineno=117)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$j310.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=314, inst=COMPARE_OP(arg=5, lineno=117)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$j310.0', '$low312.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=316, inst=POP_JUMP_IF_FALSE(arg=354, lineno=117)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$314compare_op.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=320, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 416, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 356, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), npush=0), Edge(pc=354, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 416, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 356, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=320 nstack_initial=0), State(pc_initial=354 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=320, inst=LOAD_DEREF(arg=1, lineno=117)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=322, inst=LOAD_FAST(arg=5, lineno=117)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$320load_deref.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=324, inst=LOAD_DEREF(arg=0, lineno=117)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$320load_deref.0', '$pivot322.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=326, inst=LOAD_FAST(arg=0, lineno=117)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$320load_deref.0', '$pivot322.1', '$324load_deref.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=328, inst=LOAD_FAST(arg=1, lineno=117)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$320load_deref.0', '$pivot322.1', '$324load_deref.2', '$A326.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=330, inst=LOAD_FAST(arg=7, lineno=117)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$320load_deref.0', '$pivot322.1', '$324load_deref.2', '$A326.3', '$R328.4']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=332, inst=BINARY_SUBSCR(arg=None, lineno=117)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$320load_deref.0', '$pivot322.1', '$324load_deref.2', '$A326.3', '$R328.4', '$j330.5']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=334, inst=CALL_FUNCTION(arg=2, lineno=117)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$320load_deref.0', '$pivot322.1', '$324load_deref.2', '$A326.3', '$332binary_subscr.6']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=336, inst=CALL_FUNCTION(arg=2, lineno=117)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$320load_deref.0', '$pivot322.1', '$334call_function.7']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=338, inst=POP_JUMP_IF_FALSE(arg=354, lineno=117)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$336call_function.8']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=342, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 416, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 356, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), npush=0), Edge(pc=354, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 416, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 356, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=354 nstack_initial=0), State(pc_initial=342 nstack_initial=0), State(pc_initial=354 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=354, inst=POP_BLOCK(arg=None, lineno=118)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=356, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 416, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=342 nstack_initial=0), State(pc_initial=354 nstack_initial=0), State(pc_initial=356 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=342, inst=LOAD_FAST(arg=7, lineno=118)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=344, inst=LOAD_CONST(arg=2, lineno=118)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$j342.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=346, inst=INPLACE_SUBTRACT(arg=None, lineno=118)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$j342.0', '$const344.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=348, inst=STORE_FAST(arg=7, lineno=118)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$346inplace_subtract.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=350, inst=JUMP_ABSOLUTE(arg=310, lineno=118)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=310, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 416, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 356, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=354 nstack_initial=0), State(pc_initial=356 nstack_initial=0), State(pc_initial=310 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=356 nstack_initial=0), State(pc_initial=310 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=356, inst=LOAD_FAST(arg=6, lineno=119)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=358, inst=LOAD_FAST(arg=7, lineno=119)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$i356.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=360, inst=COMPARE_OP(arg=5, lineno=119)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$i356.0', '$j358.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=362, inst=POP_JUMP_IF_FALSE(arg=368, lineno=119)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$360compare_op.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=366, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 416, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=368, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 416, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=310 nstack_initial=0), State(pc_initial=366 nstack_initial=0), State(pc_initial=368 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=366 nstack_initial=0), State(pc_initial=368 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=366, inst=BREAK_LOOP(arg=None, lineno=120)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=416, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=368 nstack_initial=0), State(pc_initial=416 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=368, inst=LOAD_FAST(arg=1, lineno=121)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=370, inst=LOAD_FAST(arg=7, lineno=121)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$R368.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=372, inst=BINARY_SUBSCR(arg=None, lineno=121)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$R368.0', '$j370.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=374, inst=LOAD_FAST(arg=1, lineno=121)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$372binary_subscr.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=376, inst=LOAD_FAST(arg=6, lineno=121)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$372binary_subscr.2', '$R374.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=378, inst=BINARY_SUBSCR(arg=None, lineno=121)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$372binary_subscr.2', '$R374.3', '$i376.4']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=380, inst=ROT_TWO(arg=None, lineno=121)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$372binary_subscr.2', '$378binary_subscr.5']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=382, inst=LOAD_FAST(arg=1, lineno=121)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$378binary_subscr.5', '$372binary_subscr.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=384, inst=LOAD_FAST(arg=6, lineno=121)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$378binary_subscr.5', '$372binary_subscr.2', '$R382.6']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=386, inst=STORE_SUBSCR(arg=None, lineno=121)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$378binary_subscr.5', '$372binary_subscr.2', '$R382.6', '$i384.7']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=388, inst=LOAD_FAST(arg=1, lineno=121)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$378binary_subscr.5']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=390, inst=LOAD_FAST(arg=7, lineno=121)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$378binary_subscr.5', '$R388.8']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=392, inst=STORE_SUBSCR(arg=None, lineno=121)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$378binary_subscr.5', '$R388.8', '$j390.9']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=394, inst=LOAD_FAST(arg=6, lineno=122)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=396, inst=LOAD_CONST(arg=2, lineno=122)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$i394.10']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=398, inst=INPLACE_ADD(arg=None, lineno=122)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$i394.10', '$const396.11']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=400, inst=STORE_FAST(arg=6, lineno=122)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$398inplace_add.12']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=402, inst=LOAD_FAST(arg=7, lineno=123)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=404, inst=LOAD_CONST(arg=2, lineno=123)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$j402.13']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=406, inst=INPLACE_SUBTRACT(arg=None, lineno=123)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$j402.13', '$const404.14']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=408, inst=STORE_FAST(arg=7, lineno=123)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$406inplace_subtract.15']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=410, inst=JUMP_ABSOLUTE(arg=260, lineno=123)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=260, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 416, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=416 nstack_initial=0), State(pc_initial=260 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=416, inst=LOAD_FAST(arg=1, lineno=126)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=418, inst=LOAD_FAST(arg=3, lineno=126)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$R416.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=420, inst=BINARY_SUBSCR(arg=None, lineno=126)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$R416.0', '$high418.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=422, inst=LOAD_FAST(arg=1, lineno=126)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$420binary_subscr.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=424, inst=LOAD_FAST(arg=6, lineno=126)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$420binary_subscr.2', '$R422.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=426, inst=BINARY_SUBSCR(arg=None, lineno=126)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$420binary_subscr.2', '$R422.3', '$i424.4']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=428, inst=ROT_TWO(arg=None, lineno=126)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$420binary_subscr.2', '$426binary_subscr.5']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=430, inst=LOAD_FAST(arg=1, lineno=126)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$426binary_subscr.5', '$420binary_subscr.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=432, inst=LOAD_FAST(arg=6, lineno=126)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$426binary_subscr.5', '$420binary_subscr.2', '$R430.6']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=434, inst=STORE_SUBSCR(arg=None, lineno=126)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$426binary_subscr.5', '$420binary_subscr.2', '$R430.6', '$i432.7']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=436, inst=LOAD_FAST(arg=1, lineno=126)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$426binary_subscr.5']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=438, inst=LOAD_FAST(arg=3, lineno=126)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$426binary_subscr.5', '$R436.8']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=440, inst=STORE_SUBSCR(arg=None, lineno=126)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$426binary_subscr.5', '$R436.8', '$high438.9']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=442, inst=LOAD_FAST(arg=6, lineno=127)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=444, inst=RETURN_VALUE(arg=None, lineno=127)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$i442.10']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=260 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG -------------------------Prune PHIs-------------------------
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=22 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=94 nstack_initial=0): set(),
             State(pc_initial=124 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=180 nstack_initial=0): set(),
             State(pc_initial=206 nstack_initial=0): set(),
             State(pc_initial=258 nstack_initial=0): set(),
             State(pc_initial=260 nstack_initial=0): set(),
             State(pc_initial=262 nstack_initial=0): set(),
             State(pc_initial=272 nstack_initial=0): set(),
             State(pc_initial=294 nstack_initial=0): set(),
             State(pc_initial=306 nstack_initial=0): set(),
             State(pc_initial=308 nstack_initial=0): set(),
             State(pc_initial=310 nstack_initial=0): set(),
             State(pc_initial=320 nstack_initial=0): set(),
             State(pc_initial=342 nstack_initial=0): set(),
             State(pc_initial=354 nstack_initial=0): set(),
             State(pc_initial=356 nstack_initial=0): set(),
             State(pc_initial=366 nstack_initial=0): set(),
             State(pc_initial=368 nstack_initial=0): set(),
             State(pc_initial=416 nstack_initial=0): set()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG defmap: {}
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG keep phismap: {}
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG new_out: defaultdict(<class 'dict'>, {})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG ----------------------DONE Prune PHIs-----------------------
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$low2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$low2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$10load_global.0'}), (12, {'exc': '$10load_global.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$high14.0'}), (16, {'res': '$low16.1'}), (18, {'lhs': '$high14.0', 'rhs': '$low16.1', 'res': '$18compare_op.2'}), (20, {'pred': '$18compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: (), 26: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=22 nstack_initial=0):
AdaptBlockInfo(insts=((22, {'res': '$22load_global.0'}), (24, {'exc': '$22load_global.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$low26.0'}), (28, {'res': '$high28.1'}), (30, {'lhs': '$low26.0', 'rhs': '$high28.1', 'res': '$30binary_add.2'}), (32, {'res': '$const32.3'}), (34, {'lhs': '$30binary_add.2', 'rhs': '$const32.3', 'res': '$34binary_rshift.4'}), (36, {'value': '$34binary_rshift.4'}), (38, {'res': '$38load_deref.5'}), (40, {'res': '$40load_deref.6'}), (42, {'res': '$A42.7'}), (44, {'res': '$R44.8'}), (46, {'res': '$mid46.9'}), (48, {'index': '$mid46.9', 'target': '$R44.8', 'res': '$48binary_subscr.10'}), (50, {'func': '$40load_deref.6', 'args': ['$A42.7', '$48binary_subscr.10'], 'res': '$50call_function.11'}), (52, {'res': '$52load_deref.12'}), (54, {'res': '$A54.13'}), (56, {'res': '$R56.14'}), (58, {'res': '$low58.15'}), (60, {'index': '$low58.15', 'target': '$R56.14', 'res': '$60binary_subscr.16'}), (62, {'func': '$52load_deref.12', 'args': ['$A54.13', '$60binary_subscr.16'], 'res': '$62call_function.17'}), (64, {'func': '$38load_deref.5', 'args': ['$50call_function.11', '$62call_function.17'], 'res': '$64call_function.18'}), (66, {'pred': '$64call_function.18'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={68: (), 94: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$R68.0'}), (70, {'res': '$mid70.1'}), (72, {'index': '$mid70.1', 'target': '$R68.0', 'res': '$72binary_subscr.2'}), (74, {'res': '$R74.3'}), (76, {'res': '$low76.4'}), (78, {'index': '$low76.4', 'target': '$R74.3', 'res': '$78binary_subscr.5'}), (82, {'res': '$R82.6'}), (84, {'res': '$low84.7'}), (86, {'target': '$R82.6', 'index': '$low84.7', 'value': '$72binary_subscr.2'}), (88, {'res': '$R88.8'}), (90, {'res': '$mid90.9'}), (92, {'target': '$R88.8', 'index': '$mid90.9', 'value': '$78binary_subscr.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={94: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=94 nstack_initial=0):
AdaptBlockInfo(insts=((94, {'res': '$94load_deref.0'}), (96, {'res': '$96load_deref.1'}), (98, {'res': '$A98.2'}), (100, {'res': '$R100.3'}), (102, {'res': '$high102.4'}), (104, {'index': '$high102.4', 'target': '$R100.3', 'res': '$104binary_subscr.5'}), (106, {'func': '$96load_deref.1', 'args': ['$A98.2', '$104binary_subscr.5'], 'res': '$106call_function.6'}), (108, {'res': '$108load_deref.7'}), (110, {'res': '$A110.8'}), (112, {'res': '$R112.9'}), (114, {'res': '$mid114.10'}), (116, {'index': '$mid114.10', 'target': '$R112.9', 'res': '$116binary_subscr.11'}), (118, {'func': '$108load_deref.7', 'args': ['$A110.8', '$116binary_subscr.11'], 'res': '$118call_function.12'}), (120, {'func': '$94load_deref.0', 'args': ['$106call_function.6', '$118call_function.12'], 'res': '$120call_function.13'}), (122, {'pred': '$120call_function.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={124: (), 150: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$R124.0'}), (126, {'res': '$mid126.1'}), (128, {'index': '$mid126.1', 'target': '$R124.0', 'res': '$128binary_subscr.2'}), (130, {'res': '$R130.3'}), (132, {'res': '$high132.4'}), (134, {'index': '$high132.4', 'target': '$R130.3', 'res': '$134binary_subscr.5'}), (138, {'res': '$R138.6'}), (140, {'res': '$high140.7'}), (142, {'target': '$R138.6', 'index': '$high140.7', 'value': '$128binary_subscr.2'}), (144, {'res': '$R144.8'}), (146, {'res': '$mid146.9'}), (148, {'target': '$R144.8', 'index': '$mid146.9', 'value': '$134binary_subscr.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={150: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$150load_deref.0'}), (152, {'res': '$152load_deref.1'}), (154, {'res': '$A154.2'}), (156, {'res': '$R156.3'}), (158, {'res': '$mid158.4'}), (160, {'index': '$mid158.4', 'target': '$R156.3', 'res': '$160binary_subscr.5'}), (162, {'func': '$152load_deref.1', 'args': ['$A154.2', '$160binary_subscr.5'], 'res': '$162call_function.6'}), (164, {'res': '$164load_deref.7'}), (166, {'res': '$A166.8'}), (168, {'res': '$R168.9'}), (170, {'res': '$low170.10'}), (172, {'index': '$low170.10', 'target': '$R168.9', 'res': '$172binary_subscr.11'}), (174, {'func': '$164load_deref.7', 'args': ['$A166.8', '$172binary_subscr.11'], 'res': '$174call_function.12'}), (176, {'func': '$150load_deref.0', 'args': ['$162call_function.6', '$174call_function.12'], 'res': '$176call_function.13'}), (178, {'pred': '$176call_function.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={180: (), 206: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=180 nstack_initial=0):
AdaptBlockInfo(insts=((180, {'res': '$R180.0'}), (182, {'res': '$mid182.1'}), (184, {'index': '$mid182.1', 'target': '$R180.0', 'res': '$184binary_subscr.2'}), (186, {'res': '$R186.3'}), (188, {'res': '$low188.4'}), (190, {'index': '$low188.4', 'target': '$R186.3', 'res': '$190binary_subscr.5'}), (194, {'res': '$R194.6'}), (196, {'res': '$low196.7'}), (198, {'target': '$R194.6', 'index': '$low196.7', 'value': '$184binary_subscr.2'}), (200, {'res': '$R200.8'}), (202, {'res': '$mid202.9'}), (204, {'target': '$R200.8', 'index': '$mid202.9', 'value': '$190binary_subscr.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={206: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=206 nstack_initial=0):
AdaptBlockInfo(insts=((206, {'res': '$206load_deref.0'}), (208, {'res': '$A208.1'}), (210, {'res': '$R210.2'}), (212, {'res': '$mid212.3'}), (214, {'index': '$mid212.3', 'target': '$R210.2', 'res': '$214binary_subscr.4'}), (216, {'func': '$206load_deref.0', 'args': ['$A208.1', '$214binary_subscr.4'], 'res': '$216call_function.5'}), (218, {'value': '$216call_function.5'}), (220, {'res': '$R220.6'}), (222, {'res': '$mid222.7'}), (224, {'index': '$mid222.7', 'target': '$R220.6', 'res': '$224binary_subscr.8'}), (226, {'res': '$R226.9'}), (228, {'res': '$high228.10'}), (230, {'index': '$high228.10', 'target': '$R226.9', 'res': '$230binary_subscr.11'}), (234, {'res': '$R234.12'}), (236, {'res': '$high236.13'}), (238, {'target': '$R234.12', 'index': '$high236.13', 'value': '$224binary_subscr.8'}), (240, {'res': '$R240.14'}), (242, {'res': '$mid242.15'}), (244, {'target': '$R240.14', 'index': '$mid242.15', 'value': '$230binary_subscr.11'}), (246, {'res': '$low246.16'}), (248, {'value': '$low246.16'}), (250, {'res': '$high250.17'}), (252, {'res': '$const252.18'}), (254, {'lhs': '$high250.17', 'rhs': '$const252.18', 'res': '$254binary_subtract.19'}), (256, {'value': '$254binary_subtract.19'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={258: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=258 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={260: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=260 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 416, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={262: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=262 nstack_initial=0):
AdaptBlockInfo(insts=((262, {'res': '$i262.0'}), (264, {'res': '$high264.1'}), (266, {'lhs': '$i262.0', 'rhs': '$high264.1', 'res': '$266compare_op.2'}), (268, {'pred': '$266compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 416, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 308, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), active_try_block=None, outgoing_edgepushed={272: (), 306: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=272 nstack_initial=0):
AdaptBlockInfo(insts=((272, {'res': '$272load_deref.0'}), (274, {'res': '$274load_deref.1'}), (276, {'res': '$A276.2'}), (278, {'res': '$R278.3'}), (280, {'res': '$i280.4'}), (282, {'index': '$i280.4', 'target': '$R278.3', 'res': '$282binary_subscr.5'}), (284, {'func': '$274load_deref.1', 'args': ['$A276.2', '$282binary_subscr.5'], 'res': '$284call_function.6'}), (286, {'res': '$pivot286.7'}), (288, {'func': '$272load_deref.0', 'args': ['$284call_function.6', '$pivot286.7'], 'res': '$288call_function.8'}), (290, {'pred': '$288call_function.8'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 416, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 308, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), active_try_block=None, outgoing_edgepushed={294: (), 306: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=294 nstack_initial=0):
AdaptBlockInfo(insts=((294, {'res': '$i294.0'}), (296, {'res': '$const296.1'}), (298, {'lhs': '$i294.0', 'rhs': '$const296.1', 'res': '$298inplace_add.2'}), (300, {'value': '$298inplace_add.2'}), (302, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 416, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 308, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), active_try_block=None, outgoing_edgepushed={262: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=306 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 416, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 308, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), active_try_block=None, outgoing_edgepushed={308: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=308 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 416, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={310: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=310 nstack_initial=0):
AdaptBlockInfo(insts=((310, {'res': '$j310.0'}), (312, {'res': '$low312.1'}), (314, {'lhs': '$j310.0', 'rhs': '$low312.1', 'res': '$314compare_op.2'}), (316, {'pred': '$314compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 416, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 356, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), active_try_block=None, outgoing_edgepushed={320: (), 354: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=320 nstack_initial=0):
AdaptBlockInfo(insts=((320, {'res': '$320load_deref.0'}), (322, {'res': '$pivot322.1'}), (324, {'res': '$324load_deref.2'}), (326, {'res': '$A326.3'}), (328, {'res': '$R328.4'}), (330, {'res': '$j330.5'}), (332, {'index': '$j330.5', 'target': '$R328.4', 'res': '$332binary_subscr.6'}), (334, {'func': '$324load_deref.2', 'args': ['$A326.3', '$332binary_subscr.6'], 'res': '$334call_function.7'}), (336, {'func': '$320load_deref.0', 'args': ['$pivot322.1', '$334call_function.7'], 'res': '$336call_function.8'}), (338, {'pred': '$336call_function.8'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 416, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 356, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), active_try_block=None, outgoing_edgepushed={342: (), 354: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=342 nstack_initial=0):
AdaptBlockInfo(insts=((342, {'res': '$j342.0'}), (344, {'res': '$const344.1'}), (346, {'lhs': '$j342.0', 'rhs': '$const344.1', 'res': '$346inplace_subtract.2'}), (348, {'value': '$346inplace_subtract.2'}), (350, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 416, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 356, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), active_try_block=None, outgoing_edgepushed={310: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=354 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 416, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 356, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}), active_try_block=None, outgoing_edgepushed={356: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=356 nstack_initial=0):
AdaptBlockInfo(insts=((356, {'res': '$i356.0'}), (358, {'res': '$j358.1'}), (360, {'lhs': '$i356.0', 'rhs': '$j358.1', 'res': '$360compare_op.2'}), (362, {'pred': '$360compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 416, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={366: (), 368: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=366 nstack_initial=0):
AdaptBlockInfo(insts=((366, {'end': 416}),), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 416, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={416: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=368 nstack_initial=0):
AdaptBlockInfo(insts=((368, {'res': '$R368.0'}), (370, {'res': '$j370.1'}), (372, {'index': '$j370.1', 'target': '$R368.0', 'res': '$372binary_subscr.2'}), (374, {'res': '$R374.3'}), (376, {'res': '$i376.4'}), (378, {'index': '$i376.4', 'target': '$R374.3', 'res': '$378binary_subscr.5'}), (382, {'res': '$R382.6'}), (384, {'res': '$i384.7'}), (386, {'target': '$R382.6', 'index': '$i384.7', 'value': '$372binary_subscr.2'}), (388, {'res': '$R388.8'}), (390, {'res': '$j390.9'}), (392, {'target': '$R388.8', 'index': '$j390.9', 'value': '$378binary_subscr.5'}), (394, {'res': '$i394.10'}), (396, {'res': '$const396.11'}), (398, {'lhs': '$i394.10', 'rhs': '$const396.11', 'res': '$398inplace_add.12'}), (400, {'value': '$398inplace_add.12'}), (402, {'res': '$j402.13'}), (404, {'res': '$const404.14'}), (406, {'lhs': '$j402.13', 'rhs': '$const404.14', 'res': '$406inplace_subtract.15'}), (408, {'value': '$406inplace_subtract.15'}), (410, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 416, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={260: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=416 nstack_initial=0):
AdaptBlockInfo(insts=((416, {'res': '$R416.0'}), (418, {'res': '$high418.1'}), (420, {'index': '$high418.1', 'target': '$R416.0', 'res': '$420binary_subscr.2'}), (422, {'res': '$R422.3'}), (424, {'res': '$i424.4'}), (426, {'index': '$i424.4', 'target': '$R422.3', 'res': '$426binary_subscr.5'}), (430, {'res': '$R430.6'}), (432, {'res': '$i432.7'}), (434, {'target': '$R430.6', 'index': '$i432.7', 'value': '$420binary_subscr.2'}), (436, {'res': '$R436.8'}), (438, {'res': '$high438.9'}), (440, {'target': '$R436.8', 'index': '$high438.9', 'value': '$426binary_subscr.5'}), (442, {'res': '$i442.10'}), (444, {'retval': '$i442.10', 'castval': '$444return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:41 interpreter.py DEBUG label 0:
    A = arg(0, name=A)                       ['A']
    R = arg(1, name=R)                       ['R']
    low = arg(2, name=low)                   ['low']
    high = arg(3, name=high)                 ['high']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = low >= $const4.1        ['$6compare_op.2', '$const4.1', 'low']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, quicksort.py:92),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 14, 10                    ['$8pred']
label 10:
    $10load_global.0 = global(AssertionError: <class 'AssertionError'>) ['$10load_global.0']
    raise $10load_global.0                   ['$10load_global.0']
label 14:
    $18compare_op.2 = high > low             ['$18compare_op.2', 'high', 'low']
    bool20 = global(bool: <class 'bool'>)    ['bool20']
    $20pred = call bool20($18compare_op.2, func=bool20, args=(Var($18compare_op.2, quicksort.py:93),), kws=(), vararg=None, varkwarg=None, target=None) ['$18compare_op.2', '$20pred', 'bool20']
    branch $20pred, 26, 22                   ['$20pred']
label 22:
    $22load_global.0 = global(AssertionError: <class 'AssertionError'>) ['$22load_global.0']
    raise $22load_global.0                   ['$22load_global.0']
label 26:
    $30binary_add.2 = low + high             ['$30binary_add.2', 'high', 'low']
    $const32.3 = const(int, 1)               ['$const32.3']
    mid = $30binary_add.2 >> $const32.3      ['$30binary_add.2', '$const32.3', 'mid']
    $38load_deref.5 = freevar(LT: <function lt_floats at 0x0000015A7094C288>) ['$38load_deref.5']
    $40load_deref.6 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>) ['$40load_deref.6']
    $48binary_subscr.10 = getitem(value=R, index=mid, fn=<built-in function getitem>) ['$48binary_subscr.10', 'R', 'mid']
    $50call_function.11 = call $40load_deref.6(A, $48binary_subscr.10, func=$40load_deref.6, args=[Var(A, quicksort.py:92), Var($48binary_subscr.10, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None) ['$40load_deref.6', '$48binary_subscr.10', '$50call_function.11', 'A']
    $52load_deref.12 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>) ['$52load_deref.12']
    $60binary_subscr.16 = getitem(value=R, index=low, fn=<built-in function getitem>) ['$60binary_subscr.16', 'R', 'low']
    $62call_function.17 = call $52load_deref.12(A, $60binary_subscr.16, func=$52load_deref.12, args=[Var(A, quicksort.py:92), Var($60binary_subscr.16, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None) ['$52load_deref.12', '$60binary_subscr.16', '$62call_function.17', 'A']
    $64call_function.18 = call $38load_deref.5($50call_function.11, $62call_function.17, func=$38load_deref.5, args=[Var($50call_function.11, quicksort.py:102), Var($62call_function.17, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None) ['$38load_deref.5', '$50call_function.11', '$62call_function.17', '$64call_function.18']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64call_function.18, func=bool66, args=(Var($64call_function.18, quicksort.py:102),), kws=(), vararg=None, varkwarg=None, target=None) ['$64call_function.18', '$66pred', 'bool66']
    branch $66pred, 68, 94                   ['$66pred']
label 68:
    $72binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>) ['$72binary_subscr.2', 'R', 'mid']
    $78binary_subscr.5 = getitem(value=R, index=low, fn=<built-in function getitem>) ['$78binary_subscr.5', 'R', 'low']
    R[low] = $72binary_subscr.2              ['$72binary_subscr.2', 'R', 'low']
    R[mid] = $78binary_subscr.5              ['$78binary_subscr.5', 'R', 'mid']
    jump 94                                  []
label 94:
    $94load_deref.0 = freevar(LT: <function lt_floats at 0x0000015A7094C288>) ['$94load_deref.0']
    $96load_deref.1 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>) ['$96load_deref.1']
    $104binary_subscr.5 = getitem(value=R, index=high, fn=<built-in function getitem>) ['$104binary_subscr.5', 'R', 'high']
    $106call_function.6 = call $96load_deref.1(A, $104binary_subscr.5, func=$96load_deref.1, args=[Var(A, quicksort.py:92), Var($104binary_subscr.5, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None) ['$104binary_subscr.5', '$106call_function.6', '$96load_deref.1', 'A']
    $108load_deref.7 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>) ['$108load_deref.7']
    $116binary_subscr.11 = getitem(value=R, index=mid, fn=<built-in function getitem>) ['$116binary_subscr.11', 'R', 'mid']
    $118call_function.12 = call $108load_deref.7(A, $116binary_subscr.11, func=$108load_deref.7, args=[Var(A, quicksort.py:92), Var($116binary_subscr.11, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None) ['$108load_deref.7', '$116binary_subscr.11', '$118call_function.12', 'A']
    $120call_function.13 = call $94load_deref.0($106call_function.6, $118call_function.12, func=$94load_deref.0, args=[Var($106call_function.6, quicksort.py:104), Var($118call_function.12, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None) ['$106call_function.6', '$118call_function.12', '$120call_function.13', '$94load_deref.0']
    bool122 = global(bool: <class 'bool'>)   ['bool122']
    $122pred = call bool122($120call_function.13, func=bool122, args=(Var($120call_function.13, quicksort.py:104),), kws=(), vararg=None, varkwarg=None, target=None) ['$120call_function.13', '$122pred', 'bool122']
    branch $122pred, 124, 150                ['$122pred']
label 124:
    $128binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>) ['$128binary_subscr.2', 'R', 'mid']
    $134binary_subscr.5 = getitem(value=R, index=high, fn=<built-in function getitem>) ['$134binary_subscr.5', 'R', 'high']
    R[high] = $128binary_subscr.2            ['$128binary_subscr.2', 'R', 'high']
    R[mid] = $134binary_subscr.5             ['$134binary_subscr.5', 'R', 'mid']
    jump 150                                 []
label 150:
    $150load_deref.0 = freevar(LT: <function lt_floats at 0x0000015A7094C288>) ['$150load_deref.0']
    $152load_deref.1 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>) ['$152load_deref.1']
    $160binary_subscr.5 = getitem(value=R, index=mid, fn=<built-in function getitem>) ['$160binary_subscr.5', 'R', 'mid']
    $162call_function.6 = call $152load_deref.1(A, $160binary_subscr.5, func=$152load_deref.1, args=[Var(A, quicksort.py:92), Var($160binary_subscr.5, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None) ['$152load_deref.1', '$160binary_subscr.5', '$162call_function.6', 'A']
    $164load_deref.7 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>) ['$164load_deref.7']
    $172binary_subscr.11 = getitem(value=R, index=low, fn=<built-in function getitem>) ['$172binary_subscr.11', 'R', 'low']
    $174call_function.12 = call $164load_deref.7(A, $172binary_subscr.11, func=$164load_deref.7, args=[Var(A, quicksort.py:92), Var($172binary_subscr.11, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None) ['$164load_deref.7', '$172binary_subscr.11', '$174call_function.12', 'A']
    $176call_function.13 = call $150load_deref.0($162call_function.6, $174call_function.12, func=$150load_deref.0, args=[Var($162call_function.6, quicksort.py:106), Var($174call_function.12, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None) ['$150load_deref.0', '$162call_function.6', '$174call_function.12', '$176call_function.13']
    bool178 = global(bool: <class 'bool'>)   ['bool178']
    $178pred = call bool178($176call_function.13, func=bool178, args=(Var($176call_function.13, quicksort.py:106),), kws=(), vararg=None, varkwarg=None, target=None) ['$176call_function.13', '$178pred', 'bool178']
    branch $178pred, 180, 206                ['$178pred']
label 180:
    $184binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>) ['$184binary_subscr.2', 'R', 'mid']
    $190binary_subscr.5 = getitem(value=R, index=low, fn=<built-in function getitem>) ['$190binary_subscr.5', 'R', 'low']
    R[low] = $184binary_subscr.2             ['$184binary_subscr.2', 'R', 'low']
    R[mid] = $190binary_subscr.5             ['$190binary_subscr.5', 'R', 'mid']
    jump 206                                 []
label 206:
    $206load_deref.0 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>) ['$206load_deref.0']
    $214binary_subscr.4 = getitem(value=R, index=mid, fn=<built-in function getitem>) ['$214binary_subscr.4', 'R', 'mid']
    pivot = call $206load_deref.0(A, $214binary_subscr.4, func=$206load_deref.0, args=[Var(A, quicksort.py:92), Var($214binary_subscr.4, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None) ['$206load_deref.0', '$214binary_subscr.4', 'A', 'pivot']
    $224binary_subscr.8 = getitem(value=R, index=mid, fn=<built-in function getitem>) ['$224binary_subscr.8', 'R', 'mid']
    $230binary_subscr.11 = getitem(value=R, index=high, fn=<built-in function getitem>) ['$230binary_subscr.11', 'R', 'high']
    R[high] = $224binary_subscr.8            ['$224binary_subscr.8', 'R', 'high']
    R[mid] = $230binary_subscr.11            ['$230binary_subscr.11', 'R', 'mid']
    i = low                                  ['i', 'low']
    $const252.18 = const(int, 1)             ['$const252.18']
    j = high - $const252.18                  ['$const252.18', 'high', 'j']
    jump 258                                 []
label 258:
    jump 260                                 []
label 260:
    jump 262                                 []
label 262:
    $266compare_op.2 = i < high              ['$266compare_op.2', 'high', 'i']
    bool268 = global(bool: <class 'bool'>)   ['bool268']
    $268pred = call bool268($266compare_op.2, func=bool268, args=(Var($266compare_op.2, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None) ['$266compare_op.2', '$268pred', 'bool268']
    branch $268pred, 272, 306                ['$268pred']
label 272:
    $272load_deref.0 = freevar(LT: <function lt_floats at 0x0000015A7094C288>) ['$272load_deref.0']
    $274load_deref.1 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>) ['$274load_deref.1']
    $282binary_subscr.5 = getitem(value=R, index=i, fn=<built-in function getitem>) ['$282binary_subscr.5', 'R', 'i']
    $284call_function.6 = call $274load_deref.1(A, $282binary_subscr.5, func=$274load_deref.1, args=[Var(A, quicksort.py:92), Var($282binary_subscr.5, quicksort.py:115)], kws=(), vararg=None, varkwarg=None, target=None) ['$274load_deref.1', '$282binary_subscr.5', '$284call_function.6', 'A']
    $288call_function.8 = call $272load_deref.0($284call_function.6, pivot, func=$272load_deref.0, args=[Var($284call_function.6, quicksort.py:115), Var(pivot, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None) ['$272load_deref.0', '$284call_function.6', '$288call_function.8', 'pivot']
    bool290 = global(bool: <class 'bool'>)   ['bool290']
    $290pred = call bool290($288call_function.8, func=bool290, args=(Var($288call_function.8, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None) ['$288call_function.8', '$290pred', 'bool290']
    branch $290pred, 294, 306                ['$290pred']
label 294:
    $const296.1 = const(int, 1)              ['$const296.1']
    $298inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const296.1, static_lhs=Undefined, static_rhs=Undefined) ['$298inplace_add.2', '$const296.1', 'i']
    i = $298inplace_add.2                    ['$298inplace_add.2', 'i']
    jump 262                                 []
label 306:
    jump 308                                 []
label 308:
    jump 310                                 []
label 310:
    $314compare_op.2 = j >= low              ['$314compare_op.2', 'j', 'low']
    bool316 = global(bool: <class 'bool'>)   ['bool316']
    $316pred = call bool316($314compare_op.2, func=bool316, args=(Var($314compare_op.2, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None) ['$314compare_op.2', '$316pred', 'bool316']
    branch $316pred, 320, 354                ['$316pred']
label 320:
    $320load_deref.0 = freevar(LT: <function lt_floats at 0x0000015A7094C288>) ['$320load_deref.0']
    $324load_deref.2 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>) ['$324load_deref.2']
    $332binary_subscr.6 = getitem(value=R, index=j, fn=<built-in function getitem>) ['$332binary_subscr.6', 'R', 'j']
    $334call_function.7 = call $324load_deref.2(A, $332binary_subscr.6, func=$324load_deref.2, args=[Var(A, quicksort.py:92), Var($332binary_subscr.6, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None) ['$324load_deref.2', '$332binary_subscr.6', '$334call_function.7', 'A']
    $336call_function.8 = call $320load_deref.0(pivot, $334call_function.7, func=$320load_deref.0, args=[Var(pivot, quicksort.py:108), Var($334call_function.7, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None) ['$320load_deref.0', '$334call_function.7', '$336call_function.8', 'pivot']
    bool338 = global(bool: <class 'bool'>)   ['bool338']
    $338pred = call bool338($336call_function.8, func=bool338, args=(Var($336call_function.8, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None) ['$336call_function.8', '$338pred', 'bool338']
    branch $338pred, 342, 354                ['$338pred']
label 342:
    $const344.1 = const(int, 1)              ['$const344.1']
    $346inplace_subtract.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const344.1, static_lhs=Undefined, static_rhs=Undefined) ['$346inplace_subtract.2', '$const344.1', 'j']
    j = $346inplace_subtract.2               ['$346inplace_subtract.2', 'j']
    jump 310                                 []
label 354:
    jump 356                                 []
label 356:
    $360compare_op.2 = i >= j                ['$360compare_op.2', 'i', 'j']
    bool362 = global(bool: <class 'bool'>)   ['bool362']
    $362pred = call bool362($360compare_op.2, func=bool362, args=(Var($360compare_op.2, quicksort.py:119),), kws=(), vararg=None, varkwarg=None, target=None) ['$360compare_op.2', '$362pred', 'bool362']
    branch $362pred, 366, 368                ['$362pred']
label 366:
    jump 416                                 []
label 368:
    $372binary_subscr.2 = getitem(value=R, index=j, fn=<built-in function getitem>) ['$372binary_subscr.2', 'R', 'j']
    $378binary_subscr.5 = getitem(value=R, index=i, fn=<built-in function getitem>) ['$378binary_subscr.5', 'R', 'i']
    R[i] = $372binary_subscr.2               ['$372binary_subscr.2', 'R', 'i']
    R[j] = $378binary_subscr.5               ['$378binary_subscr.5', 'R', 'j']
    $const396.11 = const(int, 1)             ['$const396.11']
    $398inplace_add.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const396.11, static_lhs=Undefined, static_rhs=Undefined) ['$398inplace_add.12', '$const396.11', 'i']
    i = $398inplace_add.12                   ['$398inplace_add.12', 'i']
    $const404.14 = const(int, 1)             ['$const404.14']
    $406inplace_subtract.15 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const404.14, static_lhs=Undefined, static_rhs=Undefined) ['$406inplace_subtract.15', '$const404.14', 'j']
    j = $406inplace_subtract.15              ['$406inplace_subtract.15', 'j']
    jump 260                                 []
label 416:
    $420binary_subscr.2 = getitem(value=R, index=high, fn=<built-in function getitem>) ['$420binary_subscr.2', 'R', 'high']
    $426binary_subscr.5 = getitem(value=R, index=i, fn=<built-in function getitem>) ['$426binary_subscr.5', 'R', 'i']
    R[i] = $420binary_subscr.2               ['$420binary_subscr.2', 'R', 'i']
    R[high] = $426binary_subscr.5            ['$426binary_subscr.5', 'R', 'high']
    $444return_value.11 = cast(value=i)      ['$444return_value.11', 'i']
    return $444return_value.11               ['$444return_value.11']

Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A3FAC0988>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: A = arg(0, name=A)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R = arg(1, name=R)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: low = arg(2, name=low)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: high = arg(3, name=high)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const4.1 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $6compare_op.2 = low >= $const4.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, quicksort.py:92),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $8pred, 14, 10
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 10
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A3FAC0988>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $10load_global.0 = global(AssertionError: <class 'AssertionError'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: <static> raise <class 'AssertionError'>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 14
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A3FAC0988>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $18compare_op.2 = high > low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool20 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $20pred = call bool20($18compare_op.2, func=bool20, args=(Var($18compare_op.2, quicksort.py:93),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $20pred, 26, 22
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 22
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A3FAC0988>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $22load_global.0 = global(AssertionError: <class 'AssertionError'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: <static> raise <class 'AssertionError'>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 26
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A3FAC0988>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $30binary_add.2 = low + high
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const32.3 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: mid = $30binary_add.2 >> $const32.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $38load_deref.5 = freevar(LT: <function lt_floats at 0x0000015A7094C288>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $40load_deref.6 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $48binary_subscr.10 = getitem(value=R, index=mid, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $50call_function.11 = call $40load_deref.6(A, $48binary_subscr.10, func=$40load_deref.6, args=[Var(A, quicksort.py:92), Var($48binary_subscr.10, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $52load_deref.12 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $60binary_subscr.16 = getitem(value=R, index=low, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $62call_function.17 = call $52load_deref.12(A, $60binary_subscr.16, func=$52load_deref.12, args=[Var(A, quicksort.py:92), Var($60binary_subscr.16, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $64call_function.18 = call $38load_deref.5($50call_function.11, $62call_function.17, func=$38load_deref.5, args=[Var($50call_function.11, quicksort.py:102), Var($62call_function.17, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool66 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $66pred = call bool66($64call_function.18, func=bool66, args=(Var($64call_function.18, quicksort.py:102),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $66pred, 68, 94
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 68
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A3FAC0988>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $72binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $78binary_subscr.5 = getitem(value=R, index=low, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[low] = $72binary_subscr.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[mid] = $78binary_subscr.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 94
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 94
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A3FAC0988>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $94load_deref.0 = freevar(LT: <function lt_floats at 0x0000015A7094C288>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $96load_deref.1 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $104binary_subscr.5 = getitem(value=R, index=high, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $106call_function.6 = call $96load_deref.1(A, $104binary_subscr.5, func=$96load_deref.1, args=[Var(A, quicksort.py:92), Var($104binary_subscr.5, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $108load_deref.7 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $116binary_subscr.11 = getitem(value=R, index=mid, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $118call_function.12 = call $108load_deref.7(A, $116binary_subscr.11, func=$108load_deref.7, args=[Var(A, quicksort.py:92), Var($116binary_subscr.11, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $120call_function.13 = call $94load_deref.0($106call_function.6, $118call_function.12, func=$94load_deref.0, args=[Var($106call_function.6, quicksort.py:104), Var($118call_function.12, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool122 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $122pred = call bool122($120call_function.13, func=bool122, args=(Var($120call_function.13, quicksort.py:104),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $122pred, 124, 150
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 124
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A3FAC0988>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $128binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $134binary_subscr.5 = getitem(value=R, index=high, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[high] = $128binary_subscr.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[mid] = $134binary_subscr.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 150
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 150
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A3FAC0988>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $150load_deref.0 = freevar(LT: <function lt_floats at 0x0000015A7094C288>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $152load_deref.1 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $160binary_subscr.5 = getitem(value=R, index=mid, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $162call_function.6 = call $152load_deref.1(A, $160binary_subscr.5, func=$152load_deref.1, args=[Var(A, quicksort.py:92), Var($160binary_subscr.5, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $164load_deref.7 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $172binary_subscr.11 = getitem(value=R, index=low, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $174call_function.12 = call $164load_deref.7(A, $172binary_subscr.11, func=$164load_deref.7, args=[Var(A, quicksort.py:92), Var($172binary_subscr.11, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $176call_function.13 = call $150load_deref.0($162call_function.6, $174call_function.12, func=$150load_deref.0, args=[Var($162call_function.6, quicksort.py:106), Var($174call_function.12, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool178 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $178pred = call bool178($176call_function.13, func=bool178, args=(Var($176call_function.13, quicksort.py:106),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $178pred, 180, 206
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 180
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A3FAC0988>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $184binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $190binary_subscr.5 = getitem(value=R, index=low, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[low] = $184binary_subscr.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[mid] = $190binary_subscr.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 206
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 206
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A3FAC0988>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $206load_deref.0 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $214binary_subscr.4 = getitem(value=R, index=mid, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: pivot = call $206load_deref.0(A, $214binary_subscr.4, func=$206load_deref.0, args=[Var(A, quicksort.py:92), Var($214binary_subscr.4, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $224binary_subscr.8 = getitem(value=R, index=mid, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $230binary_subscr.11 = getitem(value=R, index=high, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[high] = $224binary_subscr.8
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[mid] = $230binary_subscr.11
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: i = low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const252.18 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: j = high - $const252.18
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 258
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 258
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A3FAC0988>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 260
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 260
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A3FAC0988>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A3FAC0988>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $266compare_op.2 = i < high
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool268 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $268pred = call bool268($266compare_op.2, func=bool268, args=(Var($266compare_op.2, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $268pred, 272, 306
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 272
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A3FAC0988>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $272load_deref.0 = freevar(LT: <function lt_floats at 0x0000015A7094C288>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $274load_deref.1 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $282binary_subscr.5 = getitem(value=R, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $284call_function.6 = call $274load_deref.1(A, $282binary_subscr.5, func=$274load_deref.1, args=[Var(A, quicksort.py:92), Var($282binary_subscr.5, quicksort.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $288call_function.8 = call $272load_deref.0($284call_function.6, pivot, func=$272load_deref.0, args=[Var($284call_function.6, quicksort.py:115), Var(pivot, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool290 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $290pred = call bool290($288call_function.8, func=bool290, args=(Var($288call_function.8, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $290pred, 294, 306
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 294
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A3FAC0988>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const296.1 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $298inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const296.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: i = $298inplace_add.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 306
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A3FAC0988>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 308
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 308
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A3FAC0988>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A3FAC0988>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $314compare_op.2 = j >= low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool316 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $316pred = call bool316($314compare_op.2, func=bool316, args=(Var($314compare_op.2, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $316pred, 320, 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 320
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A3FAC0988>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $320load_deref.0 = freevar(LT: <function lt_floats at 0x0000015A7094C288>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $324load_deref.2 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $332binary_subscr.6 = getitem(value=R, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $334call_function.7 = call $324load_deref.2(A, $332binary_subscr.6, func=$324load_deref.2, args=[Var(A, quicksort.py:92), Var($332binary_subscr.6, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $336call_function.8 = call $320load_deref.0(pivot, $334call_function.7, func=$320load_deref.0, args=[Var(pivot, quicksort.py:108), Var($334call_function.7, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool338 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $338pred = call bool338($336call_function.8, func=bool338, args=(Var($336call_function.8, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $338pred, 342, 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 342
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A3FAC0988>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const344.1 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $346inplace_subtract.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const344.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: j = $346inplace_subtract.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A3FAC0988>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 356
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 356
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A3FAC0988>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $360compare_op.2 = i >= j
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool362 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $362pred = call bool362($360compare_op.2, func=bool362, args=(Var($360compare_op.2, quicksort.py:119),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $362pred, 366, 368
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 366
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A3FAC0988>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 416
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 368
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A3FAC0988>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $372binary_subscr.2 = getitem(value=R, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $378binary_subscr.5 = getitem(value=R, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[i] = $372binary_subscr.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[j] = $378binary_subscr.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const396.11 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $398inplace_add.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const396.11, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: i = $398inplace_add.12
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const404.14 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $406inplace_subtract.15 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const404.14, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: j = $406inplace_subtract.15
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 260
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 416
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A3FAC0988>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $420binary_subscr.2 = getitem(value=R, index=high, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $426binary_subscr.5 = getitem(value=R, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[i] = $420binary_subscr.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[high] = $426binary_subscr.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $444return_value.11 = cast(value=i)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $444return_value.11
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG defs defaultdict(<class 'list'>,
            {'$104binary_subscr.5': [<numba.core.ir.Assign object at 0x0000015A3FAD1A48>],
             '$106call_function.6': [<numba.core.ir.Assign object at 0x0000015A3FAD1B88>],
             '$108load_deref.7': [<numba.core.ir.Assign object at 0x0000015A3FAD1CC8>],
             '$10load_global.0': [<numba.core.ir.Assign object at 0x0000015A39C9DB88>],
             '$116binary_subscr.11': [<numba.core.ir.Assign object at 0x0000015A3FAD4148>],
             '$118call_function.12': [<numba.core.ir.Assign object at 0x0000015A3FAD4288>],
             '$120call_function.13': [<numba.core.ir.Assign object at 0x0000015A3FAD43C8>],
             '$122pred': [<numba.core.ir.Assign object at 0x0000015A3FAD4688>],
             '$128binary_subscr.2': [<numba.core.ir.Assign object at 0x0000015A3FAD4988>],
             '$134binary_subscr.5': [<numba.core.ir.Assign object at 0x0000015A3FAD4D48>],
             '$150load_deref.0': [<numba.core.ir.Assign object at 0x0000015A3FAD51C8>],
             '$152load_deref.1': [<numba.core.ir.Assign object at 0x0000015A3FAD5388>],
             '$160binary_subscr.5': [<numba.core.ir.Assign object at 0x0000015A3FAD5908>],
             '$162call_function.6': [<numba.core.ir.Assign object at 0x0000015A3FAD5A48>],
             '$164load_deref.7': [<numba.core.ir.Assign object at 0x0000015A3FAD5B88>],
             '$172binary_subscr.11': [<numba.core.ir.Assign object at 0x0000015A3FAD5FC8>],
             '$174call_function.12': [<numba.core.ir.Assign object at 0x0000015A3FAD8148>],
             '$176call_function.13': [<numba.core.ir.Assign object at 0x0000015A3FAD8288>],
             '$178pred': [<numba.core.ir.Assign object at 0x0000015A3FAD8548>],
             '$184binary_subscr.2': [<numba.core.ir.Assign object at 0x0000015A3FAD8848>],
             '$18compare_op.2': [<numba.core.ir.Assign object at 0x0000015A3FAAB808>],
             '$190binary_subscr.5': [<numba.core.ir.Assign object at 0x0000015A3FAD8C08>],
             '$206load_deref.0': [<numba.core.ir.Assign object at 0x0000015A3FADA088>],
             '$20pred': [<numba.core.ir.Assign object at 0x0000015A3FAC0248>],
             '$214binary_subscr.4': [<numba.core.ir.Assign object at 0x0000015A3FADA648>],
             '$224binary_subscr.8': [<numba.core.ir.Assign object at 0x0000015A3FADABC8>],
             '$22load_global.0': [<numba.core.ir.Assign object at 0x0000015A3FAC0E48>],
             '$230binary_subscr.11': [<numba.core.ir.Assign object at 0x0000015A3FADAF48>],
             '$266compare_op.2': [<numba.core.ir.Assign object at 0x0000015A3FADDD88>],
             '$268pred': [<numba.core.ir.Assign object at 0x0000015A3FADF088>],
             '$272load_deref.0': [<numba.core.ir.Assign object at 0x0000015A3FADF1C8>],
             '$274load_deref.1': [<numba.core.ir.Assign object at 0x0000015A3FADF308>],
             '$282binary_subscr.5': [<numba.core.ir.Assign object at 0x0000015A3FADF888>],
             '$284call_function.6': [<numba.core.ir.Assign object at 0x0000015A3FADF9C8>],
             '$288call_function.8': [<numba.core.ir.Assign object at 0x0000015A3FADFC48>],
             '$290pred': [<numba.core.ir.Assign object at 0x0000015A3FADFEC8>],
             '$298inplace_add.2': [<numba.core.ir.Assign object at 0x0000015A3FAE32C8>],
             '$30binary_add.2': [<numba.core.ir.Assign object at 0x0000015A3FACC108>],
             '$314compare_op.2': [<numba.core.ir.Assign object at 0x0000015A3FAE3948>],
             '$316pred': [<numba.core.ir.Assign object at 0x0000015A3FAE3C08>],
             '$320load_deref.0': [<numba.core.ir.Assign object at 0x0000015A3FAE3D48>],
             '$324load_deref.2': [<numba.core.ir.Assign object at 0x0000015A3FAE5048>],
             '$332binary_subscr.6': [<numba.core.ir.Assign object at 0x0000015A3FAE5588>],
             '$334call_function.7': [<numba.core.ir.Assign object at 0x0000015A3FAE56C8>],
             '$336call_function.8': [<numba.core.ir.Assign object at 0x0000015A3FAE5808>],
             '$338pred': [<numba.core.ir.Assign object at 0x0000015A3FAE5A88>],
             '$346inplace_subtract.2': [<numba.core.ir.Assign object at 0x0000015A3FAE5E48>],
             '$360compare_op.2': [<numba.core.ir.Assign object at 0x0000015A3FAE8448>],
             '$362pred': [<numba.core.ir.Assign object at 0x0000015A3FAE8708>],
             '$372binary_subscr.2': [<numba.core.ir.Assign object at 0x0000015A3FAE8C48>],
             '$378binary_subscr.5': [<numba.core.ir.Assign object at 0x0000015A3FAEA048>],
             '$38load_deref.5': [<numba.core.ir.Assign object at 0x0000015A3FACC648>],
             '$398inplace_add.12': [<numba.core.ir.Assign object at 0x0000015A3FAEA888>],
             '$406inplace_subtract.15': [<numba.core.ir.Assign object at 0x0000015A3FAEAC88>],
             '$40load_deref.6': [<numba.core.ir.Assign object at 0x0000015A3FACC788>],
             '$420binary_subscr.2': [<numba.core.ir.Assign object at 0x0000015A3FAEAF48>],
             '$426binary_subscr.5': [<numba.core.ir.Assign object at 0x0000015A3FAED348>],
             '$444return_value.11': [<numba.core.ir.Assign object at 0x0000015A3FAEDA88>],
             '$48binary_subscr.10': [<numba.core.ir.Assign object at 0x0000015A3FACCC48>],
             '$50call_function.11': [<numba.core.ir.Assign object at 0x0000015A3FACCD88>],
             '$52load_deref.12': [<numba.core.ir.Assign object at 0x0000015A3FACCEC8>],
             '$60binary_subscr.16': [<numba.core.ir.Assign object at 0x0000015A3FACF348>],
             '$62call_function.17': [<numba.core.ir.Assign object at 0x0000015A3FACF488>],
             '$64call_function.18': [<numba.core.ir.Assign object at 0x0000015A3FACF5C8>],
             '$66pred': [<numba.core.ir.Assign object at 0x0000015A3FACF888>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x0000015A3FAB3188>],
             '$72binary_subscr.2': [<numba.core.ir.Assign object at 0x0000015A3FACFAC8>],
             '$78binary_subscr.5': [<numba.core.ir.Assign object at 0x0000015A3FACFE88>],
             '$8pred': [<numba.core.ir.Assign object at 0x0000015A3FAA2C88>],
             '$94load_deref.0': [<numba.core.ir.Assign object at 0x0000015A3FAD1308>],
             '$96load_deref.1': [<numba.core.ir.Assign object at 0x0000015A3FAD14C8>],
             '$const252.18': [<numba.core.ir.Assign object at 0x0000015A3FADD948>],
             '$const296.1': [<numba.core.ir.Assign object at 0x0000015A3FAE3188>],
             '$const32.3': [<numba.core.ir.Assign object at 0x0000015A3FACC248>],
             '$const344.1': [<numba.core.ir.Assign object at 0x0000015A3FAE5D08>],
             '$const396.11': [<numba.core.ir.Assign object at 0x0000015A3FAEA748>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000015A3FAB3208>],
             '$const404.14': [<numba.core.ir.Assign object at 0x0000015A3FAEAB48>],
             'A': [<numba.core.ir.Assign object at 0x0000015A39CDE448>],
             'R': [<numba.core.ir.Assign object at 0x0000015A3FAB39C8>],
             'bool122': [<numba.core.ir.Assign object at 0x0000015A3FAD4548>],
             'bool178': [<numba.core.ir.Assign object at 0x0000015A3FAD8408>],
             'bool20': [<numba.core.ir.Assign object at 0x0000015A3FAC0348>],
             'bool268': [<numba.core.ir.Assign object at 0x0000015A3FADDF08>],
             'bool290': [<numba.core.ir.Assign object at 0x0000015A3FADFD88>],
             'bool316': [<numba.core.ir.Assign object at 0x0000015A3FAE3AC8>],
             'bool338': [<numba.core.ir.Assign object at 0x0000015A3FAE5948>],
             'bool362': [<numba.core.ir.Assign object at 0x0000015A3FAE85C8>],
             'bool66': [<numba.core.ir.Assign object at 0x0000015A3FACF748>],
             'bool8': [<numba.core.ir.Assign object at 0x0000015A3FAA2C48>],
             'high': [<numba.core.ir.Assign object at 0x0000015A3FAB3EC8>],
             'i': [<numba.core.ir.Assign object at 0x0000015A3FADD708>,
                   <numba.core.ir.Assign object at 0x0000015A3FADDB48>,
                   <numba.core.ir.Assign object at 0x0000015A3FAE5F08>],
             'j': [<numba.core.ir.Assign object at 0x0000015A3FADDA88>,
                   <numba.core.ir.Assign object at 0x0000015A3FAE3388>,
                   <numba.core.ir.Assign object at 0x0000015A3FAEA948>],
             'low': [<numba.core.ir.Assign object at 0x0000015A3FAB3E88>],
             'mid': [<numba.core.ir.Assign object at 0x0000015A3FACC388>],
             'pivot': [<numba.core.ir.Assign object at 0x0000015A3FADA7C8>]})
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG SSA violators {'j', 'i'}
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Fix SSA violator on var j
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: A = arg(0, name=A)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R = arg(1, name=R)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: low = arg(2, name=low)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: high = arg(3, name=high)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const4.1 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $6compare_op.2 = low >= $const4.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, quicksort.py:92),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $8pred, 14, 10
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 10
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $10load_global.0 = global(AssertionError: <class 'AssertionError'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: <static> raise <class 'AssertionError'>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 14
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $18compare_op.2 = high > low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool20 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $20pred = call bool20($18compare_op.2, func=bool20, args=(Var($18compare_op.2, quicksort.py:93),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $20pred, 26, 22
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 22
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $22load_global.0 = global(AssertionError: <class 'AssertionError'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: <static> raise <class 'AssertionError'>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 26
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $30binary_add.2 = low + high
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const32.3 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: mid = $30binary_add.2 >> $const32.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $38load_deref.5 = freevar(LT: <function lt_floats at 0x0000015A7094C288>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $40load_deref.6 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $48binary_subscr.10 = getitem(value=R, index=mid, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $50call_function.11 = call $40load_deref.6(A, $48binary_subscr.10, func=$40load_deref.6, args=[Var(A, quicksort.py:92), Var($48binary_subscr.10, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $52load_deref.12 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $60binary_subscr.16 = getitem(value=R, index=low, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $62call_function.17 = call $52load_deref.12(A, $60binary_subscr.16, func=$52load_deref.12, args=[Var(A, quicksort.py:92), Var($60binary_subscr.16, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $64call_function.18 = call $38load_deref.5($50call_function.11, $62call_function.17, func=$38load_deref.5, args=[Var($50call_function.11, quicksort.py:102), Var($62call_function.17, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool66 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $66pred = call bool66($64call_function.18, func=bool66, args=(Var($64call_function.18, quicksort.py:102),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $66pred, 68, 94
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 68
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $72binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $78binary_subscr.5 = getitem(value=R, index=low, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[low] = $72binary_subscr.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[mid] = $78binary_subscr.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 94
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 94
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $94load_deref.0 = freevar(LT: <function lt_floats at 0x0000015A7094C288>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $96load_deref.1 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $104binary_subscr.5 = getitem(value=R, index=high, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $106call_function.6 = call $96load_deref.1(A, $104binary_subscr.5, func=$96load_deref.1, args=[Var(A, quicksort.py:92), Var($104binary_subscr.5, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $108load_deref.7 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $116binary_subscr.11 = getitem(value=R, index=mid, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $118call_function.12 = call $108load_deref.7(A, $116binary_subscr.11, func=$108load_deref.7, args=[Var(A, quicksort.py:92), Var($116binary_subscr.11, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $120call_function.13 = call $94load_deref.0($106call_function.6, $118call_function.12, func=$94load_deref.0, args=[Var($106call_function.6, quicksort.py:104), Var($118call_function.12, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool122 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $122pred = call bool122($120call_function.13, func=bool122, args=(Var($120call_function.13, quicksort.py:104),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $122pred, 124, 150
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 124
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $128binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $134binary_subscr.5 = getitem(value=R, index=high, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[high] = $128binary_subscr.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[mid] = $134binary_subscr.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 150
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 150
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $150load_deref.0 = freevar(LT: <function lt_floats at 0x0000015A7094C288>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $152load_deref.1 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $160binary_subscr.5 = getitem(value=R, index=mid, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $162call_function.6 = call $152load_deref.1(A, $160binary_subscr.5, func=$152load_deref.1, args=[Var(A, quicksort.py:92), Var($160binary_subscr.5, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $164load_deref.7 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $172binary_subscr.11 = getitem(value=R, index=low, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $174call_function.12 = call $164load_deref.7(A, $172binary_subscr.11, func=$164load_deref.7, args=[Var(A, quicksort.py:92), Var($172binary_subscr.11, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $176call_function.13 = call $150load_deref.0($162call_function.6, $174call_function.12, func=$150load_deref.0, args=[Var($162call_function.6, quicksort.py:106), Var($174call_function.12, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool178 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $178pred = call bool178($176call_function.13, func=bool178, args=(Var($176call_function.13, quicksort.py:106),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $178pred, 180, 206
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 180
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $184binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $190binary_subscr.5 = getitem(value=R, index=low, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[low] = $184binary_subscr.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[mid] = $190binary_subscr.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 206
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 206
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $206load_deref.0 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $214binary_subscr.4 = getitem(value=R, index=mid, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: pivot = call $206load_deref.0(A, $214binary_subscr.4, func=$206load_deref.0, args=[Var(A, quicksort.py:92), Var($214binary_subscr.4, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $224binary_subscr.8 = getitem(value=R, index=mid, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $230binary_subscr.11 = getitem(value=R, index=high, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[high] = $224binary_subscr.8
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[mid] = $230binary_subscr.11
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: i = low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const252.18 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: j = high - $const252.18
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG first assign: j
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: j = high - $const252.18
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 258
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 258
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 260
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 260
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $266compare_op.2 = i < high
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool268 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $268pred = call bool268($266compare_op.2, func=bool268, args=(Var($266compare_op.2, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $268pred, 272, 306
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 272
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $272load_deref.0 = freevar(LT: <function lt_floats at 0x0000015A7094C288>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $274load_deref.1 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $282binary_subscr.5 = getitem(value=R, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $284call_function.6 = call $274load_deref.1(A, $282binary_subscr.5, func=$274load_deref.1, args=[Var(A, quicksort.py:92), Var($282binary_subscr.5, quicksort.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $288call_function.8 = call $272load_deref.0($284call_function.6, pivot, func=$272load_deref.0, args=[Var($284call_function.6, quicksort.py:115), Var(pivot, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool290 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $290pred = call bool290($288call_function.8, func=bool290, args=(Var($288call_function.8, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $290pred, 294, 306
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 294
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const296.1 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $298inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const296.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: i = $298inplace_add.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 306
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 308
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 308
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $314compare_op.2 = j >= low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool316 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $316pred = call bool316($314compare_op.2, func=bool316, args=(Var($314compare_op.2, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $316pred, 320, 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 320
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $320load_deref.0 = freevar(LT: <function lt_floats at 0x0000015A7094C288>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $324load_deref.2 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $332binary_subscr.6 = getitem(value=R, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $334call_function.7 = call $324load_deref.2(A, $332binary_subscr.6, func=$324load_deref.2, args=[Var(A, quicksort.py:92), Var($332binary_subscr.6, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $336call_function.8 = call $320load_deref.0(pivot, $334call_function.7, func=$320load_deref.0, args=[Var(pivot, quicksort.py:108), Var($334call_function.7, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool338 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $338pred = call bool338($336call_function.8, func=bool338, args=(Var($336call_function.8, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $338pred, 342, 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 342
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const344.1 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $346inplace_subtract.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const344.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: j = $346inplace_subtract.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: j.1 = $346inplace_subtract.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 356
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 356
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $360compare_op.2 = i >= j
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool362 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $362pred = call bool362($360compare_op.2, func=bool362, args=(Var($360compare_op.2, quicksort.py:119),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $362pred, 366, 368
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 366
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 416
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 368
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $372binary_subscr.2 = getitem(value=R, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $378binary_subscr.5 = getitem(value=R, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[i] = $372binary_subscr.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[j] = $378binary_subscr.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const396.11 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $398inplace_add.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const396.11, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: i = $398inplace_add.12
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const404.14 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $406inplace_subtract.15 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const404.14, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: j = $406inplace_subtract.15
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: j.2 = $406inplace_subtract.15
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 260
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 416
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $420binary_subscr.2 = getitem(value=R, index=high, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $426binary_subscr.5 = getitem(value=R, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[i] = $420binary_subscr.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[high] = $426binary_subscr.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $444return_value.11 = cast(value=i)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $444return_value.11
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {206: [<numba.core.ir.Assign object at 0x0000015A3FAED1C8>],
             342: [<numba.core.ir.Assign object at 0x0000015A3FAA9308>],
             368: [<numba.core.ir.Assign object at 0x0000015A3FAB0648>]})
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: A = arg(0, name=A)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R = arg(1, name=R)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: low = arg(2, name=low)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: high = arg(3, name=high)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const4.1 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $6compare_op.2 = low >= $const4.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, quicksort.py:92),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $8pred, 14, 10
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 10
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $10load_global.0 = global(AssertionError: <class 'AssertionError'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: <static> raise <class 'AssertionError'>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 14
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $18compare_op.2 = high > low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool20 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $20pred = call bool20($18compare_op.2, func=bool20, args=(Var($18compare_op.2, quicksort.py:93),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $20pred, 26, 22
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 22
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $22load_global.0 = global(AssertionError: <class 'AssertionError'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: <static> raise <class 'AssertionError'>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 26
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $30binary_add.2 = low + high
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const32.3 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: mid = $30binary_add.2 >> $const32.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $38load_deref.5 = freevar(LT: <function lt_floats at 0x0000015A7094C288>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $40load_deref.6 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $48binary_subscr.10 = getitem(value=R, index=mid, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $50call_function.11 = call $40load_deref.6(A, $48binary_subscr.10, func=$40load_deref.6, args=[Var(A, quicksort.py:92), Var($48binary_subscr.10, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $52load_deref.12 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $60binary_subscr.16 = getitem(value=R, index=low, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $62call_function.17 = call $52load_deref.12(A, $60binary_subscr.16, func=$52load_deref.12, args=[Var(A, quicksort.py:92), Var($60binary_subscr.16, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $64call_function.18 = call $38load_deref.5($50call_function.11, $62call_function.17, func=$38load_deref.5, args=[Var($50call_function.11, quicksort.py:102), Var($62call_function.17, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool66 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $66pred = call bool66($64call_function.18, func=bool66, args=(Var($64call_function.18, quicksort.py:102),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $66pred, 68, 94
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 68
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $72binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $78binary_subscr.5 = getitem(value=R, index=low, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[low] = $72binary_subscr.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[mid] = $78binary_subscr.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 94
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 94
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $94load_deref.0 = freevar(LT: <function lt_floats at 0x0000015A7094C288>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $96load_deref.1 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $104binary_subscr.5 = getitem(value=R, index=high, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $106call_function.6 = call $96load_deref.1(A, $104binary_subscr.5, func=$96load_deref.1, args=[Var(A, quicksort.py:92), Var($104binary_subscr.5, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $108load_deref.7 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $116binary_subscr.11 = getitem(value=R, index=mid, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $118call_function.12 = call $108load_deref.7(A, $116binary_subscr.11, func=$108load_deref.7, args=[Var(A, quicksort.py:92), Var($116binary_subscr.11, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $120call_function.13 = call $94load_deref.0($106call_function.6, $118call_function.12, func=$94load_deref.0, args=[Var($106call_function.6, quicksort.py:104), Var($118call_function.12, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool122 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $122pred = call bool122($120call_function.13, func=bool122, args=(Var($120call_function.13, quicksort.py:104),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $122pred, 124, 150
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 124
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $128binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $134binary_subscr.5 = getitem(value=R, index=high, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[high] = $128binary_subscr.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[mid] = $134binary_subscr.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 150
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 150
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $150load_deref.0 = freevar(LT: <function lt_floats at 0x0000015A7094C288>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $152load_deref.1 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $160binary_subscr.5 = getitem(value=R, index=mid, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $162call_function.6 = call $152load_deref.1(A, $160binary_subscr.5, func=$152load_deref.1, args=[Var(A, quicksort.py:92), Var($160binary_subscr.5, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $164load_deref.7 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $172binary_subscr.11 = getitem(value=R, index=low, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $174call_function.12 = call $164load_deref.7(A, $172binary_subscr.11, func=$164load_deref.7, args=[Var(A, quicksort.py:92), Var($172binary_subscr.11, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $176call_function.13 = call $150load_deref.0($162call_function.6, $174call_function.12, func=$150load_deref.0, args=[Var($162call_function.6, quicksort.py:106), Var($174call_function.12, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool178 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $178pred = call bool178($176call_function.13, func=bool178, args=(Var($176call_function.13, quicksort.py:106),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $178pred, 180, 206
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 180
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $184binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $190binary_subscr.5 = getitem(value=R, index=low, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[low] = $184binary_subscr.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[mid] = $190binary_subscr.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 206
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 206
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $206load_deref.0 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $214binary_subscr.4 = getitem(value=R, index=mid, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: pivot = call $206load_deref.0(A, $214binary_subscr.4, func=$206load_deref.0, args=[Var(A, quicksort.py:92), Var($214binary_subscr.4, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $224binary_subscr.8 = getitem(value=R, index=mid, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $230binary_subscr.11 = getitem(value=R, index=high, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[high] = $224binary_subscr.8
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[mid] = $230binary_subscr.11
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: i = low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const252.18 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: j = high - $const252.18
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 258
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 258
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 260
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 260
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $266compare_op.2 = i < high
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool268 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $268pred = call bool268($266compare_op.2, func=bool268, args=(Var($266compare_op.2, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $268pred, 272, 306
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 272
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $272load_deref.0 = freevar(LT: <function lt_floats at 0x0000015A7094C288>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $274load_deref.1 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $282binary_subscr.5 = getitem(value=R, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $284call_function.6 = call $274load_deref.1(A, $282binary_subscr.5, func=$274load_deref.1, args=[Var(A, quicksort.py:92), Var($282binary_subscr.5, quicksort.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $288call_function.8 = call $272load_deref.0($284call_function.6, pivot, func=$272load_deref.0, args=[Var($284call_function.6, quicksort.py:115), Var(pivot, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool290 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $290pred = call bool290($288call_function.8, func=bool290, args=(Var($288call_function.8, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $290pred, 294, 306
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 294
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const296.1 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $298inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const296.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: i = $298inplace_add.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 306
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 308
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 308
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $314compare_op.2 = j >= low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='j' stmt=$314compare_op.2 = j >= low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG insert phi node j.3 = phi(incoming_values=[], incoming_blocks=[]) at 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 308
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 308
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 306 from label 308
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 306
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 306
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 262 from label 306
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 260 from label 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 260
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 260
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG insert phi node j.4 = phi(incoming_values=[], incoming_blocks=[]) at 260
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 368
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG incoming_def j.2 = $406inplace_subtract.15
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 258
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 258
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 206 from label 258
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 206
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG incoming_def j = high - $const252.18
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG incoming_def j.4 = phi(incoming_values=[Var(j.2, quicksort.py:123), Var(j, quicksort.py:113)], incoming_blocks=[368, 258])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 342
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG incoming_def j.1 = $346inplace_subtract.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: $314compare_op.2 = j.3 >= low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool316 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $316pred = call bool316($314compare_op.2, func=bool316, args=(Var($314compare_op.2, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $316pred, 320, 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 320
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $320load_deref.0 = freevar(LT: <function lt_floats at 0x0000015A7094C288>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $324load_deref.2 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $332binary_subscr.6 = getitem(value=R, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='j' stmt=$332binary_subscr.6 = getitem(value=R, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 320
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 310 from label 320
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: $332binary_subscr.6 = getitem(value=R, index=j.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $334call_function.7 = call $324load_deref.2(A, $332binary_subscr.6, func=$324load_deref.2, args=[Var(A, quicksort.py:92), Var($332binary_subscr.6, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $336call_function.8 = call $320load_deref.0(pivot, $334call_function.7, func=$320load_deref.0, args=[Var(pivot, quicksort.py:108), Var($334call_function.7, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool338 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $338pred = call bool338($336call_function.8, func=bool338, args=(Var($336call_function.8, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $338pred, 342, 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 342
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const344.1 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $346inplace_subtract.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const344.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='j' stmt=$346inplace_subtract.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const344.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 342
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 320 from label 342
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 320
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 320
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 310 from label 320
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: $346inplace_subtract.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j.3, rhs=$const344.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: j.1 = $346inplace_subtract.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 356
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 356
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $360compare_op.2 = i >= j
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='j' stmt=$360compare_op.2 = i >= j
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 356
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 354 from label 356
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 310 from label 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: $360compare_op.2 = i >= j.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool362 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $362pred = call bool362($360compare_op.2, func=bool362, args=(Var($360compare_op.2, quicksort.py:119),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $362pred, 366, 368
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 366
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 416
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 368
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $372binary_subscr.2 = getitem(value=R, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='j' stmt=$372binary_subscr.2 = getitem(value=R, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 368
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 356 from label 368
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 356
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 356
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 354 from label 356
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 310 from label 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: $372binary_subscr.2 = getitem(value=R, index=j.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $378binary_subscr.5 = getitem(value=R, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[i] = $372binary_subscr.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[j] = $378binary_subscr.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='j' stmt=R[j] = $378binary_subscr.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 368
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 356 from label 368
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 356
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 356
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 354 from label 356
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 310 from label 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: R[j.3] = $378binary_subscr.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const396.11 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $398inplace_add.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const396.11, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: i = $398inplace_add.12
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const404.14 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $406inplace_subtract.15 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const404.14, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='j' stmt=$406inplace_subtract.15 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const404.14, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 368
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 356 from label 368
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 356
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 356
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 354 from label 356
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 310 from label 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: $406inplace_subtract.15 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j.3, rhs=$const404.14, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: j.2 = $406inplace_subtract.15
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 260
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 416
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $420binary_subscr.2 = getitem(value=R, index=high, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $426binary_subscr.5 = getitem(value=R, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[i] = $420binary_subscr.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[high] = $426binary_subscr.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $444return_value.11 = cast(value=i)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $444return_value.11
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Fix SSA violator on var i
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAABF48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: A = arg(0, name=A)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R = arg(1, name=R)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: low = arg(2, name=low)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: high = arg(3, name=high)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const4.1 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $6compare_op.2 = low >= $const4.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, quicksort.py:92),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $8pred, 14, 10
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 10
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAABF48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $10load_global.0 = global(AssertionError: <class 'AssertionError'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: <static> raise <class 'AssertionError'>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 14
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAABF48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $18compare_op.2 = high > low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool20 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $20pred = call bool20($18compare_op.2, func=bool20, args=(Var($18compare_op.2, quicksort.py:93),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $20pred, 26, 22
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 22
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAABF48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $22load_global.0 = global(AssertionError: <class 'AssertionError'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: <static> raise <class 'AssertionError'>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 26
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAABF48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $30binary_add.2 = low + high
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const32.3 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: mid = $30binary_add.2 >> $const32.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $38load_deref.5 = freevar(LT: <function lt_floats at 0x0000015A7094C288>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $40load_deref.6 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $48binary_subscr.10 = getitem(value=R, index=mid, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $50call_function.11 = call $40load_deref.6(A, $48binary_subscr.10, func=$40load_deref.6, args=[Var(A, quicksort.py:92), Var($48binary_subscr.10, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $52load_deref.12 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $60binary_subscr.16 = getitem(value=R, index=low, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $62call_function.17 = call $52load_deref.12(A, $60binary_subscr.16, func=$52load_deref.12, args=[Var(A, quicksort.py:92), Var($60binary_subscr.16, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $64call_function.18 = call $38load_deref.5($50call_function.11, $62call_function.17, func=$38load_deref.5, args=[Var($50call_function.11, quicksort.py:102), Var($62call_function.17, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool66 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $66pred = call bool66($64call_function.18, func=bool66, args=(Var($64call_function.18, quicksort.py:102),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $66pred, 68, 94
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 68
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAABF48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $72binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $78binary_subscr.5 = getitem(value=R, index=low, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[low] = $72binary_subscr.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[mid] = $78binary_subscr.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 94
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 94
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAABF48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $94load_deref.0 = freevar(LT: <function lt_floats at 0x0000015A7094C288>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $96load_deref.1 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $104binary_subscr.5 = getitem(value=R, index=high, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $106call_function.6 = call $96load_deref.1(A, $104binary_subscr.5, func=$96load_deref.1, args=[Var(A, quicksort.py:92), Var($104binary_subscr.5, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $108load_deref.7 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $116binary_subscr.11 = getitem(value=R, index=mid, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $118call_function.12 = call $108load_deref.7(A, $116binary_subscr.11, func=$108load_deref.7, args=[Var(A, quicksort.py:92), Var($116binary_subscr.11, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $120call_function.13 = call $94load_deref.0($106call_function.6, $118call_function.12, func=$94load_deref.0, args=[Var($106call_function.6, quicksort.py:104), Var($118call_function.12, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool122 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $122pred = call bool122($120call_function.13, func=bool122, args=(Var($120call_function.13, quicksort.py:104),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $122pred, 124, 150
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 124
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAABF48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $128binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $134binary_subscr.5 = getitem(value=R, index=high, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[high] = $128binary_subscr.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[mid] = $134binary_subscr.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 150
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 150
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAABF48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $150load_deref.0 = freevar(LT: <function lt_floats at 0x0000015A7094C288>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $152load_deref.1 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $160binary_subscr.5 = getitem(value=R, index=mid, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $162call_function.6 = call $152load_deref.1(A, $160binary_subscr.5, func=$152load_deref.1, args=[Var(A, quicksort.py:92), Var($160binary_subscr.5, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $164load_deref.7 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $172binary_subscr.11 = getitem(value=R, index=low, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $174call_function.12 = call $164load_deref.7(A, $172binary_subscr.11, func=$164load_deref.7, args=[Var(A, quicksort.py:92), Var($172binary_subscr.11, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $176call_function.13 = call $150load_deref.0($162call_function.6, $174call_function.12, func=$150load_deref.0, args=[Var($162call_function.6, quicksort.py:106), Var($174call_function.12, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool178 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $178pred = call bool178($176call_function.13, func=bool178, args=(Var($176call_function.13, quicksort.py:106),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $178pred, 180, 206
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 180
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAABF48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $184binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $190binary_subscr.5 = getitem(value=R, index=low, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[low] = $184binary_subscr.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[mid] = $190binary_subscr.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 206
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 206
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAABF48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $206load_deref.0 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $214binary_subscr.4 = getitem(value=R, index=mid, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: pivot = call $206load_deref.0(A, $214binary_subscr.4, func=$206load_deref.0, args=[Var(A, quicksort.py:92), Var($214binary_subscr.4, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $224binary_subscr.8 = getitem(value=R, index=mid, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $230binary_subscr.11 = getitem(value=R, index=high, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[high] = $224binary_subscr.8
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[mid] = $230binary_subscr.11
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: i = low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG first assign: i
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: i = low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const252.18 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: j = high - $const252.18
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 258
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 258
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAABF48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 260
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 260
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAABF48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: j.4 = phi(incoming_values=[Var(j.2, quicksort.py:123), Var(j, quicksort.py:113)], incoming_blocks=[368, 258])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAABF48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $266compare_op.2 = i < high
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool268 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $268pred = call bool268($266compare_op.2, func=bool268, args=(Var($266compare_op.2, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $268pred, 272, 306
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 272
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAABF48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $272load_deref.0 = freevar(LT: <function lt_floats at 0x0000015A7094C288>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $274load_deref.1 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $282binary_subscr.5 = getitem(value=R, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $284call_function.6 = call $274load_deref.1(A, $282binary_subscr.5, func=$274load_deref.1, args=[Var(A, quicksort.py:92), Var($282binary_subscr.5, quicksort.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $288call_function.8 = call $272load_deref.0($284call_function.6, pivot, func=$272load_deref.0, args=[Var($284call_function.6, quicksort.py:115), Var(pivot, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool290 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $290pred = call bool290($288call_function.8, func=bool290, args=(Var($288call_function.8, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $290pred, 294, 306
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 294
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAABF48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const296.1 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $298inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const296.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: i = $298inplace_add.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: i.1 = $298inplace_add.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 306
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAABF48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 308
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 308
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAABF48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAABF48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: j.3 = phi(incoming_values=[Var(j.4, quicksort.py:117), Var(j.1, quicksort.py:118)], incoming_blocks=[308, 342])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $314compare_op.2 = j.3 >= low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool316 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $316pred = call bool316($314compare_op.2, func=bool316, args=(Var($314compare_op.2, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $316pred, 320, 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 320
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAABF48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $320load_deref.0 = freevar(LT: <function lt_floats at 0x0000015A7094C288>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $324load_deref.2 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $332binary_subscr.6 = getitem(value=R, index=j.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $334call_function.7 = call $324load_deref.2(A, $332binary_subscr.6, func=$324load_deref.2, args=[Var(A, quicksort.py:92), Var($332binary_subscr.6, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $336call_function.8 = call $320load_deref.0(pivot, $334call_function.7, func=$320load_deref.0, args=[Var(pivot, quicksort.py:108), Var($334call_function.7, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool338 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $338pred = call bool338($336call_function.8, func=bool338, args=(Var($336call_function.8, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $338pred, 342, 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 342
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAABF48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const344.1 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $346inplace_subtract.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j.3, rhs=$const344.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: j.1 = $346inplace_subtract.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAABF48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 356
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 356
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAABF48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $360compare_op.2 = i >= j.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool362 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $362pred = call bool362($360compare_op.2, func=bool362, args=(Var($360compare_op.2, quicksort.py:119),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $362pred, 366, 368
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 366
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAABF48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 416
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 368
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAABF48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $372binary_subscr.2 = getitem(value=R, index=j.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $378binary_subscr.5 = getitem(value=R, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[i] = $372binary_subscr.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[j.3] = $378binary_subscr.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const396.11 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $398inplace_add.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const396.11, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: i = $398inplace_add.12
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: i.2 = $398inplace_add.12
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const404.14 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $406inplace_subtract.15 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j.3, rhs=$const404.14, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: j.2 = $406inplace_subtract.15
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 260
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 416
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FAABF48>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $420binary_subscr.2 = getitem(value=R, index=high, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $426binary_subscr.5 = getitem(value=R, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[i] = $420binary_subscr.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[high] = $426binary_subscr.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $444return_value.11 = cast(value=i)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $444return_value.11
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {206: [<numba.core.ir.Assign object at 0x0000015A3FAEDD08>],
             294: [<numba.core.ir.Assign object at 0x0000015A3FAEDCC8>],
             368: [<numba.core.ir.Assign object at 0x0000015A420F87C8>]})
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: A = arg(0, name=A)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R = arg(1, name=R)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: low = arg(2, name=low)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: high = arg(3, name=high)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const4.1 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $6compare_op.2 = low >= $const4.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, quicksort.py:92),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $8pred, 14, 10
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 10
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $10load_global.0 = global(AssertionError: <class 'AssertionError'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: <static> raise <class 'AssertionError'>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 14
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $18compare_op.2 = high > low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool20 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $20pred = call bool20($18compare_op.2, func=bool20, args=(Var($18compare_op.2, quicksort.py:93),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $20pred, 26, 22
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 22
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $22load_global.0 = global(AssertionError: <class 'AssertionError'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: <static> raise <class 'AssertionError'>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 26
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $30binary_add.2 = low + high
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const32.3 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: mid = $30binary_add.2 >> $const32.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $38load_deref.5 = freevar(LT: <function lt_floats at 0x0000015A7094C288>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $40load_deref.6 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $48binary_subscr.10 = getitem(value=R, index=mid, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $50call_function.11 = call $40load_deref.6(A, $48binary_subscr.10, func=$40load_deref.6, args=[Var(A, quicksort.py:92), Var($48binary_subscr.10, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $52load_deref.12 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $60binary_subscr.16 = getitem(value=R, index=low, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $62call_function.17 = call $52load_deref.12(A, $60binary_subscr.16, func=$52load_deref.12, args=[Var(A, quicksort.py:92), Var($60binary_subscr.16, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $64call_function.18 = call $38load_deref.5($50call_function.11, $62call_function.17, func=$38load_deref.5, args=[Var($50call_function.11, quicksort.py:102), Var($62call_function.17, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool66 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $66pred = call bool66($64call_function.18, func=bool66, args=(Var($64call_function.18, quicksort.py:102),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $66pred, 68, 94
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 68
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $72binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $78binary_subscr.5 = getitem(value=R, index=low, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[low] = $72binary_subscr.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[mid] = $78binary_subscr.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 94
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 94
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $94load_deref.0 = freevar(LT: <function lt_floats at 0x0000015A7094C288>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $96load_deref.1 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $104binary_subscr.5 = getitem(value=R, index=high, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $106call_function.6 = call $96load_deref.1(A, $104binary_subscr.5, func=$96load_deref.1, args=[Var(A, quicksort.py:92), Var($104binary_subscr.5, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $108load_deref.7 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $116binary_subscr.11 = getitem(value=R, index=mid, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $118call_function.12 = call $108load_deref.7(A, $116binary_subscr.11, func=$108load_deref.7, args=[Var(A, quicksort.py:92), Var($116binary_subscr.11, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $120call_function.13 = call $94load_deref.0($106call_function.6, $118call_function.12, func=$94load_deref.0, args=[Var($106call_function.6, quicksort.py:104), Var($118call_function.12, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool122 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $122pred = call bool122($120call_function.13, func=bool122, args=(Var($120call_function.13, quicksort.py:104),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $122pred, 124, 150
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 124
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $128binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $134binary_subscr.5 = getitem(value=R, index=high, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[high] = $128binary_subscr.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[mid] = $134binary_subscr.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 150
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 150
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $150load_deref.0 = freevar(LT: <function lt_floats at 0x0000015A7094C288>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $152load_deref.1 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $160binary_subscr.5 = getitem(value=R, index=mid, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $162call_function.6 = call $152load_deref.1(A, $160binary_subscr.5, func=$152load_deref.1, args=[Var(A, quicksort.py:92), Var($160binary_subscr.5, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $164load_deref.7 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $172binary_subscr.11 = getitem(value=R, index=low, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $174call_function.12 = call $164load_deref.7(A, $172binary_subscr.11, func=$164load_deref.7, args=[Var(A, quicksort.py:92), Var($172binary_subscr.11, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $176call_function.13 = call $150load_deref.0($162call_function.6, $174call_function.12, func=$150load_deref.0, args=[Var($162call_function.6, quicksort.py:106), Var($174call_function.12, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool178 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $178pred = call bool178($176call_function.13, func=bool178, args=(Var($176call_function.13, quicksort.py:106),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $178pred, 180, 206
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 180
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $184binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $190binary_subscr.5 = getitem(value=R, index=low, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[low] = $184binary_subscr.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[mid] = $190binary_subscr.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 206
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 206
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $206load_deref.0 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $214binary_subscr.4 = getitem(value=R, index=mid, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: pivot = call $206load_deref.0(A, $214binary_subscr.4, func=$206load_deref.0, args=[Var(A, quicksort.py:92), Var($214binary_subscr.4, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $224binary_subscr.8 = getitem(value=R, index=mid, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $230binary_subscr.11 = getitem(value=R, index=high, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[high] = $224binary_subscr.8
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[mid] = $230binary_subscr.11
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: i = low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const252.18 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: j = high - $const252.18
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 258
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 258
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 260
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 260
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: j.4 = phi(incoming_values=[Var(j.2, quicksort.py:123), Var(j, quicksort.py:113)], incoming_blocks=[368, 258])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $266compare_op.2 = i < high
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='i' stmt=$266compare_op.2 = i < high
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG insert phi node i.3 = phi(incoming_values=[], incoming_blocks=[]) at 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 260
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 260
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG insert phi node i.4 = phi(incoming_values=[], incoming_blocks=[]) at 260
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 368
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG incoming_def i.2 = $398inplace_add.12
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 258
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 258
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 206 from label 258
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 206
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG incoming_def i = low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG incoming_def i.4 = phi(incoming_values=[Var(i.2, quicksort.py:122), Var(i, quicksort.py:112)], incoming_blocks=[368, 258])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 294
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG incoming_def i.1 = $298inplace_add.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: $266compare_op.2 = i.3 < high
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool268 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $268pred = call bool268($266compare_op.2, func=bool268, args=(Var($266compare_op.2, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $268pred, 272, 306
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 272
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $272load_deref.0 = freevar(LT: <function lt_floats at 0x0000015A7094C288>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $274load_deref.1 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $282binary_subscr.5 = getitem(value=R, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='i' stmt=$282binary_subscr.5 = getitem(value=R, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 272
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 262 from label 272
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: $282binary_subscr.5 = getitem(value=R, index=i.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $284call_function.6 = call $274load_deref.1(A, $282binary_subscr.5, func=$274load_deref.1, args=[Var(A, quicksort.py:92), Var($282binary_subscr.5, quicksort.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $288call_function.8 = call $272load_deref.0($284call_function.6, pivot, func=$272load_deref.0, args=[Var($284call_function.6, quicksort.py:115), Var(pivot, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool290 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $290pred = call bool290($288call_function.8, func=bool290, args=(Var($288call_function.8, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $290pred, 294, 306
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 294
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const296.1 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $298inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const296.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='i' stmt=$298inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const296.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 294
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 272 from label 294
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 272
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 272
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 262 from label 272
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: $298inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i.3, rhs=$const296.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: i.1 = $298inplace_add.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 306
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 308
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 308
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: j.3 = phi(incoming_values=[Var(j.4, quicksort.py:117), Var(j.1, quicksort.py:118)], incoming_blocks=[308, 342])
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $314compare_op.2 = j.3 >= low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool316 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $316pred = call bool316($314compare_op.2, func=bool316, args=(Var($314compare_op.2, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $316pred, 320, 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 320
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $320load_deref.0 = freevar(LT: <function lt_floats at 0x0000015A7094C288>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $324load_deref.2 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $332binary_subscr.6 = getitem(value=R, index=j.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $334call_function.7 = call $324load_deref.2(A, $332binary_subscr.6, func=$324load_deref.2, args=[Var(A, quicksort.py:92), Var($332binary_subscr.6, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $336call_function.8 = call $320load_deref.0(pivot, $334call_function.7, func=$320load_deref.0, args=[Var(pivot, quicksort.py:108), Var($334call_function.7, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool338 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $338pred = call bool338($336call_function.8, func=bool338, args=(Var($336call_function.8, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $338pred, 342, 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 342
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const344.1 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $346inplace_subtract.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j.3, rhs=$const344.1, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: j.1 = $346inplace_subtract.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 356
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 356
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $360compare_op.2 = i >= j.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='i' stmt=$360compare_op.2 = i >= j.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 356
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 354 from label 356
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 310 from label 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 308 from label 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 308
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 308
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 306 from label 308
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 306
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 306
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 262 from label 306
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: $360compare_op.2 = i.3 >= j.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool362 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $362pred = call bool362($360compare_op.2, func=bool362, args=(Var($360compare_op.2, quicksort.py:119),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $362pred, 366, 368
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 366
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 416
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 368
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $372binary_subscr.2 = getitem(value=R, index=j.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $378binary_subscr.5 = getitem(value=R, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='i' stmt=$378binary_subscr.5 = getitem(value=R, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 368
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 356 from label 368
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 356
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 356
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 354 from label 356
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 310 from label 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 308 from label 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 308
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 308
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 306 from label 308
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 306
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 306
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 262 from label 306
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: $378binary_subscr.5 = getitem(value=R, index=i.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[i] = $372binary_subscr.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='i' stmt=R[i] = $372binary_subscr.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 368
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 356 from label 368
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 356
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 356
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 354 from label 356
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 310 from label 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 308 from label 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 308
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 308
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 306 from label 308
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 306
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 306
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 262 from label 306
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: R[i.3] = $372binary_subscr.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[j.3] = $378binary_subscr.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const396.11 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $398inplace_add.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const396.11, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='i' stmt=$398inplace_add.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const396.11, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 368
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 356 from label 368
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 356
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 356
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 354 from label 356
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 310 from label 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 308 from label 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 308
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 308
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 306 from label 308
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 306
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 306
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 262 from label 306
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: $398inplace_add.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i.3, rhs=$const396.11, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: i.2 = $398inplace_add.12
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const404.14 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $406inplace_subtract.15 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j.3, rhs=$const404.14, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: j.2 = $406inplace_subtract.15
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 260
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 416
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FAED688>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $420binary_subscr.2 = getitem(value=R, index=high, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $426binary_subscr.5 = getitem(value=R, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='i' stmt=$426binary_subscr.5 = getitem(value=R, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 416
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 366 from label 416
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 366
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 366
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 356 from label 366
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 356
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 356
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 354 from label 356
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 310 from label 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 308 from label 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 308
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 308
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 306 from label 308
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 306
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 306
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 262 from label 306
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: $426binary_subscr.5 = getitem(value=R, index=i.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[i] = $420binary_subscr.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='i' stmt=R[i] = $420binary_subscr.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 416
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 366 from label 416
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 366
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 366
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 356 from label 366
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 356
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 356
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 354 from label 356
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 310 from label 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 308 from label 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 308
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 308
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 306 from label 308
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 306
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 306
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 262 from label 306
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: R[i.3] = $420binary_subscr.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[high] = $426binary_subscr.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $444return_value.11 = cast(value=i)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='i' stmt=$444return_value.11 = cast(value=i)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 416
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 366 from label 416
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 366
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 366
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 356 from label 366
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 356
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 356
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 354 from label 356
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 310 from label 354
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 308 from label 310
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 308
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 308
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 306 from label 308
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 306
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 306
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 262 from label 306
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 262
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: $444return_value.11 = cast(value=i.3)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $444return_value.11
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=47)
           2	LOAD_FAST(arg=0, lineno=47)
           4	LOAD_FAST(arg=1, lineno=47)
           6	BINARY_SUBSCR(arg=None, lineno=47)
           8	RETURN_VALUE(arg=None, lineno=47)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=47)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=47)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=47)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$A2.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=47)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$A2.0', '$idx_or_val4.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=47)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$6binary_subscr.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG -------------------------Prune PHIs-------------------------
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG defmap: {}
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG keep phismap: {}
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG new_out: defaultdict(<class 'dict'>, {})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG ----------------------DONE Prune PHIs-----------------------
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$A2.0'}), (4, {'res': '$idx_or_val4.1'}), (6, {'index': '$idx_or_val4.1', 'target': '$A2.0', 'res': '$6binary_subscr.2'}), (8, {'retval': '$6binary_subscr.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:41 interpreter.py DEBUG label 0:
    A = arg(0, name=A)                       ['A']
    idx_or_val = arg(1, name=idx_or_val)     ['idx_or_val']
    $6binary_subscr.2 = getitem(value=A, index=idx_or_val, fn=<built-in function getitem>) ['$6binary_subscr.2', 'A', 'idx_or_val']
    $8return_value.3 = cast(value=$6binary_subscr.2) ['$6binary_subscr.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A3FAF8AC8>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: A = arg(0, name=A)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: idx_or_val = arg(1, name=idx_or_val)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $6binary_subscr.2 = getitem(value=A, index=idx_or_val, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $8return_value.3 = cast(value=$6binary_subscr.2)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $8return_value.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG defs defaultdict(<class 'list'>,
            {'$6binary_subscr.2': [<numba.core.ir.Assign object at 0x0000015A3FAED8C8>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x0000015A3FAEDC88>],
             'A': [<numba.core.ir.Assign object at 0x0000015A420F8488>],
             'idx_or_val': [<numba.core.ir.Assign object at 0x0000015A420F8508>]})
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG SSA violators set()
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=5739)
           2	LOAD_GLOBAL(arg=0, lineno=5739)
           4	LOAD_METHOD(arg=1, lineno=5739)
           6	LOAD_FAST(arg=1, lineno=5739)
           8	CALL_METHOD(arg=1, lineno=5739)
          10	JUMP_IF_TRUE_OR_POP(arg=18, lineno=5739)
          12	LOAD_FAST(arg=0, lineno=5739)
          14	LOAD_FAST(arg=1, lineno=5739)
          16	COMPARE_OP(arg=0, lineno=5739)
>         18	RETURN_VALUE(arg=None, lineno=5739)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=5739)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=5739)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=5739)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$2load_global.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=5739)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$4load_method.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=5739)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$4load_method.1', '$b6.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=10, inst=JUMP_IF_TRUE_OR_POP(arg=18, lineno=5739)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$8call_method.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=12, stack=(), blockstack=(), npush=0), Edge(pc=18, stack=('$8call_method.3',), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=12 nstack_initial=0), State(pc_initial=18 nstack_initial=1)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=5739)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=5739)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$a12.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=16, inst=COMPARE_OP(arg=0, lineno=5739)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$a12.0', '$b14.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=18, stack=('$16compare_op.2',), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=18 nstack_initial=1), State(pc_initial=18 nstack_initial=1)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: ['$phi18.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=18, inst=RETURN_VALUE(arg=None, lineno=5739)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi18.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=18 nstack_initial=1)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG -------------------------Prune PHIs-------------------------
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=12 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=1): {'$phi18.0'}})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG defmap: {'$phi18.0': State(pc_initial=12 nstack_initial=0)}
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16compare_op.2',
                           State(pc_initial=12 nstack_initial=0)),
                          ('$8call_method.3',
                           State(pc_initial=0 nstack_initial=0))}})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16compare_op.2',
                           State(pc_initial=12 nstack_initial=0)),
                          ('$8call_method.3',
                           State(pc_initial=0 nstack_initial=0))}})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG keep phismap: {'$phi18.0': {('$16compare_op.2', State(pc_initial=12 nstack_initial=0)),
              ('$8call_method.3', State(pc_initial=0 nstack_initial=0))}}
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi18.0': '$8call_method.3'},
             State(pc_initial=12 nstack_initial=0): {'$phi18.0': '$16compare_op.2'}})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG ----------------------DONE Prune PHIs-----------------------
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$b6.2'}), (8, {'func': '$4load_method.1', 'args': ['$b6.2'], 'res': '$8call_method.3'}), (10, {'pred': '$8call_method.3'})), outgoing_phis={'$phi18.0': '$8call_method.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: (), 18: ('$8call_method.3',)})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=12 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$a12.0'}), (14, {'res': '$b14.1'}), (16, {'lhs': '$a12.0', 'rhs': '$b14.1', 'res': '$16compare_op.2'})), outgoing_phis={'$phi18.0': '$16compare_op.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: ('$16compare_op.2',)})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=18 nstack_initial=1):
AdaptBlockInfo(insts=((18, {'retval': '$phi18.0', 'castval': '$18return_value.1'}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:41 interpreter.py DEBUG label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $2load_global.0 = global(math: <module 'math' (built-in)>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=isnan) ['$2load_global.0', '$4load_method.1']
    $8call_method.3 = call $4load_method.1(b, func=$4load_method.1, args=[Var(b, arrayobj.py:5739)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_method.1', '$8call_method.3', 'b']
    bool10 = global(bool: <class 'bool'>)    ['bool10']
    $10pred = call bool10($8call_method.3, func=bool10, args=(Var($8call_method.3, arrayobj.py:5739),), kws=(), vararg=None, varkwarg=None, target=None) ['$10pred', '$8call_method.3', 'bool10']
    $phi18.0 = $8call_method.3               ['$8call_method.3', '$phi18.0']
    branch $10pred, 18, 12                   ['$10pred']
label 12:
    $16compare_op.2 = a < b                  ['$16compare_op.2', 'a', 'b']
    $phi18.0 = $16compare_op.2               ['$16compare_op.2', '$phi18.0']
    jump 18                                  []
label 18:
    $18return_value.1 = cast(value=$phi18.0) ['$18return_value.1', '$phi18.0']
    return $18return_value.1                 ['$18return_value.1']

Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A3FA99308>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: a = arg(0, name=a)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: b = arg(1, name=b)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $2load_global.0 = global(math: <module 'math' (built-in)>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=isnan)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $8call_method.3 = call $4load_method.1(b, func=$4load_method.1, args=[Var(b, arrayobj.py:5739)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool10 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $10pred = call bool10($8call_method.3, func=bool10, args=(Var($8call_method.3, arrayobj.py:5739),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi18.0 = $8call_method.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $10pred, 18, 12
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 12
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A3FA99308>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $16compare_op.2 = a < b
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi18.0 = $16compare_op.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 18
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 18
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A3FA99308>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $18return_value.1 = cast(value=$phi18.0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $18return_value.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG defs defaultdict(<class 'list'>,
            {'$10pred': [<numba.core.ir.Assign object at 0x0000015A39CFE248>],
             '$16compare_op.2': [<numba.core.ir.Assign object at 0x0000015A39CFE748>],
             '$18return_value.1': [<numba.core.ir.Assign object at 0x0000015A39CFE908>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000015A4210FB08>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x0000015A4210FC48>],
             '$8call_method.3': [<numba.core.ir.Assign object at 0x0000015A4210FF48>],
             '$phi18.0': [<numba.core.ir.Assign object at 0x0000015A4210FDC8>,
                          <numba.core.ir.Assign object at 0x0000015A4210F6C8>],
             'a': [<numba.core.ir.Assign object at 0x0000015A4210F788>],
             'b': [<numba.core.ir.Assign object at 0x0000015A4210F9C8>],
             'bool10': [<numba.core.ir.Assign object at 0x0000015A39CFE108>]})
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG SSA violators {'$phi18.0'}
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Fix SSA violator on var $phi18.0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FA99308>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: a = arg(0, name=a)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: b = arg(1, name=b)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $2load_global.0 = global(math: <module 'math' (built-in)>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=isnan)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $8call_method.3 = call $4load_method.1(b, func=$4load_method.1, args=[Var(b, arrayobj.py:5739)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool10 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $10pred = call bool10($8call_method.3, func=bool10, args=(Var($8call_method.3, arrayobj.py:5739),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi18.0 = $8call_method.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG first assign: $phi18.0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: $phi18.0 = $8call_method.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $10pred, 18, 12
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 12
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FA99308>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $16compare_op.2 = a < b
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi18.0 = $16compare_op.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: $phi18.0.1 = $16compare_op.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 18
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 18
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A3FA99308>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $18return_value.1 = cast(value=$phi18.0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $18return_value.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000015A3FA99708>],
             12: [<numba.core.ir.Assign object at 0x0000015A3FA99488>]})
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FA99308>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: a = arg(0, name=a)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: b = arg(1, name=b)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $2load_global.0 = global(math: <module 'math' (built-in)>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=isnan)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $8call_method.3 = call $4load_method.1(b, func=$4load_method.1, args=[Var(b, arrayobj.py:5739)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool10 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $10pred = call bool10($8call_method.3, func=bool10, args=(Var($8call_method.3, arrayobj.py:5739),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi18.0 = $8call_method.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $10pred, 18, 12
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 12
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FA99308>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $16compare_op.2 = a < b
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi18.0.1 = $16compare_op.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 18
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 18
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A3FA99308>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $18return_value.1 = cast(value=$phi18.0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='$phi18.0' stmt=$18return_value.1 = cast(value=$phi18.0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 18
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG insert phi node $phi18.0.2 = phi(incoming_values=[], incoming_blocks=[]) at 18
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG incoming_def $phi18.0 = $8call_method.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 12
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG incoming_def $phi18.0.1 = $16compare_op.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: $18return_value.1 = cast(value=$phi18.0.2)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $18return_value.1
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=71)
           2	LOAD_FAST(arg=2, lineno=71)
           4	LOAD_CONST(arg=1, lineno=71)
           6	COMPARE_OP(arg=5, lineno=71)
           8	POP_JUMP_IF_TRUE(arg=14, lineno=71)
          10	LOAD_GLOBAL(arg=0, lineno=71)
          12	RAISE_VARARGS(arg=1, lineno=71)
>         14	LOAD_FAST(arg=3, lineno=72)
          16	LOAD_FAST(arg=2, lineno=72)
          18	COMPARE_OP(arg=1, lineno=72)
          20	POP_JUMP_IF_FALSE(arg=26, lineno=72)
          22	LOAD_CONST(arg=2, lineno=73)
          24	RETURN_VALUE(arg=None, lineno=73)
>         26	SETUP_LOOP(arg=118, lineno=75)
          28	LOAD_GLOBAL(arg=1, lineno=75)
          30	LOAD_FAST(arg=2, lineno=75)
          32	LOAD_CONST(arg=3, lineno=75)
          34	BINARY_ADD(arg=None, lineno=75)
          36	LOAD_FAST(arg=3, lineno=75)
          38	LOAD_CONST(arg=3, lineno=75)
          40	BINARY_ADD(arg=None, lineno=75)
          42	CALL_FUNCTION(arg=2, lineno=75)
          44	GET_ITER(arg=None, lineno=75)
>         46	FOR_ITER(arg=96, lineno=75)
          48	STORE_FAST(arg=4, lineno=75)
          50	LOAD_FAST(arg=1, lineno=76)
          52	LOAD_FAST(arg=4, lineno=76)
          54	BINARY_SUBSCR(arg=None, lineno=76)
          56	STORE_FAST(arg=5, lineno=76)
          58	LOAD_DEREF(arg=0, lineno=77)
          60	LOAD_FAST(arg=0, lineno=77)
          62	LOAD_FAST(arg=5, lineno=77)
          64	CALL_FUNCTION(arg=2, lineno=77)
          66	STORE_FAST(arg=6, lineno=77)
          68	LOAD_FAST(arg=4, lineno=79)
          70	STORE_FAST(arg=7, lineno=79)
          72	SETUP_LOOP(arg=60, lineno=80)
>         74	LOAD_FAST(arg=7, lineno=80)
          76	LOAD_FAST(arg=2, lineno=80)
          78	COMPARE_OP(arg=4, lineno=80)
          80	POP_JUMP_IF_FALSE(arg=132, lineno=80)
          82	LOAD_DEREF(arg=1, lineno=80)
          84	LOAD_FAST(arg=6, lineno=80)
          86	LOAD_DEREF(arg=0, lineno=80)
          88	LOAD_FAST(arg=0, lineno=80)
          90	LOAD_FAST(arg=1, lineno=80)
          92	LOAD_FAST(arg=7, lineno=80)
          94	LOAD_CONST(arg=3, lineno=80)
          96	BINARY_SUBTRACT(arg=None, lineno=80)
          98	BINARY_SUBSCR(arg=None, lineno=80)
         100	CALL_FUNCTION(arg=2, lineno=80)
         102	CALL_FUNCTION(arg=2, lineno=80)
         104	POP_JUMP_IF_FALSE(arg=132, lineno=80)
         106	LOAD_FAST(arg=1, lineno=82)
         108	LOAD_FAST(arg=7, lineno=82)
         110	LOAD_CONST(arg=3, lineno=82)
         112	BINARY_SUBTRACT(arg=None, lineno=82)
         114	BINARY_SUBSCR(arg=None, lineno=82)
         116	LOAD_FAST(arg=1, lineno=82)
         118	LOAD_FAST(arg=7, lineno=82)
         120	STORE_SUBSCR(arg=None, lineno=82)
         122	LOAD_FAST(arg=7, lineno=83)
         124	LOAD_CONST(arg=3, lineno=83)
         126	INPLACE_SUBTRACT(arg=None, lineno=83)
         128	STORE_FAST(arg=7, lineno=83)
         130	JUMP_ABSOLUTE(arg=74, lineno=83)
>        132	POP_BLOCK(arg=None, lineno=83)
>        134	LOAD_FAST(arg=5, lineno=84)
         136	LOAD_FAST(arg=1, lineno=84)
         138	LOAD_FAST(arg=7, lineno=84)
         140	STORE_SUBSCR(arg=None, lineno=84)
         142	JUMP_ABSOLUTE(arg=46, lineno=84)
>        144	POP_BLOCK(arg=None, lineno=84)
>        146	LOAD_CONST(arg=2, lineno=84)
         148	RETURN_VALUE(arg=None, lineno=84)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=71)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=71)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=71)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$low2.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=6, inst=COMPARE_OP(arg=5, lineno=71)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$low2.0', '$const4.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=8, inst=POP_JUMP_IF_TRUE(arg=14, lineno=71)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$6compare_op.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=10, inst=LOAD_GLOBAL(arg=0, lineno=71)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=12, inst=RAISE_VARARGS(arg=1, lineno=71)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$10load_global.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=14 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=14, inst=LOAD_FAST(arg=3, lineno=72)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=16, inst=LOAD_FAST(arg=2, lineno=72)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$high14.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=18, inst=COMPARE_OP(arg=1, lineno=72)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$high14.0', '$low16.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=20, inst=POP_JUMP_IF_FALSE(arg=26, lineno=72)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$18compare_op.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=22, stack=(), blockstack=(), npush=0), Edge(pc=26, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=22 nstack_initial=0), State(pc_initial=26 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=22, inst=LOAD_CONST(arg=2, lineno=73)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=24, inst=RETURN_VALUE(arg=None, lineno=73)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$const22.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=26 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=26, inst=SETUP_LOOP(arg=118, lineno=75)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=28, inst=LOAD_GLOBAL(arg=1, lineno=75)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=30, inst=LOAD_FAST(arg=2, lineno=75)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$28load_global.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=32, inst=LOAD_CONST(arg=3, lineno=75)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$28load_global.0', '$low30.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=34, inst=BINARY_ADD(arg=None, lineno=75)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$28load_global.0', '$low30.1', '$const32.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=36, inst=LOAD_FAST(arg=3, lineno=75)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$28load_global.0', '$34binary_add.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=38, inst=LOAD_CONST(arg=3, lineno=75)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$28load_global.0', '$34binary_add.3', '$high36.4']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=40, inst=BINARY_ADD(arg=None, lineno=75)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$28load_global.0', '$34binary_add.3', '$high36.4', '$const38.5']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=42, inst=CALL_FUNCTION(arg=2, lineno=75)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$28load_global.0', '$34binary_add.3', '$40binary_add.6']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=44, inst=GET_ITER(arg=None, lineno=75)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$42call_function.7']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=46, stack=('$44get_iter.8',), blockstack=({'kind': BlockKind(LOOP), 'end': 146, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=46 nstack_initial=1)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: ['$phi46.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=46, inst=FOR_ITER(arg=96, lineno=75)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi46.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=144, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 146, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=48, stack=('$phi46.0', '$46for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 146, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=144 nstack_initial=0), State(pc_initial=48 nstack_initial=2)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=144, inst=POP_BLOCK(arg=None, lineno=84)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=146, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=48 nstack_initial=2), State(pc_initial=146 nstack_initial=0)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: ['$phi48.0', '$phi48.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=48, inst=STORE_FAST(arg=4, lineno=75)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi48.0', '$phi48.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=50, inst=LOAD_FAST(arg=1, lineno=76)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi48.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=52, inst=LOAD_FAST(arg=4, lineno=76)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi48.0', '$R50.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=54, inst=BINARY_SUBSCR(arg=None, lineno=76)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi48.0', '$R50.2', '$i52.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=56, inst=STORE_FAST(arg=5, lineno=76)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi48.0', '$54binary_subscr.4']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=58, inst=LOAD_DEREF(arg=0, lineno=77)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi48.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=60, inst=LOAD_FAST(arg=0, lineno=77)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi48.0', '$58load_deref.5']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=62, inst=LOAD_FAST(arg=5, lineno=77)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi48.0', '$58load_deref.5', '$A60.6']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=64, inst=CALL_FUNCTION(arg=2, lineno=77)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi48.0', '$58load_deref.5', '$A60.6', '$k62.7']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=66, inst=STORE_FAST(arg=6, lineno=77)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi48.0', '$64call_function.8']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=68, inst=LOAD_FAST(arg=4, lineno=79)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi48.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=70, inst=STORE_FAST(arg=7, lineno=79)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi48.0', '$i68.9']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=72, stack=('$phi48.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 146, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=146 nstack_initial=0), State(pc_initial=72 nstack_initial=1)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=146, inst=LOAD_CONST(arg=2, lineno=84)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=148, inst=RETURN_VALUE(arg=None, lineno=84)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$const146.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=72 nstack_initial=1)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: ['$phi72.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=72, inst=SETUP_LOOP(arg=60, lineno=80)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi72.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=74, stack=('$phi72.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 146, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 134, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=74 nstack_initial=1)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: ['$phi74.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=74, inst=LOAD_FAST(arg=7, lineno=80)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi74.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=76, inst=LOAD_FAST(arg=2, lineno=80)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi74.0', '$j74.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=78, inst=COMPARE_OP(arg=4, lineno=80)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi74.0', '$j74.1', '$low76.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=80, inst=POP_JUMP_IF_FALSE(arg=132, lineno=80)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi74.0', '$78compare_op.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=82, stack=('$phi74.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 146, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 134, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0), Edge(pc=132, stack=('$phi74.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 146, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 134, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=82 nstack_initial=1), State(pc_initial=132 nstack_initial=1)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: ['$phi82.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=82, inst=LOAD_DEREF(arg=1, lineno=80)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi82.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=84, inst=LOAD_FAST(arg=6, lineno=80)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi82.0', '$82load_deref.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=86, inst=LOAD_DEREF(arg=0, lineno=80)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi82.0', '$82load_deref.1', '$v84.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=88, inst=LOAD_FAST(arg=0, lineno=80)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi82.0', '$82load_deref.1', '$v84.2', '$86load_deref.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=90, inst=LOAD_FAST(arg=1, lineno=80)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi82.0', '$82load_deref.1', '$v84.2', '$86load_deref.3', '$A88.4']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=92, inst=LOAD_FAST(arg=7, lineno=80)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi82.0', '$82load_deref.1', '$v84.2', '$86load_deref.3', '$A88.4', '$R90.5']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=94, inst=LOAD_CONST(arg=3, lineno=80)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi82.0', '$82load_deref.1', '$v84.2', '$86load_deref.3', '$A88.4', '$R90.5', '$j92.6']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=96, inst=BINARY_SUBTRACT(arg=None, lineno=80)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi82.0', '$82load_deref.1', '$v84.2', '$86load_deref.3', '$A88.4', '$R90.5', '$j92.6', '$const94.7']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=98, inst=BINARY_SUBSCR(arg=None, lineno=80)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi82.0', '$82load_deref.1', '$v84.2', '$86load_deref.3', '$A88.4', '$R90.5', '$96binary_subtract.8']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=100, inst=CALL_FUNCTION(arg=2, lineno=80)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi82.0', '$82load_deref.1', '$v84.2', '$86load_deref.3', '$A88.4', '$98binary_subscr.9']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=102, inst=CALL_FUNCTION(arg=2, lineno=80)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi82.0', '$82load_deref.1', '$v84.2', '$100call_function.10']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=104, inst=POP_JUMP_IF_FALSE(arg=132, lineno=80)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi82.0', '$102call_function.11']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=106, stack=('$phi82.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 146, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 134, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0), Edge(pc=132, stack=('$phi82.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 146, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 134, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=132 nstack_initial=1), State(pc_initial=106 nstack_initial=1), State(pc_initial=132 nstack_initial=1)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: ['$phi132.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=132, inst=POP_BLOCK(arg=None, lineno=83)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi132.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=134, stack=('$phi132.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 146, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=106 nstack_initial=1), State(pc_initial=132 nstack_initial=1), State(pc_initial=134 nstack_initial=1)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: ['$phi106.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=106, inst=LOAD_FAST(arg=1, lineno=82)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi106.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=108, inst=LOAD_FAST(arg=7, lineno=82)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi106.0', '$R106.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=110, inst=LOAD_CONST(arg=3, lineno=82)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi106.0', '$R106.1', '$j108.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=112, inst=BINARY_SUBTRACT(arg=None, lineno=82)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi106.0', '$R106.1', '$j108.2', '$const110.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=114, inst=BINARY_SUBSCR(arg=None, lineno=82)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi106.0', '$R106.1', '$112binary_subtract.4']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=116, inst=LOAD_FAST(arg=1, lineno=82)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi106.0', '$114binary_subscr.5']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=118, inst=LOAD_FAST(arg=7, lineno=82)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi106.0', '$114binary_subscr.5', '$R116.6']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=120, inst=STORE_SUBSCR(arg=None, lineno=82)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi106.0', '$114binary_subscr.5', '$R116.6', '$j118.7']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=122, inst=LOAD_FAST(arg=7, lineno=83)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi106.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=124, inst=LOAD_CONST(arg=3, lineno=83)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi106.0', '$j122.8']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=126, inst=INPLACE_SUBTRACT(arg=None, lineno=83)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi106.0', '$j122.8', '$const124.9']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=128, inst=STORE_FAST(arg=7, lineno=83)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi106.0', '$126inplace_subtract.10']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=130, inst=JUMP_ABSOLUTE(arg=74, lineno=83)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi106.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=74, stack=('$phi106.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 146, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 134, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=132 nstack_initial=1), State(pc_initial=134 nstack_initial=1), State(pc_initial=74 nstack_initial=1)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=134 nstack_initial=1), State(pc_initial=74 nstack_initial=1)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack: ['$phi134.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=134, inst=LOAD_FAST(arg=5, lineno=84)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi134.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=136, inst=LOAD_FAST(arg=1, lineno=84)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi134.0', '$k134.1']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=138, inst=LOAD_FAST(arg=7, lineno=84)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi134.0', '$k134.1', '$R136.2']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=140, inst=STORE_SUBSCR(arg=None, lineno=84)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi134.0', '$k134.1', '$R136.2', '$j138.3']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG dispatch pc=142, inst=JUMP_ABSOLUTE(arg=46, lineno=84)
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG stack ['$phi134.0']
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG end state. edges=[Edge(pc=46, stack=('$phi134.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 146, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=74 nstack_initial=1), State(pc_initial=46 nstack_initial=1)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG pending: deque([State(pc_initial=46 nstack_initial=1)])
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG -------------------------Prune PHIs-------------------------
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=22 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=46 nstack_initial=1): {'$phi46.0'},
             State(pc_initial=48 nstack_initial=2): {'$phi48.1'},
             State(pc_initial=72 nstack_initial=1): set(),
             State(pc_initial=74 nstack_initial=1): set(),
             State(pc_initial=82 nstack_initial=1): set(),
             State(pc_initial=106 nstack_initial=1): set(),
             State(pc_initial=132 nstack_initial=1): set(),
             State(pc_initial=134 nstack_initial=1): set(),
             State(pc_initial=144 nstack_initial=0): set(),
             State(pc_initial=146 nstack_initial=0): set()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG defmap: {'$phi46.0': State(pc_initial=26 nstack_initial=0),
 '$phi48.1': State(pc_initial=46 nstack_initial=1)}
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi106.0': {('$phi82.0', State(pc_initial=82 nstack_initial=1))},
             '$phi132.0': {('$phi74.0', State(pc_initial=74 nstack_initial=1)),
                           ('$phi82.0', State(pc_initial=82 nstack_initial=1))},
             '$phi134.0': {('$phi132.0',
                            State(pc_initial=132 nstack_initial=1))},
             '$phi46.0': {('$44get_iter.8',
                           State(pc_initial=26 nstack_initial=0)),
                          ('$phi134.0',
                           State(pc_initial=134 nstack_initial=1))},
             '$phi48.0': {('$phi46.0', State(pc_initial=46 nstack_initial=1))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))},
             '$phi72.0': {('$phi48.0', State(pc_initial=48 nstack_initial=2))},
             '$phi74.0': {('$phi106.0', State(pc_initial=106 nstack_initial=1)),
                          ('$phi72.0', State(pc_initial=72 nstack_initial=1))},
             '$phi82.0': {('$phi74.0', State(pc_initial=74 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi106.0': {('$phi74.0', State(pc_initial=74 nstack_initial=1))},
             '$phi132.0': {('$phi106.0',
                            State(pc_initial=106 nstack_initial=1)),
                           ('$phi72.0', State(pc_initial=72 nstack_initial=1))},
             '$phi134.0': {('$phi106.0',
                            State(pc_initial=106 nstack_initial=1)),
                           ('$phi72.0', State(pc_initial=72 nstack_initial=1))},
             '$phi46.0': {('$44get_iter.8',
                           State(pc_initial=26 nstack_initial=0)),
                          ('$phi106.0', State(pc_initial=106 nstack_initial=1)),
                          ('$phi72.0', State(pc_initial=72 nstack_initial=1))},
             '$phi48.0': {('$44get_iter.8',
                           State(pc_initial=26 nstack_initial=0)),
                          ('$phi106.0', State(pc_initial=106 nstack_initial=1)),
                          ('$phi72.0', State(pc_initial=72 nstack_initial=1))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))},
             '$phi72.0': {('$44get_iter.8',
                           State(pc_initial=26 nstack_initial=0)),
                          ('$phi106.0', State(pc_initial=106 nstack_initial=1)),
                          ('$phi72.0', State(pc_initial=72 nstack_initial=1))},
             '$phi74.0': {('$44get_iter.8',
                           State(pc_initial=26 nstack_initial=0)),
                          ('$phi74.0', State(pc_initial=74 nstack_initial=1))},
             '$phi82.0': {('$44get_iter.8',
                           State(pc_initial=26 nstack_initial=0))}})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi106.0': {('$44get_iter.8',
                            State(pc_initial=26 nstack_initial=0))},
             '$phi132.0': {('$44get_iter.8',
                            State(pc_initial=26 nstack_initial=0))},
             '$phi134.0': {('$44get_iter.8',
                            State(pc_initial=26 nstack_initial=0))},
             '$phi46.0': {('$44get_iter.8',
                           State(pc_initial=26 nstack_initial=0))},
             '$phi48.0': {('$44get_iter.8',
                           State(pc_initial=26 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))},
             '$phi72.0': {('$44get_iter.8',
                           State(pc_initial=26 nstack_initial=0))},
             '$phi74.0': {('$44get_iter.8',
                           State(pc_initial=26 nstack_initial=0))},
             '$phi82.0': {('$44get_iter.8',
                           State(pc_initial=26 nstack_initial=0))}})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi106.0': {('$44get_iter.8',
                            State(pc_initial=26 nstack_initial=0))},
             '$phi132.0': {('$44get_iter.8',
                            State(pc_initial=26 nstack_initial=0))},
             '$phi134.0': {('$44get_iter.8',
                            State(pc_initial=26 nstack_initial=0))},
             '$phi46.0': {('$44get_iter.8',
                           State(pc_initial=26 nstack_initial=0))},
             '$phi48.0': {('$44get_iter.8',
                           State(pc_initial=26 nstack_initial=0))},
             '$phi48.1': {('$46for_iter.2',
                           State(pc_initial=46 nstack_initial=1))},
             '$phi72.0': {('$44get_iter.8',
                           State(pc_initial=26 nstack_initial=0))},
             '$phi74.0': {('$44get_iter.8',
                           State(pc_initial=26 nstack_initial=0))},
             '$phi82.0': {('$44get_iter.8',
                           State(pc_initial=26 nstack_initial=0))}})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG keep phismap: {'$phi46.0': {('$44get_iter.8', State(pc_initial=26 nstack_initial=0))},
 '$phi48.1': {('$46for_iter.2', State(pc_initial=46 nstack_initial=1))}}
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=26 nstack_initial=0): {'$phi46.0': '$44get_iter.8'},
             State(pc_initial=46 nstack_initial=1): {'$phi48.1': '$46for_iter.2'}})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG ----------------------DONE Prune PHIs-----------------------
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$low2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$low2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$10load_global.0'}), (12, {'exc': '$10load_global.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$high14.0'}), (16, {'res': '$low16.1'}), (18, {'lhs': '$high14.0', 'rhs': '$low16.1', 'res': '$18compare_op.2'}), (20, {'pred': '$18compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: (), 26: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=22 nstack_initial=0):
AdaptBlockInfo(insts=((22, {'res': '$const22.0'}), (24, {'retval': '$const22.0', 'castval': '$24return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$28load_global.0'}), (30, {'res': '$low30.1'}), (32, {'res': '$const32.2'}), (34, {'lhs': '$low30.1', 'rhs': '$const32.2', 'res': '$34binary_add.3'}), (36, {'res': '$high36.4'}), (38, {'res': '$const38.5'}), (40, {'lhs': '$high36.4', 'rhs': '$const38.5', 'res': '$40binary_add.6'}), (42, {'func': '$28load_global.0', 'args': ['$34binary_add.3', '$40binary_add.6'], 'res': '$42call_function.7'}), (44, {'value': '$42call_function.7', 'res': '$44get_iter.8'})), outgoing_phis={'$phi46.0': '$44get_iter.8'}, blockstack=(), active_try_block=None, outgoing_edgepushed={46: ('$44get_iter.8',)})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=46 nstack_initial=1):
AdaptBlockInfo(insts=((46, {'iterator': '$phi46.0', 'pair': '$46for_iter.1', 'indval': '$46for_iter.2', 'pred': '$46for_iter.3'}),), outgoing_phis={'$phi48.1': '$46for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 146, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={144: (), 48: ('$phi46.0', '$46for_iter.2')})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=48 nstack_initial=2):
AdaptBlockInfo(insts=((48, {'value': '$phi48.1'}), (50, {'res': '$R50.2'}), (52, {'res': '$i52.3'}), (54, {'index': '$i52.3', 'target': '$R50.2', 'res': '$54binary_subscr.4'}), (56, {'value': '$54binary_subscr.4'}), (58, {'res': '$58load_deref.5'}), (60, {'res': '$A60.6'}), (62, {'res': '$k62.7'}), (64, {'func': '$58load_deref.5', 'args': ['$A60.6', '$k62.7'], 'res': '$64call_function.8'}), (66, {'value': '$64call_function.8'}), (68, {'res': '$i68.9'}), (70, {'value': '$i68.9'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 146, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={72: ('$phi48.0',)})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=72 nstack_initial=1):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 146, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={74: ('$phi72.0',)})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=74 nstack_initial=1):
AdaptBlockInfo(insts=((74, {'res': '$j74.1'}), (76, {'res': '$low76.2'}), (78, {'lhs': '$j74.1', 'rhs': '$low76.2', 'res': '$78compare_op.3'}), (80, {'pred': '$78compare_op.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 146, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 134, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={82: ('$phi74.0',), 132: ('$phi74.0',)})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=82 nstack_initial=1):
AdaptBlockInfo(insts=((82, {'res': '$82load_deref.1'}), (84, {'res': '$v84.2'}), (86, {'res': '$86load_deref.3'}), (88, {'res': '$A88.4'}), (90, {'res': '$R90.5'}), (92, {'res': '$j92.6'}), (94, {'res': '$const94.7'}), (96, {'lhs': '$j92.6', 'rhs': '$const94.7', 'res': '$96binary_subtract.8'}), (98, {'index': '$96binary_subtract.8', 'target': '$R90.5', 'res': '$98binary_subscr.9'}), (100, {'func': '$86load_deref.3', 'args': ['$A88.4', '$98binary_subscr.9'], 'res': '$100call_function.10'}), (102, {'func': '$82load_deref.1', 'args': ['$v84.2', '$100call_function.10'], 'res': '$102call_function.11'}), (104, {'pred': '$102call_function.11'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 146, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 134, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={106: ('$phi82.0',), 132: ('$phi82.0',)})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=106 nstack_initial=1):
AdaptBlockInfo(insts=((106, {'res': '$R106.1'}), (108, {'res': '$j108.2'}), (110, {'res': '$const110.3'}), (112, {'lhs': '$j108.2', 'rhs': '$const110.3', 'res': '$112binary_subtract.4'}), (114, {'index': '$112binary_subtract.4', 'target': '$R106.1', 'res': '$114binary_subscr.5'}), (116, {'res': '$R116.6'}), (118, {'res': '$j118.7'}), (120, {'target': '$R116.6', 'index': '$j118.7', 'value': '$114binary_subscr.5'}), (122, {'res': '$j122.8'}), (124, {'res': '$const124.9'}), (126, {'lhs': '$j122.8', 'rhs': '$const124.9', 'res': '$126inplace_subtract.10'}), (128, {'value': '$126inplace_subtract.10'}), (130, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 146, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 134, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={74: ('$phi106.0',)})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=132 nstack_initial=1):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 146, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 134, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={134: ('$phi132.0',)})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=134 nstack_initial=1):
AdaptBlockInfo(insts=((134, {'res': '$k134.1'}), (136, {'res': '$R136.2'}), (138, {'res': '$j138.3'}), (140, {'target': '$R136.2', 'index': '$j138.3', 'value': '$k134.1'}), (142, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 146, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={46: ('$phi134.0',)})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=144 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 146, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={146: ()})
Sat 01 Jul 2023 19:39:41 byteflow.py DEBUG block_infos State(pc_initial=146 nstack_initial=0):
AdaptBlockInfo(insts=((146, {'res': '$const146.0'}), (148, {'retval': '$const146.0', 'castval': '$148return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:41 interpreter.py DEBUG label 0:
    A = arg(0, name=A)                       ['A']
    R = arg(1, name=R)                       ['R']
    low = arg(2, name=low)                   ['low']
    high = arg(3, name=high)                 ['high']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = low >= $const4.1        ['$6compare_op.2', '$const4.1', 'low']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, quicksort.py:71),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 14, 10                    ['$8pred']
label 10:
    $10load_global.0 = global(AssertionError: <class 'AssertionError'>) ['$10load_global.0']
    raise $10load_global.0                   ['$10load_global.0']
label 14:
    $18compare_op.2 = high <= low            ['$18compare_op.2', 'high', 'low']
    bool20 = global(bool: <class 'bool'>)    ['bool20']
    $20pred = call bool20($18compare_op.2, func=bool20, args=(Var($18compare_op.2, quicksort.py:72),), kws=(), vararg=None, varkwarg=None, target=None) ['$18compare_op.2', '$20pred', 'bool20']
    branch $20pred, 22, 26                   ['$20pred']
label 22:
    $const22.0 = const(NoneType, None)       ['$const22.0']
    $24return_value.1 = cast(value=$const22.0) ['$24return_value.1', '$const22.0']
    return $24return_value.1                 ['$24return_value.1']
label 26:
    $28load_global.0 = global(range: <class 'range'>) ['$28load_global.0']
    $const32.2 = const(int, 1)               ['$const32.2']
    $34binary_add.3 = low + $const32.2       ['$34binary_add.3', '$const32.2', 'low']
    $const38.5 = const(int, 1)               ['$const38.5']
    $40binary_add.6 = high + $const38.5      ['$40binary_add.6', '$const38.5', 'high']
    $42call_function.7 = call $28load_global.0($34binary_add.3, $40binary_add.6, func=$28load_global.0, args=[Var($34binary_add.3, quicksort.py:75), Var($40binary_add.6, quicksort.py:75)], kws=(), vararg=None, varkwarg=None, target=None) ['$28load_global.0', '$34binary_add.3', '$40binary_add.6', '$42call_function.7']
    $44get_iter.8 = getiter(value=$42call_function.7) ['$42call_function.7', '$44get_iter.8']
    $phi46.0 = $44get_iter.8                 ['$44get_iter.8', '$phi46.0']
    jump 46                                  []
label 46:
    $46for_iter.1 = iternext(value=$phi46.0) ['$46for_iter.1', '$phi46.0']
    $46for_iter.2 = pair_first(value=$46for_iter.1) ['$46for_iter.1', '$46for_iter.2']
    $46for_iter.3 = pair_second(value=$46for_iter.1) ['$46for_iter.1', '$46for_iter.3']
    $phi48.1 = $46for_iter.2                 ['$46for_iter.2', '$phi48.1']
    branch $46for_iter.3, 48, 144            ['$46for_iter.3']
label 48:
    i = $phi48.1                             ['$phi48.1', 'i']
    k = getitem(value=R, index=i, fn=<built-in function getitem>) ['R', 'i', 'k']
    $58load_deref.5 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>) ['$58load_deref.5']
    v = call $58load_deref.5(A, k, func=$58load_deref.5, args=[Var(A, quicksort.py:71), Var(k, quicksort.py:76)], kws=(), vararg=None, varkwarg=None, target=None) ['$58load_deref.5', 'A', 'k', 'v']
    j = i                                    ['i', 'j']
    jump 72                                  []
label 72:
    jump 74                                  []
label 74:
    $78compare_op.3 = j > low                ['$78compare_op.3', 'j', 'low']
    bool80 = global(bool: <class 'bool'>)    ['bool80']
    $80pred = call bool80($78compare_op.3, func=bool80, args=(Var($78compare_op.3, quicksort.py:80),), kws=(), vararg=None, varkwarg=None, target=None) ['$78compare_op.3', '$80pred', 'bool80']
    branch $80pred, 82, 132                  ['$80pred']
label 82:
    $82load_deref.1 = freevar(LT: <function lt_floats at 0x0000015A7094C288>) ['$82load_deref.1']
    $86load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>) ['$86load_deref.3']
    $const94.7 = const(int, 1)               ['$const94.7']
    $96binary_subtract.8 = j - $const94.7    ['$96binary_subtract.8', '$const94.7', 'j']
    $98binary_subscr.9 = getitem(value=R, index=$96binary_subtract.8, fn=<built-in function getitem>) ['$96binary_subtract.8', '$98binary_subscr.9', 'R']
    $100call_function.10 = call $86load_deref.3(A, $98binary_subscr.9, func=$86load_deref.3, args=[Var(A, quicksort.py:71), Var($98binary_subscr.9, quicksort.py:80)], kws=(), vararg=None, varkwarg=None, target=None) ['$100call_function.10', '$86load_deref.3', '$98binary_subscr.9', 'A']
    $102call_function.11 = call $82load_deref.1(v, $100call_function.10, func=$82load_deref.1, args=[Var(v, quicksort.py:77), Var($100call_function.10, quicksort.py:80)], kws=(), vararg=None, varkwarg=None, target=None) ['$100call_function.10', '$102call_function.11', '$82load_deref.1', 'v']
    bool104 = global(bool: <class 'bool'>)   ['bool104']
    $104pred = call bool104($102call_function.11, func=bool104, args=(Var($102call_function.11, quicksort.py:80),), kws=(), vararg=None, varkwarg=None, target=None) ['$102call_function.11', '$104pred', 'bool104']
    branch $104pred, 106, 132                ['$104pred']
label 106:
    $const110.3 = const(int, 1)              ['$const110.3']
    $112binary_subtract.4 = j - $const110.3  ['$112binary_subtract.4', '$const110.3', 'j']
    $114binary_subscr.5 = getitem(value=R, index=$112binary_subtract.4, fn=<built-in function getitem>) ['$112binary_subtract.4', '$114binary_subscr.5', 'R']
    R[j] = $114binary_subscr.5               ['$114binary_subscr.5', 'R', 'j']
    $const124.9 = const(int, 1)              ['$const124.9']
    $126inplace_subtract.10 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const124.9, static_lhs=Undefined, static_rhs=Undefined) ['$126inplace_subtract.10', '$const124.9', 'j']
    j = $126inplace_subtract.10              ['$126inplace_subtract.10', 'j']
    jump 74                                  []
label 132:
    jump 134                                 []
label 134:
    R[j] = k                                 ['R', 'j', 'k']
    jump 46                                  []
label 144:
    jump 146                                 []
label 146:
    $const146.0 = const(NoneType, None)      ['$const146.0']
    $148return_value.1 = cast(value=$const146.0) ['$148return_value.1', '$const146.0']
    return $148return_value.1                ['$148return_value.1']

Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: A = arg(0, name=A)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R = arg(1, name=R)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: low = arg(2, name=low)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: high = arg(3, name=high)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const4.1 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $6compare_op.2 = low >= $const4.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, quicksort.py:71),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $8pred, 14, 10
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 10
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $10load_global.0 = global(AssertionError: <class 'AssertionError'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: <static> raise <class 'AssertionError'>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 14
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $18compare_op.2 = high <= low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool20 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $20pred = call bool20($18compare_op.2, func=bool20, args=(Var($18compare_op.2, quicksort.py:72),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $20pred, 22, 26
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 22
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const22.0 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $24return_value.1 = cast(value=$const22.0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $24return_value.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 26
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $28load_global.0 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const32.2 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $34binary_add.3 = low + $const32.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const38.5 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $40binary_add.6 = high + $const38.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $42call_function.7 = call $28load_global.0($34binary_add.3, $40binary_add.6, func=$28load_global.0, args=[Var($34binary_add.3, quicksort.py:75), Var($40binary_add.6, quicksort.py:75)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $44get_iter.8 = getiter(value=$42call_function.7)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi46.0 = $44get_iter.8
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 46
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 46
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $46for_iter.1 = iternext(value=$phi46.0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $46for_iter.2 = pair_first(value=$46for_iter.1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $46for_iter.3 = pair_second(value=$46for_iter.1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi48.1 = $46for_iter.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $46for_iter.3, 48, 144
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 48
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: i = $phi48.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: k = getitem(value=R, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $58load_deref.5 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: v = call $58load_deref.5(A, k, func=$58load_deref.5, args=[Var(A, quicksort.py:71), Var(k, quicksort.py:76)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: j = i
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 72
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 72
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 74
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 74
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $78compare_op.3 = j > low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool80 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $80pred = call bool80($78compare_op.3, func=bool80, args=(Var($78compare_op.3, quicksort.py:80),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $80pred, 82, 132
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 82
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $82load_deref.1 = freevar(LT: <function lt_floats at 0x0000015A7094C288>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $86load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const94.7 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $96binary_subtract.8 = j - $const94.7
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $98binary_subscr.9 = getitem(value=R, index=$96binary_subtract.8, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $100call_function.10 = call $86load_deref.3(A, $98binary_subscr.9, func=$86load_deref.3, args=[Var(A, quicksort.py:71), Var($98binary_subscr.9, quicksort.py:80)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $102call_function.11 = call $82load_deref.1(v, $100call_function.10, func=$82load_deref.1, args=[Var(v, quicksort.py:77), Var($100call_function.10, quicksort.py:80)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool104 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $104pred = call bool104($102call_function.11, func=bool104, args=(Var($102call_function.11, quicksort.py:80),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $104pred, 106, 132
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 106
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const110.3 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $112binary_subtract.4 = j - $const110.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $114binary_subscr.5 = getitem(value=R, index=$112binary_subtract.4, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[j] = $114binary_subscr.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const124.9 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $126inplace_subtract.10 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const124.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: j = $126inplace_subtract.10
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 74
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 132
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 134
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 134
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[j] = k
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 46
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 144
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 146
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block analysis pass on 146
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const146.0 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $148return_value.1 = cast(value=$const146.0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $148return_value.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG defs defaultdict(<class 'list'>,
            {'$100call_function.10': [<numba.core.ir.Assign object at 0x0000015A3FAFC488>],
             '$102call_function.11': [<numba.core.ir.Assign object at 0x0000015A3FAFC5C8>],
             '$104pred': [<numba.core.ir.Assign object at 0x0000015A3FAFC888>],
             '$10load_global.0': [<numba.core.ir.Assign object at 0x0000015A42133D88>],
             '$112binary_subtract.4': [<numba.core.ir.Assign object at 0x0000015A3FAFCD48>],
             '$114binary_subscr.5': [<numba.core.ir.Assign object at 0x0000015A3FAFCE88>],
             '$126inplace_subtract.10': [<numba.core.ir.Assign object at 0x0000015A56E664C8>],
             '$148return_value.1': [<numba.core.ir.Assign object at 0x0000015A56E66D88>],
             '$18compare_op.2': [<numba.core.ir.Assign object at 0x0000015A4E48A0C8>],
             '$20pred': [<numba.core.ir.Assign object at 0x0000015A3FAAB188>],
             '$24return_value.1': [<numba.core.ir.Assign object at 0x0000015A3FAAB108>],
             '$28load_global.0': [<numba.core.ir.Assign object at 0x0000015A3FA89C48>],
             '$34binary_add.3': [<numba.core.ir.Assign object at 0x0000015A421503C8>],
             '$40binary_add.6': [<numba.core.ir.Assign object at 0x0000015A3FAF8F08>],
             '$42call_function.7': [<numba.core.ir.Assign object at 0x0000015A3FAED348>],
             '$44get_iter.8': [<numba.core.ir.Assign object at 0x0000015A3FAED088>],
             '$46for_iter.1': [<numba.core.ir.Assign object at 0x0000015A56E5CE08>],
             '$46for_iter.2': [<numba.core.ir.Assign object at 0x0000015A56E2B788>],
             '$46for_iter.3': [<numba.core.ir.Assign object at 0x0000015A3FAFA108>],
             '$58load_deref.5': [<numba.core.ir.Assign object at 0x0000015A3FAFAA48>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x0000015A3FAB0B88>],
             '$78compare_op.3': [<numba.core.ir.Assign object at 0x0000015A3FAF14C8>],
             '$80pred': [<numba.core.ir.Assign object at 0x0000015A3FAF1788>],
             '$82load_deref.1': [<numba.core.ir.Assign object at 0x0000015A3FAF18C8>],
             '$86load_deref.3': [<numba.core.ir.Assign object at 0x0000015A3FAF1B88>],
             '$8pred': [<numba.core.ir.Assign object at 0x0000015A3FAA9B48>],
             '$96binary_subtract.8': [<numba.core.ir.Assign object at 0x0000015A3FAFC248>],
             '$98binary_subscr.9': [<numba.core.ir.Assign object at 0x0000015A3FAFC388>],
             '$const110.3': [<numba.core.ir.Assign object at 0x0000015A3FAFCC08>],
             '$const124.9': [<numba.core.ir.Assign object at 0x0000015A56E66388>],
             '$const146.0': [<numba.core.ir.Assign object at 0x0000015A56E66C48>],
             '$const22.0': [<numba.core.ir.Assign object at 0x0000015A3FAABD88>],
             '$const32.2': [<numba.core.ir.Assign object at 0x0000015A3FAB3B48>],
             '$const38.5': [<numba.core.ir.Assign object at 0x0000015A3FAF8488>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000015A39C9DF88>],
             '$const94.7': [<numba.core.ir.Assign object at 0x0000015A3FAFC108>],
             '$phi46.0': [<numba.core.ir.Assign object at 0x0000015A4214A908>],
             '$phi48.1': [<numba.core.ir.Assign object at 0x0000015A3FAFA1C8>],
             'A': [<numba.core.ir.Assign object at 0x0000015A39CFE308>],
             'R': [<numba.core.ir.Assign object at 0x0000015A3FAE8BC8>],
             'bool104': [<numba.core.ir.Assign object at 0x0000015A3FAFC748>],
             'bool20': [<numba.core.ir.Assign object at 0x0000015A3FAAB988>],
             'bool8': [<numba.core.ir.Assign object at 0x0000015A3FACFD08>],
             'bool80': [<numba.core.ir.Assign object at 0x0000015A3FAF1648>],
             'high': [<numba.core.ir.Assign object at 0x0000015A420FE808>],
             'i': [<numba.core.ir.Assign object at 0x0000015A3FAFA3C8>],
             'j': [<numba.core.ir.Assign object at 0x0000015A3FAF1108>,
                   <numba.core.ir.Assign object at 0x0000015A3FAF10C8>],
             'k': [<numba.core.ir.Assign object at 0x0000015A3FAFA7C8>],
             'low': [<numba.core.ir.Assign object at 0x0000015A420FEF88>],
             'v': [<numba.core.ir.Assign object at 0x0000015A3FAFAE08>]})
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG SSA violators {'j'}
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Fix SSA violator on var j
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: A = arg(0, name=A)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R = arg(1, name=R)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: low = arg(2, name=low)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: high = arg(3, name=high)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const4.1 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $6compare_op.2 = low >= $const4.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, quicksort.py:71),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $8pred, 14, 10
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 10
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $10load_global.0 = global(AssertionError: <class 'AssertionError'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: <static> raise <class 'AssertionError'>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 14
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $18compare_op.2 = high <= low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool20 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $20pred = call bool20($18compare_op.2, func=bool20, args=(Var($18compare_op.2, quicksort.py:72),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $20pred, 22, 26
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 22
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const22.0 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $24return_value.1 = cast(value=$const22.0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $24return_value.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 26
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $28load_global.0 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const32.2 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $34binary_add.3 = low + $const32.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const38.5 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $40binary_add.6 = high + $const38.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $42call_function.7 = call $28load_global.0($34binary_add.3, $40binary_add.6, func=$28load_global.0, args=[Var($34binary_add.3, quicksort.py:75), Var($40binary_add.6, quicksort.py:75)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $44get_iter.8 = getiter(value=$42call_function.7)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi46.0 = $44get_iter.8
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 46
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 46
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $46for_iter.1 = iternext(value=$phi46.0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $46for_iter.2 = pair_first(value=$46for_iter.1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $46for_iter.3 = pair_second(value=$46for_iter.1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi48.1 = $46for_iter.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $46for_iter.3, 48, 144
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 48
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: i = $phi48.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: k = getitem(value=R, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $58load_deref.5 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: v = call $58load_deref.5(A, k, func=$58load_deref.5, args=[Var(A, quicksort.py:71), Var(k, quicksort.py:76)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: j = i
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG first assign: j
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: j = i
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 72
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 72
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 74
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 74
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $78compare_op.3 = j > low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool80 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $80pred = call bool80($78compare_op.3, func=bool80, args=(Var($78compare_op.3, quicksort.py:80),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $80pred, 82, 132
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 82
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $82load_deref.1 = freevar(LT: <function lt_floats at 0x0000015A7094C288>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $86load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const94.7 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $96binary_subtract.8 = j - $const94.7
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $98binary_subscr.9 = getitem(value=R, index=$96binary_subtract.8, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $100call_function.10 = call $86load_deref.3(A, $98binary_subscr.9, func=$86load_deref.3, args=[Var(A, quicksort.py:71), Var($98binary_subscr.9, quicksort.py:80)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $102call_function.11 = call $82load_deref.1(v, $100call_function.10, func=$82load_deref.1, args=[Var(v, quicksort.py:77), Var($100call_function.10, quicksort.py:80)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool104 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $104pred = call bool104($102call_function.11, func=bool104, args=(Var($102call_function.11, quicksort.py:80),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $104pred, 106, 132
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 106
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const110.3 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $112binary_subtract.4 = j - $const110.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $114binary_subscr.5 = getitem(value=R, index=$112binary_subtract.4, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[j] = $114binary_subscr.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const124.9 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $126inplace_subtract.10 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const124.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: j = $126inplace_subtract.10
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: j.1 = $126inplace_subtract.10
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 74
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 132
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 134
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 134
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[j] = k
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 46
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 144
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 146
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 146
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const146.0 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $148return_value.1 = cast(value=$const146.0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $148return_value.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {48: [<numba.core.ir.Assign object at 0x0000015A56E69DC8>],
             106: [<numba.core.ir.Assign object at 0x0000015A56E69A08>]})
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: A = arg(0, name=A)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R = arg(1, name=R)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: low = arg(2, name=low)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: high = arg(3, name=high)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const4.1 = const(int, 0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $6compare_op.2 = low >= $const4.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, quicksort.py:71),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $8pred, 14, 10
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 10
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $10load_global.0 = global(AssertionError: <class 'AssertionError'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: <static> raise <class 'AssertionError'>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 14
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $18compare_op.2 = high <= low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool20 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $20pred = call bool20($18compare_op.2, func=bool20, args=(Var($18compare_op.2, quicksort.py:72),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $20pred, 22, 26
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 22
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const22.0 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $24return_value.1 = cast(value=$const22.0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $24return_value.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 26
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $28load_global.0 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const32.2 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $34binary_add.3 = low + $const32.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const38.5 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $40binary_add.6 = high + $const38.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $42call_function.7 = call $28load_global.0($34binary_add.3, $40binary_add.6, func=$28load_global.0, args=[Var($34binary_add.3, quicksort.py:75), Var($40binary_add.6, quicksort.py:75)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $44get_iter.8 = getiter(value=$42call_function.7)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi46.0 = $44get_iter.8
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 46
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 46
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $46for_iter.1 = iternext(value=$phi46.0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $46for_iter.2 = pair_first(value=$46for_iter.1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $46for_iter.3 = pair_second(value=$46for_iter.1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $phi48.1 = $46for_iter.2
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $46for_iter.3, 48, 144
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 48
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: i = $phi48.1
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: k = getitem(value=R, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $58load_deref.5 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: v = call $58load_deref.5(A, k, func=$58load_deref.5, args=[Var(A, quicksort.py:71), Var(k, quicksort.py:76)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: j = i
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 72
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 72
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 74
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 74
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $78compare_op.3 = j > low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='j' stmt=$78compare_op.3 = j > low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 74
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG insert phi node j.2 = phi(incoming_values=[], incoming_blocks=[]) at 74
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 72
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 72
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 48 from label 72
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 48
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG incoming_def j = i
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 106
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG incoming_def j.1 = $126inplace_subtract.10
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: $78compare_op.3 = j.2 > low
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool80 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $80pred = call bool80($78compare_op.3, func=bool80, args=(Var($78compare_op.3, quicksort.py:80),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $80pred, 82, 132
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 82
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $82load_deref.1 = freevar(LT: <function lt_floats at 0x0000015A7094C288>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $86load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x0000015A28C7C5E8>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const94.7 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $96binary_subtract.8 = j - $const94.7
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='j' stmt=$96binary_subtract.8 = j - $const94.7
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 82
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 74 from label 82
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 74
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: $96binary_subtract.8 = j.2 - $const94.7
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $98binary_subscr.9 = getitem(value=R, index=$96binary_subtract.8, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $100call_function.10 = call $86load_deref.3(A, $98binary_subscr.9, func=$86load_deref.3, args=[Var(A, quicksort.py:71), Var($98binary_subscr.9, quicksort.py:80)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $102call_function.11 = call $82load_deref.1(v, $100call_function.10, func=$82load_deref.1, args=[Var(v, quicksort.py:77), Var($100call_function.10, quicksort.py:80)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: bool104 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $104pred = call bool104($102call_function.11, func=bool104, args=(Var($102call_function.11, quicksort.py:80),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: branch $104pred, 106, 132
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 106
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const110.3 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $112binary_subtract.4 = j - $const110.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='j' stmt=$112binary_subtract.4 = j - $const110.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 106
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 82 from label 106
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 82
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 82
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 74 from label 82
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 74
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: $112binary_subtract.4 = j.2 - $const110.3
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $114binary_subscr.5 = getitem(value=R, index=$112binary_subtract.4, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[j] = $114binary_subscr.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='j' stmt=R[j] = $114binary_subscr.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 106
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 82 from label 106
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 82
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 82
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 74 from label 82
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 74
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: R[j.2] = $114binary_subscr.5
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const124.9 = const(int, 1)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $126inplace_subtract.10 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const124.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='j' stmt=$126inplace_subtract.10 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const124.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 106
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 82 from label 106
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 82
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 82
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 74 from label 82
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 74
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: $126inplace_subtract.10 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j.2, rhs=$const124.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: j.1 = $126inplace_subtract.10
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 74
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 132
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 134
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 134
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: R[j] = k
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def var='j' stmt=R[j] = k
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 134
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 132 from label 134
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 132
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_top label 132
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG idom 74 from label 132
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG find_def_from_bottom label 74
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG replaced with: R[j.2] = k
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 46
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 144
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: jump 146
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG ==== SSA block rewrite pass on 146
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A39CCEE88>
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $const146.0 = const(NoneType, None)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: $148return_value.1 = cast(value=$const146.0)
Sat 01 Jul 2023 19:39:41 ssa.py DEBUG on stmt: return $148return_value.1
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=189)
           2	LOAD_GLOBAL(arg=0, lineno=189)
           4	LOAD_METHOD(arg=1, lineno=189)
           6	LOAD_FAST(arg=1, lineno=189)
           8	CALL_METHOD(arg=1, lineno=189)
          10	LOAD_FAST(arg=4, lineno=189)
          12	BINARY_MULTIPLY(arg=None, lineno=189)
          14	STORE_FAST(arg=5, lineno=189)
          16	LOAD_GLOBAL(arg=0, lineno=190)
          18	LOAD_ATTR(arg=2, lineno=190)
          20	LOAD_FAST(arg=0, lineno=190)
          22	LOAD_ATTR(arg=3, lineno=190)
          24	LOAD_CONST(arg=1, lineno=190)
          26	BINARY_SUBSCR(arg=None, lineno=190)
          28	LOAD_GLOBAL(arg=0, lineno=190)
          30	LOAD_ATTR(arg=4, lineno=190)
          32	LOAD_CONST(arg=2, lineno=190)
          34	CALL_FUNCTION_KW(arg=2, lineno=190)
          36	STORE_FAST(arg=6, lineno=190)
          38	LOAD_GLOBAL(arg=0, lineno=191)
          40	LOAD_ATTR(arg=2, lineno=191)
          42	LOAD_FAST(arg=0, lineno=191)
          44	LOAD_ATTR(arg=3, lineno=191)
          46	LOAD_CONST(arg=1, lineno=191)
          48	BINARY_SUBSCR(arg=None, lineno=191)
          50	LOAD_GLOBAL(arg=0, lineno=191)
          52	LOAD_ATTR(arg=4, lineno=191)
          54	LOAD_CONST(arg=2, lineno=191)
          56	CALL_FUNCTION_KW(arg=2, lineno=191)
          58	STORE_FAST(arg=7, lineno=191)
          60	LOAD_GLOBAL(arg=0, lineno=193)
          62	LOAD_METHOD(arg=5, lineno=193)
          64	LOAD_FAST(arg=0, lineno=193)
          66	CALL_METHOD(arg=1, lineno=193)
          68	STORE_FAST(arg=8, lineno=193)
          70	SETUP_LOOP(arg=500, lineno=195)
          74	LOAD_GLOBAL(arg=6, lineno=195)
          76	LOAD_FAST(arg=0, lineno=195)
          78	LOAD_ATTR(arg=3, lineno=195)
          80	LOAD_CONST(arg=1, lineno=195)
          82	BINARY_SUBSCR(arg=None, lineno=195)
          84	CALL_FUNCTION(arg=1, lineno=195)
          86	GET_ITER(arg=None, lineno=195)
>         88	FOR_ITER(arg=480, lineno=195)
          92	STORE_FAST(arg=9, lineno=195)
          94	LOAD_CONST(arg=3, lineno=196)
          96	STORE_FAST(arg=10, lineno=196)
          98	LOAD_GLOBAL(arg=7, lineno=197)
         100	STORE_FAST(arg=11, lineno=197)
         102	LOAD_CONST(arg=4, lineno=198)
         104	STORE_FAST(arg=12, lineno=198)
         106	LOAD_FAST(arg=0, lineno=201)
         108	LOAD_FAST(arg=9, lineno=201)
         110	BINARY_SUBSCR(arg=None, lineno=201)
         112	STORE_FAST(arg=13, lineno=201)
         114	LOAD_FAST(arg=13, lineno=202)
         116	LOAD_FAST(arg=13, lineno=202)
         118	LOAD_CONST(arg=3, lineno=202)
         120	COMPARE_OP(arg=4, lineno=202)
         122	BINARY_SUBSCR(arg=None, lineno=202)
         124	STORE_FAST(arg=14, lineno=202)
         126	LOAD_FAST(arg=14, lineno=203)
         128	LOAD_ATTR(arg=3, lineno=203)
         130	LOAD_CONST(arg=1, lineno=203)
         132	BINARY_SUBSCR(arg=None, lineno=203)
         134	LOAD_FAST(arg=3, lineno=203)
         136	COMPARE_OP(arg=5, lineno=203)
         138	POP_JUMP_IF_FALSE(arg=250, lineno=203)
         140	LOAD_GLOBAL(arg=8, lineno=204)
         142	LOAD_GLOBAL(arg=0, lineno=204)
         144	LOAD_METHOD(arg=9, lineno=204)
         146	LOAD_FAST(arg=3, lineno=204)
         148	CALL_METHOD(arg=1, lineno=204)
         150	CALL_FUNCTION(arg=1, lineno=204)
         152	STORE_FAST(arg=15, lineno=204)
         154	LOAD_FAST(arg=3, lineno=205)
         156	LOAD_FAST(arg=15, lineno=205)
         158	BINARY_SUBTRACT(arg=None, lineno=205)
         160	STORE_FAST(arg=16, lineno=205)
         162	LOAD_FAST(arg=15, lineno=206)
         164	LOAD_CONST(arg=1, lineno=206)
         166	COMPARE_OP(arg=4, lineno=206)
         168	POP_JUMP_IF_FALSE(arg=232, lineno=206)
         170	LOAD_FAST(arg=14, lineno=207)
         172	LOAD_FAST(arg=15, lineno=207)
         174	LOAD_CONST(arg=5, lineno=207)
         176	BINARY_SUBTRACT(arg=None, lineno=207)
         178	BINARY_SUBSCR(arg=None, lineno=207)
         180	LOAD_FAST(arg=6, lineno=207)
         182	LOAD_FAST(arg=9, lineno=207)
         184	STORE_SUBSCR(arg=None, lineno=207)
         186	LOAD_FAST(arg=16, lineno=208)
         188	LOAD_GLOBAL(arg=10, lineno=208)
         190	COMPARE_OP(arg=4, lineno=208)
         192	POP_JUMP_IF_FALSE(arg=248, lineno=208)
         194	LOAD_FAST(arg=6, lineno=209)
         196	LOAD_FAST(arg=9, lineno=209)
         198	DUP_TOP_TWO(arg=None, lineno=209)
         200	BINARY_SUBSCR(arg=None, lineno=209)
         202	LOAD_FAST(arg=16, lineno=209)
         204	LOAD_FAST(arg=14, lineno=210)
         206	LOAD_FAST(arg=15, lineno=210)
         208	BINARY_SUBSCR(arg=None, lineno=210)
         210	LOAD_FAST(arg=14, lineno=210)
         212	LOAD_FAST(arg=15, lineno=210)
         214	LOAD_CONST(arg=5, lineno=210)
         216	BINARY_SUBTRACT(arg=None, lineno=210)
         218	BINARY_SUBSCR(arg=None, lineno=210)
         220	BINARY_SUBTRACT(arg=None, lineno=210)
         222	BINARY_MULTIPLY(arg=None, lineno=210)
         224	INPLACE_ADD(arg=None, lineno=210)
         226	ROT_THREE(arg=None, lineno=210)
         228	STORE_SUBSCR(arg=None, lineno=210)
         230	JUMP_FORWARD(arg=16, lineno=210)
>        232	LOAD_FAST(arg=16, lineno=213)
         234	LOAD_FAST(arg=14, lineno=213)
         236	LOAD_CONST(arg=1, lineno=213)
         238	BINARY_SUBSCR(arg=None, lineno=213)
         240	BINARY_MULTIPLY(arg=None, lineno=213)
         242	LOAD_FAST(arg=6, lineno=213)
         244	LOAD_FAST(arg=9, lineno=213)
         246	STORE_SUBSCR(arg=None, lineno=213)
>        248	JUMP_FORWARD(arg=30, lineno=213)
>        250	LOAD_FAST(arg=14, lineno=214)
         252	LOAD_ATTR(arg=3, lineno=214)
         254	LOAD_CONST(arg=1, lineno=214)
         256	BINARY_SUBSCR(arg=None, lineno=214)
         258	LOAD_CONST(arg=1, lineno=214)
         260	COMPARE_OP(arg=4, lineno=214)
         262	POP_JUMP_IF_FALSE(arg=280, lineno=214)
         266	LOAD_GLOBAL(arg=0, lineno=215)
         268	LOAD_METHOD(arg=11, lineno=215)
         270	LOAD_FAST(arg=14, lineno=215)
         272	CALL_METHOD(arg=1, lineno=215)
         274	LOAD_FAST(arg=6, lineno=215)
         276	LOAD_FAST(arg=9, lineno=215)
         278	STORE_SUBSCR(arg=None, lineno=215)
>        280	SETUP_LOOP(arg=196, lineno=217)
         282	LOAD_GLOBAL(arg=6, lineno=217)
         284	LOAD_FAST(arg=2, lineno=217)
         286	CALL_FUNCTION(arg=1, lineno=217)
         288	GET_ITER(arg=None, lineno=217)
>        290	FOR_ITER(arg=184, lineno=217)
         292	STORE_FAST(arg=17, lineno=217)
         294	LOAD_CONST(arg=3, lineno=219)
         296	STORE_FAST(arg=18, lineno=219)
         298	SETUP_LOOP(arg=86, lineno=220)
         300	LOAD_GLOBAL(arg=6, lineno=220)
         302	LOAD_CONST(arg=5, lineno=220)
         304	LOAD_FAST(arg=0, lineno=220)
         306	LOAD_ATTR(arg=3, lineno=220)
         308	LOAD_CONST(arg=5, lineno=220)
         310	BINARY_SUBSCR(arg=None, lineno=220)
         312	CALL_FUNCTION(arg=2, lineno=220)
         314	GET_ITER(arg=None, lineno=220)
>        316	FOR_ITER(arg=66, lineno=220)
         318	STORE_FAST(arg=19, lineno=220)
         320	LOAD_FAST(arg=0, lineno=221)
         322	LOAD_FAST(arg=9, lineno=221)
         324	LOAD_FAST(arg=19, lineno=221)
         326	BUILD_TUPLE(arg=2, lineno=221)
         328	BINARY_SUBSCR(arg=None, lineno=221)
         330	LOAD_FAST(arg=6, lineno=221)
         332	LOAD_FAST(arg=9, lineno=221)
         334	BINARY_SUBSCR(arg=None, lineno=221)
         336	BINARY_SUBTRACT(arg=None, lineno=221)
         338	STORE_FAST(arg=20, lineno=221)
         340	LOAD_FAST(arg=20, lineno=222)
         342	LOAD_CONST(arg=1, lineno=222)
         344	COMPARE_OP(arg=4, lineno=222)
         346	POP_JUMP_IF_FALSE(arg=372, lineno=222)
         350	LOAD_FAST(arg=18, lineno=223)
         352	LOAD_GLOBAL(arg=0, lineno=223)
         354	LOAD_METHOD(arg=12, lineno=223)
         356	LOAD_FAST(arg=20, lineno=223)
         358	LOAD_FAST(arg=12, lineno=223)
         360	BINARY_TRUE_DIVIDE(arg=None, lineno=223)
         362	UNARY_NEGATIVE(arg=None, lineno=223)
         364	CALL_METHOD(arg=1, lineno=223)
         366	INPLACE_ADD(arg=None, lineno=223)
         368	STORE_FAST(arg=18, lineno=223)
         370	JUMP_FORWARD(arg=8, lineno=223)
>        372	LOAD_FAST(arg=18, lineno=225)
         374	LOAD_CONST(arg=4, lineno=225)
         376	INPLACE_ADD(arg=None, lineno=225)
         378	STORE_FAST(arg=18, lineno=225)
>        380	JUMP_ABSOLUTE(arg=316, lineno=225)
>        384	POP_BLOCK(arg=None, lineno=225)
>        386	LOAD_GLOBAL(arg=0, lineno=227)
         388	LOAD_METHOD(arg=13, lineno=227)
         390	LOAD_FAST(arg=18, lineno=227)
         392	LOAD_FAST(arg=5, lineno=227)
         394	BINARY_SUBTRACT(arg=None, lineno=227)
         396	CALL_METHOD(arg=1, lineno=227)
         398	LOAD_GLOBAL(arg=10, lineno=227)
         400	COMPARE_OP(arg=0, lineno=227)
         402	POP_JUMP_IF_FALSE(arg=408, lineno=227)
         406	BREAK_LOOP(arg=None, lineno=228)
>        408	LOAD_FAST(arg=18, lineno=230)
         410	LOAD_FAST(arg=5, lineno=230)
         412	COMPARE_OP(arg=4, lineno=230)
         414	POP_JUMP_IF_FALSE(arg=436, lineno=230)
         418	LOAD_FAST(arg=12, lineno=231)
         420	STORE_FAST(arg=11, lineno=231)
         422	LOAD_FAST(arg=10, lineno=232)
         424	LOAD_FAST(arg=11, lineno=232)
         426	BINARY_ADD(arg=None, lineno=232)
         428	LOAD_CONST(arg=6, lineno=232)
         430	BINARY_TRUE_DIVIDE(arg=None, lineno=232)
         432	STORE_FAST(arg=12, lineno=232)
         434	JUMP_FORWARD(arg=36, lineno=232)
>        436	LOAD_FAST(arg=12, lineno=234)
         438	STORE_FAST(arg=10, lineno=234)
         440	LOAD_FAST(arg=11, lineno=235)
         442	LOAD_GLOBAL(arg=7, lineno=235)
         444	COMPARE_OP(arg=2, lineno=235)
         446	POP_JUMP_IF_FALSE(arg=460, lineno=235)
         450	LOAD_FAST(arg=12, lineno=236)
         452	LOAD_CONST(arg=7, lineno=236)
         454	INPLACE_MULTIPLY(arg=None, lineno=236)
         456	STORE_FAST(arg=12, lineno=236)
         458	JUMP_FORWARD(arg=12, lineno=236)
>        460	LOAD_FAST(arg=10, lineno=238)
         462	LOAD_FAST(arg=11, lineno=238)
         464	BINARY_ADD(arg=None, lineno=238)
         466	LOAD_CONST(arg=6, lineno=238)
         468	BINARY_TRUE_DIVIDE(arg=None, lineno=238)
         470	STORE_FAST(arg=12, lineno=238)
>        472	JUMP_ABSOLUTE(arg=290, lineno=238)
>        476	POP_BLOCK(arg=None, lineno=238)
>        478	LOAD_FAST(arg=12, lineno=240)
         480	LOAD_FAST(arg=7, lineno=240)
         482	LOAD_FAST(arg=9, lineno=240)
         484	STORE_SUBSCR(arg=None, lineno=240)
         486	LOAD_FAST(arg=6, lineno=243)
         488	LOAD_FAST(arg=9, lineno=243)
         490	BINARY_SUBSCR(arg=None, lineno=243)
         492	LOAD_CONST(arg=3, lineno=243)
         494	COMPARE_OP(arg=4, lineno=243)
         496	POP_JUMP_IF_FALSE(arg=542, lineno=243)
         500	LOAD_GLOBAL(arg=0, lineno=244)
         502	LOAD_METHOD(arg=5, lineno=244)
         504	LOAD_FAST(arg=13, lineno=244)
         506	CALL_METHOD(arg=1, lineno=244)
         508	STORE_FAST(arg=21, lineno=244)
         510	LOAD_FAST(arg=7, lineno=245)
         512	LOAD_FAST(arg=9, lineno=245)
         514	BINARY_SUBSCR(arg=None, lineno=245)
         516	LOAD_GLOBAL(arg=14, lineno=245)
         518	LOAD_FAST(arg=21, lineno=245)
         520	BINARY_MULTIPLY(arg=None, lineno=245)
         522	COMPARE_OP(arg=0, lineno=245)
         524	POP_JUMP_IF_FALSE(arg=570, lineno=245)
         528	LOAD_GLOBAL(arg=14, lineno=246)
         530	LOAD_FAST(arg=21, lineno=246)
         532	BINARY_MULTIPLY(arg=None, lineno=246)
         534	LOAD_FAST(arg=7, lineno=246)
         536	LOAD_FAST(arg=9, lineno=246)
         538	STORE_SUBSCR(arg=None, lineno=246)
         540	JUMP_ABSOLUTE(arg=88, lineno=246)
>        542	LOAD_FAST(arg=7, lineno=248)
         544	LOAD_FAST(arg=9, lineno=248)
         546	BINARY_SUBSCR(arg=None, lineno=248)
         548	LOAD_GLOBAL(arg=14, lineno=248)
         550	LOAD_FAST(arg=8, lineno=248)
         552	BINARY_MULTIPLY(arg=None, lineno=248)
         554	COMPARE_OP(arg=0, lineno=248)
         556	POP_JUMP_IF_FALSE(arg=88, lineno=248)
         558	LOAD_GLOBAL(arg=14, lineno=249)
         560	LOAD_FAST(arg=8, lineno=249)
         562	BINARY_MULTIPLY(arg=None, lineno=249)
         564	LOAD_FAST(arg=7, lineno=249)
         566	LOAD_FAST(arg=9, lineno=249)
         568	STORE_SUBSCR(arg=None, lineno=249)
>        570	JUMP_ABSOLUTE(arg=88, lineno=249)
>        572	POP_BLOCK(arg=None, lineno=249)
>        574	LOAD_FAST(arg=7, lineno=251)
         576	LOAD_FAST(arg=6, lineno=251)
         578	BUILD_TUPLE(arg=2, lineno=251)
         580	RETURN_VALUE(arg=None, lineno=251)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=189)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=189)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=189)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$2load_global.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=189)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$4load_method.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=189)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$4load_method.1', '$k6.2']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=10, inst=LOAD_FAST(arg=4, lineno=189)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$8call_method.3']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=12, inst=BINARY_MULTIPLY(arg=None, lineno=189)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$8call_method.3', '$bandwidth10.4']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=14, inst=STORE_FAST(arg=5, lineno=189)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$12binary_multiply.5']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=16, inst=LOAD_GLOBAL(arg=0, lineno=190)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=18, inst=LOAD_ATTR(arg=2, lineno=190)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$16load_global.6']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=190)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$18load_attr.7']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=22, inst=LOAD_ATTR(arg=3, lineno=190)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$18load_attr.7', '$distances20.8']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=190)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$18load_attr.7', '$22load_attr.9']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=190)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$18load_attr.7', '$22load_attr.9', '$const24.10']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=28, inst=LOAD_GLOBAL(arg=0, lineno=190)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$18load_attr.7', '$26binary_subscr.11']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=30, inst=LOAD_ATTR(arg=4, lineno=190)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$18load_attr.7', '$26binary_subscr.11', '$28load_global.12']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=32, inst=LOAD_CONST(arg=2, lineno=190)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$18load_attr.7', '$26binary_subscr.11', '$30load_attr.13']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=34, inst=CALL_FUNCTION_KW(arg=2, lineno=190)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$18load_attr.7', '$26binary_subscr.11', '$30load_attr.13', '$const32.14']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=36, inst=STORE_FAST(arg=6, lineno=190)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$34call_function_kw.15']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=38, inst=LOAD_GLOBAL(arg=0, lineno=191)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=40, inst=LOAD_ATTR(arg=2, lineno=191)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$38load_global.16']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=42, inst=LOAD_FAST(arg=0, lineno=191)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$40load_attr.17']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=44, inst=LOAD_ATTR(arg=3, lineno=191)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$40load_attr.17', '$distances42.18']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=46, inst=LOAD_CONST(arg=1, lineno=191)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$40load_attr.17', '$44load_attr.19']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=191)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$40load_attr.17', '$44load_attr.19', '$const46.20']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=50, inst=LOAD_GLOBAL(arg=0, lineno=191)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$40load_attr.17', '$48binary_subscr.21']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=52, inst=LOAD_ATTR(arg=4, lineno=191)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$40load_attr.17', '$48binary_subscr.21', '$50load_global.22']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=191)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$40load_attr.17', '$48binary_subscr.21', '$52load_attr.23']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=56, inst=CALL_FUNCTION_KW(arg=2, lineno=191)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$40load_attr.17', '$48binary_subscr.21', '$52load_attr.23', '$const54.24']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=58, inst=STORE_FAST(arg=7, lineno=191)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$56call_function_kw.25']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=60, inst=LOAD_GLOBAL(arg=0, lineno=193)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=62, inst=LOAD_METHOD(arg=5, lineno=193)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$60load_global.26']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=64, inst=LOAD_FAST(arg=0, lineno=193)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$62load_method.27']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=66, inst=CALL_METHOD(arg=1, lineno=193)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$62load_method.27', '$distances64.28']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=68, inst=STORE_FAST(arg=8, lineno=193)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$66call_method.29']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=70 nstack_initial=0)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=70, inst=SETUP_LOOP(arg=500, lineno=195)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=74, inst=LOAD_GLOBAL(arg=6, lineno=195)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=76, inst=LOAD_FAST(arg=0, lineno=195)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$74load_global.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=78, inst=LOAD_ATTR(arg=3, lineno=195)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$74load_global.0', '$distances76.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=80, inst=LOAD_CONST(arg=1, lineno=195)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$74load_global.0', '$78load_attr.2']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=82, inst=BINARY_SUBSCR(arg=None, lineno=195)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$74load_global.0', '$78load_attr.2', '$const80.3']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=84, inst=CALL_FUNCTION(arg=1, lineno=195)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$74load_global.0', '$82binary_subscr.4']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=86, inst=GET_ITER(arg=None, lineno=195)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$84call_function.5']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG end state. edges=[Edge(pc=88, stack=('$86get_iter.6',), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=88 nstack_initial=1)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack: ['$phi88.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=88, inst=FOR_ITER(arg=480, lineno=195)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi88.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG end state. edges=[Edge(pc=572, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=92, stack=('$phi88.0', '$88for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=572 nstack_initial=0), State(pc_initial=92 nstack_initial=2)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=572, inst=POP_BLOCK(arg=None, lineno=249)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG end state. edges=[Edge(pc=574, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=92 nstack_initial=2), State(pc_initial=574 nstack_initial=0)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack: ['$phi92.0', '$phi92.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=92, inst=STORE_FAST(arg=9, lineno=195)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi92.0', '$phi92.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=94, inst=LOAD_CONST(arg=3, lineno=196)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi92.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=96, inst=STORE_FAST(arg=10, lineno=196)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi92.0', '$const94.2']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=98, inst=LOAD_GLOBAL(arg=7, lineno=197)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi92.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=100, inst=STORE_FAST(arg=11, lineno=197)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi92.0', '$98load_global.3']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=102, inst=LOAD_CONST(arg=4, lineno=198)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi92.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=104, inst=STORE_FAST(arg=12, lineno=198)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi92.0', '$const102.4']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=106, inst=LOAD_FAST(arg=0, lineno=201)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi92.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=108, inst=LOAD_FAST(arg=9, lineno=201)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi92.0', '$distances106.5']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=110, inst=BINARY_SUBSCR(arg=None, lineno=201)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi92.0', '$distances106.5', '$i108.6']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=112, inst=STORE_FAST(arg=13, lineno=201)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi92.0', '$110binary_subscr.7']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=114, inst=LOAD_FAST(arg=13, lineno=202)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi92.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=116, inst=LOAD_FAST(arg=13, lineno=202)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi92.0', '$ith_distances114.8']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=118, inst=LOAD_CONST(arg=3, lineno=202)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi92.0', '$ith_distances114.8', '$ith_distances116.9']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=120, inst=COMPARE_OP(arg=4, lineno=202)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi92.0', '$ith_distances114.8', '$ith_distances116.9', '$const118.10']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=122, inst=BINARY_SUBSCR(arg=None, lineno=202)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi92.0', '$ith_distances114.8', '$120compare_op.11']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=124, inst=STORE_FAST(arg=14, lineno=202)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi92.0', '$122binary_subscr.12']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=126, inst=LOAD_FAST(arg=14, lineno=203)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi92.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=128, inst=LOAD_ATTR(arg=3, lineno=203)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi92.0', '$non_zero_dists126.13']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=130, inst=LOAD_CONST(arg=1, lineno=203)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi92.0', '$128load_attr.14']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=132, inst=BINARY_SUBSCR(arg=None, lineno=203)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi92.0', '$128load_attr.14', '$const130.15']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=134, inst=LOAD_FAST(arg=3, lineno=203)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi92.0', '$132binary_subscr.16']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=136, inst=COMPARE_OP(arg=5, lineno=203)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi92.0', '$132binary_subscr.16', '$local_connectivity134.17']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=138, inst=POP_JUMP_IF_FALSE(arg=250, lineno=203)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi92.0', '$136compare_op.18']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG end state. edges=[Edge(pc=140, stack=('$phi92.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=250, stack=('$phi92.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=574 nstack_initial=0), State(pc_initial=140 nstack_initial=1), State(pc_initial=250 nstack_initial=1)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=574, inst=LOAD_FAST(arg=7, lineno=251)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=576, inst=LOAD_FAST(arg=6, lineno=251)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$result574.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=578, inst=BUILD_TUPLE(arg=2, lineno=251)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$result574.0', '$rho576.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=580, inst=RETURN_VALUE(arg=None, lineno=251)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$578build_tuple.2']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=140 nstack_initial=1), State(pc_initial=250 nstack_initial=1)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack: ['$phi140.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=140, inst=LOAD_GLOBAL(arg=8, lineno=204)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi140.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=142, inst=LOAD_GLOBAL(arg=0, lineno=204)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi140.0', '$140load_global.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=144, inst=LOAD_METHOD(arg=9, lineno=204)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi140.0', '$140load_global.1', '$142load_global.2']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=146, inst=LOAD_FAST(arg=3, lineno=204)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi140.0', '$140load_global.1', '$144load_method.3']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=148, inst=CALL_METHOD(arg=1, lineno=204)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi140.0', '$140load_global.1', '$144load_method.3', '$local_connectivity146.4']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=150, inst=CALL_FUNCTION(arg=1, lineno=204)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi140.0', '$140load_global.1', '$148call_method.5']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=152, inst=STORE_FAST(arg=15, lineno=204)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi140.0', '$150call_function.6']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=154, inst=LOAD_FAST(arg=3, lineno=205)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi140.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=156, inst=LOAD_FAST(arg=15, lineno=205)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi140.0', '$local_connectivity154.7']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=158, inst=BINARY_SUBTRACT(arg=None, lineno=205)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi140.0', '$local_connectivity154.7', '$index156.8']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=160, inst=STORE_FAST(arg=16, lineno=205)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi140.0', '$158binary_subtract.9']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=162, inst=LOAD_FAST(arg=15, lineno=206)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi140.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=164, inst=LOAD_CONST(arg=1, lineno=206)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi140.0', '$index162.10']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=166, inst=COMPARE_OP(arg=4, lineno=206)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi140.0', '$index162.10', '$const164.11']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=168, inst=POP_JUMP_IF_FALSE(arg=232, lineno=206)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi140.0', '$166compare_op.12']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG end state. edges=[Edge(pc=170, stack=('$phi140.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=232, stack=('$phi140.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=250 nstack_initial=1), State(pc_initial=170 nstack_initial=1), State(pc_initial=232 nstack_initial=1)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack: ['$phi250.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=250, inst=LOAD_FAST(arg=14, lineno=214)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi250.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=252, inst=LOAD_ATTR(arg=3, lineno=214)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi250.0', '$non_zero_dists250.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=254, inst=LOAD_CONST(arg=1, lineno=214)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi250.0', '$252load_attr.2']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=256, inst=BINARY_SUBSCR(arg=None, lineno=214)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi250.0', '$252load_attr.2', '$const254.3']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=258, inst=LOAD_CONST(arg=1, lineno=214)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi250.0', '$256binary_subscr.4']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=260, inst=COMPARE_OP(arg=4, lineno=214)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi250.0', '$256binary_subscr.4', '$const258.5']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=262, inst=POP_JUMP_IF_FALSE(arg=280, lineno=214)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi250.0', '$260compare_op.6']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG end state. edges=[Edge(pc=266, stack=('$phi250.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=280, stack=('$phi250.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=170 nstack_initial=1), State(pc_initial=232 nstack_initial=1), State(pc_initial=266 nstack_initial=1), State(pc_initial=280 nstack_initial=1)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack: ['$phi170.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=170, inst=LOAD_FAST(arg=14, lineno=207)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi170.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=172, inst=LOAD_FAST(arg=15, lineno=207)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi170.0', '$non_zero_dists170.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=174, inst=LOAD_CONST(arg=5, lineno=207)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi170.0', '$non_zero_dists170.1', '$index172.2']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=176, inst=BINARY_SUBTRACT(arg=None, lineno=207)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi170.0', '$non_zero_dists170.1', '$index172.2', '$const174.3']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=178, inst=BINARY_SUBSCR(arg=None, lineno=207)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi170.0', '$non_zero_dists170.1', '$176binary_subtract.4']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=180, inst=LOAD_FAST(arg=6, lineno=207)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi170.0', '$178binary_subscr.5']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=182, inst=LOAD_FAST(arg=9, lineno=207)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi170.0', '$178binary_subscr.5', '$rho180.6']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=184, inst=STORE_SUBSCR(arg=None, lineno=207)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi170.0', '$178binary_subscr.5', '$rho180.6', '$i182.7']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=186, inst=LOAD_FAST(arg=16, lineno=208)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi170.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=188, inst=LOAD_GLOBAL(arg=10, lineno=208)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi170.0', '$interpolation186.8']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=190, inst=COMPARE_OP(arg=4, lineno=208)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi170.0', '$interpolation186.8', '$188load_global.9']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=192, inst=POP_JUMP_IF_FALSE(arg=248, lineno=208)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi170.0', '$190compare_op.10']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG end state. edges=[Edge(pc=194, stack=('$phi170.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=248, stack=('$phi170.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=232 nstack_initial=1), State(pc_initial=266 nstack_initial=1), State(pc_initial=280 nstack_initial=1), State(pc_initial=194 nstack_initial=1), State(pc_initial=248 nstack_initial=1)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack: ['$phi232.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=232, inst=LOAD_FAST(arg=16, lineno=213)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi232.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=234, inst=LOAD_FAST(arg=14, lineno=213)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi232.0', '$interpolation232.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=236, inst=LOAD_CONST(arg=1, lineno=213)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi232.0', '$interpolation232.1', '$non_zero_dists234.2']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=238, inst=BINARY_SUBSCR(arg=None, lineno=213)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi232.0', '$interpolation232.1', '$non_zero_dists234.2', '$const236.3']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=240, inst=BINARY_MULTIPLY(arg=None, lineno=213)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi232.0', '$interpolation232.1', '$238binary_subscr.4']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=242, inst=LOAD_FAST(arg=6, lineno=213)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi232.0', '$240binary_multiply.5']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=244, inst=LOAD_FAST(arg=9, lineno=213)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi232.0', '$240binary_multiply.5', '$rho242.6']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=246, inst=STORE_SUBSCR(arg=None, lineno=213)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi232.0', '$240binary_multiply.5', '$rho242.6', '$i244.7']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG end state. edges=[Edge(pc=248, stack=('$phi232.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=266 nstack_initial=1), State(pc_initial=280 nstack_initial=1), State(pc_initial=194 nstack_initial=1), State(pc_initial=248 nstack_initial=1), State(pc_initial=248 nstack_initial=1)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack: ['$phi266.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=266, inst=LOAD_GLOBAL(arg=0, lineno=215)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi266.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=268, inst=LOAD_METHOD(arg=11, lineno=215)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi266.0', '$266load_global.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=270, inst=LOAD_FAST(arg=14, lineno=215)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi266.0', '$268load_method.2']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=272, inst=CALL_METHOD(arg=1, lineno=215)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi266.0', '$268load_method.2', '$non_zero_dists270.3']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=274, inst=LOAD_FAST(arg=6, lineno=215)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi266.0', '$272call_method.4']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=276, inst=LOAD_FAST(arg=9, lineno=215)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi266.0', '$272call_method.4', '$rho274.5']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=278, inst=STORE_SUBSCR(arg=None, lineno=215)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi266.0', '$272call_method.4', '$rho274.5', '$i276.6']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG end state. edges=[Edge(pc=280, stack=('$phi266.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=280 nstack_initial=1), State(pc_initial=194 nstack_initial=1), State(pc_initial=248 nstack_initial=1), State(pc_initial=248 nstack_initial=1), State(pc_initial=280 nstack_initial=1)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack: ['$phi280.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=280, inst=SETUP_LOOP(arg=196, lineno=217)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi280.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=282, inst=LOAD_GLOBAL(arg=6, lineno=217)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi280.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=284, inst=LOAD_FAST(arg=2, lineno=217)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi280.0', '$282load_global.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=286, inst=CALL_FUNCTION(arg=1, lineno=217)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi280.0', '$282load_global.1', '$n_iter284.2']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=288, inst=GET_ITER(arg=None, lineno=217)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi280.0', '$286call_function.3']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG end state. edges=[Edge(pc=290, stack=('$phi280.0', '$288get_iter.4'), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 478, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=194 nstack_initial=1), State(pc_initial=248 nstack_initial=1), State(pc_initial=248 nstack_initial=1), State(pc_initial=280 nstack_initial=1), State(pc_initial=290 nstack_initial=2)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack: ['$phi194.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=194, inst=LOAD_FAST(arg=6, lineno=209)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi194.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=196, inst=LOAD_FAST(arg=9, lineno=209)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi194.0', '$rho194.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=198, inst=DUP_TOP_TWO(arg=None, lineno=209)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi194.0', '$rho194.1', '$i196.2']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=200, inst=BINARY_SUBSCR(arg=None, lineno=209)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi194.0', '$rho194.1', '$i196.2', '$198dup_top_two.3', '$198dup_top_two.4']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=202, inst=LOAD_FAST(arg=16, lineno=209)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi194.0', '$rho194.1', '$i196.2', '$200binary_subscr.5']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=204, inst=LOAD_FAST(arg=14, lineno=210)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi194.0', '$rho194.1', '$i196.2', '$200binary_subscr.5', '$interpolation202.6']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=206, inst=LOAD_FAST(arg=15, lineno=210)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi194.0', '$rho194.1', '$i196.2', '$200binary_subscr.5', '$interpolation202.6', '$non_zero_dists204.7']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=208, inst=BINARY_SUBSCR(arg=None, lineno=210)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi194.0', '$rho194.1', '$i196.2', '$200binary_subscr.5', '$interpolation202.6', '$non_zero_dists204.7', '$index206.8']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=210, inst=LOAD_FAST(arg=14, lineno=210)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi194.0', '$rho194.1', '$i196.2', '$200binary_subscr.5', '$interpolation202.6', '$208binary_subscr.9']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=212, inst=LOAD_FAST(arg=15, lineno=210)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi194.0', '$rho194.1', '$i196.2', '$200binary_subscr.5', '$interpolation202.6', '$208binary_subscr.9', '$non_zero_dists210.10']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=214, inst=LOAD_CONST(arg=5, lineno=210)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi194.0', '$rho194.1', '$i196.2', '$200binary_subscr.5', '$interpolation202.6', '$208binary_subscr.9', '$non_zero_dists210.10', '$index212.11']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=216, inst=BINARY_SUBTRACT(arg=None, lineno=210)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi194.0', '$rho194.1', '$i196.2', '$200binary_subscr.5', '$interpolation202.6', '$208binary_subscr.9', '$non_zero_dists210.10', '$index212.11', '$const214.12']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=218, inst=BINARY_SUBSCR(arg=None, lineno=210)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi194.0', '$rho194.1', '$i196.2', '$200binary_subscr.5', '$interpolation202.6', '$208binary_subscr.9', '$non_zero_dists210.10', '$216binary_subtract.13']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=220, inst=BINARY_SUBTRACT(arg=None, lineno=210)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi194.0', '$rho194.1', '$i196.2', '$200binary_subscr.5', '$interpolation202.6', '$208binary_subscr.9', '$218binary_subscr.14']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=222, inst=BINARY_MULTIPLY(arg=None, lineno=210)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi194.0', '$rho194.1', '$i196.2', '$200binary_subscr.5', '$interpolation202.6', '$220binary_subtract.15']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=224, inst=INPLACE_ADD(arg=None, lineno=210)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi194.0', '$rho194.1', '$i196.2', '$200binary_subscr.5', '$222binary_multiply.16']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=226, inst=ROT_THREE(arg=None, lineno=210)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi194.0', '$rho194.1', '$i196.2', '$224inplace_add.17']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=228, inst=STORE_SUBSCR(arg=None, lineno=210)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi194.0', '$224inplace_add.17', '$rho194.1', '$i196.2']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=230, inst=JUMP_FORWARD(arg=16, lineno=210)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi194.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG end state. edges=[Edge(pc=248, stack=('$phi194.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=248 nstack_initial=1), State(pc_initial=248 nstack_initial=1), State(pc_initial=280 nstack_initial=1), State(pc_initial=290 nstack_initial=2), State(pc_initial=248 nstack_initial=1)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack: ['$phi248.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=248, inst=JUMP_FORWARD(arg=30, lineno=213)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi248.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG end state. edges=[Edge(pc=280, stack=('$phi248.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=248 nstack_initial=1), State(pc_initial=280 nstack_initial=1), State(pc_initial=290 nstack_initial=2), State(pc_initial=248 nstack_initial=1), State(pc_initial=280 nstack_initial=1)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=280 nstack_initial=1), State(pc_initial=290 nstack_initial=2), State(pc_initial=248 nstack_initial=1), State(pc_initial=280 nstack_initial=1)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=290 nstack_initial=2), State(pc_initial=248 nstack_initial=1), State(pc_initial=280 nstack_initial=1)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack: ['$phi290.0', '$phi290.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=290, inst=FOR_ITER(arg=184, lineno=217)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi290.0', '$phi290.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG end state. edges=[Edge(pc=476, stack=('$phi290.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 478, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0), Edge(pc=292, stack=('$phi290.0', '$phi290.1', '$290for_iter.3'), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 478, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=248 nstack_initial=1), State(pc_initial=280 nstack_initial=1), State(pc_initial=476 nstack_initial=1), State(pc_initial=292 nstack_initial=3)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=280 nstack_initial=1), State(pc_initial=476 nstack_initial=1), State(pc_initial=292 nstack_initial=3)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=476 nstack_initial=1), State(pc_initial=292 nstack_initial=3)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack: ['$phi476.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=476, inst=POP_BLOCK(arg=None, lineno=238)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi476.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG end state. edges=[Edge(pc=478, stack=('$phi476.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=292 nstack_initial=3), State(pc_initial=478 nstack_initial=1)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack: ['$phi292.0', '$phi292.1', '$phi292.2']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=292, inst=STORE_FAST(arg=17, lineno=217)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi292.0', '$phi292.1', '$phi292.2']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=294, inst=LOAD_CONST(arg=3, lineno=219)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi292.0', '$phi292.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=296, inst=STORE_FAST(arg=18, lineno=219)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi292.0', '$phi292.1', '$const294.3']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG end state. edges=[Edge(pc=298, stack=('$phi292.0', '$phi292.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 478, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=478 nstack_initial=1), State(pc_initial=298 nstack_initial=2)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack: ['$phi478.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=478, inst=LOAD_FAST(arg=12, lineno=240)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi478.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=480, inst=LOAD_FAST(arg=7, lineno=240)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi478.0', '$mid478.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=482, inst=LOAD_FAST(arg=9, lineno=240)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi478.0', '$mid478.1', '$result480.2']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=484, inst=STORE_SUBSCR(arg=None, lineno=240)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi478.0', '$mid478.1', '$result480.2', '$i482.3']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=486, inst=LOAD_FAST(arg=6, lineno=243)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi478.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=488, inst=LOAD_FAST(arg=9, lineno=243)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi478.0', '$rho486.4']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=490, inst=BINARY_SUBSCR(arg=None, lineno=243)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi478.0', '$rho486.4', '$i488.5']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=492, inst=LOAD_CONST(arg=3, lineno=243)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi478.0', '$490binary_subscr.6']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=494, inst=COMPARE_OP(arg=4, lineno=243)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi478.0', '$490binary_subscr.6', '$const492.7']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=496, inst=POP_JUMP_IF_FALSE(arg=542, lineno=243)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi478.0', '$494compare_op.8']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG end state. edges=[Edge(pc=500, stack=('$phi478.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=542, stack=('$phi478.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=298 nstack_initial=2), State(pc_initial=500 nstack_initial=1), State(pc_initial=542 nstack_initial=1)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack: ['$phi298.0', '$phi298.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=298, inst=SETUP_LOOP(arg=86, lineno=220)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi298.0', '$phi298.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=300, inst=LOAD_GLOBAL(arg=6, lineno=220)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi298.0', '$phi298.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=302, inst=LOAD_CONST(arg=5, lineno=220)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi298.0', '$phi298.1', '$300load_global.2']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=304, inst=LOAD_FAST(arg=0, lineno=220)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi298.0', '$phi298.1', '$300load_global.2', '$const302.3']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=306, inst=LOAD_ATTR(arg=3, lineno=220)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi298.0', '$phi298.1', '$300load_global.2', '$const302.3', '$distances304.4']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=308, inst=LOAD_CONST(arg=5, lineno=220)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi298.0', '$phi298.1', '$300load_global.2', '$const302.3', '$306load_attr.5']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=310, inst=BINARY_SUBSCR(arg=None, lineno=220)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi298.0', '$phi298.1', '$300load_global.2', '$const302.3', '$306load_attr.5', '$const308.6']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=312, inst=CALL_FUNCTION(arg=2, lineno=220)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi298.0', '$phi298.1', '$300load_global.2', '$const302.3', '$310binary_subscr.7']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=314, inst=GET_ITER(arg=None, lineno=220)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi298.0', '$phi298.1', '$312call_function.8']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG end state. edges=[Edge(pc=316, stack=('$phi298.0', '$phi298.1', '$314get_iter.9'), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 478, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 386, 'entry_stack': 2, 'stack_depth': 2, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=500 nstack_initial=1), State(pc_initial=542 nstack_initial=1), State(pc_initial=316 nstack_initial=3)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack: ['$phi500.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=500, inst=LOAD_GLOBAL(arg=0, lineno=244)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi500.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=502, inst=LOAD_METHOD(arg=5, lineno=244)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi500.0', '$500load_global.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=504, inst=LOAD_FAST(arg=13, lineno=244)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi500.0', '$502load_method.2']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=506, inst=CALL_METHOD(arg=1, lineno=244)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi500.0', '$502load_method.2', '$ith_distances504.3']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=508, inst=STORE_FAST(arg=21, lineno=244)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi500.0', '$506call_method.4']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=510, inst=LOAD_FAST(arg=7, lineno=245)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi500.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=512, inst=LOAD_FAST(arg=9, lineno=245)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi500.0', '$result510.5']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=514, inst=BINARY_SUBSCR(arg=None, lineno=245)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi500.0', '$result510.5', '$i512.6']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=516, inst=LOAD_GLOBAL(arg=14, lineno=245)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi500.0', '$514binary_subscr.7']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=518, inst=LOAD_FAST(arg=21, lineno=245)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi500.0', '$514binary_subscr.7', '$516load_global.8']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=520, inst=BINARY_MULTIPLY(arg=None, lineno=245)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi500.0', '$514binary_subscr.7', '$516load_global.8', '$mean_ith_distances518.9']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=522, inst=COMPARE_OP(arg=0, lineno=245)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi500.0', '$514binary_subscr.7', '$520binary_multiply.10']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=524, inst=POP_JUMP_IF_FALSE(arg=570, lineno=245)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi500.0', '$522compare_op.11']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG end state. edges=[Edge(pc=528, stack=('$phi500.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=570, stack=('$phi500.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=542 nstack_initial=1), State(pc_initial=316 nstack_initial=3), State(pc_initial=528 nstack_initial=1), State(pc_initial=570 nstack_initial=1)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack: ['$phi542.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=542, inst=LOAD_FAST(arg=7, lineno=248)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi542.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=544, inst=LOAD_FAST(arg=9, lineno=248)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi542.0', '$result542.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=546, inst=BINARY_SUBSCR(arg=None, lineno=248)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi542.0', '$result542.1', '$i544.2']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=548, inst=LOAD_GLOBAL(arg=14, lineno=248)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi542.0', '$546binary_subscr.3']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=550, inst=LOAD_FAST(arg=8, lineno=248)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi542.0', '$546binary_subscr.3', '$548load_global.4']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=552, inst=BINARY_MULTIPLY(arg=None, lineno=248)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi542.0', '$546binary_subscr.3', '$548load_global.4', '$mean_distances550.5']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=554, inst=COMPARE_OP(arg=0, lineno=248)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi542.0', '$546binary_subscr.3', '$552binary_multiply.6']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=556, inst=POP_JUMP_IF_FALSE(arg=88, lineno=248)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi542.0', '$554compare_op.7']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG end state. edges=[Edge(pc=558, stack=('$phi542.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=88, stack=('$phi542.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=316 nstack_initial=3), State(pc_initial=528 nstack_initial=1), State(pc_initial=570 nstack_initial=1), State(pc_initial=558 nstack_initial=1), State(pc_initial=88 nstack_initial=1)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack: ['$phi316.0', '$phi316.1', '$phi316.2']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=316, inst=FOR_ITER(arg=66, lineno=220)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi316.0', '$phi316.1', '$phi316.2']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG end state. edges=[Edge(pc=384, stack=('$phi316.0', '$phi316.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 478, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 386, 'entry_stack': 2, 'stack_depth': 2, 'handler': None}), npush=0), Edge(pc=318, stack=('$phi316.0', '$phi316.1', '$phi316.2', '$316for_iter.4'), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 478, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 386, 'entry_stack': 2, 'stack_depth': 2, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=528 nstack_initial=1), State(pc_initial=570 nstack_initial=1), State(pc_initial=558 nstack_initial=1), State(pc_initial=88 nstack_initial=1), State(pc_initial=384 nstack_initial=2), State(pc_initial=318 nstack_initial=4)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack: ['$phi528.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=528, inst=LOAD_GLOBAL(arg=14, lineno=246)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi528.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=530, inst=LOAD_FAST(arg=21, lineno=246)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi528.0', '$528load_global.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=532, inst=BINARY_MULTIPLY(arg=None, lineno=246)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi528.0', '$528load_global.1', '$mean_ith_distances530.2']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=534, inst=LOAD_FAST(arg=7, lineno=246)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi528.0', '$532binary_multiply.3']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=536, inst=LOAD_FAST(arg=9, lineno=246)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi528.0', '$532binary_multiply.3', '$result534.4']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=538, inst=STORE_SUBSCR(arg=None, lineno=246)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi528.0', '$532binary_multiply.3', '$result534.4', '$i536.5']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=540, inst=JUMP_ABSOLUTE(arg=88, lineno=246)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi528.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG end state. edges=[Edge(pc=88, stack=('$phi528.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=570 nstack_initial=1), State(pc_initial=558 nstack_initial=1), State(pc_initial=88 nstack_initial=1), State(pc_initial=384 nstack_initial=2), State(pc_initial=318 nstack_initial=4), State(pc_initial=88 nstack_initial=1)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack: ['$phi570.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=570, inst=JUMP_ABSOLUTE(arg=88, lineno=249)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi570.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG end state. edges=[Edge(pc=88, stack=('$phi570.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=558 nstack_initial=1), State(pc_initial=88 nstack_initial=1), State(pc_initial=384 nstack_initial=2), State(pc_initial=318 nstack_initial=4), State(pc_initial=88 nstack_initial=1), State(pc_initial=88 nstack_initial=1)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack: ['$phi558.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=558, inst=LOAD_GLOBAL(arg=14, lineno=249)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi558.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=560, inst=LOAD_FAST(arg=8, lineno=249)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi558.0', '$558load_global.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=562, inst=BINARY_MULTIPLY(arg=None, lineno=249)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi558.0', '$558load_global.1', '$mean_distances560.2']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=564, inst=LOAD_FAST(arg=7, lineno=249)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi558.0', '$562binary_multiply.3']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=566, inst=LOAD_FAST(arg=9, lineno=249)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi558.0', '$562binary_multiply.3', '$result564.4']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=568, inst=STORE_SUBSCR(arg=None, lineno=249)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi558.0', '$562binary_multiply.3', '$result564.4', '$i566.5']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG end state. edges=[Edge(pc=570, stack=('$phi558.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=88 nstack_initial=1), State(pc_initial=384 nstack_initial=2), State(pc_initial=318 nstack_initial=4), State(pc_initial=88 nstack_initial=1), State(pc_initial=88 nstack_initial=1), State(pc_initial=570 nstack_initial=1)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=384 nstack_initial=2), State(pc_initial=318 nstack_initial=4), State(pc_initial=88 nstack_initial=1), State(pc_initial=88 nstack_initial=1), State(pc_initial=570 nstack_initial=1)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack: ['$phi384.0', '$phi384.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=384, inst=POP_BLOCK(arg=None, lineno=225)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi384.0', '$phi384.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG end state. edges=[Edge(pc=386, stack=('$phi384.0', '$phi384.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 478, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=318 nstack_initial=4), State(pc_initial=88 nstack_initial=1), State(pc_initial=88 nstack_initial=1), State(pc_initial=570 nstack_initial=1), State(pc_initial=386 nstack_initial=2)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack: ['$phi318.0', '$phi318.1', '$phi318.2', '$phi318.3']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=318, inst=STORE_FAST(arg=19, lineno=220)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi318.0', '$phi318.1', '$phi318.2', '$phi318.3']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=320, inst=LOAD_FAST(arg=0, lineno=221)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi318.0', '$phi318.1', '$phi318.2']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=322, inst=LOAD_FAST(arg=9, lineno=221)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi318.0', '$phi318.1', '$phi318.2', '$distances320.4']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=324, inst=LOAD_FAST(arg=19, lineno=221)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi318.0', '$phi318.1', '$phi318.2', '$distances320.4', '$i322.5']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=326, inst=BUILD_TUPLE(arg=2, lineno=221)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi318.0', '$phi318.1', '$phi318.2', '$distances320.4', '$i322.5', '$j324.6']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=328, inst=BINARY_SUBSCR(arg=None, lineno=221)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi318.0', '$phi318.1', '$phi318.2', '$distances320.4', '$326build_tuple.7']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=330, inst=LOAD_FAST(arg=6, lineno=221)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi318.0', '$phi318.1', '$phi318.2', '$328binary_subscr.8']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=332, inst=LOAD_FAST(arg=9, lineno=221)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi318.0', '$phi318.1', '$phi318.2', '$328binary_subscr.8', '$rho330.9']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=334, inst=BINARY_SUBSCR(arg=None, lineno=221)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi318.0', '$phi318.1', '$phi318.2', '$328binary_subscr.8', '$rho330.9', '$i332.10']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=336, inst=BINARY_SUBTRACT(arg=None, lineno=221)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi318.0', '$phi318.1', '$phi318.2', '$328binary_subscr.8', '$334binary_subscr.11']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=338, inst=STORE_FAST(arg=20, lineno=221)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi318.0', '$phi318.1', '$phi318.2', '$336binary_subtract.12']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=340, inst=LOAD_FAST(arg=20, lineno=222)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi318.0', '$phi318.1', '$phi318.2']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=342, inst=LOAD_CONST(arg=1, lineno=222)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi318.0', '$phi318.1', '$phi318.2', '$d340.13']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=344, inst=COMPARE_OP(arg=4, lineno=222)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi318.0', '$phi318.1', '$phi318.2', '$d340.13', '$const342.14']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=346, inst=POP_JUMP_IF_FALSE(arg=372, lineno=222)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi318.0', '$phi318.1', '$phi318.2', '$344compare_op.15']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG end state. edges=[Edge(pc=350, stack=('$phi318.0', '$phi318.1', '$phi318.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 478, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 386, 'entry_stack': 2, 'stack_depth': 2, 'handler': None}), npush=0), Edge(pc=372, stack=('$phi318.0', '$phi318.1', '$phi318.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 478, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 386, 'entry_stack': 2, 'stack_depth': 2, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=88 nstack_initial=1), State(pc_initial=88 nstack_initial=1), State(pc_initial=570 nstack_initial=1), State(pc_initial=386 nstack_initial=2), State(pc_initial=350 nstack_initial=3), State(pc_initial=372 nstack_initial=3)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=88 nstack_initial=1), State(pc_initial=570 nstack_initial=1), State(pc_initial=386 nstack_initial=2), State(pc_initial=350 nstack_initial=3), State(pc_initial=372 nstack_initial=3)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=570 nstack_initial=1), State(pc_initial=386 nstack_initial=2), State(pc_initial=350 nstack_initial=3), State(pc_initial=372 nstack_initial=3)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=386 nstack_initial=2), State(pc_initial=350 nstack_initial=3), State(pc_initial=372 nstack_initial=3)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack: ['$phi386.0', '$phi386.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=386, inst=LOAD_GLOBAL(arg=0, lineno=227)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi386.0', '$phi386.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=388, inst=LOAD_METHOD(arg=13, lineno=227)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi386.0', '$phi386.1', '$386load_global.2']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=390, inst=LOAD_FAST(arg=18, lineno=227)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi386.0', '$phi386.1', '$388load_method.3']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=392, inst=LOAD_FAST(arg=5, lineno=227)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi386.0', '$phi386.1', '$388load_method.3', '$psum390.4']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=394, inst=BINARY_SUBTRACT(arg=None, lineno=227)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi386.0', '$phi386.1', '$388load_method.3', '$psum390.4', '$target392.5']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=396, inst=CALL_METHOD(arg=1, lineno=227)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi386.0', '$phi386.1', '$388load_method.3', '$394binary_subtract.6']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=398, inst=LOAD_GLOBAL(arg=10, lineno=227)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi386.0', '$phi386.1', '$396call_method.7']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=400, inst=COMPARE_OP(arg=0, lineno=227)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi386.0', '$phi386.1', '$396call_method.7', '$398load_global.8']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=402, inst=POP_JUMP_IF_FALSE(arg=408, lineno=227)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi386.0', '$phi386.1', '$400compare_op.9']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG end state. edges=[Edge(pc=406, stack=('$phi386.0', '$phi386.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 478, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0), Edge(pc=408, stack=('$phi386.0', '$phi386.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 478, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=350 nstack_initial=3), State(pc_initial=372 nstack_initial=3), State(pc_initial=406 nstack_initial=2), State(pc_initial=408 nstack_initial=2)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack: ['$phi350.0', '$phi350.1', '$phi350.2']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=350, inst=LOAD_FAST(arg=18, lineno=223)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi350.0', '$phi350.1', '$phi350.2']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=352, inst=LOAD_GLOBAL(arg=0, lineno=223)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi350.0', '$phi350.1', '$phi350.2', '$psum350.3']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=354, inst=LOAD_METHOD(arg=12, lineno=223)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi350.0', '$phi350.1', '$phi350.2', '$psum350.3', '$352load_global.4']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=356, inst=LOAD_FAST(arg=20, lineno=223)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi350.0', '$phi350.1', '$phi350.2', '$psum350.3', '$354load_method.5']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=358, inst=LOAD_FAST(arg=12, lineno=223)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi350.0', '$phi350.1', '$phi350.2', '$psum350.3', '$354load_method.5', '$d356.6']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=360, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=223)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi350.0', '$phi350.1', '$phi350.2', '$psum350.3', '$354load_method.5', '$d356.6', '$mid358.7']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=362, inst=UNARY_NEGATIVE(arg=None, lineno=223)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi350.0', '$phi350.1', '$phi350.2', '$psum350.3', '$354load_method.5', '$360binary_true_divide.8']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=364, inst=CALL_METHOD(arg=1, lineno=223)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi350.0', '$phi350.1', '$phi350.2', '$psum350.3', '$354load_method.5', '$362unary_negative.9']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=366, inst=INPLACE_ADD(arg=None, lineno=223)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi350.0', '$phi350.1', '$phi350.2', '$psum350.3', '$364call_method.10']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=368, inst=STORE_FAST(arg=18, lineno=223)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi350.0', '$phi350.1', '$phi350.2', '$366inplace_add.11']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=370, inst=JUMP_FORWARD(arg=8, lineno=223)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi350.0', '$phi350.1', '$phi350.2']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG end state. edges=[Edge(pc=380, stack=('$phi350.0', '$phi350.1', '$phi350.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 478, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 386, 'entry_stack': 2, 'stack_depth': 2, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=372 nstack_initial=3), State(pc_initial=406 nstack_initial=2), State(pc_initial=408 nstack_initial=2), State(pc_initial=380 nstack_initial=3)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack: ['$phi372.0', '$phi372.1', '$phi372.2']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=372, inst=LOAD_FAST(arg=18, lineno=225)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi372.0', '$phi372.1', '$phi372.2']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=374, inst=LOAD_CONST(arg=4, lineno=225)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi372.0', '$phi372.1', '$phi372.2', '$psum372.3']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=376, inst=INPLACE_ADD(arg=None, lineno=225)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi372.0', '$phi372.1', '$phi372.2', '$psum372.3', '$const374.4']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=378, inst=STORE_FAST(arg=18, lineno=225)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi372.0', '$phi372.1', '$phi372.2', '$376inplace_add.5']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG end state. edges=[Edge(pc=380, stack=('$phi372.0', '$phi372.1', '$phi372.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 478, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 386, 'entry_stack': 2, 'stack_depth': 2, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=406 nstack_initial=2), State(pc_initial=408 nstack_initial=2), State(pc_initial=380 nstack_initial=3), State(pc_initial=380 nstack_initial=3)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack: ['$phi406.0', '$phi406.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=406, inst=BREAK_LOOP(arg=None, lineno=228)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi406.0', '$phi406.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG end state. edges=[Edge(pc=478, stack=('$phi406.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=408 nstack_initial=2), State(pc_initial=380 nstack_initial=3), State(pc_initial=380 nstack_initial=3), State(pc_initial=478 nstack_initial=1)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack: ['$phi408.0', '$phi408.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=408, inst=LOAD_FAST(arg=18, lineno=230)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi408.0', '$phi408.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=410, inst=LOAD_FAST(arg=5, lineno=230)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi408.0', '$phi408.1', '$psum408.2']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=412, inst=COMPARE_OP(arg=4, lineno=230)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi408.0', '$phi408.1', '$psum408.2', '$target410.3']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=414, inst=POP_JUMP_IF_FALSE(arg=436, lineno=230)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi408.0', '$phi408.1', '$412compare_op.4']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG end state. edges=[Edge(pc=418, stack=('$phi408.0', '$phi408.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 478, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0), Edge(pc=436, stack=('$phi408.0', '$phi408.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 478, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=380 nstack_initial=3), State(pc_initial=380 nstack_initial=3), State(pc_initial=478 nstack_initial=1), State(pc_initial=418 nstack_initial=2), State(pc_initial=436 nstack_initial=2)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack: ['$phi380.0', '$phi380.1', '$phi380.2']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=380, inst=JUMP_ABSOLUTE(arg=316, lineno=225)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi380.0', '$phi380.1', '$phi380.2']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG end state. edges=[Edge(pc=316, stack=('$phi380.0', '$phi380.1', '$phi380.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 478, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 386, 'entry_stack': 2, 'stack_depth': 2, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=380 nstack_initial=3), State(pc_initial=478 nstack_initial=1), State(pc_initial=418 nstack_initial=2), State(pc_initial=436 nstack_initial=2), State(pc_initial=316 nstack_initial=3)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=478 nstack_initial=1), State(pc_initial=418 nstack_initial=2), State(pc_initial=436 nstack_initial=2), State(pc_initial=316 nstack_initial=3)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=418 nstack_initial=2), State(pc_initial=436 nstack_initial=2), State(pc_initial=316 nstack_initial=3)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack: ['$phi418.0', '$phi418.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=418, inst=LOAD_FAST(arg=12, lineno=231)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi418.0', '$phi418.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=420, inst=STORE_FAST(arg=11, lineno=231)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi418.0', '$phi418.1', '$mid418.2']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=422, inst=LOAD_FAST(arg=10, lineno=232)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi418.0', '$phi418.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=424, inst=LOAD_FAST(arg=11, lineno=232)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi418.0', '$phi418.1', '$lo422.3']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=426, inst=BINARY_ADD(arg=None, lineno=232)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi418.0', '$phi418.1', '$lo422.3', '$hi424.4']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=428, inst=LOAD_CONST(arg=6, lineno=232)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi418.0', '$phi418.1', '$426binary_add.5']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=430, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=232)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi418.0', '$phi418.1', '$426binary_add.5', '$const428.6']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=432, inst=STORE_FAST(arg=12, lineno=232)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi418.0', '$phi418.1', '$430binary_true_divide.7']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=434, inst=JUMP_FORWARD(arg=36, lineno=232)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi418.0', '$phi418.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG end state. edges=[Edge(pc=472, stack=('$phi418.0', '$phi418.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 478, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=436 nstack_initial=2), State(pc_initial=316 nstack_initial=3), State(pc_initial=472 nstack_initial=2)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack: ['$phi436.0', '$phi436.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=436, inst=LOAD_FAST(arg=12, lineno=234)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi436.0', '$phi436.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=438, inst=STORE_FAST(arg=10, lineno=234)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi436.0', '$phi436.1', '$mid436.2']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=440, inst=LOAD_FAST(arg=11, lineno=235)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi436.0', '$phi436.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=442, inst=LOAD_GLOBAL(arg=7, lineno=235)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi436.0', '$phi436.1', '$hi440.3']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=444, inst=COMPARE_OP(arg=2, lineno=235)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi436.0', '$phi436.1', '$hi440.3', '$442load_global.4']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=446, inst=POP_JUMP_IF_FALSE(arg=460, lineno=235)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi436.0', '$phi436.1', '$444compare_op.5']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG end state. edges=[Edge(pc=450, stack=('$phi436.0', '$phi436.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 478, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0), Edge(pc=460, stack=('$phi436.0', '$phi436.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 478, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=316 nstack_initial=3), State(pc_initial=472 nstack_initial=2), State(pc_initial=450 nstack_initial=2), State(pc_initial=460 nstack_initial=2)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=472 nstack_initial=2), State(pc_initial=450 nstack_initial=2), State(pc_initial=460 nstack_initial=2)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack: ['$phi472.0', '$phi472.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=472, inst=JUMP_ABSOLUTE(arg=290, lineno=238)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi472.0', '$phi472.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG end state. edges=[Edge(pc=290, stack=('$phi472.0', '$phi472.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 478, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=450 nstack_initial=2), State(pc_initial=460 nstack_initial=2), State(pc_initial=290 nstack_initial=2)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack: ['$phi450.0', '$phi450.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=450, inst=LOAD_FAST(arg=12, lineno=236)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi450.0', '$phi450.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=452, inst=LOAD_CONST(arg=7, lineno=236)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi450.0', '$phi450.1', '$mid450.2']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=454, inst=INPLACE_MULTIPLY(arg=None, lineno=236)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi450.0', '$phi450.1', '$mid450.2', '$const452.3']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=456, inst=STORE_FAST(arg=12, lineno=236)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi450.0', '$phi450.1', '$454inplace_multiply.4']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=458, inst=JUMP_FORWARD(arg=12, lineno=236)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi450.0', '$phi450.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG end state. edges=[Edge(pc=472, stack=('$phi450.0', '$phi450.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 478, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=460 nstack_initial=2), State(pc_initial=290 nstack_initial=2), State(pc_initial=472 nstack_initial=2)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack: ['$phi460.0', '$phi460.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=460, inst=LOAD_FAST(arg=10, lineno=238)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi460.0', '$phi460.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=462, inst=LOAD_FAST(arg=11, lineno=238)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi460.0', '$phi460.1', '$lo460.2']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=464, inst=BINARY_ADD(arg=None, lineno=238)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi460.0', '$phi460.1', '$lo460.2', '$hi462.3']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=466, inst=LOAD_CONST(arg=6, lineno=238)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi460.0', '$phi460.1', '$464binary_add.4']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=468, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=238)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi460.0', '$phi460.1', '$464binary_add.4', '$const466.5']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=470, inst=STORE_FAST(arg=12, lineno=238)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$phi460.0', '$phi460.1', '$468binary_true_divide.6']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG end state. edges=[Edge(pc=472, stack=('$phi460.0', '$phi460.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 478, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=290 nstack_initial=2), State(pc_initial=472 nstack_initial=2), State(pc_initial=472 nstack_initial=2)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=472 nstack_initial=2), State(pc_initial=472 nstack_initial=2)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=472 nstack_initial=2)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG -------------------------Prune PHIs-------------------------
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=1): {'$phi88.0'},
             State(pc_initial=92 nstack_initial=2): {'$phi92.1'},
             State(pc_initial=140 nstack_initial=1): set(),
             State(pc_initial=170 nstack_initial=1): set(),
             State(pc_initial=194 nstack_initial=1): set(),
             State(pc_initial=232 nstack_initial=1): set(),
             State(pc_initial=248 nstack_initial=1): set(),
             State(pc_initial=250 nstack_initial=1): set(),
             State(pc_initial=266 nstack_initial=1): set(),
             State(pc_initial=280 nstack_initial=1): set(),
             State(pc_initial=290 nstack_initial=2): {'$phi290.1'},
             State(pc_initial=292 nstack_initial=3): {'$phi292.2'},
             State(pc_initial=298 nstack_initial=2): set(),
             State(pc_initial=316 nstack_initial=3): {'$phi316.2'},
             State(pc_initial=318 nstack_initial=4): {'$phi318.3'},
             State(pc_initial=350 nstack_initial=3): set(),
             State(pc_initial=372 nstack_initial=3): set(),
             State(pc_initial=380 nstack_initial=3): set(),
             State(pc_initial=384 nstack_initial=2): set(),
             State(pc_initial=386 nstack_initial=2): set(),
             State(pc_initial=406 nstack_initial=2): set(),
             State(pc_initial=408 nstack_initial=2): set(),
             State(pc_initial=418 nstack_initial=2): set(),
             State(pc_initial=436 nstack_initial=2): set(),
             State(pc_initial=450 nstack_initial=2): set(),
             State(pc_initial=460 nstack_initial=2): set(),
             State(pc_initial=472 nstack_initial=2): set(),
             State(pc_initial=476 nstack_initial=1): set(),
             State(pc_initial=478 nstack_initial=1): set(),
             State(pc_initial=500 nstack_initial=1): set(),
             State(pc_initial=528 nstack_initial=1): set(),
             State(pc_initial=542 nstack_initial=1): set(),
             State(pc_initial=558 nstack_initial=1): set(),
             State(pc_initial=570 nstack_initial=1): set(),
             State(pc_initial=572 nstack_initial=0): set(),
             State(pc_initial=574 nstack_initial=0): set()})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG defmap: {'$phi290.1': State(pc_initial=280 nstack_initial=1),
 '$phi292.2': State(pc_initial=290 nstack_initial=2),
 '$phi316.2': State(pc_initial=298 nstack_initial=2),
 '$phi318.3': State(pc_initial=316 nstack_initial=3),
 '$phi88.0': State(pc_initial=70 nstack_initial=0),
 '$phi92.1': State(pc_initial=88 nstack_initial=1)}
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi140.0': {('$phi92.0', State(pc_initial=92 nstack_initial=2))},
             '$phi170.0': {('$phi140.0',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi194.0': {('$phi170.0',
                            State(pc_initial=170 nstack_initial=1))},
             '$phi232.0': {('$phi140.0',
                            State(pc_initial=140 nstack_initial=1))},
             '$phi248.0': {('$phi170.0',
                            State(pc_initial=170 nstack_initial=1)),
                           ('$phi194.0',
                            State(pc_initial=194 nstack_initial=1)),
                           ('$phi232.0',
                            State(pc_initial=232 nstack_initial=1))},
             '$phi250.0': {('$phi92.0', State(pc_initial=92 nstack_initial=2))},
             '$phi266.0': {('$phi250.0',
                            State(pc_initial=250 nstack_initial=1))},
             '$phi280.0': {('$phi248.0',
                            State(pc_initial=248 nstack_initial=1)),
                           ('$phi250.0',
                            State(pc_initial=250 nstack_initial=1)),
                           ('$phi266.0',
                            State(pc_initial=266 nstack_initial=1))},
             '$phi290.0': {('$phi280.0',
                            State(pc_initial=280 nstack_initial=1)),
                           ('$phi472.0',
                            State(pc_initial=472 nstack_initial=2))},
             '$phi290.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1)),
                           ('$phi472.1',
                            State(pc_initial=472 nstack_initial=2))},
             '$phi292.0': {('$phi290.0',
                            State(pc_initial=290 nstack_initial=2))},
             '$phi292.1': {('$phi290.1',
                            State(pc_initial=290 nstack_initial=2))},
             '$phi292.2': {('$290for_iter.3',
                            State(pc_initial=290 nstack_initial=2))},
             '$phi298.0': {('$phi292.0',
                            State(pc_initial=292 nstack_initial=3))},
             '$phi298.1': {('$phi292.1',
                            State(pc_initial=292 nstack_initial=3))},
             '$phi316.0': {('$phi298.0',
                            State(pc_initial=298 nstack_initial=2)),
                           ('$phi380.0',
                            State(pc_initial=380 nstack_initial=3))},
             '$phi316.1': {('$phi298.1',
                            State(pc_initial=298 nstack_initial=2)),
                           ('$phi380.1',
                            State(pc_initial=380 nstack_initial=3))},
             '$phi316.2': {('$314get_iter.9',
                            State(pc_initial=298 nstack_initial=2)),
                           ('$phi380.2',
                            State(pc_initial=380 nstack_initial=3))},
             '$phi318.0': {('$phi316.0',
                            State(pc_initial=316 nstack_initial=3))},
             '$phi318.1': {('$phi316.1',
                            State(pc_initial=316 nstack_initial=3))},
             '$phi318.2': {('$phi316.2',
                            State(pc_initial=316 nstack_initial=3))},
             '$phi318.3': {('$316for_iter.4',
                            State(pc_initial=316 nstack_initial=3))},
             '$phi350.0': {('$phi318.0',
                            State(pc_initial=318 nstack_initial=4))},
             '$phi350.1': {('$phi318.1',
                            State(pc_initial=318 nstack_initial=4))},
             '$phi350.2': {('$phi318.2',
                            State(pc_initial=318 nstack_initial=4))},
             '$phi372.0': {('$phi318.0',
                            State(pc_initial=318 nstack_initial=4))},
             '$phi372.1': {('$phi318.1',
                            State(pc_initial=318 nstack_initial=4))},
             '$phi372.2': {('$phi318.2',
                            State(pc_initial=318 nstack_initial=4))},
             '$phi380.0': {('$phi350.0',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.0',
                            State(pc_initial=372 nstack_initial=3))},
             '$phi380.1': {('$phi350.1',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.1',
                            State(pc_initial=372 nstack_initial=3))},
             '$phi380.2': {('$phi350.2',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.2',
                            State(pc_initial=372 nstack_initial=3))},
             '$phi384.0': {('$phi316.0',
                            State(pc_initial=316 nstack_initial=3))},
             '$phi384.1': {('$phi316.1',
                            State(pc_initial=316 nstack_initial=3))},
             '$phi386.0': {('$phi384.0',
                            State(pc_initial=384 nstack_initial=2))},
             '$phi386.1': {('$phi384.1',
                            State(pc_initial=384 nstack_initial=2))},
             '$phi406.0': {('$phi386.0',
                            State(pc_initial=386 nstack_initial=2))},
             '$phi406.1': {('$phi386.1',
                            State(pc_initial=386 nstack_initial=2))},
             '$phi408.0': {('$phi386.0',
                            State(pc_initial=386 nstack_initial=2))},
             '$phi408.1': {('$phi386.1',
                            State(pc_initial=386 nstack_initial=2))},
             '$phi418.0': {('$phi408.0',
                            State(pc_initial=408 nstack_initial=2))},
             '$phi418.1': {('$phi408.1',
                            State(pc_initial=408 nstack_initial=2))},
             '$phi436.0': {('$phi408.0',
                            State(pc_initial=408 nstack_initial=2))},
             '$phi436.1': {('$phi408.1',
                            State(pc_initial=408 nstack_initial=2))},
             '$phi450.0': {('$phi436.0',
                            State(pc_initial=436 nstack_initial=2))},
             '$phi450.1': {('$phi436.1',
                            State(pc_initial=436 nstack_initial=2))},
             '$phi460.0': {('$phi436.0',
                            State(pc_initial=436 nstack_initial=2))},
             '$phi460.1': {('$phi436.1',
                            State(pc_initial=436 nstack_initial=2))},
             '$phi472.0': {('$phi418.0',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.0',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.0',
                            State(pc_initial=460 nstack_initial=2))},
             '$phi472.1': {('$phi418.1',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.1',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.1',
                            State(pc_initial=460 nstack_initial=2))},
             '$phi476.0': {('$phi290.0',
                            State(pc_initial=290 nstack_initial=2))},
             '$phi478.0': {('$phi406.0',
                            State(pc_initial=406 nstack_initial=2)),
                           ('$phi476.0',
                            State(pc_initial=476 nstack_initial=1))},
             '$phi500.0': {('$phi478.0',
                            State(pc_initial=478 nstack_initial=1))},
             '$phi528.0': {('$phi500.0',
                            State(pc_initial=500 nstack_initial=1))},
             '$phi542.0': {('$phi478.0',
                            State(pc_initial=478 nstack_initial=1))},
             '$phi558.0': {('$phi542.0',
                            State(pc_initial=542 nstack_initial=1))},
             '$phi570.0': {('$phi500.0',
                            State(pc_initial=500 nstack_initial=1)),
                           ('$phi558.0',
                            State(pc_initial=558 nstack_initial=1))},
             '$phi88.0': {('$86get_iter.6',
                           State(pc_initial=70 nstack_initial=0)),
                          ('$phi528.0', State(pc_initial=528 nstack_initial=1)),
                          ('$phi542.0', State(pc_initial=542 nstack_initial=1)),
                          ('$phi570.0',
                           State(pc_initial=570 nstack_initial=1))},
             '$phi92.0': {('$phi88.0', State(pc_initial=88 nstack_initial=1))},
             '$phi92.1': {('$88for_iter.2',
                           State(pc_initial=88 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi140.0': {('$phi88.0', State(pc_initial=88 nstack_initial=1))},
             '$phi170.0': {('$phi88.0', State(pc_initial=88 nstack_initial=1))},
             '$phi194.0': {('$phi88.0', State(pc_initial=88 nstack_initial=1))},
             '$phi232.0': {('$phi88.0', State(pc_initial=88 nstack_initial=1))},
             '$phi248.0': {('$phi88.0', State(pc_initial=88 nstack_initial=1))},
             '$phi250.0': {('$phi88.0', State(pc_initial=88 nstack_initial=1))},
             '$phi266.0': {('$phi88.0', State(pc_initial=88 nstack_initial=1))},
             '$phi280.0': {('$phi88.0', State(pc_initial=88 nstack_initial=1))},
             '$phi290.0': {('$phi418.0',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.0',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.0',
                            State(pc_initial=460 nstack_initial=2)),
                           ('$phi88.0', State(pc_initial=88 nstack_initial=1))},
             '$phi290.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1)),
                           ('$phi418.1',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.1',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.1',
                            State(pc_initial=460 nstack_initial=2))},
             '$phi292.0': {('$phi418.0',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.0',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.0',
                            State(pc_initial=460 nstack_initial=2)),
                           ('$phi88.0', State(pc_initial=88 nstack_initial=1))},
             '$phi292.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1)),
                           ('$phi418.1',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.1',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.1',
                            State(pc_initial=460 nstack_initial=2))},
             '$phi292.2': {('$290for_iter.3',
                            State(pc_initial=290 nstack_initial=2))},
             '$phi298.0': {('$phi418.0',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.0',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.0',
                            State(pc_initial=460 nstack_initial=2)),
                           ('$phi88.0', State(pc_initial=88 nstack_initial=1))},
             '$phi298.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1)),
                           ('$phi418.1',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.1',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.1',
                            State(pc_initial=460 nstack_initial=2))},
             '$phi316.0': {('$phi350.0',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.0',
                            State(pc_initial=372 nstack_initial=3)),
                           ('$phi418.0',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.0',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.0',
                            State(pc_initial=460 nstack_initial=2)),
                           ('$phi88.0', State(pc_initial=88 nstack_initial=1))},
             '$phi316.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1)),
                           ('$phi350.1',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.1',
                            State(pc_initial=372 nstack_initial=3)),
                           ('$phi418.1',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.1',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.1',
                            State(pc_initial=460 nstack_initial=2))},
             '$phi316.2': {('$314get_iter.9',
                            State(pc_initial=298 nstack_initial=2)),
                           ('$phi350.2',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.2',
                            State(pc_initial=372 nstack_initial=3))},
             '$phi318.0': {('$phi350.0',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.0',
                            State(pc_initial=372 nstack_initial=3)),
                           ('$phi418.0',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.0',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.0',
                            State(pc_initial=460 nstack_initial=2)),
                           ('$phi88.0', State(pc_initial=88 nstack_initial=1))},
             '$phi318.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1)),
                           ('$phi350.1',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.1',
                            State(pc_initial=372 nstack_initial=3)),
                           ('$phi418.1',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.1',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.1',
                            State(pc_initial=460 nstack_initial=2))},
             '$phi318.2': {('$314get_iter.9',
                            State(pc_initial=298 nstack_initial=2)),
                           ('$phi350.2',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.2',
                            State(pc_initial=372 nstack_initial=3))},
             '$phi318.3': {('$316for_iter.4',
                            State(pc_initial=316 nstack_initial=3))},
             '$phi350.0': {('$phi350.0',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.0',
                            State(pc_initial=372 nstack_initial=3)),
                           ('$phi418.0',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.0',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.0',
                            State(pc_initial=460 nstack_initial=2)),
                           ('$phi88.0', State(pc_initial=88 nstack_initial=1))},
             '$phi350.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1)),
                           ('$phi350.1',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.1',
                            State(pc_initial=372 nstack_initial=3)),
                           ('$phi418.1',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.1',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.1',
                            State(pc_initial=460 nstack_initial=2))},
             '$phi350.2': {('$314get_iter.9',
                            State(pc_initial=298 nstack_initial=2)),
                           ('$phi350.2',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.2',
                            State(pc_initial=372 nstack_initial=3))},
             '$phi372.0': {('$phi350.0',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.0',
                            State(pc_initial=372 nstack_initial=3)),
                           ('$phi418.0',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.0',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.0',
                            State(pc_initial=460 nstack_initial=2)),
                           ('$phi88.0', State(pc_initial=88 nstack_initial=1))},
             '$phi372.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1)),
                           ('$phi350.1',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.1',
                            State(pc_initial=372 nstack_initial=3)),
                           ('$phi418.1',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.1',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.1',
                            State(pc_initial=460 nstack_initial=2))},
             '$phi372.2': {('$314get_iter.9',
                            State(pc_initial=298 nstack_initial=2)),
                           ('$phi350.2',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.2',
                            State(pc_initial=372 nstack_initial=3))},
             '$phi380.0': {('$phi418.0',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.0',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.0',
                            State(pc_initial=460 nstack_initial=2)),
                           ('$phi88.0', State(pc_initial=88 nstack_initial=1))},
             '$phi380.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1)),
                           ('$phi418.1',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.1',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.1',
                            State(pc_initial=460 nstack_initial=2))},
             '$phi380.2': {('$314get_iter.9',
                            State(pc_initial=298 nstack_initial=2))},
             '$phi384.0': {('$phi350.0',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.0',
                            State(pc_initial=372 nstack_initial=3)),
                           ('$phi418.0',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.0',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.0',
                            State(pc_initial=460 nstack_initial=2)),
                           ('$phi88.0', State(pc_initial=88 nstack_initial=1))},
             '$phi384.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1)),
                           ('$phi350.1',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.1',
                            State(pc_initial=372 nstack_initial=3)),
                           ('$phi418.1',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.1',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.1',
                            State(pc_initial=460 nstack_initial=2))},
             '$phi386.0': {('$phi350.0',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.0',
                            State(pc_initial=372 nstack_initial=3)),
                           ('$phi418.0',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.0',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.0',
                            State(pc_initial=460 nstack_initial=2)),
                           ('$phi88.0', State(pc_initial=88 nstack_initial=1))},
             '$phi386.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1)),
                           ('$phi350.1',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.1',
                            State(pc_initial=372 nstack_initial=3)),
                           ('$phi418.1',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.1',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.1',
                            State(pc_initial=460 nstack_initial=2))},
             '$phi406.0': {('$phi350.0',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.0',
                            State(pc_initial=372 nstack_initial=3)),
                           ('$phi418.0',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.0',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.0',
                            State(pc_initial=460 nstack_initial=2)),
                           ('$phi88.0', State(pc_initial=88 nstack_initial=1))},
             '$phi406.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1)),
                           ('$phi350.1',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.1',
                            State(pc_initial=372 nstack_initial=3)),
                           ('$phi418.1',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.1',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.1',
                            State(pc_initial=460 nstack_initial=2))},
             '$phi408.0': {('$phi350.0',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.0',
                            State(pc_initial=372 nstack_initial=3)),
                           ('$phi418.0',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.0',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.0',
                            State(pc_initial=460 nstack_initial=2)),
                           ('$phi88.0', State(pc_initial=88 nstack_initial=1))},
             '$phi408.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1)),
                           ('$phi350.1',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.1',
                            State(pc_initial=372 nstack_initial=3)),
                           ('$phi418.1',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.1',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.1',
                            State(pc_initial=460 nstack_initial=2))},
             '$phi418.0': {('$phi350.0',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.0',
                            State(pc_initial=372 nstack_initial=3)),
                           ('$phi418.0',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.0',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.0',
                            State(pc_initial=460 nstack_initial=2)),
                           ('$phi88.0', State(pc_initial=88 nstack_initial=1))},
             '$phi418.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1)),
                           ('$phi350.1',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.1',
                            State(pc_initial=372 nstack_initial=3)),
                           ('$phi418.1',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.1',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.1',
                            State(pc_initial=460 nstack_initial=2))},
             '$phi436.0': {('$phi350.0',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.0',
                            State(pc_initial=372 nstack_initial=3)),
                           ('$phi418.0',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.0',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.0',
                            State(pc_initial=460 nstack_initial=2)),
                           ('$phi88.0', State(pc_initial=88 nstack_initial=1))},
             '$phi436.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1)),
                           ('$phi350.1',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.1',
                            State(pc_initial=372 nstack_initial=3)),
                           ('$phi418.1',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.1',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.1',
                            State(pc_initial=460 nstack_initial=2))},
             '$phi450.0': {('$phi350.0',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.0',
                            State(pc_initial=372 nstack_initial=3)),
                           ('$phi418.0',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.0',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.0',
                            State(pc_initial=460 nstack_initial=2)),
                           ('$phi88.0', State(pc_initial=88 nstack_initial=1))},
             '$phi450.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1)),
                           ('$phi350.1',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.1',
                            State(pc_initial=372 nstack_initial=3)),
                           ('$phi418.1',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.1',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.1',
                            State(pc_initial=460 nstack_initial=2))},
             '$phi460.0': {('$phi350.0',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.0',
                            State(pc_initial=372 nstack_initial=3)),
                           ('$phi418.0',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.0',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.0',
                            State(pc_initial=460 nstack_initial=2)),
                           ('$phi88.0', State(pc_initial=88 nstack_initial=1))},
             '$phi460.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1)),
                           ('$phi350.1',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.1',
                            State(pc_initial=372 nstack_initial=3)),
                           ('$phi418.1',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.1',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.1',
                            State(pc_initial=460 nstack_initial=2))},
             '$phi472.0': {('$phi350.0',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.0',
                            State(pc_initial=372 nstack_initial=3)),
                           ('$phi88.0', State(pc_initial=88 nstack_initial=1))},
             '$phi472.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1)),
                           ('$phi350.1',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.1',
                            State(pc_initial=372 nstack_initial=3))},
             '$phi476.0': {('$phi418.0',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.0',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.0',
                            State(pc_initial=460 nstack_initial=2)),
                           ('$phi88.0', State(pc_initial=88 nstack_initial=1))},
             '$phi478.0': {('$phi350.0',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.0',
                            State(pc_initial=372 nstack_initial=3)),
                           ('$phi418.0',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.0',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.0',
                            State(pc_initial=460 nstack_initial=2)),
                           ('$phi88.0', State(pc_initial=88 nstack_initial=1))},
             '$phi500.0': {('$phi350.0',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.0',
                            State(pc_initial=372 nstack_initial=3)),
                           ('$phi418.0',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.0',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.0',
                            State(pc_initial=460 nstack_initial=2)),
                           ('$phi88.0', State(pc_initial=88 nstack_initial=1))},
             '$phi528.0': {('$phi350.0',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.0',
                            State(pc_initial=372 nstack_initial=3)),
                           ('$phi418.0',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.0',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.0',
                            State(pc_initial=460 nstack_initial=2)),
                           ('$phi88.0', State(pc_initial=88 nstack_initial=1))},
             '$phi542.0': {('$phi350.0',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.0',
                            State(pc_initial=372 nstack_initial=3)),
                           ('$phi418.0',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.0',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.0',
                            State(pc_initial=460 nstack_initial=2)),
                           ('$phi88.0', State(pc_initial=88 nstack_initial=1))},
             '$phi558.0': {('$phi350.0',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.0',
                            State(pc_initial=372 nstack_initial=3)),
                           ('$phi418.0',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.0',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.0',
                            State(pc_initial=460 nstack_initial=2)),
                           ('$phi88.0', State(pc_initial=88 nstack_initial=1))},
             '$phi570.0': {('$phi350.0',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.0',
                            State(pc_initial=372 nstack_initial=3)),
                           ('$phi418.0',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.0',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.0',
                            State(pc_initial=460 nstack_initial=2)),
                           ('$phi88.0', State(pc_initial=88 nstack_initial=1))},
             '$phi88.0': {('$86get_iter.6',
                           State(pc_initial=70 nstack_initial=0)),
                          ('$phi350.0', State(pc_initial=350 nstack_initial=3)),
                          ('$phi372.0', State(pc_initial=372 nstack_initial=3)),
                          ('$phi418.0', State(pc_initial=418 nstack_initial=2)),
                          ('$phi450.0', State(pc_initial=450 nstack_initial=2)),
                          ('$phi460.0', State(pc_initial=460 nstack_initial=2)),
                          ('$phi88.0', State(pc_initial=88 nstack_initial=1))},
             '$phi92.0': {('$86get_iter.6',
                           State(pc_initial=70 nstack_initial=0)),
                          ('$phi350.0', State(pc_initial=350 nstack_initial=3)),
                          ('$phi372.0', State(pc_initial=372 nstack_initial=3)),
                          ('$phi418.0', State(pc_initial=418 nstack_initial=2)),
                          ('$phi450.0', State(pc_initial=450 nstack_initial=2)),
                          ('$phi460.0',
                           State(pc_initial=460 nstack_initial=2))},
             '$phi92.1': {('$88for_iter.2',
                           State(pc_initial=88 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi140.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0)),
                           ('$phi350.0',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.0',
                            State(pc_initial=372 nstack_initial=3)),
                           ('$phi418.0',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.0',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.0',
                            State(pc_initial=460 nstack_initial=2))},
             '$phi170.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0)),
                           ('$phi350.0',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.0',
                            State(pc_initial=372 nstack_initial=3)),
                           ('$phi418.0',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.0',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.0',
                            State(pc_initial=460 nstack_initial=2))},
             '$phi194.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0)),
                           ('$phi350.0',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.0',
                            State(pc_initial=372 nstack_initial=3)),
                           ('$phi418.0',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.0',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.0',
                            State(pc_initial=460 nstack_initial=2))},
             '$phi232.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0)),
                           ('$phi350.0',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.0',
                            State(pc_initial=372 nstack_initial=3)),
                           ('$phi418.0',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.0',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.0',
                            State(pc_initial=460 nstack_initial=2))},
             '$phi248.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0)),
                           ('$phi350.0',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.0',
                            State(pc_initial=372 nstack_initial=3)),
                           ('$phi418.0',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.0',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.0',
                            State(pc_initial=460 nstack_initial=2))},
             '$phi250.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0)),
                           ('$phi350.0',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.0',
                            State(pc_initial=372 nstack_initial=3)),
                           ('$phi418.0',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.0',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.0',
                            State(pc_initial=460 nstack_initial=2))},
             '$phi266.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0)),
                           ('$phi350.0',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.0',
                            State(pc_initial=372 nstack_initial=3)),
                           ('$phi418.0',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.0',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.0',
                            State(pc_initial=460 nstack_initial=2))},
             '$phi280.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0)),
                           ('$phi350.0',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.0',
                            State(pc_initial=372 nstack_initial=3)),
                           ('$phi418.0',
                            State(pc_initial=418 nstack_initial=2)),
                           ('$phi450.0',
                            State(pc_initial=450 nstack_initial=2)),
                           ('$phi460.0',
                            State(pc_initial=460 nstack_initial=2))},
             '$phi290.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0)),
                           ('$phi350.0',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.0',
                            State(pc_initial=372 nstack_initial=3))},
             '$phi290.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1)),
                           ('$phi350.1',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.1',
                            State(pc_initial=372 nstack_initial=3))},
             '$phi292.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0)),
                           ('$phi350.0',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.0',
                            State(pc_initial=372 nstack_initial=3))},
             '$phi292.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1)),
                           ('$phi350.1',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.1',
                            State(pc_initial=372 nstack_initial=3))},
             '$phi292.2': {('$290for_iter.3',
                            State(pc_initial=290 nstack_initial=2))},
             '$phi298.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0)),
                           ('$phi350.0',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.0',
                            State(pc_initial=372 nstack_initial=3))},
             '$phi298.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1)),
                           ('$phi350.1',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.1',
                            State(pc_initial=372 nstack_initial=3))},
             '$phi316.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi316.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi316.2': {('$314get_iter.9',
                            State(pc_initial=298 nstack_initial=2))},
             '$phi318.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi318.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi318.2': {('$314get_iter.9',
                            State(pc_initial=298 nstack_initial=2))},
             '$phi318.3': {('$316for_iter.4',
                            State(pc_initial=316 nstack_initial=3))},
             '$phi350.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi350.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi350.2': {('$314get_iter.9',
                            State(pc_initial=298 nstack_initial=2))},
             '$phi372.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi372.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi372.2': {('$314get_iter.9',
                            State(pc_initial=298 nstack_initial=2))},
             '$phi380.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi380.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi380.2': {('$314get_iter.9',
                            State(pc_initial=298 nstack_initial=2))},
             '$phi384.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi384.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi386.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi386.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi406.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi406.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi408.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi408.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi418.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi418.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi436.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi436.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi450.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi450.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi460.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi460.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi472.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi472.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi476.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0)),
                           ('$phi350.0',
                            State(pc_initial=350 nstack_initial=3)),
                           ('$phi372.0',
                            State(pc_initial=372 nstack_initial=3))},
             '$phi478.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi500.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi528.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi542.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi558.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi570.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi88.0': {('$86get_iter.6',
                           State(pc_initial=70 nstack_initial=0))},
             '$phi92.0': {('$86get_iter.6',
                           State(pc_initial=70 nstack_initial=0))},
             '$phi92.1': {('$88for_iter.2',
                           State(pc_initial=88 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi140.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi170.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi194.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi232.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi248.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi250.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi266.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi280.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi290.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi290.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi292.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi292.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi292.2': {('$290for_iter.3',
                            State(pc_initial=290 nstack_initial=2))},
             '$phi298.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi298.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi316.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi316.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi316.2': {('$314get_iter.9',
                            State(pc_initial=298 nstack_initial=2))},
             '$phi318.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi318.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi318.2': {('$314get_iter.9',
                            State(pc_initial=298 nstack_initial=2))},
             '$phi318.3': {('$316for_iter.4',
                            State(pc_initial=316 nstack_initial=3))},
             '$phi350.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi350.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi350.2': {('$314get_iter.9',
                            State(pc_initial=298 nstack_initial=2))},
             '$phi372.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi372.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi372.2': {('$314get_iter.9',
                            State(pc_initial=298 nstack_initial=2))},
             '$phi380.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi380.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi380.2': {('$314get_iter.9',
                            State(pc_initial=298 nstack_initial=2))},
             '$phi384.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi384.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi386.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi386.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi406.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi406.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi408.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi408.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi418.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi418.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi436.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi436.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi450.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi450.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi460.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi460.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi472.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi472.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi476.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi478.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi500.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi528.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi542.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi558.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi570.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi88.0': {('$86get_iter.6',
                           State(pc_initial=70 nstack_initial=0))},
             '$phi92.0': {('$86get_iter.6',
                           State(pc_initial=70 nstack_initial=0))},
             '$phi92.1': {('$88for_iter.2',
                           State(pc_initial=88 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi140.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi170.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi194.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi232.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi248.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi250.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi266.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi280.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi290.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi290.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi292.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi292.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi292.2': {('$290for_iter.3',
                            State(pc_initial=290 nstack_initial=2))},
             '$phi298.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi298.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi316.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi316.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi316.2': {('$314get_iter.9',
                            State(pc_initial=298 nstack_initial=2))},
             '$phi318.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi318.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi318.2': {('$314get_iter.9',
                            State(pc_initial=298 nstack_initial=2))},
             '$phi318.3': {('$316for_iter.4',
                            State(pc_initial=316 nstack_initial=3))},
             '$phi350.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi350.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi350.2': {('$314get_iter.9',
                            State(pc_initial=298 nstack_initial=2))},
             '$phi372.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi372.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi372.2': {('$314get_iter.9',
                            State(pc_initial=298 nstack_initial=2))},
             '$phi380.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi380.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi380.2': {('$314get_iter.9',
                            State(pc_initial=298 nstack_initial=2))},
             '$phi384.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi384.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi386.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi386.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi406.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi406.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi408.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi408.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi418.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi418.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi436.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi436.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi450.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi450.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi460.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi460.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi472.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi472.1': {('$288get_iter.4',
                            State(pc_initial=280 nstack_initial=1))},
             '$phi476.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi478.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi500.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi528.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi542.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi558.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi570.0': {('$86get_iter.6',
                            State(pc_initial=70 nstack_initial=0))},
             '$phi88.0': {('$86get_iter.6',
                           State(pc_initial=70 nstack_initial=0))},
             '$phi92.0': {('$86get_iter.6',
                           State(pc_initial=70 nstack_initial=0))},
             '$phi92.1': {('$88for_iter.2',
                           State(pc_initial=88 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG keep phismap: {'$phi290.1': {('$288get_iter.4', State(pc_initial=280 nstack_initial=1))},
 '$phi292.2': {('$290for_iter.3', State(pc_initial=290 nstack_initial=2))},
 '$phi316.2': {('$314get_iter.9', State(pc_initial=298 nstack_initial=2))},
 '$phi318.3': {('$316for_iter.4', State(pc_initial=316 nstack_initial=3))},
 '$phi88.0': {('$86get_iter.6', State(pc_initial=70 nstack_initial=0))},
 '$phi92.1': {('$88for_iter.2', State(pc_initial=88 nstack_initial=1))}}
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=70 nstack_initial=0): {'$phi88.0': '$86get_iter.6'},
             State(pc_initial=88 nstack_initial=1): {'$phi92.1': '$88for_iter.2'},
             State(pc_initial=280 nstack_initial=1): {'$phi290.1': '$288get_iter.4'},
             State(pc_initial=290 nstack_initial=2): {'$phi292.2': '$290for_iter.3'},
             State(pc_initial=298 nstack_initial=2): {'$phi316.2': '$314get_iter.9'},
             State(pc_initial=316 nstack_initial=3): {'$phi318.3': '$316for_iter.4'}})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG ----------------------DONE Prune PHIs-----------------------
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$k6.2'}), (8, {'func': '$4load_method.1', 'args': ['$k6.2'], 'res': '$8call_method.3'}), (10, {'res': '$bandwidth10.4'}), (12, {'lhs': '$8call_method.3', 'rhs': '$bandwidth10.4', 'res': '$12binary_multiply.5'}), (14, {'value': '$12binary_multiply.5'}), (16, {'res': '$16load_global.6'}), (18, {'item': '$16load_global.6', 'res': '$18load_attr.7'}), (20, {'res': '$distances20.8'}), (22, {'item': '$distances20.8', 'res': '$22load_attr.9'}), (24, {'res': '$const24.10'}), (26, {'index': '$const24.10', 'target': '$22load_attr.9', 'res': '$26binary_subscr.11'}), (28, {'res': '$28load_global.12'}), (30, {'item': '$28load_global.12', 'res': '$30load_attr.13'}), (32, {'res': '$const32.14'}), (34, {'func': '$18load_attr.7', 'args': ['$26binary_subscr.11', '$30load_attr.13'], 'names': '$const32.14', 'res': '$34call_function_kw.15'}), (36, {'value': '$34call_function_kw.15'}), (38, {'res': '$38load_global.16'}), (40, {'item': '$38load_global.16', 'res': '$40load_attr.17'}), (42, {'res': '$distances42.18'}), (44, {'item': '$distances42.18', 'res': '$44load_attr.19'}), (46, {'res': '$const46.20'}), (48, {'index': '$const46.20', 'target': '$44load_attr.19', 'res': '$48binary_subscr.21'}), (50, {'res': '$50load_global.22'}), (52, {'item': '$50load_global.22', 'res': '$52load_attr.23'}), (54, {'res': '$const54.24'}), (56, {'func': '$40load_attr.17', 'args': ['$48binary_subscr.21', '$52load_attr.23'], 'names': '$const54.24', 'res': '$56call_function_kw.25'}), (58, {'value': '$56call_function_kw.25'}), (60, {'res': '$60load_global.26'}), (62, {'item': '$60load_global.26', 'res': '$62load_method.27'}), (64, {'res': '$distances64.28'}), (66, {'func': '$62load_method.27', 'args': ['$distances64.28'], 'res': '$66call_method.29'}), (68, {'value': '$66call_method.29'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: ()})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$74load_global.0'}), (76, {'res': '$distances76.1'}), (78, {'item': '$distances76.1', 'res': '$78load_attr.2'}), (80, {'res': '$const80.3'}), (82, {'index': '$const80.3', 'target': '$78load_attr.2', 'res': '$82binary_subscr.4'}), (84, {'func': '$74load_global.0', 'args': ['$82binary_subscr.4'], 'res': '$84call_function.5'}), (86, {'value': '$84call_function.5', 'res': '$86get_iter.6'})), outgoing_phis={'$phi88.0': '$86get_iter.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={88: ('$86get_iter.6',)})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG block_infos State(pc_initial=88 nstack_initial=1):
AdaptBlockInfo(insts=((88, {'iterator': '$phi88.0', 'pair': '$88for_iter.1', 'indval': '$88for_iter.2', 'pred': '$88for_iter.3'}),), outgoing_phis={'$phi92.1': '$88for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={572: (), 92: ('$phi88.0', '$88for_iter.2')})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG block_infos State(pc_initial=92 nstack_initial=2):
AdaptBlockInfo(insts=((92, {'value': '$phi92.1'}), (94, {'res': '$const94.2'}), (96, {'value': '$const94.2'}), (98, {'res': '$98load_global.3'}), (100, {'value': '$98load_global.3'}), (102, {'res': '$const102.4'}), (104, {'value': '$const102.4'}), (106, {'res': '$distances106.5'}), (108, {'res': '$i108.6'}), (110, {'index': '$i108.6', 'target': '$distances106.5', 'res': '$110binary_subscr.7'}), (112, {'value': '$110binary_subscr.7'}), (114, {'res': '$ith_distances114.8'}), (116, {'res': '$ith_distances116.9'}), (118, {'res': '$const118.10'}), (120, {'lhs': '$ith_distances116.9', 'rhs': '$const118.10', 'res': '$120compare_op.11'}), (122, {'index': '$120compare_op.11', 'target': '$ith_distances114.8', 'res': '$122binary_subscr.12'}), (124, {'value': '$122binary_subscr.12'}), (126, {'res': '$non_zero_dists126.13'}), (128, {'item': '$non_zero_dists126.13', 'res': '$128load_attr.14'}), (130, {'res': '$const130.15'}), (132, {'index': '$const130.15', 'target': '$128load_attr.14', 'res': '$132binary_subscr.16'}), (134, {'res': '$local_connectivity134.17'}), (136, {'lhs': '$132binary_subscr.16', 'rhs': '$local_connectivity134.17', 'res': '$136compare_op.18'}), (138, {'pred': '$136compare_op.18'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={140: ('$phi92.0',), 250: ('$phi92.0',)})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG block_infos State(pc_initial=140 nstack_initial=1):
AdaptBlockInfo(insts=((140, {'res': '$140load_global.1'}), (142, {'res': '$142load_global.2'}), (144, {'item': '$142load_global.2', 'res': '$144load_method.3'}), (146, {'res': '$local_connectivity146.4'}), (148, {'func': '$144load_method.3', 'args': ['$local_connectivity146.4'], 'res': '$148call_method.5'}), (150, {'func': '$140load_global.1', 'args': ['$148call_method.5'], 'res': '$150call_function.6'}), (152, {'value': '$150call_function.6'}), (154, {'res': '$local_connectivity154.7'}), (156, {'res': '$index156.8'}), (158, {'lhs': '$local_connectivity154.7', 'rhs': '$index156.8', 'res': '$158binary_subtract.9'}), (160, {'value': '$158binary_subtract.9'}), (162, {'res': '$index162.10'}), (164, {'res': '$const164.11'}), (166, {'lhs': '$index162.10', 'rhs': '$const164.11', 'res': '$166compare_op.12'}), (168, {'pred': '$166compare_op.12'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={170: ('$phi140.0',), 232: ('$phi140.0',)})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG block_infos State(pc_initial=170 nstack_initial=1):
AdaptBlockInfo(insts=((170, {'res': '$non_zero_dists170.1'}), (172, {'res': '$index172.2'}), (174, {'res': '$const174.3'}), (176, {'lhs': '$index172.2', 'rhs': '$const174.3', 'res': '$176binary_subtract.4'}), (178, {'index': '$176binary_subtract.4', 'target': '$non_zero_dists170.1', 'res': '$178binary_subscr.5'}), (180, {'res': '$rho180.6'}), (182, {'res': '$i182.7'}), (184, {'target': '$rho180.6', 'index': '$i182.7', 'value': '$178binary_subscr.5'}), (186, {'res': '$interpolation186.8'}), (188, {'res': '$188load_global.9'}), (190, {'lhs': '$interpolation186.8', 'rhs': '$188load_global.9', 'res': '$190compare_op.10'}), (192, {'pred': '$190compare_op.10'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={194: ('$phi170.0',), 248: ('$phi170.0',)})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG block_infos State(pc_initial=194 nstack_initial=1):
AdaptBlockInfo(insts=((194, {'res': '$rho194.1'}), (196, {'res': '$i196.2'}), (198, {'orig': ['$rho194.1', '$i196.2'], 'duped': ['$198dup_top_two.3', '$198dup_top_two.4']}), (200, {'index': '$198dup_top_two.4', 'target': '$198dup_top_two.3', 'res': '$200binary_subscr.5'}), (202, {'res': '$interpolation202.6'}), (204, {'res': '$non_zero_dists204.7'}), (206, {'res': '$index206.8'}), (208, {'index': '$index206.8', 'target': '$non_zero_dists204.7', 'res': '$208binary_subscr.9'}), (210, {'res': '$non_zero_dists210.10'}), (212, {'res': '$index212.11'}), (214, {'res': '$const214.12'}), (216, {'lhs': '$index212.11', 'rhs': '$const214.12', 'res': '$216binary_subtract.13'}), (218, {'index': '$216binary_subtract.13', 'target': '$non_zero_dists210.10', 'res': '$218binary_subscr.14'}), (220, {'lhs': '$208binary_subscr.9', 'rhs': '$218binary_subscr.14', 'res': '$220binary_subtract.15'}), (222, {'lhs': '$interpolation202.6', 'rhs': '$220binary_subtract.15', 'res': '$222binary_multiply.16'}), (224, {'lhs': '$200binary_subscr.5', 'rhs': '$222binary_multiply.16', 'res': '$224inplace_add.17'}), (228, {'target': '$rho194.1', 'index': '$i196.2', 'value': '$224inplace_add.17'}), (230, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={248: ('$phi194.0',)})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG block_infos State(pc_initial=232 nstack_initial=1):
AdaptBlockInfo(insts=((232, {'res': '$interpolation232.1'}), (234, {'res': '$non_zero_dists234.2'}), (236, {'res': '$const236.3'}), (238, {'index': '$const236.3', 'target': '$non_zero_dists234.2', 'res': '$238binary_subscr.4'}), (240, {'lhs': '$interpolation232.1', 'rhs': '$238binary_subscr.4', 'res': '$240binary_multiply.5'}), (242, {'res': '$rho242.6'}), (244, {'res': '$i244.7'}), (246, {'target': '$rho242.6', 'index': '$i244.7', 'value': '$240binary_multiply.5'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={248: ('$phi232.0',)})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG block_infos State(pc_initial=248 nstack_initial=1):
AdaptBlockInfo(insts=((248, {}),), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={280: ('$phi248.0',)})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG block_infos State(pc_initial=250 nstack_initial=1):
AdaptBlockInfo(insts=((250, {'res': '$non_zero_dists250.1'}), (252, {'item': '$non_zero_dists250.1', 'res': '$252load_attr.2'}), (254, {'res': '$const254.3'}), (256, {'index': '$const254.3', 'target': '$252load_attr.2', 'res': '$256binary_subscr.4'}), (258, {'res': '$const258.5'}), (260, {'lhs': '$256binary_subscr.4', 'rhs': '$const258.5', 'res': '$260compare_op.6'}), (262, {'pred': '$260compare_op.6'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={266: ('$phi250.0',), 280: ('$phi250.0',)})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG block_infos State(pc_initial=266 nstack_initial=1):
AdaptBlockInfo(insts=((266, {'res': '$266load_global.1'}), (268, {'item': '$266load_global.1', 'res': '$268load_method.2'}), (270, {'res': '$non_zero_dists270.3'}), (272, {'func': '$268load_method.2', 'args': ['$non_zero_dists270.3'], 'res': '$272call_method.4'}), (274, {'res': '$rho274.5'}), (276, {'res': '$i276.6'}), (278, {'target': '$rho274.5', 'index': '$i276.6', 'value': '$272call_method.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={280: ('$phi266.0',)})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG block_infos State(pc_initial=280 nstack_initial=1):
AdaptBlockInfo(insts=((282, {'res': '$282load_global.1'}), (284, {'res': '$n_iter284.2'}), (286, {'func': '$282load_global.1', 'args': ['$n_iter284.2'], 'res': '$286call_function.3'}), (288, {'value': '$286call_function.3', 'res': '$288get_iter.4'})), outgoing_phis={'$phi290.1': '$288get_iter.4'}, blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={290: ('$phi280.0', '$288get_iter.4')})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG block_infos State(pc_initial=290 nstack_initial=2):
AdaptBlockInfo(insts=((290, {'iterator': '$phi290.1', 'pair': '$290for_iter.2', 'indval': '$290for_iter.3', 'pred': '$290for_iter.4'}),), outgoing_phis={'$phi292.2': '$290for_iter.3'}, blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 478, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={476: ('$phi290.0',), 292: ('$phi290.0', '$phi290.1', '$290for_iter.3')})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG block_infos State(pc_initial=292 nstack_initial=3):
AdaptBlockInfo(insts=((292, {'value': '$phi292.2'}), (294, {'res': '$const294.3'}), (296, {'value': '$const294.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 478, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={298: ('$phi292.0', '$phi292.1')})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG block_infos State(pc_initial=298 nstack_initial=2):
AdaptBlockInfo(insts=((300, {'res': '$300load_global.2'}), (302, {'res': '$const302.3'}), (304, {'res': '$distances304.4'}), (306, {'item': '$distances304.4', 'res': '$306load_attr.5'}), (308, {'res': '$const308.6'}), (310, {'index': '$const308.6', 'target': '$306load_attr.5', 'res': '$310binary_subscr.7'}), (312, {'func': '$300load_global.2', 'args': ['$const302.3', '$310binary_subscr.7'], 'res': '$312call_function.8'}), (314, {'value': '$312call_function.8', 'res': '$314get_iter.9'})), outgoing_phis={'$phi316.2': '$314get_iter.9'}, blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 478, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={316: ('$phi298.0', '$phi298.1', '$314get_iter.9')})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG block_infos State(pc_initial=316 nstack_initial=3):
AdaptBlockInfo(insts=((316, {'iterator': '$phi316.2', 'pair': '$316for_iter.3', 'indval': '$316for_iter.4', 'pred': '$316for_iter.5'}),), outgoing_phis={'$phi318.3': '$316for_iter.4'}, blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 478, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 386, 'entry_stack': 2, 'stack_depth': 2, 'handler': None}), active_try_block=None, outgoing_edgepushed={384: ('$phi316.0', '$phi316.1'), 318: ('$phi316.0', '$phi316.1', '$phi316.2', '$316for_iter.4')})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG block_infos State(pc_initial=318 nstack_initial=4):
AdaptBlockInfo(insts=((318, {'value': '$phi318.3'}), (320, {'res': '$distances320.4'}), (322, {'res': '$i322.5'}), (324, {'res': '$j324.6'}), (326, {'items': ['$i322.5', '$j324.6'], 'res': '$326build_tuple.7'}), (328, {'index': '$326build_tuple.7', 'target': '$distances320.4', 'res': '$328binary_subscr.8'}), (330, {'res': '$rho330.9'}), (332, {'res': '$i332.10'}), (334, {'index': '$i332.10', 'target': '$rho330.9', 'res': '$334binary_subscr.11'}), (336, {'lhs': '$328binary_subscr.8', 'rhs': '$334binary_subscr.11', 'res': '$336binary_subtract.12'}), (338, {'value': '$336binary_subtract.12'}), (340, {'res': '$d340.13'}), (342, {'res': '$const342.14'}), (344, {'lhs': '$d340.13', 'rhs': '$const342.14', 'res': '$344compare_op.15'}), (346, {'pred': '$344compare_op.15'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 478, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 386, 'entry_stack': 2, 'stack_depth': 2, 'handler': None}), active_try_block=None, outgoing_edgepushed={350: ('$phi318.0', '$phi318.1', '$phi318.2'), 372: ('$phi318.0', '$phi318.1', '$phi318.2')})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG block_infos State(pc_initial=350 nstack_initial=3):
AdaptBlockInfo(insts=((350, {'res': '$psum350.3'}), (352, {'res': '$352load_global.4'}), (354, {'item': '$352load_global.4', 'res': '$354load_method.5'}), (356, {'res': '$d356.6'}), (358, {'res': '$mid358.7'}), (360, {'lhs': '$d356.6', 'rhs': '$mid358.7', 'res': '$360binary_true_divide.8'}), (362, {'value': '$360binary_true_divide.8', 'res': '$362unary_negative.9'}), (364, {'func': '$354load_method.5', 'args': ['$362unary_negative.9'], 'res': '$364call_method.10'}), (366, {'lhs': '$psum350.3', 'rhs': '$364call_method.10', 'res': '$366inplace_add.11'}), (368, {'value': '$366inplace_add.11'}), (370, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 478, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 386, 'entry_stack': 2, 'stack_depth': 2, 'handler': None}), active_try_block=None, outgoing_edgepushed={380: ('$phi350.0', '$phi350.1', '$phi350.2')})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG block_infos State(pc_initial=372 nstack_initial=3):
AdaptBlockInfo(insts=((372, {'res': '$psum372.3'}), (374, {'res': '$const374.4'}), (376, {'lhs': '$psum372.3', 'rhs': '$const374.4', 'res': '$376inplace_add.5'}), (378, {'value': '$376inplace_add.5'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 478, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 386, 'entry_stack': 2, 'stack_depth': 2, 'handler': None}), active_try_block=None, outgoing_edgepushed={380: ('$phi372.0', '$phi372.1', '$phi372.2')})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG block_infos State(pc_initial=380 nstack_initial=3):
AdaptBlockInfo(insts=((380, {}),), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 478, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 386, 'entry_stack': 2, 'stack_depth': 2, 'handler': None}), active_try_block=None, outgoing_edgepushed={316: ('$phi380.0', '$phi380.1', '$phi380.2')})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG block_infos State(pc_initial=384 nstack_initial=2):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 478, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 386, 'entry_stack': 2, 'stack_depth': 2, 'handler': None}), active_try_block=None, outgoing_edgepushed={386: ('$phi384.0', '$phi384.1')})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG block_infos State(pc_initial=386 nstack_initial=2):
AdaptBlockInfo(insts=((386, {'res': '$386load_global.2'}), (388, {'item': '$386load_global.2', 'res': '$388load_method.3'}), (390, {'res': '$psum390.4'}), (392, {'res': '$target392.5'}), (394, {'lhs': '$psum390.4', 'rhs': '$target392.5', 'res': '$394binary_subtract.6'}), (396, {'func': '$388load_method.3', 'args': ['$394binary_subtract.6'], 'res': '$396call_method.7'}), (398, {'res': '$398load_global.8'}), (400, {'lhs': '$396call_method.7', 'rhs': '$398load_global.8', 'res': '$400compare_op.9'}), (402, {'pred': '$400compare_op.9'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 478, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={406: ('$phi386.0', '$phi386.1'), 408: ('$phi386.0', '$phi386.1')})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG block_infos State(pc_initial=406 nstack_initial=2):
AdaptBlockInfo(insts=((406, {'end': 478}),), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 478, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={478: ('$phi406.0',)})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG block_infos State(pc_initial=408 nstack_initial=2):
AdaptBlockInfo(insts=((408, {'res': '$psum408.2'}), (410, {'res': '$target410.3'}), (412, {'lhs': '$psum408.2', 'rhs': '$target410.3', 'res': '$412compare_op.4'}), (414, {'pred': '$412compare_op.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 478, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={418: ('$phi408.0', '$phi408.1'), 436: ('$phi408.0', '$phi408.1')})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG block_infos State(pc_initial=418 nstack_initial=2):
AdaptBlockInfo(insts=((418, {'res': '$mid418.2'}), (420, {'value': '$mid418.2'}), (422, {'res': '$lo422.3'}), (424, {'res': '$hi424.4'}), (426, {'lhs': '$lo422.3', 'rhs': '$hi424.4', 'res': '$426binary_add.5'}), (428, {'res': '$const428.6'}), (430, {'lhs': '$426binary_add.5', 'rhs': '$const428.6', 'res': '$430binary_true_divide.7'}), (432, {'value': '$430binary_true_divide.7'}), (434, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 478, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={472: ('$phi418.0', '$phi418.1')})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG block_infos State(pc_initial=436 nstack_initial=2):
AdaptBlockInfo(insts=((436, {'res': '$mid436.2'}), (438, {'value': '$mid436.2'}), (440, {'res': '$hi440.3'}), (442, {'res': '$442load_global.4'}), (444, {'lhs': '$hi440.3', 'rhs': '$442load_global.4', 'res': '$444compare_op.5'}), (446, {'pred': '$444compare_op.5'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 478, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={450: ('$phi436.0', '$phi436.1'), 460: ('$phi436.0', '$phi436.1')})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG block_infos State(pc_initial=450 nstack_initial=2):
AdaptBlockInfo(insts=((450, {'res': '$mid450.2'}), (452, {'res': '$const452.3'}), (454, {'lhs': '$mid450.2', 'rhs': '$const452.3', 'res': '$454inplace_multiply.4'}), (456, {'value': '$454inplace_multiply.4'}), (458, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 478, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={472: ('$phi450.0', '$phi450.1')})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG block_infos State(pc_initial=460 nstack_initial=2):
AdaptBlockInfo(insts=((460, {'res': '$lo460.2'}), (462, {'res': '$hi462.3'}), (464, {'lhs': '$lo460.2', 'rhs': '$hi462.3', 'res': '$464binary_add.4'}), (466, {'res': '$const466.5'}), (468, {'lhs': '$464binary_add.4', 'rhs': '$const466.5', 'res': '$468binary_true_divide.6'}), (470, {'value': '$468binary_true_divide.6'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 478, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={472: ('$phi460.0', '$phi460.1')})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG block_infos State(pc_initial=472 nstack_initial=2):
AdaptBlockInfo(insts=((472, {}),), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 478, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={290: ('$phi472.0', '$phi472.1')})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG block_infos State(pc_initial=476 nstack_initial=1):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 478, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={478: ('$phi476.0',)})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG block_infos State(pc_initial=478 nstack_initial=1):
AdaptBlockInfo(insts=((478, {'res': '$mid478.1'}), (480, {'res': '$result480.2'}), (482, {'res': '$i482.3'}), (484, {'target': '$result480.2', 'index': '$i482.3', 'value': '$mid478.1'}), (486, {'res': '$rho486.4'}), (488, {'res': '$i488.5'}), (490, {'index': '$i488.5', 'target': '$rho486.4', 'res': '$490binary_subscr.6'}), (492, {'res': '$const492.7'}), (494, {'lhs': '$490binary_subscr.6', 'rhs': '$const492.7', 'res': '$494compare_op.8'}), (496, {'pred': '$494compare_op.8'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={500: ('$phi478.0',), 542: ('$phi478.0',)})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG block_infos State(pc_initial=500 nstack_initial=1):
AdaptBlockInfo(insts=((500, {'res': '$500load_global.1'}), (502, {'item': '$500load_global.1', 'res': '$502load_method.2'}), (504, {'res': '$ith_distances504.3'}), (506, {'func': '$502load_method.2', 'args': ['$ith_distances504.3'], 'res': '$506call_method.4'}), (508, {'value': '$506call_method.4'}), (510, {'res': '$result510.5'}), (512, {'res': '$i512.6'}), (514, {'index': '$i512.6', 'target': '$result510.5', 'res': '$514binary_subscr.7'}), (516, {'res': '$516load_global.8'}), (518, {'res': '$mean_ith_distances518.9'}), (520, {'lhs': '$516load_global.8', 'rhs': '$mean_ith_distances518.9', 'res': '$520binary_multiply.10'}), (522, {'lhs': '$514binary_subscr.7', 'rhs': '$520binary_multiply.10', 'res': '$522compare_op.11'}), (524, {'pred': '$522compare_op.11'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={528: ('$phi500.0',), 570: ('$phi500.0',)})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG block_infos State(pc_initial=528 nstack_initial=1):
AdaptBlockInfo(insts=((528, {'res': '$528load_global.1'}), (530, {'res': '$mean_ith_distances530.2'}), (532, {'lhs': '$528load_global.1', 'rhs': '$mean_ith_distances530.2', 'res': '$532binary_multiply.3'}), (534, {'res': '$result534.4'}), (536, {'res': '$i536.5'}), (538, {'target': '$result534.4', 'index': '$i536.5', 'value': '$532binary_multiply.3'}), (540, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={88: ('$phi528.0',)})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG block_infos State(pc_initial=542 nstack_initial=1):
AdaptBlockInfo(insts=((542, {'res': '$result542.1'}), (544, {'res': '$i544.2'}), (546, {'index': '$i544.2', 'target': '$result542.1', 'res': '$546binary_subscr.3'}), (548, {'res': '$548load_global.4'}), (550, {'res': '$mean_distances550.5'}), (552, {'lhs': '$548load_global.4', 'rhs': '$mean_distances550.5', 'res': '$552binary_multiply.6'}), (554, {'lhs': '$546binary_subscr.3', 'rhs': '$552binary_multiply.6', 'res': '$554compare_op.7'}), (556, {'pred': '$554compare_op.7'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={558: ('$phi542.0',), 88: ('$phi542.0',)})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG block_infos State(pc_initial=558 nstack_initial=1):
AdaptBlockInfo(insts=((558, {'res': '$558load_global.1'}), (560, {'res': '$mean_distances560.2'}), (562, {'lhs': '$558load_global.1', 'rhs': '$mean_distances560.2', 'res': '$562binary_multiply.3'}), (564, {'res': '$result564.4'}), (566, {'res': '$i566.5'}), (568, {'target': '$result564.4', 'index': '$i566.5', 'value': '$562binary_multiply.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={570: ('$phi558.0',)})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG block_infos State(pc_initial=570 nstack_initial=1):
AdaptBlockInfo(insts=((570, {}),), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={88: ('$phi570.0',)})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG block_infos State(pc_initial=572 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 574, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={574: ()})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG block_infos State(pc_initial=574 nstack_initial=0):
AdaptBlockInfo(insts=((574, {'res': '$result574.0'}), (576, {'res': '$rho576.1'}), (578, {'items': ['$result574.0', '$rho576.1'], 'res': '$578build_tuple.2'}), (580, {'retval': '$578build_tuple.2', 'castval': '$580return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:42 interpreter.py DEBUG label 0:
    distances = arg(0, name=distances)       ['distances']
    k = arg(1, name=k)                       ['k']
    n_iter = arg(2, name=n_iter)             ['n_iter']
    local_connectivity = arg(3, name=local_connectivity) ['local_connectivity']
    bandwidth = arg(4, name=bandwidth)       ['bandwidth']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=log2) ['$2load_global.0', '$4load_method.1']
    $8call_method.3 = call $4load_method.1(k, func=$4load_method.1, args=[Var(k, umap_.py:189)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_method.1', '$8call_method.3', 'k']
    target = $8call_method.3 * bandwidth     ['$8call_method.3', 'bandwidth', 'target']
    $16load_global.6 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>) ['$16load_global.6']
    $18load_attr.7 = getattr(value=$16load_global.6, attr=zeros) ['$16load_global.6', '$18load_attr.7']
    $22load_attr.9 = getattr(value=distances, attr=shape) ['$22load_attr.9', 'distances']
    $const24.10 = const(int, 0)              ['$const24.10']
    $26binary_subscr.11 = getitem(value=$22load_attr.9, index=$const24.10, fn=<built-in function getitem>) ['$22load_attr.9', '$26binary_subscr.11', '$const24.10']
    $28load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>) ['$28load_global.12']
    $30load_attr.13 = getattr(value=$28load_global.12, attr=float32) ['$28load_global.12', '$30load_attr.13']
    rho = call $18load_attr.7($26binary_subscr.11, func=$18load_attr.7, args=[Var($26binary_subscr.11, umap_.py:190)], kws=[('dtype', Var($30load_attr.13, umap_.py:190))], vararg=None, varkwarg=None, target=None) ['$18load_attr.7', '$26binary_subscr.11', '$30load_attr.13', 'rho']
    $38load_global.16 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>) ['$38load_global.16']
    $40load_attr.17 = getattr(value=$38load_global.16, attr=zeros) ['$38load_global.16', '$40load_attr.17']
    $44load_attr.19 = getattr(value=distances, attr=shape) ['$44load_attr.19', 'distances']
    $const46.20 = const(int, 0)              ['$const46.20']
    $48binary_subscr.21 = getitem(value=$44load_attr.19, index=$const46.20, fn=<built-in function getitem>) ['$44load_attr.19', '$48binary_subscr.21', '$const46.20']
    $50load_global.22 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>) ['$50load_global.22']
    $52load_attr.23 = getattr(value=$50load_global.22, attr=float32) ['$50load_global.22', '$52load_attr.23']
    result = call $40load_attr.17($48binary_subscr.21, func=$40load_attr.17, args=[Var($48binary_subscr.21, umap_.py:191)], kws=[('dtype', Var($52load_attr.23, umap_.py:191))], vararg=None, varkwarg=None, target=None) ['$40load_attr.17', '$48binary_subscr.21', '$52load_attr.23', 'result']
    $60load_global.26 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>) ['$60load_global.26']
    $62load_method.27 = getattr(value=$60load_global.26, attr=mean) ['$60load_global.26', '$62load_method.27']
    mean_distances = call $62load_method.27(distances, func=$62load_method.27, args=[Var(distances, umap_.py:189)], kws=(), vararg=None, varkwarg=None, target=None) ['$62load_method.27', 'distances', 'mean_distances']
    jump 70                                  []
label 70:
    $74load_global.0 = global(range: <class 'range'>) ['$74load_global.0']
    $78load_attr.2 = getattr(value=distances, attr=shape) ['$78load_attr.2', 'distances']
    $const80.3 = const(int, 0)               ['$const80.3']
    $82binary_subscr.4 = getitem(value=$78load_attr.2, index=$const80.3, fn=<built-in function getitem>) ['$78load_attr.2', '$82binary_subscr.4', '$const80.3']
    $84call_function.5 = call $74load_global.0($82binary_subscr.4, func=$74load_global.0, args=[Var($82binary_subscr.4, umap_.py:195)], kws=(), vararg=None, varkwarg=None, target=None) ['$74load_global.0', '$82binary_subscr.4', '$84call_function.5']
    $86get_iter.6 = getiter(value=$84call_function.5) ['$84call_function.5', '$86get_iter.6']
    $phi88.0 = $86get_iter.6                 ['$86get_iter.6', '$phi88.0']
    jump 88                                  []
label 88:
    $88for_iter.1 = iternext(value=$phi88.0) ['$88for_iter.1', '$phi88.0']
    $88for_iter.2 = pair_first(value=$88for_iter.1) ['$88for_iter.1', '$88for_iter.2']
    $88for_iter.3 = pair_second(value=$88for_iter.1) ['$88for_iter.1', '$88for_iter.3']
    $phi92.1 = $88for_iter.2                 ['$88for_iter.2', '$phi92.1']
    branch $88for_iter.3, 92, 572            ['$88for_iter.3']
label 92:
    i = $phi92.1                             ['$phi92.1', 'i']
    lo = const(float, 0.0)                   ['lo']
    hi = global(NPY_INFINITY: inf)           ['hi']
    mid = const(float, 1.0)                  ['mid']
    ith_distances = getitem(value=distances, index=i, fn=<built-in function getitem>) ['distances', 'i', 'ith_distances']
    $const118.10 = const(float, 0.0)         ['$const118.10']
    $120compare_op.11 = ith_distances > $const118.10 ['$120compare_op.11', '$const118.10', 'ith_distances']
    non_zero_dists = getitem(value=ith_distances, index=$120compare_op.11, fn=<built-in function getitem>) ['$120compare_op.11', 'ith_distances', 'non_zero_dists']
    $128load_attr.14 = getattr(value=non_zero_dists, attr=shape) ['$128load_attr.14', 'non_zero_dists']
    $const130.15 = const(int, 0)             ['$const130.15']
    $132binary_subscr.16 = getitem(value=$128load_attr.14, index=$const130.15, fn=<built-in function getitem>) ['$128load_attr.14', '$132binary_subscr.16', '$const130.15']
    $136compare_op.18 = $132binary_subscr.16 >= local_connectivity ['$132binary_subscr.16', '$136compare_op.18', 'local_connectivity']
    bool138 = global(bool: <class 'bool'>)   ['bool138']
    $138pred = call bool138($136compare_op.18, func=bool138, args=(Var($136compare_op.18, umap_.py:203),), kws=(), vararg=None, varkwarg=None, target=None) ['$136compare_op.18', '$138pred', 'bool138']
    branch $138pred, 140, 250                ['$138pred']
label 140:
    $140load_global.1 = global(int: <class 'int'>) ['$140load_global.1']
    $142load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>) ['$142load_global.2']
    $144load_method.3 = getattr(value=$142load_global.2, attr=floor) ['$142load_global.2', '$144load_method.3']
    $148call_method.5 = call $144load_method.3(local_connectivity, func=$144load_method.3, args=[Var(local_connectivity, umap_.py:189)], kws=(), vararg=None, varkwarg=None, target=None) ['$144load_method.3', '$148call_method.5', 'local_connectivity']
    index = call $140load_global.1($148call_method.5, func=$140load_global.1, args=[Var($148call_method.5, umap_.py:204)], kws=(), vararg=None, varkwarg=None, target=None) ['$140load_global.1', '$148call_method.5', 'index']
    interpolation = local_connectivity - index ['index', 'interpolation', 'local_connectivity']
    $const164.11 = const(int, 0)             ['$const164.11']
    $166compare_op.12 = index > $const164.11 ['$166compare_op.12', '$const164.11', 'index']
    bool168 = global(bool: <class 'bool'>)   ['bool168']
    $168pred = call bool168($166compare_op.12, func=bool168, args=(Var($166compare_op.12, umap_.py:206),), kws=(), vararg=None, varkwarg=None, target=None) ['$166compare_op.12', '$168pred', 'bool168']
    branch $168pred, 170, 232                ['$168pred']
label 170:
    $const174.3 = const(int, 1)              ['$const174.3']
    $176binary_subtract.4 = index - $const174.3 ['$176binary_subtract.4', '$const174.3', 'index']
    $178binary_subscr.5 = getitem(value=non_zero_dists, index=$176binary_subtract.4, fn=<built-in function getitem>) ['$176binary_subtract.4', '$178binary_subscr.5', 'non_zero_dists']
    rho[i] = $178binary_subscr.5             ['$178binary_subscr.5', 'i', 'rho']
    $188load_global.9 = global(SMOOTH_K_TOLERANCE: 1e-05) ['$188load_global.9']
    $190compare_op.10 = interpolation > $188load_global.9 ['$188load_global.9', '$190compare_op.10', 'interpolation']
    bool192 = global(bool: <class 'bool'>)   ['bool192']
    $192pred = call bool192($190compare_op.10, func=bool192, args=(Var($190compare_op.10, umap_.py:208),), kws=(), vararg=None, varkwarg=None, target=None) ['$190compare_op.10', '$192pred', 'bool192']
    branch $192pred, 194, 248                ['$192pred']
label 194:
    $200binary_subscr.5 = getitem(value=rho, index=i, fn=<built-in function getitem>) ['$200binary_subscr.5', 'i', 'rho']
    $208binary_subscr.9 = getitem(value=non_zero_dists, index=index, fn=<built-in function getitem>) ['$208binary_subscr.9', 'index', 'non_zero_dists']
    $const214.12 = const(int, 1)             ['$const214.12']
    $216binary_subtract.13 = index - $const214.12 ['$216binary_subtract.13', '$const214.12', 'index']
    $218binary_subscr.14 = getitem(value=non_zero_dists, index=$216binary_subtract.13, fn=<built-in function getitem>) ['$216binary_subtract.13', '$218binary_subscr.14', 'non_zero_dists']
    $220binary_subtract.15 = $208binary_subscr.9 - $218binary_subscr.14 ['$208binary_subscr.9', '$218binary_subscr.14', '$220binary_subtract.15']
    $222binary_multiply.16 = interpolation * $220binary_subtract.15 ['$220binary_subtract.15', '$222binary_multiply.16', 'interpolation']
    $224inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$200binary_subscr.5, rhs=$222binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined) ['$200binary_subscr.5', '$222binary_multiply.16', '$224inplace_add.17']
    rho[i] = $224inplace_add.17              ['$224inplace_add.17', 'i', 'rho']
    jump 248                                 []
label 232:
    $const236.3 = const(int, 0)              ['$const236.3']
    $238binary_subscr.4 = getitem(value=non_zero_dists, index=$const236.3, fn=<built-in function getitem>) ['$238binary_subscr.4', '$const236.3', 'non_zero_dists']
    $240binary_multiply.5 = interpolation * $238binary_subscr.4 ['$238binary_subscr.4', '$240binary_multiply.5', 'interpolation']
    rho[i] = $240binary_multiply.5           ['$240binary_multiply.5', 'i', 'rho']
    jump 248                                 []
label 248:
    jump 280                                 []
label 250:
    $252load_attr.2 = getattr(value=non_zero_dists, attr=shape) ['$252load_attr.2', 'non_zero_dists']
    $const254.3 = const(int, 0)              ['$const254.3']
    $256binary_subscr.4 = getitem(value=$252load_attr.2, index=$const254.3, fn=<built-in function getitem>) ['$252load_attr.2', '$256binary_subscr.4', '$const254.3']
    $const258.5 = const(int, 0)              ['$const258.5']
    $260compare_op.6 = $256binary_subscr.4 > $const258.5 ['$256binary_subscr.4', '$260compare_op.6', '$const258.5']
    bool262 = global(bool: <class 'bool'>)   ['bool262']
    $262pred = call bool262($260compare_op.6, func=bool262, args=(Var($260compare_op.6, umap_.py:214),), kws=(), vararg=None, varkwarg=None, target=None) ['$260compare_op.6', '$262pred', 'bool262']
    branch $262pred, 266, 280                ['$262pred']
label 266:
    $266load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>) ['$266load_global.1']
    $268load_method.2 = getattr(value=$266load_global.1, attr=max) ['$266load_global.1', '$268load_method.2']
    $272call_method.4 = call $268load_method.2(non_zero_dists, func=$268load_method.2, args=[Var(non_zero_dists, umap_.py:202)], kws=(), vararg=None, varkwarg=None, target=None) ['$268load_method.2', '$272call_method.4', 'non_zero_dists']
    rho[i] = $272call_method.4               ['$272call_method.4', 'i', 'rho']
    jump 280                                 []
label 280:
    $282load_global.1 = global(range: <class 'range'>) ['$282load_global.1']
    $286call_function.3 = call $282load_global.1(n_iter, func=$282load_global.1, args=[Var(n_iter, umap_.py:189)], kws=(), vararg=None, varkwarg=None, target=None) ['$282load_global.1', '$286call_function.3', 'n_iter']
    $288get_iter.4 = getiter(value=$286call_function.3) ['$286call_function.3', '$288get_iter.4']
    $phi290.1 = $288get_iter.4               ['$288get_iter.4', '$phi290.1']
    jump 290                                 []
label 290:
    $290for_iter.2 = iternext(value=$phi290.1) ['$290for_iter.2', '$phi290.1']
    $290for_iter.3 = pair_first(value=$290for_iter.2) ['$290for_iter.2', '$290for_iter.3']
    $290for_iter.4 = pair_second(value=$290for_iter.2) ['$290for_iter.2', '$290for_iter.4']
    $phi292.2 = $290for_iter.3               ['$290for_iter.3', '$phi292.2']
    branch $290for_iter.4, 292, 476          ['$290for_iter.4']
label 292:
    n = $phi292.2                            ['$phi292.2', 'n']
    psum = const(float, 0.0)                 ['psum']
    jump 298                                 []
label 298:
    $300load_global.2 = global(range: <class 'range'>) ['$300load_global.2']
    $const302.3 = const(int, 1)              ['$const302.3']
    $306load_attr.5 = getattr(value=distances, attr=shape) ['$306load_attr.5', 'distances']
    $const308.6 = const(int, 1)              ['$const308.6']
    $310binary_subscr.7 = getitem(value=$306load_attr.5, index=$const308.6, fn=<built-in function getitem>) ['$306load_attr.5', '$310binary_subscr.7', '$const308.6']
    $312call_function.8 = call $300load_global.2($const302.3, $310binary_subscr.7, func=$300load_global.2, args=[Var($const302.3, umap_.py:220), Var($310binary_subscr.7, umap_.py:220)], kws=(), vararg=None, varkwarg=None, target=None) ['$300load_global.2', '$310binary_subscr.7', '$312call_function.8', '$const302.3']
    $314get_iter.9 = getiter(value=$312call_function.8) ['$312call_function.8', '$314get_iter.9']
    $phi316.2 = $314get_iter.9               ['$314get_iter.9', '$phi316.2']
    jump 316                                 []
label 316:
    $316for_iter.3 = iternext(value=$phi316.2) ['$316for_iter.3', '$phi316.2']
    $316for_iter.4 = pair_first(value=$316for_iter.3) ['$316for_iter.3', '$316for_iter.4']
    $316for_iter.5 = pair_second(value=$316for_iter.3) ['$316for_iter.3', '$316for_iter.5']
    $phi318.3 = $316for_iter.4               ['$316for_iter.4', '$phi318.3']
    branch $316for_iter.5, 318, 384          ['$316for_iter.5']
label 318:
    j = $phi318.3                            ['$phi318.3', 'j']
    $326build_tuple.7 = build_tuple(items=[Var(i, umap_.py:195), Var(j, umap_.py:220)]) ['$326build_tuple.7', 'i', 'j']
    $328binary_subscr.8 = getitem(value=distances, index=$326build_tuple.7, fn=<built-in function getitem>) ['$326build_tuple.7', '$328binary_subscr.8', 'distances']
    $334binary_subscr.11 = getitem(value=rho, index=i, fn=<built-in function getitem>) ['$334binary_subscr.11', 'i', 'rho']
    d = $328binary_subscr.8 - $334binary_subscr.11 ['$328binary_subscr.8', '$334binary_subscr.11', 'd']
    $const342.14 = const(int, 0)             ['$const342.14']
    $344compare_op.15 = d > $const342.14     ['$344compare_op.15', '$const342.14', 'd']
    bool346 = global(bool: <class 'bool'>)   ['bool346']
    $346pred = call bool346($344compare_op.15, func=bool346, args=(Var($344compare_op.15, umap_.py:222),), kws=(), vararg=None, varkwarg=None, target=None) ['$344compare_op.15', '$346pred', 'bool346']
    branch $346pred, 350, 372                ['$346pred']
label 350:
    $352load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>) ['$352load_global.4']
    $354load_method.5 = getattr(value=$352load_global.4, attr=exp) ['$352load_global.4', '$354load_method.5']
    $360binary_true_divide.8 = d / mid       ['$360binary_true_divide.8', 'd', 'mid']
    $362unary_negative.9 = unary(fn=<built-in function neg>, value=$360binary_true_divide.8) ['$360binary_true_divide.8', '$362unary_negative.9']
    $364call_method.10 = call $354load_method.5($362unary_negative.9, func=$354load_method.5, args=[Var($362unary_negative.9, umap_.py:223)], kws=(), vararg=None, varkwarg=None, target=None) ['$354load_method.5', '$362unary_negative.9', '$364call_method.10']
    $366inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum, rhs=$364call_method.10, static_lhs=Undefined, static_rhs=Undefined) ['$364call_method.10', '$366inplace_add.11', 'psum']
    psum = $366inplace_add.11                ['$366inplace_add.11', 'psum']
    jump 380                                 []
label 372:
    $const374.4 = const(float, 1.0)          ['$const374.4']
    $376inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum, rhs=$const374.4, static_lhs=Undefined, static_rhs=Undefined) ['$376inplace_add.5', '$const374.4', 'psum']
    psum = $376inplace_add.5                 ['$376inplace_add.5', 'psum']
    jump 380                                 []
label 380:
    jump 316                                 []
label 384:
    jump 386                                 []
label 386:
    $386load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>) ['$386load_global.2']
    $388load_method.3 = getattr(value=$386load_global.2, attr=fabs) ['$386load_global.2', '$388load_method.3']
    $394binary_subtract.6 = psum - target    ['$394binary_subtract.6', 'psum', 'target']
    $396call_method.7 = call $388load_method.3($394binary_subtract.6, func=$388load_method.3, args=[Var($394binary_subtract.6, umap_.py:227)], kws=(), vararg=None, varkwarg=None, target=None) ['$388load_method.3', '$394binary_subtract.6', '$396call_method.7']
    $398load_global.8 = global(SMOOTH_K_TOLERANCE: 1e-05) ['$398load_global.8']
    $400compare_op.9 = $396call_method.7 < $398load_global.8 ['$396call_method.7', '$398load_global.8', '$400compare_op.9']
    bool402 = global(bool: <class 'bool'>)   ['bool402']
    $402pred = call bool402($400compare_op.9, func=bool402, args=(Var($400compare_op.9, umap_.py:227),), kws=(), vararg=None, varkwarg=None, target=None) ['$400compare_op.9', '$402pred', 'bool402']
    branch $402pred, 406, 408                ['$402pred']
label 406:
    jump 478                                 []
label 408:
    $412compare_op.4 = psum > target         ['$412compare_op.4', 'psum', 'target']
    bool414 = global(bool: <class 'bool'>)   ['bool414']
    $414pred = call bool414($412compare_op.4, func=bool414, args=(Var($412compare_op.4, umap_.py:230),), kws=(), vararg=None, varkwarg=None, target=None) ['$412compare_op.4', '$414pred', 'bool414']
    branch $414pred, 418, 436                ['$414pred']
label 418:
    hi = mid                                 ['hi', 'mid']
    $426binary_add.5 = lo + hi               ['$426binary_add.5', 'hi', 'lo']
    $const428.6 = const(float, 2.0)          ['$const428.6']
    mid = $426binary_add.5 / $const428.6     ['$426binary_add.5', '$const428.6', 'mid']
    jump 472                                 []
label 436:
    lo = mid                                 ['lo', 'mid']
    $442load_global.4 = global(NPY_INFINITY: inf) ['$442load_global.4']
    $444compare_op.5 = hi == $442load_global.4 ['$442load_global.4', '$444compare_op.5', 'hi']
    bool446 = global(bool: <class 'bool'>)   ['bool446']
    $446pred = call bool446($444compare_op.5, func=bool446, args=(Var($444compare_op.5, umap_.py:235),), kws=(), vararg=None, varkwarg=None, target=None) ['$444compare_op.5', '$446pred', 'bool446']
    branch $446pred, 450, 460                ['$446pred']
label 450:
    $const452.3 = const(int, 2)              ['$const452.3']
    $454inplace_multiply.4 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=mid, rhs=$const452.3, static_lhs=Undefined, static_rhs=Undefined) ['$454inplace_multiply.4', '$const452.3', 'mid']
    mid = $454inplace_multiply.4             ['$454inplace_multiply.4', 'mid']
    jump 472                                 []
label 460:
    $464binary_add.4 = lo + hi               ['$464binary_add.4', 'hi', 'lo']
    $const466.5 = const(float, 2.0)          ['$const466.5']
    mid = $464binary_add.4 / $const466.5     ['$464binary_add.4', '$const466.5', 'mid']
    jump 472                                 []
label 472:
    jump 290                                 []
label 476:
    jump 478                                 []
label 478:
    result[i] = mid                          ['i', 'mid', 'result']
    $490binary_subscr.6 = getitem(value=rho, index=i, fn=<built-in function getitem>) ['$490binary_subscr.6', 'i', 'rho']
    $const492.7 = const(float, 0.0)          ['$const492.7']
    $494compare_op.8 = $490binary_subscr.6 > $const492.7 ['$490binary_subscr.6', '$494compare_op.8', '$const492.7']
    bool496 = global(bool: <class 'bool'>)   ['bool496']
    $496pred = call bool496($494compare_op.8, func=bool496, args=(Var($494compare_op.8, umap_.py:243),), kws=(), vararg=None, varkwarg=None, target=None) ['$494compare_op.8', '$496pred', 'bool496']
    branch $496pred, 500, 542                ['$496pred']
label 500:
    $500load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>) ['$500load_global.1']
    $502load_method.2 = getattr(value=$500load_global.1, attr=mean) ['$500load_global.1', '$502load_method.2']
    mean_ith_distances = call $502load_method.2(ith_distances, func=$502load_method.2, args=[Var(ith_distances, umap_.py:201)], kws=(), vararg=None, varkwarg=None, target=None) ['$502load_method.2', 'ith_distances', 'mean_ith_distances']
    $514binary_subscr.7 = getitem(value=result, index=i, fn=<built-in function getitem>) ['$514binary_subscr.7', 'i', 'result']
    $516load_global.8 = global(MIN_K_DIST_SCALE: 0.001) ['$516load_global.8']
    $520binary_multiply.10 = $516load_global.8 * mean_ith_distances ['$516load_global.8', '$520binary_multiply.10', 'mean_ith_distances']
    $522compare_op.11 = $514binary_subscr.7 < $520binary_multiply.10 ['$514binary_subscr.7', '$520binary_multiply.10', '$522compare_op.11']
    bool524 = global(bool: <class 'bool'>)   ['bool524']
    $524pred = call bool524($522compare_op.11, func=bool524, args=(Var($522compare_op.11, umap_.py:245),), kws=(), vararg=None, varkwarg=None, target=None) ['$522compare_op.11', '$524pred', 'bool524']
    branch $524pred, 528, 570                ['$524pred']
label 528:
    $528load_global.1 = global(MIN_K_DIST_SCALE: 0.001) ['$528load_global.1']
    $532binary_multiply.3 = $528load_global.1 * mean_ith_distances ['$528load_global.1', '$532binary_multiply.3', 'mean_ith_distances']
    result[i] = $532binary_multiply.3        ['$532binary_multiply.3', 'i', 'result']
    jump 88                                  []
label 542:
    $546binary_subscr.3 = getitem(value=result, index=i, fn=<built-in function getitem>) ['$546binary_subscr.3', 'i', 'result']
    $548load_global.4 = global(MIN_K_DIST_SCALE: 0.001) ['$548load_global.4']
    $552binary_multiply.6 = $548load_global.4 * mean_distances ['$548load_global.4', '$552binary_multiply.6', 'mean_distances']
    $554compare_op.7 = $546binary_subscr.3 < $552binary_multiply.6 ['$546binary_subscr.3', '$552binary_multiply.6', '$554compare_op.7']
    bool556 = global(bool: <class 'bool'>)   ['bool556']
    $556pred = call bool556($554compare_op.7, func=bool556, args=(Var($554compare_op.7, umap_.py:248),), kws=(), vararg=None, varkwarg=None, target=None) ['$554compare_op.7', '$556pred', 'bool556']
    branch $556pred, 558, 88                 ['$556pred']
label 558:
    $558load_global.1 = global(MIN_K_DIST_SCALE: 0.001) ['$558load_global.1']
    $562binary_multiply.3 = $558load_global.1 * mean_distances ['$558load_global.1', '$562binary_multiply.3', 'mean_distances']
    result[i] = $562binary_multiply.3        ['$562binary_multiply.3', 'i', 'result']
    jump 570                                 []
label 570:
    jump 88                                  []
label 572:
    jump 574                                 []
label 574:
    $578build_tuple.2 = build_tuple(items=[Var(result, umap_.py:191), Var(rho, umap_.py:190)]) ['$578build_tuple.2', 'result', 'rho']
    $580return_value.3 = cast(value=$578build_tuple.2) ['$578build_tuple.2', '$580return_value.3']
    return $580return_value.3                ['$580return_value.3']

Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 0
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91E7A088>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: distances = arg(0, name=distances)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: k = arg(1, name=k)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: n_iter = arg(2, name=n_iter)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: local_connectivity = arg(3, name=local_connectivity)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bandwidth = arg(4, name=bandwidth)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=log2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $8call_method.3 = call $4load_method.1(k, func=$4load_method.1, args=[Var(k, umap_.py:189)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: target = $8call_method.3 * bandwidth
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $16load_global.6 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $18load_attr.7 = getattr(value=$16load_global.6, attr=zeros)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $22load_attr.9 = getattr(value=distances, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const24.10 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $26binary_subscr.11 = static_getitem(value=$22load_attr.9, index=0, index_var=$const24.10, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $28load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $30load_attr.13 = getattr(value=$28load_global.12, attr=float32)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho = call $18load_attr.7($26binary_subscr.11, func=$18load_attr.7, args=[Var($26binary_subscr.11, umap_.py:190)], kws=[('dtype', Var($30load_attr.13, umap_.py:190))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $38load_global.16 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $40load_attr.17 = getattr(value=$38load_global.16, attr=zeros)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $44load_attr.19 = getattr(value=distances, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const46.20 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $48binary_subscr.21 = static_getitem(value=$44load_attr.19, index=0, index_var=$const46.20, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $50load_global.22 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $52load_attr.23 = getattr(value=$50load_global.22, attr=float32)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: result = call $40load_attr.17($48binary_subscr.21, func=$40load_attr.17, args=[Var($48binary_subscr.21, umap_.py:191)], kws=[('dtype', Var($52load_attr.23, umap_.py:191))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $60load_global.26 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $62load_method.27 = getattr(value=$60load_global.26, attr=mean)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mean_distances = call $62load_method.27(distances, func=$62load_method.27, args=[Var(distances, umap_.py:189)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 70
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 70
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91E7A088>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $74load_global.0 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $78load_attr.2 = getattr(value=distances, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const80.3 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $82binary_subscr.4 = static_getitem(value=$78load_attr.2, index=0, index_var=$const80.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $84call_function.5 = call $74load_global.0($82binary_subscr.4, func=$74load_global.0, args=[Var($82binary_subscr.4, umap_.py:195)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $86get_iter.6 = getiter(value=$84call_function.5)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi88.0 = $86get_iter.6
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 88
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 88
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91E7A088>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $88for_iter.1 = iternext(value=$phi88.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $88for_iter.2 = pair_first(value=$88for_iter.1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $88for_iter.3 = pair_second(value=$88for_iter.1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi92.1 = $88for_iter.2
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $88for_iter.3, 92, 572
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 92
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91E7A088>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: i = $phi92.1
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: lo = const(float, 0.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: hi = global(NPY_INFINITY: inf)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mid = const(float, 1.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: ith_distances = getitem(value=distances, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const118.10 = const(float, 0.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $120compare_op.11 = ith_distances > $const118.10
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: non_zero_dists = getitem(value=ith_distances, index=$120compare_op.11, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $128load_attr.14 = getattr(value=non_zero_dists, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const130.15 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $132binary_subscr.16 = static_getitem(value=$128load_attr.14, index=0, index_var=$const130.15, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $136compare_op.18 = $132binary_subscr.16 >= local_connectivity
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool138 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $138pred = call bool138($136compare_op.18, func=bool138, args=(Var($136compare_op.18, umap_.py:203),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $138pred, 140, 250
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 140
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91E7A088>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $140load_global.1 = global(int: <class 'int'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $142load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $144load_method.3 = getattr(value=$142load_global.2, attr=floor)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $148call_method.5 = call $144load_method.3(local_connectivity, func=$144load_method.3, args=[Var(local_connectivity, umap_.py:189)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: index = call $140load_global.1($148call_method.5, func=$140load_global.1, args=[Var($148call_method.5, umap_.py:204)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: interpolation = local_connectivity - index
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const164.11 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $166compare_op.12 = index > $const164.11
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool168 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $168pred = call bool168($166compare_op.12, func=bool168, args=(Var($166compare_op.12, umap_.py:206),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $168pred, 170, 232
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 170
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91E7A088>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const174.3 = const(int, 1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $176binary_subtract.4 = index - $const174.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $178binary_subscr.5 = getitem(value=non_zero_dists, index=$176binary_subtract.4, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho[i] = $178binary_subscr.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $188load_global.9 = global(SMOOTH_K_TOLERANCE: 1e-05)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $190compare_op.10 = interpolation > $188load_global.9
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool192 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $192pred = call bool192($190compare_op.10, func=bool192, args=(Var($190compare_op.10, umap_.py:208),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $192pred, 194, 248
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 194
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91E7A088>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $200binary_subscr.5 = getitem(value=rho, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $208binary_subscr.9 = getitem(value=non_zero_dists, index=index, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const214.12 = const(int, 1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $216binary_subtract.13 = index - $const214.12
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $218binary_subscr.14 = getitem(value=non_zero_dists, index=$216binary_subtract.13, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $220binary_subtract.15 = $208binary_subscr.9 - $218binary_subscr.14
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $222binary_multiply.16 = interpolation * $220binary_subtract.15
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $224inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$200binary_subscr.5, rhs=$222binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho[i] = $224inplace_add.17
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 248
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 232
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91E7A088>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const236.3 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $238binary_subscr.4 = static_getitem(value=non_zero_dists, index=0, index_var=$const236.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $240binary_multiply.5 = interpolation * $238binary_subscr.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho[i] = $240binary_multiply.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 248
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 248
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91E7A088>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 250
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91E7A088>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $252load_attr.2 = getattr(value=non_zero_dists, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const254.3 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $256binary_subscr.4 = static_getitem(value=$252load_attr.2, index=0, index_var=$const254.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const258.5 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $260compare_op.6 = $256binary_subscr.4 > $const258.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool262 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $262pred = call bool262($260compare_op.6, func=bool262, args=(Var($260compare_op.6, umap_.py:214),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $262pred, 266, 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 266
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91E7A088>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $266load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $268load_method.2 = getattr(value=$266load_global.1, attr=max)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $272call_method.4 = call $268load_method.2(non_zero_dists, func=$268load_method.2, args=[Var(non_zero_dists, umap_.py:202)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho[i] = $272call_method.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91E7A088>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $282load_global.1 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $286call_function.3 = call $282load_global.1(n_iter, func=$282load_global.1, args=[Var(n_iter, umap_.py:189)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $288get_iter.4 = getiter(value=$286call_function.3)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi290.1 = $288get_iter.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91E7A088>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $290for_iter.2 = iternext(value=$phi290.1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $290for_iter.3 = pair_first(value=$290for_iter.2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $290for_iter.4 = pair_second(value=$290for_iter.2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi292.2 = $290for_iter.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $290for_iter.4, 292, 476
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 292
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91E7A088>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: n = $phi292.2
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: psum = const(float, 0.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91E7A088>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $300load_global.2 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const302.3 = const(int, 1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $306load_attr.5 = getattr(value=distances, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const308.6 = const(int, 1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $310binary_subscr.7 = static_getitem(value=$306load_attr.5, index=1, index_var=$const308.6, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $312call_function.8 = call $300load_global.2($const302.3, $310binary_subscr.7, func=$300load_global.2, args=[Var($const302.3, umap_.py:220), Var($310binary_subscr.7, umap_.py:220)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $314get_iter.9 = getiter(value=$312call_function.8)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi316.2 = $314get_iter.9
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91E7A088>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $316for_iter.3 = iternext(value=$phi316.2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $316for_iter.4 = pair_first(value=$316for_iter.3)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $316for_iter.5 = pair_second(value=$316for_iter.3)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi318.3 = $316for_iter.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $316for_iter.5, 318, 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 318
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91E7A088>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: j = $phi318.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $326build_tuple.7 = build_tuple(items=[Var(i, umap_.py:195), Var(j, umap_.py:220)])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $328binary_subscr.8 = getitem(value=distances, index=$326build_tuple.7, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $334binary_subscr.11 = getitem(value=rho, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: d = $328binary_subscr.8 - $334binary_subscr.11
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const342.14 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $344compare_op.15 = d > $const342.14
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool346 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $346pred = call bool346($344compare_op.15, func=bool346, args=(Var($344compare_op.15, umap_.py:222),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $346pred, 350, 372
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 350
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91E7A088>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $352load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $354load_method.5 = getattr(value=$352load_global.4, attr=exp)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $360binary_true_divide.8 = d / mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $362unary_negative.9 = unary(fn=<built-in function neg>, value=$360binary_true_divide.8)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $364call_method.10 = call $354load_method.5($362unary_negative.9, func=$354load_method.5, args=[Var($362unary_negative.9, umap_.py:223)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $366inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum, rhs=$364call_method.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: psum = $366inplace_add.11
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 380
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 372
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91E7A088>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const374.4 = const(float, 1.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $376inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum, rhs=$const374.4, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: psum = $376inplace_add.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 380
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 380
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91E7A088>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91E7A088>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91E7A088>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $386load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $388load_method.3 = getattr(value=$386load_global.2, attr=fabs)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $394binary_subtract.6 = psum - target
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $396call_method.7 = call $388load_method.3($394binary_subtract.6, func=$388load_method.3, args=[Var($394binary_subtract.6, umap_.py:227)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $398load_global.8 = global(SMOOTH_K_TOLERANCE: 1e-05)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $400compare_op.9 = $396call_method.7 < $398load_global.8
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool402 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $402pred = call bool402($400compare_op.9, func=bool402, args=(Var($400compare_op.9, umap_.py:227),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $402pred, 406, 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 406
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91E7A088>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 478
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91E7A088>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $412compare_op.4 = psum > target
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool414 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $414pred = call bool414($412compare_op.4, func=bool414, args=(Var($412compare_op.4, umap_.py:230),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $414pred, 418, 436
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 418
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91E7A088>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: hi = mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $426binary_add.5 = lo + hi
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const428.6 = const(float, 2.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mid = $426binary_add.5 / $const428.6
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 436
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91E7A088>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: lo = mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $442load_global.4 = global(NPY_INFINITY: inf)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $444compare_op.5 = hi == $442load_global.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool446 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $446pred = call bool446($444compare_op.5, func=bool446, args=(Var($444compare_op.5, umap_.py:235),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $446pred, 450, 460
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 450
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91E7A088>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const452.3 = const(int, 2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $454inplace_multiply.4 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=mid, rhs=$const452.3, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mid = $454inplace_multiply.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 460
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91E7A088>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $464binary_add.4 = lo + hi
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const466.5 = const(float, 2.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mid = $464binary_add.4 / $const466.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91E7A088>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 476
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91E7A088>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 478
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 478
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91E7A088>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: result[i] = mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $490binary_subscr.6 = getitem(value=rho, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const492.7 = const(float, 0.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $494compare_op.8 = $490binary_subscr.6 > $const492.7
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool496 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $496pred = call bool496($494compare_op.8, func=bool496, args=(Var($494compare_op.8, umap_.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $496pred, 500, 542
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 500
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91E7A088>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $500load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $502load_method.2 = getattr(value=$500load_global.1, attr=mean)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mean_ith_distances = call $502load_method.2(ith_distances, func=$502load_method.2, args=[Var(ith_distances, umap_.py:201)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $514binary_subscr.7 = getitem(value=result, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $516load_global.8 = global(MIN_K_DIST_SCALE: 0.001)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $520binary_multiply.10 = $516load_global.8 * mean_ith_distances
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $522compare_op.11 = $514binary_subscr.7 < $520binary_multiply.10
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool524 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $524pred = call bool524($522compare_op.11, func=bool524, args=(Var($522compare_op.11, umap_.py:245),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $524pred, 528, 570
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 528
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91E7A088>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $528load_global.1 = global(MIN_K_DIST_SCALE: 0.001)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $532binary_multiply.3 = $528load_global.1 * mean_ith_distances
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: result[i] = $532binary_multiply.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 575
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 542
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91E7A088>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $546binary_subscr.3 = getitem(value=result, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $548load_global.4 = global(MIN_K_DIST_SCALE: 0.001)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $552binary_multiply.6 = $548load_global.4 * mean_distances
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $554compare_op.7 = $546binary_subscr.3 < $552binary_multiply.6
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool556 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $556pred = call bool556($554compare_op.7, func=bool556, args=(Var($554compare_op.7, umap_.py:248),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $556pred, 558, 575
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 558
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91E7A088>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $558load_global.1 = global(MIN_K_DIST_SCALE: 0.001)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $562binary_multiply.3 = $558load_global.1 * mean_distances
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: result[i] = $562binary_multiply.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 570
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 570
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91E7A088>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 575
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 572
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91E7A088>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 574
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 574
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91E7A088>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $578build_tuple.2 = build_tuple(items=[Var(result, umap_.py:191), Var(rho, umap_.py:190)])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $580return_value.3 = cast(value=$578build_tuple.2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: return $580return_value.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 575
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91E7A088>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 88
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG defs defaultdict(<class 'list'>,
            {'$120compare_op.11': [<numba.core.ir.Assign object at 0x0000015A87E531C8>],
             '$128load_attr.14': [<numba.core.ir.Assign object at 0x0000015A87E53808>],
             '$132binary_subscr.16': [<numba.core.ir.Assign object at 0x0000015A91E77808>],
             '$136compare_op.18': [<numba.core.ir.Assign object at 0x0000015A87E53FC8>],
             '$138pred': [<numba.core.ir.Assign object at 0x0000015A8A9DB0C8>],
             '$140load_global.1': [<numba.core.ir.Assign object at 0x0000015A87E53788>],
             '$142load_global.2': [<numba.core.ir.Assign object at 0x0000015A8AF8CF88>],
             '$144load_method.3': [<numba.core.ir.Assign object at 0x0000015A8A9DB108>],
             '$148call_method.5': [<numba.core.ir.Assign object at 0x0000015A8A9DB648>],
             '$166compare_op.12': [<numba.core.ir.Assign object at 0x0000015A8A9DB5C8>],
             '$168pred': [<numba.core.ir.Assign object at 0x0000015A8A9D7208>],
             '$16load_global.6': [<numba.core.ir.Assign object at 0x0000015A91E675C8>],
             '$176binary_subtract.4': [<numba.core.ir.Assign object at 0x0000015A8A9D7748>],
             '$178binary_subscr.5': [<numba.core.ir.Assign object at 0x0000015A8A9D7848>],
             '$188load_global.9': [<numba.core.ir.Assign object at 0x0000015A8A9D7D88>],
             '$18load_attr.7': [<numba.core.ir.Assign object at 0x0000015A91E671C8>],
             '$190compare_op.10': [<numba.core.ir.Assign object at 0x0000015A8A9D7FC8>],
             '$192pred': [<numba.core.ir.Assign object at 0x0000015A8A9D9188>],
             '$200binary_subscr.5': [<numba.core.ir.Assign object at 0x0000015A8A9D9E88>],
             '$208binary_subscr.9': [<numba.core.ir.Assign object at 0x0000015A8A9D9608>],
             '$216binary_subtract.13': [<numba.core.ir.Assign object at 0x0000015A38B80488>],
             '$218binary_subscr.14': [<numba.core.ir.Assign object at 0x0000015A29F08848>],
             '$220binary_subtract.15': [<numba.core.ir.Assign object at 0x0000015A38B72B88>],
             '$222binary_multiply.16': [<numba.core.ir.Assign object at 0x0000015A38B7F3C8>],
             '$224inplace_add.17': [<numba.core.ir.Assign object at 0x0000015B286A1A88>],
             '$22load_attr.9': [<numba.core.ir.Assign object at 0x0000015A91E67408>],
             '$238binary_subscr.4': [<numba.core.ir.Assign object at 0x0000015A91E77E88>],
             '$240binary_multiply.5': [<numba.core.ir.Assign object at 0x0000015A87E26BC8>],
             '$252load_attr.2': [<numba.core.ir.Assign object at 0x0000015A87E26C08>],
             '$256binary_subscr.4': [<numba.core.ir.Assign object at 0x0000015A91E77D88>],
             '$260compare_op.6': [<numba.core.ir.Assign object at 0x0000015A87E4D9C8>],
             '$262pred': [<numba.core.ir.Assign object at 0x0000015A87E4D388>],
             '$266load_global.1': [<numba.core.ir.Assign object at 0x0000015A87E4D1C8>],
             '$268load_method.2': [<numba.core.ir.Assign object at 0x0000015A87E4D288>],
             '$26binary_subscr.11': [<numba.core.ir.Assign object at 0x0000015A91E2BF08>],
             '$272call_method.4': [<numba.core.ir.Assign object at 0x0000015A87E4D208>],
             '$282load_global.1': [<numba.core.ir.Assign object at 0x0000015A87E4DBC8>],
             '$286call_function.3': [<numba.core.ir.Assign object at 0x0000015A38B8BA48>],
             '$288get_iter.4': [<numba.core.ir.Assign object at 0x0000015A38AF1748>],
             '$28load_global.12': [<numba.core.ir.Assign object at 0x0000015A91E49548>],
             '$290for_iter.2': [<numba.core.ir.Assign object at 0x0000015A8AF66688>],
             '$290for_iter.3': [<numba.core.ir.Assign object at 0x0000015A8AF66908>],
             '$290for_iter.4': [<numba.core.ir.Assign object at 0x0000015A8AF66A08>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000015A91E4E188>],
             '$300load_global.2': [<numba.core.ir.Assign object at 0x0000015A8AF663C8>],
             '$306load_attr.5': [<numba.core.ir.Assign object at 0x0000015A87E54388>],
             '$30load_attr.13': [<numba.core.ir.Assign object at 0x0000015A91E49E48>],
             '$310binary_subscr.7': [<numba.core.ir.Assign object at 0x0000015A91E775C8>],
             '$312call_function.8': [<numba.core.ir.Assign object at 0x0000015A87E54B08>],
             '$314get_iter.9': [<numba.core.ir.Assign object at 0x0000015A87E54C48>],
             '$316for_iter.3': [<numba.core.ir.Assign object at 0x0000015A87E54AC8>],
             '$316for_iter.4': [<numba.core.ir.Assign object at 0x0000015A87E54F88>],
             '$316for_iter.5': [<numba.core.ir.Assign object at 0x0000015A87E54FC8>],
             '$326build_tuple.7': [<numba.core.ir.Assign object at 0x0000015A8A9D61C8>],
             '$328binary_subscr.8': [<numba.core.ir.Assign object at 0x0000015A8A9D6EC8>],
             '$334binary_subscr.11': [<numba.core.ir.Assign object at 0x0000015A8A9D6348>],
             '$344compare_op.15': [<numba.core.ir.Assign object at 0x0000015A8A9D6808>],
             '$346pred': [<numba.core.ir.Assign object at 0x0000015A8A9DCC88>],
             '$352load_global.4': [<numba.core.ir.Assign object at 0x0000015A8A9DCBC8>],
             '$354load_method.5': [<numba.core.ir.Assign object at 0x0000015A8A9DC908>],
             '$360binary_true_divide.8': [<numba.core.ir.Assign object at 0x0000015A8A9DC248>],
             '$362unary_negative.9': [<numba.core.ir.Assign object at 0x0000015A8A9DCF48>],
             '$364call_method.10': [<numba.core.ir.Assign object at 0x0000015A8A9DCDC8>],
             '$366inplace_add.11': [<numba.core.ir.Assign object at 0x0000015A8A9DC448>],
             '$376inplace_add.5': [<numba.core.ir.Assign object at 0x0000015A87E4E708>],
             '$386load_global.2': [<numba.core.ir.Assign object at 0x0000015A87E4E788>],
             '$388load_method.3': [<numba.core.ir.Assign object at 0x0000015A87E4E8C8>],
             '$38load_global.16': [<numba.core.ir.Assign object at 0x0000015A91E41E48>],
             '$394binary_subtract.6': [<numba.core.ir.Assign object at 0x0000015A87E4EFC8>],
             '$396call_method.7': [<numba.core.ir.Assign object at 0x0000015A87E4EC88>],
             '$398load_global.8': [<numba.core.ir.Assign object at 0x0000015A87E4EBC8>],
             '$400compare_op.9': [<numba.core.ir.Assign object at 0x0000015A87E4E248>],
             '$402pred': [<numba.core.ir.Assign object at 0x0000015A87E5AF88>],
             '$40load_attr.17': [<numba.core.ir.Assign object at 0x0000015A91E41708>],
             '$412compare_op.4': [<numba.core.ir.Assign object at 0x0000015A87E5A988>],
             '$414pred': [<numba.core.ir.Assign object at 0x0000015A8AF78EC8>],
             '$426binary_add.5': [<numba.core.ir.Assign object at 0x0000015A8AF78508>],
             '$442load_global.4': [<numba.core.ir.Assign object at 0x0000015A8AF78DC8>],
             '$444compare_op.5': [<numba.core.ir.Assign object at 0x0000015A8AF78108>],
             '$446pred': [<numba.core.ir.Assign object at 0x0000015A91E6B708>],
             '$44load_attr.19': [<numba.core.ir.Assign object at 0x0000015A91E384C8>],
             '$454inplace_multiply.4': [<numba.core.ir.Assign object at 0x0000015A91E6B348>],
             '$464binary_add.4': [<numba.core.ir.Assign object at 0x0000015A91E6BBC8>],
             '$48binary_subscr.21': [<numba.core.ir.Assign object at 0x0000015A91E2BC88>],
             '$490binary_subscr.6': [<numba.core.ir.Assign object at 0x0000015A8A9DD888>],
             '$494compare_op.8': [<numba.core.ir.Assign object at 0x0000015A8A9DDB08>],
             '$496pred': [<numba.core.ir.Assign object at 0x0000015A8A9DDD88>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x0000015A91E4E108>],
             '$500load_global.1': [<numba.core.ir.Assign object at 0x0000015A8A9DD748>],
             '$502load_method.2': [<numba.core.ir.Assign object at 0x0000015A8A9DDF88>],
             '$50load_global.22': [<numba.core.ir.Assign object at 0x0000015A91E38A48>],
             '$514binary_subscr.7': [<numba.core.ir.Assign object at 0x0000015A8A9D5788>],
             '$516load_global.8': [<numba.core.ir.Assign object at 0x0000015A8A9D58C8>],
             '$520binary_multiply.10': [<numba.core.ir.Assign object at 0x0000015A8A9D5B08>],
             '$522compare_op.11': [<numba.core.ir.Assign object at 0x0000015A8A9D5C48>],
             '$524pred': [<numba.core.ir.Assign object at 0x0000015A8A9D5F08>],
             '$528load_global.1': [<numba.core.ir.Assign object at 0x0000015A8A9D59C8>],
             '$52load_attr.23': [<numba.core.ir.Assign object at 0x0000015A91E38908>],
             '$532binary_multiply.3': [<numba.core.ir.Assign object at 0x0000015A87E50288>],
             '$546binary_subscr.3': [<numba.core.ir.Assign object at 0x0000015A87E50988>],
             '$548load_global.4': [<numba.core.ir.Assign object at 0x0000015A87E50AC8>],
             '$552binary_multiply.6': [<numba.core.ir.Assign object at 0x0000015A87E50D88>],
             '$554compare_op.7': [<numba.core.ir.Assign object at 0x0000015A87E50EC8>],
             '$556pred': [<numba.core.ir.Assign object at 0x0000015A87E2A0C8>],
             '$558load_global.1': [<numba.core.ir.Assign object at 0x0000015A87E2A348>],
             '$562binary_multiply.3': [<numba.core.ir.Assign object at 0x0000015A87E2A788>],
             '$578build_tuple.2': [<numba.core.ir.Assign object at 0x0000015A87E2AEC8>],
             '$580return_value.3': [<numba.core.ir.Assign object at 0x0000015A87E2A588>],
             '$60load_global.26': [<numba.core.ir.Assign object at 0x0000015A91E2FF08>],
             '$62load_method.27': [<numba.core.ir.Assign object at 0x0000015A91E2FA08>],
             '$74load_global.0': [<numba.core.ir.Assign object at 0x0000015A91E2F948>],
             '$78load_attr.2': [<numba.core.ir.Assign object at 0x0000015A29F0B448>],
             '$82binary_subscr.4': [<numba.core.ir.Assign object at 0x0000015A91E77048>],
             '$84call_function.5': [<numba.core.ir.Assign object at 0x0000015A8AF83D48>],
             '$86get_iter.6': [<numba.core.ir.Assign object at 0x0000015A8AF8C408>],
             '$88for_iter.1': [<numba.core.ir.Assign object at 0x0000015A8AF8C8C8>],
             '$88for_iter.2': [<numba.core.ir.Assign object at 0x0000015A8AF8C048>],
             '$88for_iter.3': [<numba.core.ir.Assign object at 0x0000015A8AF8CF08>],
             '$8call_method.3': [<numba.core.ir.Assign object at 0x0000015A91E4E988>],
             '$const118.10': [<numba.core.ir.Assign object at 0x0000015A87E53308>],
             '$const130.15': [<numba.core.ir.Assign object at 0x0000015A87E539C8>],
             '$const164.11': [<numba.core.ir.Assign object at 0x0000015A8A9DBE88>],
             '$const174.3': [<numba.core.ir.Assign object at 0x0000015A8A9D7648>],
             '$const214.12': [<numba.core.ir.Assign object at 0x0000015A38B00D48>],
             '$const236.3': [<numba.core.ir.Assign object at 0x0000015A87E26D08>],
             '$const24.10': [<numba.core.ir.Assign object at 0x0000015A91E49C08>],
             '$const254.3': [<numba.core.ir.Assign object at 0x0000015A87E26888>],
             '$const258.5': [<numba.core.ir.Assign object at 0x0000015A87E26EC8>],
             '$const302.3': [<numba.core.ir.Assign object at 0x0000015A8AF66F88>],
             '$const308.6': [<numba.core.ir.Assign object at 0x0000015A87E54648>],
             '$const342.14': [<numba.core.ir.Assign object at 0x0000015A8A9D6488>],
             '$const374.4': [<numba.core.ir.Assign object at 0x0000015A28D00388>],
             '$const428.6': [<numba.core.ir.Assign object at 0x0000015A8AF78348>],
             '$const452.3': [<numba.core.ir.Assign object at 0x0000015A91E6B488>],
             '$const46.20': [<numba.core.ir.Assign object at 0x0000015A91E38108>],
             '$const466.5': [<numba.core.ir.Assign object at 0x0000015A91E6BD08>],
             '$const492.7': [<numba.core.ir.Assign object at 0x0000015A8A9DD9C8>],
             '$const80.3': [<numba.core.ir.Assign object at 0x0000015A8AD7AF08>],
             '$phi290.1': [<numba.core.ir.Assign object at 0x0000015A87E4DFC8>],
             '$phi292.2': [<numba.core.ir.Assign object at 0x0000015A8AF66B08>],
             '$phi316.2': [<numba.core.ir.Assign object at 0x0000015A87E547C8>],
             '$phi318.3': [<numba.core.ir.Assign object at 0x0000015A87E54E48>],
             '$phi88.0': [<numba.core.ir.Assign object at 0x0000015B286AF348>],
             '$phi92.1': [<numba.core.ir.Assign object at 0x0000015A8AF8C688>],
             'bandwidth': [<numba.core.ir.Assign object at 0x0000015A91E5E748>],
             'bool138': [<numba.core.ir.Assign object at 0x0000015A8AF5F408>],
             'bool168': [<numba.core.ir.Assign object at 0x0000015A8A9D7188>],
             'bool192': [<numba.core.ir.Assign object at 0x0000015A8A9D9FC8>],
             'bool262': [<numba.core.ir.Assign object at 0x0000015A87E4D948>],
             'bool346': [<numba.core.ir.Assign object at 0x0000015A8A9DC388>],
             'bool402': [<numba.core.ir.Assign object at 0x0000015A87E5A848>],
             'bool414': [<numba.core.ir.Assign object at 0x0000015A87E5A588>],
             'bool446': [<numba.core.ir.Assign object at 0x0000015A91E6B288>],
             'bool496': [<numba.core.ir.Assign object at 0x0000015A8A9DDC48>],
             'bool524': [<numba.core.ir.Assign object at 0x0000015A8A9D5DC8>],
             'bool556': [<numba.core.ir.Assign object at 0x0000015A87E2A088>],
             'd': [<numba.core.ir.Assign object at 0x0000015A8A9D6648>],
             'distances': [<numba.core.ir.Assign object at 0x0000015A91E5EC08>],
             'hi': [<numba.core.ir.Assign object at 0x0000015A8AF8CA88>,
                    <numba.core.ir.Assign object at 0x0000015A87E4E388>],
             'i': [<numba.core.ir.Assign object at 0x0000015A8AF8CC88>],
             'index': [<numba.core.ir.Assign object at 0x0000015A8A9DB888>],
             'interpolation': [<numba.core.ir.Assign object at 0x0000015A8A9DBB48>],
             'ith_distances': [<numba.core.ir.Assign object at 0x0000015A8AF88BC8>],
             'j': [<numba.core.ir.Assign object at 0x0000015A87E54248>],
             'k': [<numba.core.ir.Assign object at 0x0000015A91E5EEC8>],
             'lo': [<numba.core.ir.Assign object at 0x0000015A8AF8C288>,
                    <numba.core.ir.Assign object at 0x0000015A8AF78888>],
             'local_connectivity': [<numba.core.ir.Assign object at 0x0000015A91E5EA48>],
             'mean_distances': [<numba.core.ir.Assign object at 0x0000015A91E2F588>],
             'mean_ith_distances': [<numba.core.ir.Assign object at 0x0000015A8A9D5288>],
             'mid': [<numba.core.ir.Assign object at 0x0000015A8AF88B88>,
                     <numba.core.ir.Assign object at 0x0000015A8AF78248>,
                     <numba.core.ir.Assign object at 0x0000015A8AF78908>,
                     <numba.core.ir.Assign object at 0x0000015A91E6BE48>],
             'n': [<numba.core.ir.Assign object at 0x0000015A8AF66D48>],
             'n_iter': [<numba.core.ir.Assign object at 0x0000015A91E5ED88>],
             'non_zero_dists': [<numba.core.ir.Assign object at 0x0000015A87E535C8>],
             'psum': [<numba.core.ir.Assign object at 0x0000015A8AF66E88>,
                      <numba.core.ir.Assign object at 0x0000015A8A9D60C8>,
                      <numba.core.ir.Assign object at 0x0000015A8A9DCB08>],
             'result': [<numba.core.ir.Assign object at 0x0000015A91E2F048>],
             'rho': [<numba.core.ir.Assign object at 0x0000015A91E41408>],
             'target': [<numba.core.ir.Assign object at 0x0000015A91E67D88>]})
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG SSA violators {'psum', 'lo', 'hi', 'mid'}
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Fix SSA violator on var psum
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: distances = arg(0, name=distances)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: k = arg(1, name=k)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: n_iter = arg(2, name=n_iter)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: local_connectivity = arg(3, name=local_connectivity)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bandwidth = arg(4, name=bandwidth)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=log2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $8call_method.3 = call $4load_method.1(k, func=$4load_method.1, args=[Var(k, umap_.py:189)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: target = $8call_method.3 * bandwidth
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $16load_global.6 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $18load_attr.7 = getattr(value=$16load_global.6, attr=zeros)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $22load_attr.9 = getattr(value=distances, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const24.10 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $26binary_subscr.11 = static_getitem(value=$22load_attr.9, index=0, index_var=$const24.10, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $28load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $30load_attr.13 = getattr(value=$28load_global.12, attr=float32)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho = call $18load_attr.7($26binary_subscr.11, func=$18load_attr.7, args=[Var($26binary_subscr.11, umap_.py:190)], kws=[('dtype', Var($30load_attr.13, umap_.py:190))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $38load_global.16 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $40load_attr.17 = getattr(value=$38load_global.16, attr=zeros)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $44load_attr.19 = getattr(value=distances, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const46.20 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $48binary_subscr.21 = static_getitem(value=$44load_attr.19, index=0, index_var=$const46.20, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $50load_global.22 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $52load_attr.23 = getattr(value=$50load_global.22, attr=float32)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: result = call $40load_attr.17($48binary_subscr.21, func=$40load_attr.17, args=[Var($48binary_subscr.21, umap_.py:191)], kws=[('dtype', Var($52load_attr.23, umap_.py:191))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $60load_global.26 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $62load_method.27 = getattr(value=$60load_global.26, attr=mean)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mean_distances = call $62load_method.27(distances, func=$62load_method.27, args=[Var(distances, umap_.py:189)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 70
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 70
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $74load_global.0 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $78load_attr.2 = getattr(value=distances, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const80.3 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $82binary_subscr.4 = static_getitem(value=$78load_attr.2, index=0, index_var=$const80.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $84call_function.5 = call $74load_global.0($82binary_subscr.4, func=$74load_global.0, args=[Var($82binary_subscr.4, umap_.py:195)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $86get_iter.6 = getiter(value=$84call_function.5)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi88.0 = $86get_iter.6
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 88
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 88
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $88for_iter.1 = iternext(value=$phi88.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $88for_iter.2 = pair_first(value=$88for_iter.1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $88for_iter.3 = pair_second(value=$88for_iter.1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi92.1 = $88for_iter.2
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $88for_iter.3, 92, 572
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 92
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: i = $phi92.1
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: lo = const(float, 0.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: hi = global(NPY_INFINITY: inf)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mid = const(float, 1.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: ith_distances = getitem(value=distances, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const118.10 = const(float, 0.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $120compare_op.11 = ith_distances > $const118.10
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: non_zero_dists = getitem(value=ith_distances, index=$120compare_op.11, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $128load_attr.14 = getattr(value=non_zero_dists, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const130.15 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $132binary_subscr.16 = static_getitem(value=$128load_attr.14, index=0, index_var=$const130.15, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $136compare_op.18 = $132binary_subscr.16 >= local_connectivity
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool138 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $138pred = call bool138($136compare_op.18, func=bool138, args=(Var($136compare_op.18, umap_.py:203),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $138pred, 140, 250
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 140
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $140load_global.1 = global(int: <class 'int'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $142load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $144load_method.3 = getattr(value=$142load_global.2, attr=floor)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $148call_method.5 = call $144load_method.3(local_connectivity, func=$144load_method.3, args=[Var(local_connectivity, umap_.py:189)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: index = call $140load_global.1($148call_method.5, func=$140load_global.1, args=[Var($148call_method.5, umap_.py:204)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: interpolation = local_connectivity - index
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const164.11 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $166compare_op.12 = index > $const164.11
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool168 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $168pred = call bool168($166compare_op.12, func=bool168, args=(Var($166compare_op.12, umap_.py:206),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $168pred, 170, 232
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 170
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const174.3 = const(int, 1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $176binary_subtract.4 = index - $const174.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $178binary_subscr.5 = getitem(value=non_zero_dists, index=$176binary_subtract.4, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho[i] = $178binary_subscr.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $188load_global.9 = global(SMOOTH_K_TOLERANCE: 1e-05)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $190compare_op.10 = interpolation > $188load_global.9
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool192 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $192pred = call bool192($190compare_op.10, func=bool192, args=(Var($190compare_op.10, umap_.py:208),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $192pred, 194, 248
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 194
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $200binary_subscr.5 = getitem(value=rho, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $208binary_subscr.9 = getitem(value=non_zero_dists, index=index, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const214.12 = const(int, 1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $216binary_subtract.13 = index - $const214.12
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $218binary_subscr.14 = getitem(value=non_zero_dists, index=$216binary_subtract.13, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $220binary_subtract.15 = $208binary_subscr.9 - $218binary_subscr.14
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $222binary_multiply.16 = interpolation * $220binary_subtract.15
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $224inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$200binary_subscr.5, rhs=$222binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho[i] = $224inplace_add.17
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 248
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 232
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const236.3 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $238binary_subscr.4 = static_getitem(value=non_zero_dists, index=0, index_var=$const236.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $240binary_multiply.5 = interpolation * $238binary_subscr.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho[i] = $240binary_multiply.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 248
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 248
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 250
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $252load_attr.2 = getattr(value=non_zero_dists, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const254.3 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $256binary_subscr.4 = static_getitem(value=$252load_attr.2, index=0, index_var=$const254.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const258.5 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $260compare_op.6 = $256binary_subscr.4 > $const258.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool262 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $262pred = call bool262($260compare_op.6, func=bool262, args=(Var($260compare_op.6, umap_.py:214),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $262pred, 266, 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 266
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $266load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $268load_method.2 = getattr(value=$266load_global.1, attr=max)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $272call_method.4 = call $268load_method.2(non_zero_dists, func=$268load_method.2, args=[Var(non_zero_dists, umap_.py:202)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho[i] = $272call_method.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $282load_global.1 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $286call_function.3 = call $282load_global.1(n_iter, func=$282load_global.1, args=[Var(n_iter, umap_.py:189)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $288get_iter.4 = getiter(value=$286call_function.3)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi290.1 = $288get_iter.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $290for_iter.2 = iternext(value=$phi290.1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $290for_iter.3 = pair_first(value=$290for_iter.2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $290for_iter.4 = pair_second(value=$290for_iter.2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi292.2 = $290for_iter.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $290for_iter.4, 292, 476
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 292
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: n = $phi292.2
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: psum = const(float, 0.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG first assign: psum
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG replaced with: psum = const(float, 0.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $300load_global.2 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const302.3 = const(int, 1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $306load_attr.5 = getattr(value=distances, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const308.6 = const(int, 1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $310binary_subscr.7 = static_getitem(value=$306load_attr.5, index=1, index_var=$const308.6, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $312call_function.8 = call $300load_global.2($const302.3, $310binary_subscr.7, func=$300load_global.2, args=[Var($const302.3, umap_.py:220), Var($310binary_subscr.7, umap_.py:220)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $314get_iter.9 = getiter(value=$312call_function.8)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi316.2 = $314get_iter.9
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $316for_iter.3 = iternext(value=$phi316.2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $316for_iter.4 = pair_first(value=$316for_iter.3)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $316for_iter.5 = pair_second(value=$316for_iter.3)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi318.3 = $316for_iter.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $316for_iter.5, 318, 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 318
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: j = $phi318.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $326build_tuple.7 = build_tuple(items=[Var(i, umap_.py:195), Var(j, umap_.py:220)])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $328binary_subscr.8 = getitem(value=distances, index=$326build_tuple.7, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $334binary_subscr.11 = getitem(value=rho, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: d = $328binary_subscr.8 - $334binary_subscr.11
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const342.14 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $344compare_op.15 = d > $const342.14
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool346 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $346pred = call bool346($344compare_op.15, func=bool346, args=(Var($344compare_op.15, umap_.py:222),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $346pred, 350, 372
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 350
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $352load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $354load_method.5 = getattr(value=$352load_global.4, attr=exp)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $360binary_true_divide.8 = d / mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $362unary_negative.9 = unary(fn=<built-in function neg>, value=$360binary_true_divide.8)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $364call_method.10 = call $354load_method.5($362unary_negative.9, func=$354load_method.5, args=[Var($362unary_negative.9, umap_.py:223)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $366inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum, rhs=$364call_method.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: psum = $366inplace_add.11
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG replaced with: psum.1 = $366inplace_add.11
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 380
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 372
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const374.4 = const(float, 1.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $376inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum, rhs=$const374.4, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: psum = $376inplace_add.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG replaced with: psum.2 = $376inplace_add.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 380
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 380
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $386load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $388load_method.3 = getattr(value=$386load_global.2, attr=fabs)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $394binary_subtract.6 = psum - target
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $396call_method.7 = call $388load_method.3($394binary_subtract.6, func=$388load_method.3, args=[Var($394binary_subtract.6, umap_.py:227)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $398load_global.8 = global(SMOOTH_K_TOLERANCE: 1e-05)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $400compare_op.9 = $396call_method.7 < $398load_global.8
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool402 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $402pred = call bool402($400compare_op.9, func=bool402, args=(Var($400compare_op.9, umap_.py:227),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $402pred, 406, 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 406
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 478
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $412compare_op.4 = psum > target
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool414 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $414pred = call bool414($412compare_op.4, func=bool414, args=(Var($412compare_op.4, umap_.py:230),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $414pred, 418, 436
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 418
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: hi = mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $426binary_add.5 = lo + hi
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const428.6 = const(float, 2.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mid = $426binary_add.5 / $const428.6
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 436
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: lo = mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $442load_global.4 = global(NPY_INFINITY: inf)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $444compare_op.5 = hi == $442load_global.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool446 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $446pred = call bool446($444compare_op.5, func=bool446, args=(Var($444compare_op.5, umap_.py:235),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $446pred, 450, 460
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 450
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const452.3 = const(int, 2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $454inplace_multiply.4 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=mid, rhs=$const452.3, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mid = $454inplace_multiply.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 460
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $464binary_add.4 = lo + hi
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const466.5 = const(float, 2.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mid = $464binary_add.4 / $const466.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 476
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 478
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 478
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: result[i] = mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $490binary_subscr.6 = getitem(value=rho, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const492.7 = const(float, 0.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $494compare_op.8 = $490binary_subscr.6 > $const492.7
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool496 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $496pred = call bool496($494compare_op.8, func=bool496, args=(Var($494compare_op.8, umap_.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $496pred, 500, 542
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 500
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $500load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $502load_method.2 = getattr(value=$500load_global.1, attr=mean)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mean_ith_distances = call $502load_method.2(ith_distances, func=$502load_method.2, args=[Var(ith_distances, umap_.py:201)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $514binary_subscr.7 = getitem(value=result, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $516load_global.8 = global(MIN_K_DIST_SCALE: 0.001)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $520binary_multiply.10 = $516load_global.8 * mean_ith_distances
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $522compare_op.11 = $514binary_subscr.7 < $520binary_multiply.10
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool524 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $524pred = call bool524($522compare_op.11, func=bool524, args=(Var($522compare_op.11, umap_.py:245),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $524pred, 528, 570
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 528
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $528load_global.1 = global(MIN_K_DIST_SCALE: 0.001)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $532binary_multiply.3 = $528load_global.1 * mean_ith_distances
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: result[i] = $532binary_multiply.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 575
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 542
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $546binary_subscr.3 = getitem(value=result, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $548load_global.4 = global(MIN_K_DIST_SCALE: 0.001)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $552binary_multiply.6 = $548load_global.4 * mean_distances
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $554compare_op.7 = $546binary_subscr.3 < $552binary_multiply.6
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool556 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $556pred = call bool556($554compare_op.7, func=bool556, args=(Var($554compare_op.7, umap_.py:248),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $556pred, 558, 575
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 558
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $558load_global.1 = global(MIN_K_DIST_SCALE: 0.001)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $562binary_multiply.3 = $558load_global.1 * mean_distances
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: result[i] = $562binary_multiply.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 570
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 570
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 575
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 572
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 574
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 574
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $578build_tuple.2 = build_tuple(items=[Var(result, umap_.py:191), Var(rho, umap_.py:190)])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $580return_value.3 = cast(value=$578build_tuple.2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: return $580return_value.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 575
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 88
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {292: [<numba.core.ir.Assign object at 0x0000015A8AF7DF88>],
             350: [<numba.core.ir.Assign object at 0x0000015A91E7E7C8>],
             372: [<numba.core.ir.Assign object at 0x0000015A91E7E1C8>]})
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: distances = arg(0, name=distances)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: k = arg(1, name=k)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: n_iter = arg(2, name=n_iter)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: local_connectivity = arg(3, name=local_connectivity)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bandwidth = arg(4, name=bandwidth)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=log2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $8call_method.3 = call $4load_method.1(k, func=$4load_method.1, args=[Var(k, umap_.py:189)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: target = $8call_method.3 * bandwidth
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $16load_global.6 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $18load_attr.7 = getattr(value=$16load_global.6, attr=zeros)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $22load_attr.9 = getattr(value=distances, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const24.10 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $26binary_subscr.11 = static_getitem(value=$22load_attr.9, index=0, index_var=$const24.10, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $28load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $30load_attr.13 = getattr(value=$28load_global.12, attr=float32)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho = call $18load_attr.7($26binary_subscr.11, func=$18load_attr.7, args=[Var($26binary_subscr.11, umap_.py:190)], kws=[('dtype', Var($30load_attr.13, umap_.py:190))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $38load_global.16 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $40load_attr.17 = getattr(value=$38load_global.16, attr=zeros)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $44load_attr.19 = getattr(value=distances, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const46.20 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $48binary_subscr.21 = static_getitem(value=$44load_attr.19, index=0, index_var=$const46.20, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $50load_global.22 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $52load_attr.23 = getattr(value=$50load_global.22, attr=float32)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: result = call $40load_attr.17($48binary_subscr.21, func=$40load_attr.17, args=[Var($48binary_subscr.21, umap_.py:191)], kws=[('dtype', Var($52load_attr.23, umap_.py:191))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $60load_global.26 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $62load_method.27 = getattr(value=$60load_global.26, attr=mean)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mean_distances = call $62load_method.27(distances, func=$62load_method.27, args=[Var(distances, umap_.py:189)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 70
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 70
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $74load_global.0 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $78load_attr.2 = getattr(value=distances, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const80.3 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $82binary_subscr.4 = static_getitem(value=$78load_attr.2, index=0, index_var=$const80.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $84call_function.5 = call $74load_global.0($82binary_subscr.4, func=$74load_global.0, args=[Var($82binary_subscr.4, umap_.py:195)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $86get_iter.6 = getiter(value=$84call_function.5)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi88.0 = $86get_iter.6
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 88
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 88
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $88for_iter.1 = iternext(value=$phi88.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $88for_iter.2 = pair_first(value=$88for_iter.1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $88for_iter.3 = pair_second(value=$88for_iter.1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi92.1 = $88for_iter.2
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $88for_iter.3, 92, 572
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 92
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: i = $phi92.1
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: lo = const(float, 0.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: hi = global(NPY_INFINITY: inf)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mid = const(float, 1.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: ith_distances = getitem(value=distances, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const118.10 = const(float, 0.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $120compare_op.11 = ith_distances > $const118.10
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: non_zero_dists = getitem(value=ith_distances, index=$120compare_op.11, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $128load_attr.14 = getattr(value=non_zero_dists, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const130.15 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $132binary_subscr.16 = static_getitem(value=$128load_attr.14, index=0, index_var=$const130.15, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $136compare_op.18 = $132binary_subscr.16 >= local_connectivity
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool138 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $138pred = call bool138($136compare_op.18, func=bool138, args=(Var($136compare_op.18, umap_.py:203),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $138pred, 140, 250
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 140
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $140load_global.1 = global(int: <class 'int'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $142load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $144load_method.3 = getattr(value=$142load_global.2, attr=floor)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $148call_method.5 = call $144load_method.3(local_connectivity, func=$144load_method.3, args=[Var(local_connectivity, umap_.py:189)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: index = call $140load_global.1($148call_method.5, func=$140load_global.1, args=[Var($148call_method.5, umap_.py:204)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: interpolation = local_connectivity - index
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const164.11 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $166compare_op.12 = index > $const164.11
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool168 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $168pred = call bool168($166compare_op.12, func=bool168, args=(Var($166compare_op.12, umap_.py:206),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $168pred, 170, 232
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 170
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const174.3 = const(int, 1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $176binary_subtract.4 = index - $const174.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $178binary_subscr.5 = getitem(value=non_zero_dists, index=$176binary_subtract.4, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho[i] = $178binary_subscr.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $188load_global.9 = global(SMOOTH_K_TOLERANCE: 1e-05)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $190compare_op.10 = interpolation > $188load_global.9
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool192 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $192pred = call bool192($190compare_op.10, func=bool192, args=(Var($190compare_op.10, umap_.py:208),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $192pred, 194, 248
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 194
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $200binary_subscr.5 = getitem(value=rho, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $208binary_subscr.9 = getitem(value=non_zero_dists, index=index, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const214.12 = const(int, 1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $216binary_subtract.13 = index - $const214.12
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $218binary_subscr.14 = getitem(value=non_zero_dists, index=$216binary_subtract.13, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $220binary_subtract.15 = $208binary_subscr.9 - $218binary_subscr.14
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $222binary_multiply.16 = interpolation * $220binary_subtract.15
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $224inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$200binary_subscr.5, rhs=$222binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho[i] = $224inplace_add.17
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 248
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 232
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const236.3 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $238binary_subscr.4 = static_getitem(value=non_zero_dists, index=0, index_var=$const236.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $240binary_multiply.5 = interpolation * $238binary_subscr.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho[i] = $240binary_multiply.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 248
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 248
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 250
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $252load_attr.2 = getattr(value=non_zero_dists, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const254.3 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $256binary_subscr.4 = static_getitem(value=$252load_attr.2, index=0, index_var=$const254.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const258.5 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $260compare_op.6 = $256binary_subscr.4 > $const258.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool262 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $262pred = call bool262($260compare_op.6, func=bool262, args=(Var($260compare_op.6, umap_.py:214),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $262pred, 266, 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 266
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $266load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $268load_method.2 = getattr(value=$266load_global.1, attr=max)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $272call_method.4 = call $268load_method.2(non_zero_dists, func=$268load_method.2, args=[Var(non_zero_dists, umap_.py:202)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho[i] = $272call_method.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $282load_global.1 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $286call_function.3 = call $282load_global.1(n_iter, func=$282load_global.1, args=[Var(n_iter, umap_.py:189)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $288get_iter.4 = getiter(value=$286call_function.3)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi290.1 = $288get_iter.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $290for_iter.2 = iternext(value=$phi290.1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $290for_iter.3 = pair_first(value=$290for_iter.2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $290for_iter.4 = pair_second(value=$290for_iter.2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi292.2 = $290for_iter.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $290for_iter.4, 292, 476
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 292
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: n = $phi292.2
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: psum = const(float, 0.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $300load_global.2 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const302.3 = const(int, 1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $306load_attr.5 = getattr(value=distances, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const308.6 = const(int, 1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $310binary_subscr.7 = static_getitem(value=$306load_attr.5, index=1, index_var=$const308.6, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $312call_function.8 = call $300load_global.2($const302.3, $310binary_subscr.7, func=$300load_global.2, args=[Var($const302.3, umap_.py:220), Var($310binary_subscr.7, umap_.py:220)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $314get_iter.9 = getiter(value=$312call_function.8)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi316.2 = $314get_iter.9
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $316for_iter.3 = iternext(value=$phi316.2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $316for_iter.4 = pair_first(value=$316for_iter.3)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $316for_iter.5 = pair_second(value=$316for_iter.3)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi318.3 = $316for_iter.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $316for_iter.5, 318, 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 318
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: j = $phi318.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $326build_tuple.7 = build_tuple(items=[Var(i, umap_.py:195), Var(j, umap_.py:220)])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $328binary_subscr.8 = getitem(value=distances, index=$326build_tuple.7, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $334binary_subscr.11 = getitem(value=rho, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: d = $328binary_subscr.8 - $334binary_subscr.11
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const342.14 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $344compare_op.15 = d > $const342.14
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool346 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $346pred = call bool346($344compare_op.15, func=bool346, args=(Var($344compare_op.15, umap_.py:222),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $346pred, 350, 372
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 350
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $352load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $354load_method.5 = getattr(value=$352load_global.4, attr=exp)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $360binary_true_divide.8 = d / mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $362unary_negative.9 = unary(fn=<built-in function neg>, value=$360binary_true_divide.8)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $364call_method.10 = call $354load_method.5($362unary_negative.9, func=$354load_method.5, args=[Var($362unary_negative.9, umap_.py:223)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $366inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum, rhs=$364call_method.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def var='psum' stmt=$366inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum, rhs=$364call_method.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 350
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 318 from label 350
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 318
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 318
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 316 from label 318
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG insert phi node psum.3 = phi(incoming_values=[], incoming_blocks=[]) at 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 292 from label 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 292
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG incoming_def psum = const(float, 0.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 380
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 380
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG insert phi node psum.4 = phi(incoming_values=[], incoming_blocks=[]) at 380
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 372
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG incoming_def psum.2 = $376inplace_add.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 350
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG incoming_def psum.1 = $366inplace_add.11
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG incoming_def psum.4 = phi(incoming_values=[Var(psum.2, umap_.py:225), Var(psum.1, umap_.py:223)], incoming_blocks=[372, 350])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG replaced with: $366inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum.3, rhs=$364call_method.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: psum.1 = $366inplace_add.11
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 380
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 372
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const374.4 = const(float, 1.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $376inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum, rhs=$const374.4, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def var='psum' stmt=$376inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum, rhs=$const374.4, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 372
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 318 from label 372
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 318
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 318
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 316 from label 318
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG replaced with: $376inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum.3, rhs=$const374.4, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: psum.2 = $376inplace_add.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 380
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 380
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $386load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $388load_method.3 = getattr(value=$386load_global.2, attr=fabs)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $394binary_subtract.6 = psum - target
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def var='psum' stmt=$394binary_subtract.6 = psum - target
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 384 from label 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 316 from label 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG replaced with: $394binary_subtract.6 = psum.3 - target
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $396call_method.7 = call $388load_method.3($394binary_subtract.6, func=$388load_method.3, args=[Var($394binary_subtract.6, umap_.py:227)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $398load_global.8 = global(SMOOTH_K_TOLERANCE: 1e-05)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $400compare_op.9 = $396call_method.7 < $398load_global.8
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool402 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $402pred = call bool402($400compare_op.9, func=bool402, args=(Var($400compare_op.9, umap_.py:227),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $402pred, 406, 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 406
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 478
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $412compare_op.4 = psum > target
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def var='psum' stmt=$412compare_op.4 = psum > target
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 386 from label 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 384 from label 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 316 from label 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG replaced with: $412compare_op.4 = psum.3 > target
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool414 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $414pred = call bool414($412compare_op.4, func=bool414, args=(Var($412compare_op.4, umap_.py:230),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $414pred, 418, 436
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 418
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: hi = mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $426binary_add.5 = lo + hi
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const428.6 = const(float, 2.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mid = $426binary_add.5 / $const428.6
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 436
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: lo = mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $442load_global.4 = global(NPY_INFINITY: inf)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $444compare_op.5 = hi == $442load_global.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool446 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $446pred = call bool446($444compare_op.5, func=bool446, args=(Var($444compare_op.5, umap_.py:235),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $446pred, 450, 460
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 450
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const452.3 = const(int, 2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $454inplace_multiply.4 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=mid, rhs=$const452.3, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mid = $454inplace_multiply.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 460
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $464binary_add.4 = lo + hi
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const466.5 = const(float, 2.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mid = $464binary_add.4 / $const466.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 476
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 478
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 478
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: result[i] = mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $490binary_subscr.6 = getitem(value=rho, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const492.7 = const(float, 0.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $494compare_op.8 = $490binary_subscr.6 > $const492.7
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool496 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $496pred = call bool496($494compare_op.8, func=bool496, args=(Var($494compare_op.8, umap_.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $496pred, 500, 542
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 500
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $500load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $502load_method.2 = getattr(value=$500load_global.1, attr=mean)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mean_ith_distances = call $502load_method.2(ith_distances, func=$502load_method.2, args=[Var(ith_distances, umap_.py:201)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $514binary_subscr.7 = getitem(value=result, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $516load_global.8 = global(MIN_K_DIST_SCALE: 0.001)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $520binary_multiply.10 = $516load_global.8 * mean_ith_distances
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $522compare_op.11 = $514binary_subscr.7 < $520binary_multiply.10
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool524 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $524pred = call bool524($522compare_op.11, func=bool524, args=(Var($522compare_op.11, umap_.py:245),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $524pred, 528, 570
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 528
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $528load_global.1 = global(MIN_K_DIST_SCALE: 0.001)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $532binary_multiply.3 = $528load_global.1 * mean_ith_distances
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: result[i] = $532binary_multiply.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 575
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 542
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $546binary_subscr.3 = getitem(value=result, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $548load_global.4 = global(MIN_K_DIST_SCALE: 0.001)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $552binary_multiply.6 = $548load_global.4 * mean_distances
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $554compare_op.7 = $546binary_subscr.3 < $552binary_multiply.6
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool556 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $556pred = call bool556($554compare_op.7, func=bool556, args=(Var($554compare_op.7, umap_.py:248),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $556pred, 558, 575
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 558
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $558load_global.1 = global(MIN_K_DIST_SCALE: 0.001)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $562binary_multiply.3 = $558load_global.1 * mean_distances
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: result[i] = $562binary_multiply.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 570
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 570
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 575
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 572
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 574
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 574
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $578build_tuple.2 = build_tuple(items=[Var(result, umap_.py:191), Var(rho, umap_.py:190)])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $580return_value.3 = cast(value=$578build_tuple.2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: return $580return_value.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 575
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E2BB08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 88
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Fix SSA violator on var lo
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7E948>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: distances = arg(0, name=distances)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: k = arg(1, name=k)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: n_iter = arg(2, name=n_iter)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: local_connectivity = arg(3, name=local_connectivity)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bandwidth = arg(4, name=bandwidth)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=log2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $8call_method.3 = call $4load_method.1(k, func=$4load_method.1, args=[Var(k, umap_.py:189)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: target = $8call_method.3 * bandwidth
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $16load_global.6 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $18load_attr.7 = getattr(value=$16load_global.6, attr=zeros)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $22load_attr.9 = getattr(value=distances, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const24.10 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $26binary_subscr.11 = static_getitem(value=$22load_attr.9, index=0, index_var=$const24.10, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $28load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $30load_attr.13 = getattr(value=$28load_global.12, attr=float32)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho = call $18load_attr.7($26binary_subscr.11, func=$18load_attr.7, args=[Var($26binary_subscr.11, umap_.py:190)], kws=[('dtype', Var($30load_attr.13, umap_.py:190))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $38load_global.16 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $40load_attr.17 = getattr(value=$38load_global.16, attr=zeros)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $44load_attr.19 = getattr(value=distances, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const46.20 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $48binary_subscr.21 = static_getitem(value=$44load_attr.19, index=0, index_var=$const46.20, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $50load_global.22 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $52load_attr.23 = getattr(value=$50load_global.22, attr=float32)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: result = call $40load_attr.17($48binary_subscr.21, func=$40load_attr.17, args=[Var($48binary_subscr.21, umap_.py:191)], kws=[('dtype', Var($52load_attr.23, umap_.py:191))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $60load_global.26 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $62load_method.27 = getattr(value=$60load_global.26, attr=mean)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mean_distances = call $62load_method.27(distances, func=$62load_method.27, args=[Var(distances, umap_.py:189)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 70
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 70
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7E948>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $74load_global.0 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $78load_attr.2 = getattr(value=distances, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const80.3 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $82binary_subscr.4 = static_getitem(value=$78load_attr.2, index=0, index_var=$const80.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $84call_function.5 = call $74load_global.0($82binary_subscr.4, func=$74load_global.0, args=[Var($82binary_subscr.4, umap_.py:195)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $86get_iter.6 = getiter(value=$84call_function.5)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi88.0 = $86get_iter.6
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 88
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 88
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7E948>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $88for_iter.1 = iternext(value=$phi88.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $88for_iter.2 = pair_first(value=$88for_iter.1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $88for_iter.3 = pair_second(value=$88for_iter.1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi92.1 = $88for_iter.2
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $88for_iter.3, 92, 572
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 92
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7E948>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: i = $phi92.1
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: lo = const(float, 0.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG first assign: lo
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG replaced with: lo = const(float, 0.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: hi = global(NPY_INFINITY: inf)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mid = const(float, 1.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: ith_distances = getitem(value=distances, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const118.10 = const(float, 0.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $120compare_op.11 = ith_distances > $const118.10
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: non_zero_dists = getitem(value=ith_distances, index=$120compare_op.11, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $128load_attr.14 = getattr(value=non_zero_dists, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const130.15 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $132binary_subscr.16 = static_getitem(value=$128load_attr.14, index=0, index_var=$const130.15, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $136compare_op.18 = $132binary_subscr.16 >= local_connectivity
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool138 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $138pred = call bool138($136compare_op.18, func=bool138, args=(Var($136compare_op.18, umap_.py:203),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $138pred, 140, 250
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 140
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7E948>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $140load_global.1 = global(int: <class 'int'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $142load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $144load_method.3 = getattr(value=$142load_global.2, attr=floor)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $148call_method.5 = call $144load_method.3(local_connectivity, func=$144load_method.3, args=[Var(local_connectivity, umap_.py:189)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: index = call $140load_global.1($148call_method.5, func=$140load_global.1, args=[Var($148call_method.5, umap_.py:204)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: interpolation = local_connectivity - index
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const164.11 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $166compare_op.12 = index > $const164.11
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool168 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $168pred = call bool168($166compare_op.12, func=bool168, args=(Var($166compare_op.12, umap_.py:206),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $168pred, 170, 232
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 170
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7E948>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const174.3 = const(int, 1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $176binary_subtract.4 = index - $const174.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $178binary_subscr.5 = getitem(value=non_zero_dists, index=$176binary_subtract.4, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho[i] = $178binary_subscr.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $188load_global.9 = global(SMOOTH_K_TOLERANCE: 1e-05)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $190compare_op.10 = interpolation > $188load_global.9
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool192 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $192pred = call bool192($190compare_op.10, func=bool192, args=(Var($190compare_op.10, umap_.py:208),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $192pred, 194, 248
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 194
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7E948>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $200binary_subscr.5 = getitem(value=rho, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $208binary_subscr.9 = getitem(value=non_zero_dists, index=index, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const214.12 = const(int, 1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $216binary_subtract.13 = index - $const214.12
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $218binary_subscr.14 = getitem(value=non_zero_dists, index=$216binary_subtract.13, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $220binary_subtract.15 = $208binary_subscr.9 - $218binary_subscr.14
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $222binary_multiply.16 = interpolation * $220binary_subtract.15
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $224inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$200binary_subscr.5, rhs=$222binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho[i] = $224inplace_add.17
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 248
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 232
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7E948>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const236.3 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $238binary_subscr.4 = static_getitem(value=non_zero_dists, index=0, index_var=$const236.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $240binary_multiply.5 = interpolation * $238binary_subscr.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho[i] = $240binary_multiply.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 248
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 248
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7E948>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 250
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7E948>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $252load_attr.2 = getattr(value=non_zero_dists, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const254.3 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $256binary_subscr.4 = static_getitem(value=$252load_attr.2, index=0, index_var=$const254.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const258.5 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $260compare_op.6 = $256binary_subscr.4 > $const258.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool262 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $262pred = call bool262($260compare_op.6, func=bool262, args=(Var($260compare_op.6, umap_.py:214),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $262pred, 266, 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 266
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7E948>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $266load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $268load_method.2 = getattr(value=$266load_global.1, attr=max)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $272call_method.4 = call $268load_method.2(non_zero_dists, func=$268load_method.2, args=[Var(non_zero_dists, umap_.py:202)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho[i] = $272call_method.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7E948>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $282load_global.1 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $286call_function.3 = call $282load_global.1(n_iter, func=$282load_global.1, args=[Var(n_iter, umap_.py:189)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $288get_iter.4 = getiter(value=$286call_function.3)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi290.1 = $288get_iter.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7E948>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $290for_iter.2 = iternext(value=$phi290.1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $290for_iter.3 = pair_first(value=$290for_iter.2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $290for_iter.4 = pair_second(value=$290for_iter.2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi292.2 = $290for_iter.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $290for_iter.4, 292, 476
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 292
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7E948>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: n = $phi292.2
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: psum = const(float, 0.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7E948>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $300load_global.2 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const302.3 = const(int, 1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $306load_attr.5 = getattr(value=distances, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const308.6 = const(int, 1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $310binary_subscr.7 = static_getitem(value=$306load_attr.5, index=1, index_var=$const308.6, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $312call_function.8 = call $300load_global.2($const302.3, $310binary_subscr.7, func=$300load_global.2, args=[Var($const302.3, umap_.py:220), Var($310binary_subscr.7, umap_.py:220)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $314get_iter.9 = getiter(value=$312call_function.8)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi316.2 = $314get_iter.9
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7E948>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: psum.3 = phi(incoming_values=[Var(psum, umap_.py:219), Var(psum.4, umap_.py:223)], incoming_blocks=[298, 380])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $316for_iter.3 = iternext(value=$phi316.2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $316for_iter.4 = pair_first(value=$316for_iter.3)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $316for_iter.5 = pair_second(value=$316for_iter.3)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi318.3 = $316for_iter.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $316for_iter.5, 318, 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 318
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7E948>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: j = $phi318.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $326build_tuple.7 = build_tuple(items=[Var(i, umap_.py:195), Var(j, umap_.py:220)])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $328binary_subscr.8 = getitem(value=distances, index=$326build_tuple.7, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $334binary_subscr.11 = getitem(value=rho, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: d = $328binary_subscr.8 - $334binary_subscr.11
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const342.14 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $344compare_op.15 = d > $const342.14
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool346 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $346pred = call bool346($344compare_op.15, func=bool346, args=(Var($344compare_op.15, umap_.py:222),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $346pred, 350, 372
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 350
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7E948>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $352load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $354load_method.5 = getattr(value=$352load_global.4, attr=exp)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $360binary_true_divide.8 = d / mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $362unary_negative.9 = unary(fn=<built-in function neg>, value=$360binary_true_divide.8)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $364call_method.10 = call $354load_method.5($362unary_negative.9, func=$354load_method.5, args=[Var($362unary_negative.9, umap_.py:223)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $366inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum.3, rhs=$364call_method.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: psum.1 = $366inplace_add.11
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 380
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 372
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7E948>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const374.4 = const(float, 1.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $376inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum.3, rhs=$const374.4, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: psum.2 = $376inplace_add.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 380
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 380
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7E948>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: psum.4 = phi(incoming_values=[Var(psum.2, umap_.py:225), Var(psum.1, umap_.py:223)], incoming_blocks=[372, 350])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7E948>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7E948>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $386load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $388load_method.3 = getattr(value=$386load_global.2, attr=fabs)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $394binary_subtract.6 = psum.3 - target
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $396call_method.7 = call $388load_method.3($394binary_subtract.6, func=$388load_method.3, args=[Var($394binary_subtract.6, umap_.py:227)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $398load_global.8 = global(SMOOTH_K_TOLERANCE: 1e-05)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $400compare_op.9 = $396call_method.7 < $398load_global.8
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool402 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $402pred = call bool402($400compare_op.9, func=bool402, args=(Var($400compare_op.9, umap_.py:227),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $402pred, 406, 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 406
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7E948>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 478
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7E948>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $412compare_op.4 = psum.3 > target
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool414 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $414pred = call bool414($412compare_op.4, func=bool414, args=(Var($412compare_op.4, umap_.py:230),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $414pred, 418, 436
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 418
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7E948>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: hi = mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $426binary_add.5 = lo + hi
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const428.6 = const(float, 2.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mid = $426binary_add.5 / $const428.6
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 436
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7E948>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: lo = mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG replaced with: lo.1 = mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $442load_global.4 = global(NPY_INFINITY: inf)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $444compare_op.5 = hi == $442load_global.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool446 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $446pred = call bool446($444compare_op.5, func=bool446, args=(Var($444compare_op.5, umap_.py:235),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $446pred, 450, 460
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 450
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7E948>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const452.3 = const(int, 2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $454inplace_multiply.4 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=mid, rhs=$const452.3, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mid = $454inplace_multiply.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 460
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7E948>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $464binary_add.4 = lo + hi
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const466.5 = const(float, 2.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mid = $464binary_add.4 / $const466.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7E948>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 476
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7E948>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 478
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 478
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7E948>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: result[i] = mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $490binary_subscr.6 = getitem(value=rho, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const492.7 = const(float, 0.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $494compare_op.8 = $490binary_subscr.6 > $const492.7
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool496 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $496pred = call bool496($494compare_op.8, func=bool496, args=(Var($494compare_op.8, umap_.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $496pred, 500, 542
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 500
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7E948>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $500load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $502load_method.2 = getattr(value=$500load_global.1, attr=mean)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mean_ith_distances = call $502load_method.2(ith_distances, func=$502load_method.2, args=[Var(ith_distances, umap_.py:201)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $514binary_subscr.7 = getitem(value=result, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $516load_global.8 = global(MIN_K_DIST_SCALE: 0.001)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $520binary_multiply.10 = $516load_global.8 * mean_ith_distances
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $522compare_op.11 = $514binary_subscr.7 < $520binary_multiply.10
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool524 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $524pred = call bool524($522compare_op.11, func=bool524, args=(Var($522compare_op.11, umap_.py:245),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $524pred, 528, 570
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 528
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7E948>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $528load_global.1 = global(MIN_K_DIST_SCALE: 0.001)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $532binary_multiply.3 = $528load_global.1 * mean_ith_distances
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: result[i] = $532binary_multiply.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 575
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 542
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7E948>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $546binary_subscr.3 = getitem(value=result, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $548load_global.4 = global(MIN_K_DIST_SCALE: 0.001)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $552binary_multiply.6 = $548load_global.4 * mean_distances
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $554compare_op.7 = $546binary_subscr.3 < $552binary_multiply.6
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool556 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $556pred = call bool556($554compare_op.7, func=bool556, args=(Var($554compare_op.7, umap_.py:248),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $556pred, 558, 575
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 558
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7E948>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $558load_global.1 = global(MIN_K_DIST_SCALE: 0.001)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $562binary_multiply.3 = $558load_global.1 * mean_distances
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: result[i] = $562binary_multiply.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 570
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 570
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7E948>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 575
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 572
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7E948>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 574
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 574
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7E948>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $578build_tuple.2 = build_tuple(items=[Var(result, umap_.py:191), Var(rho, umap_.py:190)])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $580return_value.3 = cast(value=$578build_tuple.2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: return $580return_value.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 575
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7E948>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 88
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {92: [<numba.core.ir.Assign object at 0x0000015A91E7E608>],
             436: [<numba.core.ir.Assign object at 0x0000015A91E2B908>]})
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E89F08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: distances = arg(0, name=distances)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: k = arg(1, name=k)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: n_iter = arg(2, name=n_iter)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: local_connectivity = arg(3, name=local_connectivity)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bandwidth = arg(4, name=bandwidth)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=log2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $8call_method.3 = call $4load_method.1(k, func=$4load_method.1, args=[Var(k, umap_.py:189)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: target = $8call_method.3 * bandwidth
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $16load_global.6 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $18load_attr.7 = getattr(value=$16load_global.6, attr=zeros)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $22load_attr.9 = getattr(value=distances, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const24.10 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $26binary_subscr.11 = static_getitem(value=$22load_attr.9, index=0, index_var=$const24.10, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $28load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $30load_attr.13 = getattr(value=$28load_global.12, attr=float32)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho = call $18load_attr.7($26binary_subscr.11, func=$18load_attr.7, args=[Var($26binary_subscr.11, umap_.py:190)], kws=[('dtype', Var($30load_attr.13, umap_.py:190))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $38load_global.16 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $40load_attr.17 = getattr(value=$38load_global.16, attr=zeros)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $44load_attr.19 = getattr(value=distances, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const46.20 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $48binary_subscr.21 = static_getitem(value=$44load_attr.19, index=0, index_var=$const46.20, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $50load_global.22 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $52load_attr.23 = getattr(value=$50load_global.22, attr=float32)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: result = call $40load_attr.17($48binary_subscr.21, func=$40load_attr.17, args=[Var($48binary_subscr.21, umap_.py:191)], kws=[('dtype', Var($52load_attr.23, umap_.py:191))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $60load_global.26 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $62load_method.27 = getattr(value=$60load_global.26, attr=mean)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mean_distances = call $62load_method.27(distances, func=$62load_method.27, args=[Var(distances, umap_.py:189)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 70
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 70
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E89F08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $74load_global.0 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $78load_attr.2 = getattr(value=distances, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const80.3 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $82binary_subscr.4 = static_getitem(value=$78load_attr.2, index=0, index_var=$const80.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $84call_function.5 = call $74load_global.0($82binary_subscr.4, func=$74load_global.0, args=[Var($82binary_subscr.4, umap_.py:195)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $86get_iter.6 = getiter(value=$84call_function.5)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi88.0 = $86get_iter.6
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 88
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 88
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E89F08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $88for_iter.1 = iternext(value=$phi88.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $88for_iter.2 = pair_first(value=$88for_iter.1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $88for_iter.3 = pair_second(value=$88for_iter.1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi92.1 = $88for_iter.2
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $88for_iter.3, 92, 572
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 92
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E89F08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: i = $phi92.1
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: lo = const(float, 0.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: hi = global(NPY_INFINITY: inf)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mid = const(float, 1.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: ith_distances = getitem(value=distances, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const118.10 = const(float, 0.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $120compare_op.11 = ith_distances > $const118.10
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: non_zero_dists = getitem(value=ith_distances, index=$120compare_op.11, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $128load_attr.14 = getattr(value=non_zero_dists, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const130.15 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $132binary_subscr.16 = static_getitem(value=$128load_attr.14, index=0, index_var=$const130.15, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $136compare_op.18 = $132binary_subscr.16 >= local_connectivity
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool138 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $138pred = call bool138($136compare_op.18, func=bool138, args=(Var($136compare_op.18, umap_.py:203),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $138pred, 140, 250
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 140
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E89F08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $140load_global.1 = global(int: <class 'int'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $142load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $144load_method.3 = getattr(value=$142load_global.2, attr=floor)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $148call_method.5 = call $144load_method.3(local_connectivity, func=$144load_method.3, args=[Var(local_connectivity, umap_.py:189)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: index = call $140load_global.1($148call_method.5, func=$140load_global.1, args=[Var($148call_method.5, umap_.py:204)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: interpolation = local_connectivity - index
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const164.11 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $166compare_op.12 = index > $const164.11
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool168 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $168pred = call bool168($166compare_op.12, func=bool168, args=(Var($166compare_op.12, umap_.py:206),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $168pred, 170, 232
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 170
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E89F08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const174.3 = const(int, 1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $176binary_subtract.4 = index - $const174.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $178binary_subscr.5 = getitem(value=non_zero_dists, index=$176binary_subtract.4, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho[i] = $178binary_subscr.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $188load_global.9 = global(SMOOTH_K_TOLERANCE: 1e-05)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $190compare_op.10 = interpolation > $188load_global.9
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool192 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $192pred = call bool192($190compare_op.10, func=bool192, args=(Var($190compare_op.10, umap_.py:208),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $192pred, 194, 248
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 194
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E89F08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $200binary_subscr.5 = getitem(value=rho, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $208binary_subscr.9 = getitem(value=non_zero_dists, index=index, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const214.12 = const(int, 1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $216binary_subtract.13 = index - $const214.12
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $218binary_subscr.14 = getitem(value=non_zero_dists, index=$216binary_subtract.13, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $220binary_subtract.15 = $208binary_subscr.9 - $218binary_subscr.14
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $222binary_multiply.16 = interpolation * $220binary_subtract.15
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $224inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$200binary_subscr.5, rhs=$222binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho[i] = $224inplace_add.17
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 248
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 232
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E89F08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const236.3 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $238binary_subscr.4 = static_getitem(value=non_zero_dists, index=0, index_var=$const236.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $240binary_multiply.5 = interpolation * $238binary_subscr.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho[i] = $240binary_multiply.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 248
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 248
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E89F08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 250
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E89F08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $252load_attr.2 = getattr(value=non_zero_dists, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const254.3 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $256binary_subscr.4 = static_getitem(value=$252load_attr.2, index=0, index_var=$const254.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const258.5 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $260compare_op.6 = $256binary_subscr.4 > $const258.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool262 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $262pred = call bool262($260compare_op.6, func=bool262, args=(Var($260compare_op.6, umap_.py:214),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $262pred, 266, 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 266
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E89F08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $266load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $268load_method.2 = getattr(value=$266load_global.1, attr=max)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $272call_method.4 = call $268load_method.2(non_zero_dists, func=$268load_method.2, args=[Var(non_zero_dists, umap_.py:202)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho[i] = $272call_method.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E89F08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $282load_global.1 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $286call_function.3 = call $282load_global.1(n_iter, func=$282load_global.1, args=[Var(n_iter, umap_.py:189)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $288get_iter.4 = getiter(value=$286call_function.3)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi290.1 = $288get_iter.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E89F08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $290for_iter.2 = iternext(value=$phi290.1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $290for_iter.3 = pair_first(value=$290for_iter.2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $290for_iter.4 = pair_second(value=$290for_iter.2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi292.2 = $290for_iter.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $290for_iter.4, 292, 476
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 292
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E89F08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: n = $phi292.2
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: psum = const(float, 0.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E89F08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $300load_global.2 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const302.3 = const(int, 1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $306load_attr.5 = getattr(value=distances, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const308.6 = const(int, 1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $310binary_subscr.7 = static_getitem(value=$306load_attr.5, index=1, index_var=$const308.6, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $312call_function.8 = call $300load_global.2($const302.3, $310binary_subscr.7, func=$300load_global.2, args=[Var($const302.3, umap_.py:220), Var($310binary_subscr.7, umap_.py:220)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $314get_iter.9 = getiter(value=$312call_function.8)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi316.2 = $314get_iter.9
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E89F08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: psum.3 = phi(incoming_values=[Var(psum, umap_.py:219), Var(psum.4, umap_.py:223)], incoming_blocks=[298, 380])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $316for_iter.3 = iternext(value=$phi316.2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $316for_iter.4 = pair_first(value=$316for_iter.3)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $316for_iter.5 = pair_second(value=$316for_iter.3)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi318.3 = $316for_iter.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $316for_iter.5, 318, 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 318
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E89F08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: j = $phi318.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $326build_tuple.7 = build_tuple(items=[Var(i, umap_.py:195), Var(j, umap_.py:220)])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $328binary_subscr.8 = getitem(value=distances, index=$326build_tuple.7, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $334binary_subscr.11 = getitem(value=rho, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: d = $328binary_subscr.8 - $334binary_subscr.11
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const342.14 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $344compare_op.15 = d > $const342.14
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool346 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $346pred = call bool346($344compare_op.15, func=bool346, args=(Var($344compare_op.15, umap_.py:222),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $346pred, 350, 372
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 350
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E89F08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $352load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $354load_method.5 = getattr(value=$352load_global.4, attr=exp)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $360binary_true_divide.8 = d / mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $362unary_negative.9 = unary(fn=<built-in function neg>, value=$360binary_true_divide.8)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $364call_method.10 = call $354load_method.5($362unary_negative.9, func=$354load_method.5, args=[Var($362unary_negative.9, umap_.py:223)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $366inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum.3, rhs=$364call_method.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: psum.1 = $366inplace_add.11
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 380
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 372
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E89F08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const374.4 = const(float, 1.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $376inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum.3, rhs=$const374.4, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: psum.2 = $376inplace_add.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 380
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 380
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E89F08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: psum.4 = phi(incoming_values=[Var(psum.2, umap_.py:225), Var(psum.1, umap_.py:223)], incoming_blocks=[372, 350])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E89F08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E89F08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $386load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $388load_method.3 = getattr(value=$386load_global.2, attr=fabs)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $394binary_subtract.6 = psum.3 - target
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $396call_method.7 = call $388load_method.3($394binary_subtract.6, func=$388load_method.3, args=[Var($394binary_subtract.6, umap_.py:227)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $398load_global.8 = global(SMOOTH_K_TOLERANCE: 1e-05)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $400compare_op.9 = $396call_method.7 < $398load_global.8
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool402 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $402pred = call bool402($400compare_op.9, func=bool402, args=(Var($400compare_op.9, umap_.py:227),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $402pred, 406, 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 406
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E89F08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 478
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E89F08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $412compare_op.4 = psum.3 > target
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool414 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $414pred = call bool414($412compare_op.4, func=bool414, args=(Var($412compare_op.4, umap_.py:230),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $414pred, 418, 436
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 418
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E89F08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: hi = mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $426binary_add.5 = lo + hi
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def var='lo' stmt=$426binary_add.5 = lo + hi
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 418
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 408 from label 418
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 386 from label 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 384 from label 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 316 from label 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 298 from label 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 292 from label 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 292
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 292
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 290 from label 292
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG insert phi node lo.2 = phi(incoming_values=[], incoming_blocks=[]) at 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 92 from label 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 92
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG incoming_def lo = const(float, 0.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG insert phi node lo.3 = phi(incoming_values=[], incoming_blocks=[]) at 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 450
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 450
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 436 from label 450
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 436
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG incoming_def lo.1 = mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 418
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 418
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 408 from label 418
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 386 from label 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 384 from label 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 316 from label 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 298 from label 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 292 from label 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 292
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 292
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 290 from label 292
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG incoming_def lo.2 = phi(incoming_values=[Var(lo, umap_.py:196)], incoming_blocks=[280])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 460
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 460
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 436 from label 460
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 436
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG incoming_def lo.1 = mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG incoming_def lo.3 = phi(incoming_values=[Var(lo.1, umap_.py:234), Var(lo.2, umap_.py:231), Var(lo.1, umap_.py:234)], incoming_blocks=[450, 418, 460])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG replaced with: $426binary_add.5 = lo.2 + hi
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const428.6 = const(float, 2.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mid = $426binary_add.5 / $const428.6
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 436
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E89F08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: lo.1 = mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $442load_global.4 = global(NPY_INFINITY: inf)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $444compare_op.5 = hi == $442load_global.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool446 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $446pred = call bool446($444compare_op.5, func=bool446, args=(Var($444compare_op.5, umap_.py:235),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $446pred, 450, 460
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 450
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E89F08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const452.3 = const(int, 2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $454inplace_multiply.4 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=mid, rhs=$const452.3, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mid = $454inplace_multiply.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 460
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E89F08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $464binary_add.4 = lo + hi
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def var='lo' stmt=$464binary_add.4 = lo + hi
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 460
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 436 from label 460
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 436
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG replaced with: $464binary_add.4 = lo.1 + hi
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const466.5 = const(float, 2.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mid = $464binary_add.4 / $const466.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E89F08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 476
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E89F08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 478
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 478
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E89F08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: result[i] = mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $490binary_subscr.6 = getitem(value=rho, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const492.7 = const(float, 0.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $494compare_op.8 = $490binary_subscr.6 > $const492.7
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool496 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $496pred = call bool496($494compare_op.8, func=bool496, args=(Var($494compare_op.8, umap_.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $496pred, 500, 542
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 500
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E89F08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $500load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $502load_method.2 = getattr(value=$500load_global.1, attr=mean)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mean_ith_distances = call $502load_method.2(ith_distances, func=$502load_method.2, args=[Var(ith_distances, umap_.py:201)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $514binary_subscr.7 = getitem(value=result, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $516load_global.8 = global(MIN_K_DIST_SCALE: 0.001)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $520binary_multiply.10 = $516load_global.8 * mean_ith_distances
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $522compare_op.11 = $514binary_subscr.7 < $520binary_multiply.10
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool524 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $524pred = call bool524($522compare_op.11, func=bool524, args=(Var($522compare_op.11, umap_.py:245),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $524pred, 528, 570
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 528
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E89F08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $528load_global.1 = global(MIN_K_DIST_SCALE: 0.001)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $532binary_multiply.3 = $528load_global.1 * mean_ith_distances
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: result[i] = $532binary_multiply.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 575
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 542
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E89F08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $546binary_subscr.3 = getitem(value=result, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $548load_global.4 = global(MIN_K_DIST_SCALE: 0.001)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $552binary_multiply.6 = $548load_global.4 * mean_distances
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $554compare_op.7 = $546binary_subscr.3 < $552binary_multiply.6
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool556 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $556pred = call bool556($554compare_op.7, func=bool556, args=(Var($554compare_op.7, umap_.py:248),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $556pred, 558, 575
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 558
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E89F08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $558load_global.1 = global(MIN_K_DIST_SCALE: 0.001)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $562binary_multiply.3 = $558load_global.1 * mean_distances
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: result[i] = $562binary_multiply.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 570
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 570
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E89F08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 575
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 572
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E89F08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 574
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 574
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E89F08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $578build_tuple.2 = build_tuple(items=[Var(result, umap_.py:191), Var(rho, umap_.py:190)])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $580return_value.3 = cast(value=$578build_tuple.2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: return $580return_value.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 575
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E89F08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 88
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Fix SSA violator on var hi
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7A8C8>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: distances = arg(0, name=distances)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: k = arg(1, name=k)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: n_iter = arg(2, name=n_iter)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: local_connectivity = arg(3, name=local_connectivity)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bandwidth = arg(4, name=bandwidth)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=log2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $8call_method.3 = call $4load_method.1(k, func=$4load_method.1, args=[Var(k, umap_.py:189)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: target = $8call_method.3 * bandwidth
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $16load_global.6 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $18load_attr.7 = getattr(value=$16load_global.6, attr=zeros)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $22load_attr.9 = getattr(value=distances, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const24.10 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $26binary_subscr.11 = static_getitem(value=$22load_attr.9, index=0, index_var=$const24.10, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $28load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $30load_attr.13 = getattr(value=$28load_global.12, attr=float32)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho = call $18load_attr.7($26binary_subscr.11, func=$18load_attr.7, args=[Var($26binary_subscr.11, umap_.py:190)], kws=[('dtype', Var($30load_attr.13, umap_.py:190))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $38load_global.16 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $40load_attr.17 = getattr(value=$38load_global.16, attr=zeros)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $44load_attr.19 = getattr(value=distances, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const46.20 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $48binary_subscr.21 = static_getitem(value=$44load_attr.19, index=0, index_var=$const46.20, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $50load_global.22 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $52load_attr.23 = getattr(value=$50load_global.22, attr=float32)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: result = call $40load_attr.17($48binary_subscr.21, func=$40load_attr.17, args=[Var($48binary_subscr.21, umap_.py:191)], kws=[('dtype', Var($52load_attr.23, umap_.py:191))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $60load_global.26 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $62load_method.27 = getattr(value=$60load_global.26, attr=mean)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mean_distances = call $62load_method.27(distances, func=$62load_method.27, args=[Var(distances, umap_.py:189)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 70
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 70
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7A8C8>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $74load_global.0 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $78load_attr.2 = getattr(value=distances, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const80.3 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $82binary_subscr.4 = static_getitem(value=$78load_attr.2, index=0, index_var=$const80.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $84call_function.5 = call $74load_global.0($82binary_subscr.4, func=$74load_global.0, args=[Var($82binary_subscr.4, umap_.py:195)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $86get_iter.6 = getiter(value=$84call_function.5)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi88.0 = $86get_iter.6
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 88
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 88
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7A8C8>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $88for_iter.1 = iternext(value=$phi88.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $88for_iter.2 = pair_first(value=$88for_iter.1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $88for_iter.3 = pair_second(value=$88for_iter.1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi92.1 = $88for_iter.2
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $88for_iter.3, 92, 572
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 92
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7A8C8>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: i = $phi92.1
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: lo = const(float, 0.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: hi = global(NPY_INFINITY: inf)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG first assign: hi
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG replaced with: hi = global(NPY_INFINITY: inf)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mid = const(float, 1.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: ith_distances = getitem(value=distances, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const118.10 = const(float, 0.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $120compare_op.11 = ith_distances > $const118.10
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: non_zero_dists = getitem(value=ith_distances, index=$120compare_op.11, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $128load_attr.14 = getattr(value=non_zero_dists, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const130.15 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $132binary_subscr.16 = static_getitem(value=$128load_attr.14, index=0, index_var=$const130.15, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $136compare_op.18 = $132binary_subscr.16 >= local_connectivity
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool138 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $138pred = call bool138($136compare_op.18, func=bool138, args=(Var($136compare_op.18, umap_.py:203),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $138pred, 140, 250
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 140
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7A8C8>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $140load_global.1 = global(int: <class 'int'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $142load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $144load_method.3 = getattr(value=$142load_global.2, attr=floor)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $148call_method.5 = call $144load_method.3(local_connectivity, func=$144load_method.3, args=[Var(local_connectivity, umap_.py:189)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: index = call $140load_global.1($148call_method.5, func=$140load_global.1, args=[Var($148call_method.5, umap_.py:204)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: interpolation = local_connectivity - index
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const164.11 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $166compare_op.12 = index > $const164.11
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool168 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $168pred = call bool168($166compare_op.12, func=bool168, args=(Var($166compare_op.12, umap_.py:206),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $168pred, 170, 232
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 170
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7A8C8>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const174.3 = const(int, 1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $176binary_subtract.4 = index - $const174.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $178binary_subscr.5 = getitem(value=non_zero_dists, index=$176binary_subtract.4, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho[i] = $178binary_subscr.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $188load_global.9 = global(SMOOTH_K_TOLERANCE: 1e-05)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $190compare_op.10 = interpolation > $188load_global.9
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool192 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $192pred = call bool192($190compare_op.10, func=bool192, args=(Var($190compare_op.10, umap_.py:208),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $192pred, 194, 248
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 194
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7A8C8>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $200binary_subscr.5 = getitem(value=rho, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $208binary_subscr.9 = getitem(value=non_zero_dists, index=index, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const214.12 = const(int, 1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $216binary_subtract.13 = index - $const214.12
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $218binary_subscr.14 = getitem(value=non_zero_dists, index=$216binary_subtract.13, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $220binary_subtract.15 = $208binary_subscr.9 - $218binary_subscr.14
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $222binary_multiply.16 = interpolation * $220binary_subtract.15
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $224inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$200binary_subscr.5, rhs=$222binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho[i] = $224inplace_add.17
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 248
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 232
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7A8C8>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const236.3 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $238binary_subscr.4 = static_getitem(value=non_zero_dists, index=0, index_var=$const236.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $240binary_multiply.5 = interpolation * $238binary_subscr.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho[i] = $240binary_multiply.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 248
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 248
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7A8C8>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 250
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7A8C8>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $252load_attr.2 = getattr(value=non_zero_dists, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const254.3 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $256binary_subscr.4 = static_getitem(value=$252load_attr.2, index=0, index_var=$const254.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const258.5 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $260compare_op.6 = $256binary_subscr.4 > $const258.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool262 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $262pred = call bool262($260compare_op.6, func=bool262, args=(Var($260compare_op.6, umap_.py:214),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $262pred, 266, 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 266
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7A8C8>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $266load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $268load_method.2 = getattr(value=$266load_global.1, attr=max)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $272call_method.4 = call $268load_method.2(non_zero_dists, func=$268load_method.2, args=[Var(non_zero_dists, umap_.py:202)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho[i] = $272call_method.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7A8C8>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $282load_global.1 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $286call_function.3 = call $282load_global.1(n_iter, func=$282load_global.1, args=[Var(n_iter, umap_.py:189)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $288get_iter.4 = getiter(value=$286call_function.3)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi290.1 = $288get_iter.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7A8C8>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: lo.2 = phi(incoming_values=[Var(lo, umap_.py:196), Var(lo.3, umap_.py:231)], incoming_blocks=[280, 472])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $290for_iter.2 = iternext(value=$phi290.1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $290for_iter.3 = pair_first(value=$290for_iter.2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $290for_iter.4 = pair_second(value=$290for_iter.2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi292.2 = $290for_iter.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $290for_iter.4, 292, 476
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 292
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7A8C8>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: n = $phi292.2
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: psum = const(float, 0.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7A8C8>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $300load_global.2 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const302.3 = const(int, 1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $306load_attr.5 = getattr(value=distances, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const308.6 = const(int, 1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $310binary_subscr.7 = static_getitem(value=$306load_attr.5, index=1, index_var=$const308.6, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $312call_function.8 = call $300load_global.2($const302.3, $310binary_subscr.7, func=$300load_global.2, args=[Var($const302.3, umap_.py:220), Var($310binary_subscr.7, umap_.py:220)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $314get_iter.9 = getiter(value=$312call_function.8)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi316.2 = $314get_iter.9
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7A8C8>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: psum.3 = phi(incoming_values=[Var(psum, umap_.py:219), Var(psum.4, umap_.py:223)], incoming_blocks=[298, 380])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $316for_iter.3 = iternext(value=$phi316.2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $316for_iter.4 = pair_first(value=$316for_iter.3)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $316for_iter.5 = pair_second(value=$316for_iter.3)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi318.3 = $316for_iter.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $316for_iter.5, 318, 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 318
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7A8C8>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: j = $phi318.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $326build_tuple.7 = build_tuple(items=[Var(i, umap_.py:195), Var(j, umap_.py:220)])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $328binary_subscr.8 = getitem(value=distances, index=$326build_tuple.7, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $334binary_subscr.11 = getitem(value=rho, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: d = $328binary_subscr.8 - $334binary_subscr.11
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const342.14 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $344compare_op.15 = d > $const342.14
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool346 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $346pred = call bool346($344compare_op.15, func=bool346, args=(Var($344compare_op.15, umap_.py:222),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $346pred, 350, 372
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 350
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7A8C8>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $352load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $354load_method.5 = getattr(value=$352load_global.4, attr=exp)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $360binary_true_divide.8 = d / mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $362unary_negative.9 = unary(fn=<built-in function neg>, value=$360binary_true_divide.8)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $364call_method.10 = call $354load_method.5($362unary_negative.9, func=$354load_method.5, args=[Var($362unary_negative.9, umap_.py:223)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $366inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum.3, rhs=$364call_method.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: psum.1 = $366inplace_add.11
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 380
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 372
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7A8C8>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const374.4 = const(float, 1.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $376inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum.3, rhs=$const374.4, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: psum.2 = $376inplace_add.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 380
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 380
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7A8C8>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: psum.4 = phi(incoming_values=[Var(psum.2, umap_.py:225), Var(psum.1, umap_.py:223)], incoming_blocks=[372, 350])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7A8C8>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7A8C8>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $386load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $388load_method.3 = getattr(value=$386load_global.2, attr=fabs)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $394binary_subtract.6 = psum.3 - target
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $396call_method.7 = call $388load_method.3($394binary_subtract.6, func=$388load_method.3, args=[Var($394binary_subtract.6, umap_.py:227)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $398load_global.8 = global(SMOOTH_K_TOLERANCE: 1e-05)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $400compare_op.9 = $396call_method.7 < $398load_global.8
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool402 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $402pred = call bool402($400compare_op.9, func=bool402, args=(Var($400compare_op.9, umap_.py:227),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $402pred, 406, 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 406
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7A8C8>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 478
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7A8C8>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $412compare_op.4 = psum.3 > target
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool414 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $414pred = call bool414($412compare_op.4, func=bool414, args=(Var($412compare_op.4, umap_.py:230),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $414pred, 418, 436
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 418
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7A8C8>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: hi = mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG replaced with: hi.1 = mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $426binary_add.5 = lo.2 + hi
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const428.6 = const(float, 2.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mid = $426binary_add.5 / $const428.6
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 436
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7A8C8>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: lo.1 = mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $442load_global.4 = global(NPY_INFINITY: inf)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $444compare_op.5 = hi == $442load_global.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool446 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $446pred = call bool446($444compare_op.5, func=bool446, args=(Var($444compare_op.5, umap_.py:235),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $446pred, 450, 460
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 450
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7A8C8>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const452.3 = const(int, 2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $454inplace_multiply.4 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=mid, rhs=$const452.3, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mid = $454inplace_multiply.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 460
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7A8C8>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $464binary_add.4 = lo.1 + hi
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const466.5 = const(float, 2.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mid = $464binary_add.4 / $const466.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7A8C8>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: lo.3 = phi(incoming_values=[Var(lo.1, umap_.py:234), Var(lo.2, umap_.py:231), Var(lo.1, umap_.py:234)], incoming_blocks=[450, 418, 460])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 476
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7A8C8>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 478
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 478
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7A8C8>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: result[i] = mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $490binary_subscr.6 = getitem(value=rho, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const492.7 = const(float, 0.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $494compare_op.8 = $490binary_subscr.6 > $const492.7
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool496 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $496pred = call bool496($494compare_op.8, func=bool496, args=(Var($494compare_op.8, umap_.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $496pred, 500, 542
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 500
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7A8C8>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $500load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $502load_method.2 = getattr(value=$500load_global.1, attr=mean)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mean_ith_distances = call $502load_method.2(ith_distances, func=$502load_method.2, args=[Var(ith_distances, umap_.py:201)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $514binary_subscr.7 = getitem(value=result, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $516load_global.8 = global(MIN_K_DIST_SCALE: 0.001)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $520binary_multiply.10 = $516load_global.8 * mean_ith_distances
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $522compare_op.11 = $514binary_subscr.7 < $520binary_multiply.10
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool524 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $524pred = call bool524($522compare_op.11, func=bool524, args=(Var($522compare_op.11, umap_.py:245),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $524pred, 528, 570
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 528
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7A8C8>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $528load_global.1 = global(MIN_K_DIST_SCALE: 0.001)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $532binary_multiply.3 = $528load_global.1 * mean_ith_distances
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: result[i] = $532binary_multiply.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 575
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 542
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7A8C8>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $546binary_subscr.3 = getitem(value=result, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $548load_global.4 = global(MIN_K_DIST_SCALE: 0.001)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $552binary_multiply.6 = $548load_global.4 * mean_distances
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $554compare_op.7 = $546binary_subscr.3 < $552binary_multiply.6
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool556 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $556pred = call bool556($554compare_op.7, func=bool556, args=(Var($554compare_op.7, umap_.py:248),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $556pred, 558, 575
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 558
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7A8C8>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $558load_global.1 = global(MIN_K_DIST_SCALE: 0.001)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $562binary_multiply.3 = $558load_global.1 * mean_distances
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: result[i] = $562binary_multiply.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 570
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 570
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7A8C8>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 575
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 572
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7A8C8>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 574
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 574
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7A8C8>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $578build_tuple.2 = build_tuple(items=[Var(result, umap_.py:191), Var(rho, umap_.py:190)])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $580return_value.3 = cast(value=$578build_tuple.2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: return $580return_value.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 575
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E7A8C8>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 88
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {92: [<numba.core.ir.Assign object at 0x0000015A91E2BB48>],
             418: [<numba.core.ir.Assign object at 0x0000015A91E7E048>]})
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8AF6B408>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: distances = arg(0, name=distances)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: k = arg(1, name=k)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: n_iter = arg(2, name=n_iter)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: local_connectivity = arg(3, name=local_connectivity)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bandwidth = arg(4, name=bandwidth)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=log2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $8call_method.3 = call $4load_method.1(k, func=$4load_method.1, args=[Var(k, umap_.py:189)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: target = $8call_method.3 * bandwidth
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $16load_global.6 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $18load_attr.7 = getattr(value=$16load_global.6, attr=zeros)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $22load_attr.9 = getattr(value=distances, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const24.10 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $26binary_subscr.11 = static_getitem(value=$22load_attr.9, index=0, index_var=$const24.10, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $28load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $30load_attr.13 = getattr(value=$28load_global.12, attr=float32)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho = call $18load_attr.7($26binary_subscr.11, func=$18load_attr.7, args=[Var($26binary_subscr.11, umap_.py:190)], kws=[('dtype', Var($30load_attr.13, umap_.py:190))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $38load_global.16 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $40load_attr.17 = getattr(value=$38load_global.16, attr=zeros)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $44load_attr.19 = getattr(value=distances, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const46.20 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $48binary_subscr.21 = static_getitem(value=$44load_attr.19, index=0, index_var=$const46.20, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $50load_global.22 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $52load_attr.23 = getattr(value=$50load_global.22, attr=float32)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: result = call $40load_attr.17($48binary_subscr.21, func=$40load_attr.17, args=[Var($48binary_subscr.21, umap_.py:191)], kws=[('dtype', Var($52load_attr.23, umap_.py:191))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $60load_global.26 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $62load_method.27 = getattr(value=$60load_global.26, attr=mean)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mean_distances = call $62load_method.27(distances, func=$62load_method.27, args=[Var(distances, umap_.py:189)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 70
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 70
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8AF6B408>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $74load_global.0 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $78load_attr.2 = getattr(value=distances, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const80.3 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $82binary_subscr.4 = static_getitem(value=$78load_attr.2, index=0, index_var=$const80.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $84call_function.5 = call $74load_global.0($82binary_subscr.4, func=$74load_global.0, args=[Var($82binary_subscr.4, umap_.py:195)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $86get_iter.6 = getiter(value=$84call_function.5)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi88.0 = $86get_iter.6
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 88
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 88
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8AF6B408>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $88for_iter.1 = iternext(value=$phi88.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $88for_iter.2 = pair_first(value=$88for_iter.1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $88for_iter.3 = pair_second(value=$88for_iter.1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi92.1 = $88for_iter.2
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $88for_iter.3, 92, 572
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 92
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8AF6B408>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: i = $phi92.1
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: lo = const(float, 0.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: hi = global(NPY_INFINITY: inf)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mid = const(float, 1.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: ith_distances = getitem(value=distances, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const118.10 = const(float, 0.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $120compare_op.11 = ith_distances > $const118.10
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: non_zero_dists = getitem(value=ith_distances, index=$120compare_op.11, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $128load_attr.14 = getattr(value=non_zero_dists, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const130.15 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $132binary_subscr.16 = static_getitem(value=$128load_attr.14, index=0, index_var=$const130.15, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $136compare_op.18 = $132binary_subscr.16 >= local_connectivity
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool138 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $138pred = call bool138($136compare_op.18, func=bool138, args=(Var($136compare_op.18, umap_.py:203),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $138pred, 140, 250
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 140
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8AF6B408>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $140load_global.1 = global(int: <class 'int'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $142load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $144load_method.3 = getattr(value=$142load_global.2, attr=floor)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $148call_method.5 = call $144load_method.3(local_connectivity, func=$144load_method.3, args=[Var(local_connectivity, umap_.py:189)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: index = call $140load_global.1($148call_method.5, func=$140load_global.1, args=[Var($148call_method.5, umap_.py:204)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: interpolation = local_connectivity - index
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const164.11 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $166compare_op.12 = index > $const164.11
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool168 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $168pred = call bool168($166compare_op.12, func=bool168, args=(Var($166compare_op.12, umap_.py:206),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $168pred, 170, 232
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 170
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8AF6B408>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const174.3 = const(int, 1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $176binary_subtract.4 = index - $const174.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $178binary_subscr.5 = getitem(value=non_zero_dists, index=$176binary_subtract.4, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho[i] = $178binary_subscr.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $188load_global.9 = global(SMOOTH_K_TOLERANCE: 1e-05)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $190compare_op.10 = interpolation > $188load_global.9
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool192 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $192pred = call bool192($190compare_op.10, func=bool192, args=(Var($190compare_op.10, umap_.py:208),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $192pred, 194, 248
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 194
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8AF6B408>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $200binary_subscr.5 = getitem(value=rho, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $208binary_subscr.9 = getitem(value=non_zero_dists, index=index, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const214.12 = const(int, 1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $216binary_subtract.13 = index - $const214.12
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $218binary_subscr.14 = getitem(value=non_zero_dists, index=$216binary_subtract.13, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $220binary_subtract.15 = $208binary_subscr.9 - $218binary_subscr.14
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $222binary_multiply.16 = interpolation * $220binary_subtract.15
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $224inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$200binary_subscr.5, rhs=$222binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho[i] = $224inplace_add.17
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 248
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 232
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8AF6B408>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const236.3 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $238binary_subscr.4 = static_getitem(value=non_zero_dists, index=0, index_var=$const236.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $240binary_multiply.5 = interpolation * $238binary_subscr.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho[i] = $240binary_multiply.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 248
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 248
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8AF6B408>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 250
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8AF6B408>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $252load_attr.2 = getattr(value=non_zero_dists, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const254.3 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $256binary_subscr.4 = static_getitem(value=$252load_attr.2, index=0, index_var=$const254.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const258.5 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $260compare_op.6 = $256binary_subscr.4 > $const258.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool262 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $262pred = call bool262($260compare_op.6, func=bool262, args=(Var($260compare_op.6, umap_.py:214),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $262pred, 266, 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 266
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8AF6B408>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $266load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $268load_method.2 = getattr(value=$266load_global.1, attr=max)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $272call_method.4 = call $268load_method.2(non_zero_dists, func=$268load_method.2, args=[Var(non_zero_dists, umap_.py:202)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho[i] = $272call_method.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8AF6B408>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $282load_global.1 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $286call_function.3 = call $282load_global.1(n_iter, func=$282load_global.1, args=[Var(n_iter, umap_.py:189)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $288get_iter.4 = getiter(value=$286call_function.3)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi290.1 = $288get_iter.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8AF6B408>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: lo.2 = phi(incoming_values=[Var(lo, umap_.py:196), Var(lo.3, umap_.py:231)], incoming_blocks=[280, 472])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $290for_iter.2 = iternext(value=$phi290.1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $290for_iter.3 = pair_first(value=$290for_iter.2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $290for_iter.4 = pair_second(value=$290for_iter.2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi292.2 = $290for_iter.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $290for_iter.4, 292, 476
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 292
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8AF6B408>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: n = $phi292.2
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: psum = const(float, 0.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8AF6B408>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $300load_global.2 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const302.3 = const(int, 1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $306load_attr.5 = getattr(value=distances, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const308.6 = const(int, 1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $310binary_subscr.7 = static_getitem(value=$306load_attr.5, index=1, index_var=$const308.6, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $312call_function.8 = call $300load_global.2($const302.3, $310binary_subscr.7, func=$300load_global.2, args=[Var($const302.3, umap_.py:220), Var($310binary_subscr.7, umap_.py:220)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $314get_iter.9 = getiter(value=$312call_function.8)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi316.2 = $314get_iter.9
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8AF6B408>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: psum.3 = phi(incoming_values=[Var(psum, umap_.py:219), Var(psum.4, umap_.py:223)], incoming_blocks=[298, 380])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $316for_iter.3 = iternext(value=$phi316.2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $316for_iter.4 = pair_first(value=$316for_iter.3)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $316for_iter.5 = pair_second(value=$316for_iter.3)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi318.3 = $316for_iter.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $316for_iter.5, 318, 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 318
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8AF6B408>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: j = $phi318.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $326build_tuple.7 = build_tuple(items=[Var(i, umap_.py:195), Var(j, umap_.py:220)])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $328binary_subscr.8 = getitem(value=distances, index=$326build_tuple.7, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $334binary_subscr.11 = getitem(value=rho, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: d = $328binary_subscr.8 - $334binary_subscr.11
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const342.14 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $344compare_op.15 = d > $const342.14
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool346 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $346pred = call bool346($344compare_op.15, func=bool346, args=(Var($344compare_op.15, umap_.py:222),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $346pred, 350, 372
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 350
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8AF6B408>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $352load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $354load_method.5 = getattr(value=$352load_global.4, attr=exp)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $360binary_true_divide.8 = d / mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $362unary_negative.9 = unary(fn=<built-in function neg>, value=$360binary_true_divide.8)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $364call_method.10 = call $354load_method.5($362unary_negative.9, func=$354load_method.5, args=[Var($362unary_negative.9, umap_.py:223)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $366inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum.3, rhs=$364call_method.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: psum.1 = $366inplace_add.11
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 380
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 372
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8AF6B408>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const374.4 = const(float, 1.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $376inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum.3, rhs=$const374.4, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: psum.2 = $376inplace_add.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 380
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 380
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8AF6B408>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: psum.4 = phi(incoming_values=[Var(psum.2, umap_.py:225), Var(psum.1, umap_.py:223)], incoming_blocks=[372, 350])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8AF6B408>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8AF6B408>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $386load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $388load_method.3 = getattr(value=$386load_global.2, attr=fabs)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $394binary_subtract.6 = psum.3 - target
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $396call_method.7 = call $388load_method.3($394binary_subtract.6, func=$388load_method.3, args=[Var($394binary_subtract.6, umap_.py:227)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $398load_global.8 = global(SMOOTH_K_TOLERANCE: 1e-05)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $400compare_op.9 = $396call_method.7 < $398load_global.8
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool402 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $402pred = call bool402($400compare_op.9, func=bool402, args=(Var($400compare_op.9, umap_.py:227),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $402pred, 406, 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 406
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8AF6B408>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 478
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8AF6B408>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $412compare_op.4 = psum.3 > target
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool414 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $414pred = call bool414($412compare_op.4, func=bool414, args=(Var($412compare_op.4, umap_.py:230),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $414pred, 418, 436
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 418
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8AF6B408>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: hi.1 = mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $426binary_add.5 = lo.2 + hi
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def var='hi' stmt=$426binary_add.5 = lo.2 + hi
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG replaced with: $426binary_add.5 = lo.2 + hi.1
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const428.6 = const(float, 2.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mid = $426binary_add.5 / $const428.6
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 436
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8AF6B408>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: lo.1 = mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $442load_global.4 = global(NPY_INFINITY: inf)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $444compare_op.5 = hi == $442load_global.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def var='hi' stmt=$444compare_op.5 = hi == $442load_global.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 436
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 408 from label 436
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 386 from label 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 384 from label 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 316 from label 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 298 from label 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 292 from label 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 292
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 292
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 290 from label 292
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG insert phi node hi.2 = phi(incoming_values=[], incoming_blocks=[]) at 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 92 from label 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 92
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG incoming_def hi = global(NPY_INFINITY: inf)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG insert phi node hi.3 = phi(incoming_values=[], incoming_blocks=[]) at 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 450
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 450
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 436 from label 450
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 436
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 436
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 408 from label 436
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 386 from label 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 384 from label 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 316 from label 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 298 from label 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 292 from label 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 292
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 292
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 290 from label 292
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG incoming_def hi.2 = phi(incoming_values=[Var(hi, umap_.py:197)], incoming_blocks=[280])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 418
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG incoming_def hi.1 = mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 460
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 460
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 436 from label 460
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 436
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 436
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 408 from label 436
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 386 from label 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 384 from label 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 316 from label 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 298 from label 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 292 from label 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 292
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 292
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 290 from label 292
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG incoming_def hi.2 = phi(incoming_values=[Var(hi, umap_.py:197)], incoming_blocks=[280])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG incoming_def hi.3 = phi(incoming_values=[Var(hi.2, umap_.py:234), Var(hi.1, umap_.py:231), Var(hi.2, umap_.py:234)], incoming_blocks=[450, 418, 460])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG replaced with: $444compare_op.5 = hi.2 == $442load_global.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool446 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $446pred = call bool446($444compare_op.5, func=bool446, args=(Var($444compare_op.5, umap_.py:235),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $446pred, 450, 460
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 450
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8AF6B408>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const452.3 = const(int, 2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $454inplace_multiply.4 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=mid, rhs=$const452.3, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mid = $454inplace_multiply.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 460
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8AF6B408>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $464binary_add.4 = lo.1 + hi
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def var='hi' stmt=$464binary_add.4 = lo.1 + hi
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 460
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 436 from label 460
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 436
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 436
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 408 from label 436
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 386 from label 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 384 from label 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 316 from label 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 298 from label 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 292 from label 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 292
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 292
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 290 from label 292
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG replaced with: $464binary_add.4 = lo.1 + hi.2
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const466.5 = const(float, 2.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mid = $464binary_add.4 / $const466.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8AF6B408>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: lo.3 = phi(incoming_values=[Var(lo.1, umap_.py:234), Var(lo.2, umap_.py:231), Var(lo.1, umap_.py:234)], incoming_blocks=[450, 418, 460])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 476
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8AF6B408>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 478
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 478
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8AF6B408>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: result[i] = mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $490binary_subscr.6 = getitem(value=rho, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const492.7 = const(float, 0.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $494compare_op.8 = $490binary_subscr.6 > $const492.7
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool496 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $496pred = call bool496($494compare_op.8, func=bool496, args=(Var($494compare_op.8, umap_.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $496pred, 500, 542
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 500
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8AF6B408>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $500load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $502load_method.2 = getattr(value=$500load_global.1, attr=mean)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mean_ith_distances = call $502load_method.2(ith_distances, func=$502load_method.2, args=[Var(ith_distances, umap_.py:201)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $514binary_subscr.7 = getitem(value=result, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $516load_global.8 = global(MIN_K_DIST_SCALE: 0.001)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $520binary_multiply.10 = $516load_global.8 * mean_ith_distances
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $522compare_op.11 = $514binary_subscr.7 < $520binary_multiply.10
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool524 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $524pred = call bool524($522compare_op.11, func=bool524, args=(Var($522compare_op.11, umap_.py:245),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $524pred, 528, 570
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 528
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8AF6B408>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $528load_global.1 = global(MIN_K_DIST_SCALE: 0.001)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $532binary_multiply.3 = $528load_global.1 * mean_ith_distances
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: result[i] = $532binary_multiply.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 575
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 542
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8AF6B408>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $546binary_subscr.3 = getitem(value=result, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $548load_global.4 = global(MIN_K_DIST_SCALE: 0.001)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $552binary_multiply.6 = $548load_global.4 * mean_distances
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $554compare_op.7 = $546binary_subscr.3 < $552binary_multiply.6
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool556 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $556pred = call bool556($554compare_op.7, func=bool556, args=(Var($554compare_op.7, umap_.py:248),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $556pred, 558, 575
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 558
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8AF6B408>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $558load_global.1 = global(MIN_K_DIST_SCALE: 0.001)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $562binary_multiply.3 = $558load_global.1 * mean_distances
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: result[i] = $562binary_multiply.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 570
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 570
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8AF6B408>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 575
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 572
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8AF6B408>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 574
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 574
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8AF6B408>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $578build_tuple.2 = build_tuple(items=[Var(result, umap_.py:191), Var(rho, umap_.py:190)])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $580return_value.3 = cast(value=$578build_tuple.2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: return $580return_value.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 575
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8AF6B408>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 88
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Fix SSA violator on var mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E77A08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: distances = arg(0, name=distances)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: k = arg(1, name=k)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: n_iter = arg(2, name=n_iter)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: local_connectivity = arg(3, name=local_connectivity)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bandwidth = arg(4, name=bandwidth)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=log2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $8call_method.3 = call $4load_method.1(k, func=$4load_method.1, args=[Var(k, umap_.py:189)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: target = $8call_method.3 * bandwidth
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $16load_global.6 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $18load_attr.7 = getattr(value=$16load_global.6, attr=zeros)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $22load_attr.9 = getattr(value=distances, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const24.10 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $26binary_subscr.11 = static_getitem(value=$22load_attr.9, index=0, index_var=$const24.10, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $28load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $30load_attr.13 = getattr(value=$28load_global.12, attr=float32)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho = call $18load_attr.7($26binary_subscr.11, func=$18load_attr.7, args=[Var($26binary_subscr.11, umap_.py:190)], kws=[('dtype', Var($30load_attr.13, umap_.py:190))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $38load_global.16 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $40load_attr.17 = getattr(value=$38load_global.16, attr=zeros)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $44load_attr.19 = getattr(value=distances, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const46.20 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $48binary_subscr.21 = static_getitem(value=$44load_attr.19, index=0, index_var=$const46.20, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $50load_global.22 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $52load_attr.23 = getattr(value=$50load_global.22, attr=float32)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: result = call $40load_attr.17($48binary_subscr.21, func=$40load_attr.17, args=[Var($48binary_subscr.21, umap_.py:191)], kws=[('dtype', Var($52load_attr.23, umap_.py:191))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $60load_global.26 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $62load_method.27 = getattr(value=$60load_global.26, attr=mean)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mean_distances = call $62load_method.27(distances, func=$62load_method.27, args=[Var(distances, umap_.py:189)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 70
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 70
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E77A08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $74load_global.0 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $78load_attr.2 = getattr(value=distances, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const80.3 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $82binary_subscr.4 = static_getitem(value=$78load_attr.2, index=0, index_var=$const80.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $84call_function.5 = call $74load_global.0($82binary_subscr.4, func=$74load_global.0, args=[Var($82binary_subscr.4, umap_.py:195)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $86get_iter.6 = getiter(value=$84call_function.5)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi88.0 = $86get_iter.6
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 88
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 88
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E77A08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $88for_iter.1 = iternext(value=$phi88.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $88for_iter.2 = pair_first(value=$88for_iter.1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $88for_iter.3 = pair_second(value=$88for_iter.1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi92.1 = $88for_iter.2
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $88for_iter.3, 92, 572
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 92
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E77A08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: i = $phi92.1
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: lo = const(float, 0.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: hi = global(NPY_INFINITY: inf)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mid = const(float, 1.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG first assign: mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG replaced with: mid = const(float, 1.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: ith_distances = getitem(value=distances, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const118.10 = const(float, 0.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $120compare_op.11 = ith_distances > $const118.10
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: non_zero_dists = getitem(value=ith_distances, index=$120compare_op.11, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $128load_attr.14 = getattr(value=non_zero_dists, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const130.15 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $132binary_subscr.16 = static_getitem(value=$128load_attr.14, index=0, index_var=$const130.15, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $136compare_op.18 = $132binary_subscr.16 >= local_connectivity
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool138 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $138pred = call bool138($136compare_op.18, func=bool138, args=(Var($136compare_op.18, umap_.py:203),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $138pred, 140, 250
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 140
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E77A08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $140load_global.1 = global(int: <class 'int'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $142load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $144load_method.3 = getattr(value=$142load_global.2, attr=floor)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $148call_method.5 = call $144load_method.3(local_connectivity, func=$144load_method.3, args=[Var(local_connectivity, umap_.py:189)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: index = call $140load_global.1($148call_method.5, func=$140load_global.1, args=[Var($148call_method.5, umap_.py:204)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: interpolation = local_connectivity - index
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const164.11 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $166compare_op.12 = index > $const164.11
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool168 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $168pred = call bool168($166compare_op.12, func=bool168, args=(Var($166compare_op.12, umap_.py:206),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $168pred, 170, 232
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 170
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E77A08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const174.3 = const(int, 1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $176binary_subtract.4 = index - $const174.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $178binary_subscr.5 = getitem(value=non_zero_dists, index=$176binary_subtract.4, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho[i] = $178binary_subscr.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $188load_global.9 = global(SMOOTH_K_TOLERANCE: 1e-05)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $190compare_op.10 = interpolation > $188load_global.9
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool192 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $192pred = call bool192($190compare_op.10, func=bool192, args=(Var($190compare_op.10, umap_.py:208),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $192pred, 194, 248
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 194
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E77A08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $200binary_subscr.5 = getitem(value=rho, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $208binary_subscr.9 = getitem(value=non_zero_dists, index=index, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const214.12 = const(int, 1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $216binary_subtract.13 = index - $const214.12
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $218binary_subscr.14 = getitem(value=non_zero_dists, index=$216binary_subtract.13, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $220binary_subtract.15 = $208binary_subscr.9 - $218binary_subscr.14
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $222binary_multiply.16 = interpolation * $220binary_subtract.15
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $224inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$200binary_subscr.5, rhs=$222binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho[i] = $224inplace_add.17
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 248
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 232
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E77A08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const236.3 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $238binary_subscr.4 = static_getitem(value=non_zero_dists, index=0, index_var=$const236.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $240binary_multiply.5 = interpolation * $238binary_subscr.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho[i] = $240binary_multiply.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 248
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 248
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E77A08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 250
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E77A08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $252load_attr.2 = getattr(value=non_zero_dists, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const254.3 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $256binary_subscr.4 = static_getitem(value=$252load_attr.2, index=0, index_var=$const254.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const258.5 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $260compare_op.6 = $256binary_subscr.4 > $const258.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool262 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $262pred = call bool262($260compare_op.6, func=bool262, args=(Var($260compare_op.6, umap_.py:214),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $262pred, 266, 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 266
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E77A08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $266load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $268load_method.2 = getattr(value=$266load_global.1, attr=max)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $272call_method.4 = call $268load_method.2(non_zero_dists, func=$268load_method.2, args=[Var(non_zero_dists, umap_.py:202)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho[i] = $272call_method.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E77A08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $282load_global.1 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $286call_function.3 = call $282load_global.1(n_iter, func=$282load_global.1, args=[Var(n_iter, umap_.py:189)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $288get_iter.4 = getiter(value=$286call_function.3)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi290.1 = $288get_iter.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E77A08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: hi.2 = phi(incoming_values=[Var(hi, umap_.py:197), Var(hi.3, umap_.py:234)], incoming_blocks=[280, 472])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: lo.2 = phi(incoming_values=[Var(lo, umap_.py:196), Var(lo.3, umap_.py:231)], incoming_blocks=[280, 472])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $290for_iter.2 = iternext(value=$phi290.1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $290for_iter.3 = pair_first(value=$290for_iter.2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $290for_iter.4 = pair_second(value=$290for_iter.2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi292.2 = $290for_iter.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $290for_iter.4, 292, 476
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 292
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E77A08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: n = $phi292.2
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: psum = const(float, 0.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E77A08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $300load_global.2 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const302.3 = const(int, 1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $306load_attr.5 = getattr(value=distances, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const308.6 = const(int, 1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $310binary_subscr.7 = static_getitem(value=$306load_attr.5, index=1, index_var=$const308.6, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $312call_function.8 = call $300load_global.2($const302.3, $310binary_subscr.7, func=$300load_global.2, args=[Var($const302.3, umap_.py:220), Var($310binary_subscr.7, umap_.py:220)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $314get_iter.9 = getiter(value=$312call_function.8)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi316.2 = $314get_iter.9
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E77A08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: psum.3 = phi(incoming_values=[Var(psum, umap_.py:219), Var(psum.4, umap_.py:223)], incoming_blocks=[298, 380])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $316for_iter.3 = iternext(value=$phi316.2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $316for_iter.4 = pair_first(value=$316for_iter.3)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $316for_iter.5 = pair_second(value=$316for_iter.3)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi318.3 = $316for_iter.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $316for_iter.5, 318, 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 318
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E77A08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: j = $phi318.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $326build_tuple.7 = build_tuple(items=[Var(i, umap_.py:195), Var(j, umap_.py:220)])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $328binary_subscr.8 = getitem(value=distances, index=$326build_tuple.7, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $334binary_subscr.11 = getitem(value=rho, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: d = $328binary_subscr.8 - $334binary_subscr.11
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const342.14 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $344compare_op.15 = d > $const342.14
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool346 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $346pred = call bool346($344compare_op.15, func=bool346, args=(Var($344compare_op.15, umap_.py:222),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $346pred, 350, 372
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 350
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E77A08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $352load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $354load_method.5 = getattr(value=$352load_global.4, attr=exp)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $360binary_true_divide.8 = d / mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $362unary_negative.9 = unary(fn=<built-in function neg>, value=$360binary_true_divide.8)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $364call_method.10 = call $354load_method.5($362unary_negative.9, func=$354load_method.5, args=[Var($362unary_negative.9, umap_.py:223)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $366inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum.3, rhs=$364call_method.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: psum.1 = $366inplace_add.11
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 380
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 372
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E77A08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const374.4 = const(float, 1.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $376inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum.3, rhs=$const374.4, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: psum.2 = $376inplace_add.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 380
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 380
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E77A08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: psum.4 = phi(incoming_values=[Var(psum.2, umap_.py:225), Var(psum.1, umap_.py:223)], incoming_blocks=[372, 350])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E77A08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E77A08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $386load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $388load_method.3 = getattr(value=$386load_global.2, attr=fabs)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $394binary_subtract.6 = psum.3 - target
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $396call_method.7 = call $388load_method.3($394binary_subtract.6, func=$388load_method.3, args=[Var($394binary_subtract.6, umap_.py:227)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $398load_global.8 = global(SMOOTH_K_TOLERANCE: 1e-05)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $400compare_op.9 = $396call_method.7 < $398load_global.8
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool402 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $402pred = call bool402($400compare_op.9, func=bool402, args=(Var($400compare_op.9, umap_.py:227),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $402pred, 406, 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 406
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E77A08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 478
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E77A08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $412compare_op.4 = psum.3 > target
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool414 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $414pred = call bool414($412compare_op.4, func=bool414, args=(Var($412compare_op.4, umap_.py:230),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $414pred, 418, 436
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 418
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E77A08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: hi.1 = mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $426binary_add.5 = lo.2 + hi.1
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const428.6 = const(float, 2.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mid = $426binary_add.5 / $const428.6
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG replaced with: mid.1 = $426binary_add.5 / $const428.6
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 436
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E77A08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: lo.1 = mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $442load_global.4 = global(NPY_INFINITY: inf)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $444compare_op.5 = hi.2 == $442load_global.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool446 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $446pred = call bool446($444compare_op.5, func=bool446, args=(Var($444compare_op.5, umap_.py:235),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $446pred, 450, 460
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 450
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E77A08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const452.3 = const(int, 2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $454inplace_multiply.4 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=mid, rhs=$const452.3, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mid = $454inplace_multiply.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG replaced with: mid.2 = $454inplace_multiply.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 460
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E77A08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $464binary_add.4 = lo.1 + hi.2
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const466.5 = const(float, 2.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mid = $464binary_add.4 / $const466.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG replaced with: mid.3 = $464binary_add.4 / $const466.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E77A08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: hi.3 = phi(incoming_values=[Var(hi.2, umap_.py:234), Var(hi.1, umap_.py:231), Var(hi.2, umap_.py:234)], incoming_blocks=[450, 418, 460])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: lo.3 = phi(incoming_values=[Var(lo.1, umap_.py:234), Var(lo.2, umap_.py:231), Var(lo.1, umap_.py:234)], incoming_blocks=[450, 418, 460])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 476
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E77A08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 478
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 478
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E77A08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: result[i] = mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $490binary_subscr.6 = getitem(value=rho, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const492.7 = const(float, 0.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $494compare_op.8 = $490binary_subscr.6 > $const492.7
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool496 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $496pred = call bool496($494compare_op.8, func=bool496, args=(Var($494compare_op.8, umap_.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $496pred, 500, 542
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 500
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E77A08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $500load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $502load_method.2 = getattr(value=$500load_global.1, attr=mean)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mean_ith_distances = call $502load_method.2(ith_distances, func=$502load_method.2, args=[Var(ith_distances, umap_.py:201)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $514binary_subscr.7 = getitem(value=result, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $516load_global.8 = global(MIN_K_DIST_SCALE: 0.001)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $520binary_multiply.10 = $516load_global.8 * mean_ith_distances
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $522compare_op.11 = $514binary_subscr.7 < $520binary_multiply.10
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool524 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $524pred = call bool524($522compare_op.11, func=bool524, args=(Var($522compare_op.11, umap_.py:245),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $524pred, 528, 570
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 528
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E77A08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $528load_global.1 = global(MIN_K_DIST_SCALE: 0.001)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $532binary_multiply.3 = $528load_global.1 * mean_ith_distances
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: result[i] = $532binary_multiply.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 575
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 542
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E77A08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $546binary_subscr.3 = getitem(value=result, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $548load_global.4 = global(MIN_K_DIST_SCALE: 0.001)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $552binary_multiply.6 = $548load_global.4 * mean_distances
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $554compare_op.7 = $546binary_subscr.3 < $552binary_multiply.6
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool556 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $556pred = call bool556($554compare_op.7, func=bool556, args=(Var($554compare_op.7, umap_.py:248),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $556pred, 558, 575
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 558
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E77A08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $558load_global.1 = global(MIN_K_DIST_SCALE: 0.001)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $562binary_multiply.3 = $558load_global.1 * mean_distances
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: result[i] = $562binary_multiply.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 570
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 570
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E77A08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 575
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 572
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E77A08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 574
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 574
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E77A08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $578build_tuple.2 = build_tuple(items=[Var(result, umap_.py:191), Var(rho, umap_.py:190)])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $580return_value.3 = cast(value=$578build_tuple.2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: return $580return_value.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 575
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A91E77A08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 88
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {92: [<numba.core.ir.Assign object at 0x0000015A91E7E808>],
             418: [<numba.core.ir.Assign object at 0x0000015A91E2B8C8>],
             450: [<numba.core.ir.Assign object at 0x0000015A91E89F08>],
             460: [<numba.core.ir.Assign object at 0x0000015A91E8C588>]})
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E8CF08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: distances = arg(0, name=distances)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: k = arg(1, name=k)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: n_iter = arg(2, name=n_iter)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: local_connectivity = arg(3, name=local_connectivity)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bandwidth = arg(4, name=bandwidth)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=log2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $8call_method.3 = call $4load_method.1(k, func=$4load_method.1, args=[Var(k, umap_.py:189)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: target = $8call_method.3 * bandwidth
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $16load_global.6 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $18load_attr.7 = getattr(value=$16load_global.6, attr=zeros)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $22load_attr.9 = getattr(value=distances, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const24.10 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $26binary_subscr.11 = static_getitem(value=$22load_attr.9, index=0, index_var=$const24.10, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $28load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $30load_attr.13 = getattr(value=$28load_global.12, attr=float32)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho = call $18load_attr.7($26binary_subscr.11, func=$18load_attr.7, args=[Var($26binary_subscr.11, umap_.py:190)], kws=[('dtype', Var($30load_attr.13, umap_.py:190))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $38load_global.16 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $40load_attr.17 = getattr(value=$38load_global.16, attr=zeros)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $44load_attr.19 = getattr(value=distances, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const46.20 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $48binary_subscr.21 = static_getitem(value=$44load_attr.19, index=0, index_var=$const46.20, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $50load_global.22 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $52load_attr.23 = getattr(value=$50load_global.22, attr=float32)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: result = call $40load_attr.17($48binary_subscr.21, func=$40load_attr.17, args=[Var($48binary_subscr.21, umap_.py:191)], kws=[('dtype', Var($52load_attr.23, umap_.py:191))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $60load_global.26 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $62load_method.27 = getattr(value=$60load_global.26, attr=mean)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mean_distances = call $62load_method.27(distances, func=$62load_method.27, args=[Var(distances, umap_.py:189)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 70
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 70
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E8CF08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $74load_global.0 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $78load_attr.2 = getattr(value=distances, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const80.3 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $82binary_subscr.4 = static_getitem(value=$78load_attr.2, index=0, index_var=$const80.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $84call_function.5 = call $74load_global.0($82binary_subscr.4, func=$74load_global.0, args=[Var($82binary_subscr.4, umap_.py:195)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $86get_iter.6 = getiter(value=$84call_function.5)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi88.0 = $86get_iter.6
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 88
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 88
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E8CF08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $88for_iter.1 = iternext(value=$phi88.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $88for_iter.2 = pair_first(value=$88for_iter.1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $88for_iter.3 = pair_second(value=$88for_iter.1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi92.1 = $88for_iter.2
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $88for_iter.3, 92, 572
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 92
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E8CF08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: i = $phi92.1
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: lo = const(float, 0.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: hi = global(NPY_INFINITY: inf)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mid = const(float, 1.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: ith_distances = getitem(value=distances, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const118.10 = const(float, 0.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $120compare_op.11 = ith_distances > $const118.10
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: non_zero_dists = getitem(value=ith_distances, index=$120compare_op.11, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $128load_attr.14 = getattr(value=non_zero_dists, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const130.15 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $132binary_subscr.16 = static_getitem(value=$128load_attr.14, index=0, index_var=$const130.15, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $136compare_op.18 = $132binary_subscr.16 >= local_connectivity
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool138 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $138pred = call bool138($136compare_op.18, func=bool138, args=(Var($136compare_op.18, umap_.py:203),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $138pred, 140, 250
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 140
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E8CF08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $140load_global.1 = global(int: <class 'int'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $142load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $144load_method.3 = getattr(value=$142load_global.2, attr=floor)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $148call_method.5 = call $144load_method.3(local_connectivity, func=$144load_method.3, args=[Var(local_connectivity, umap_.py:189)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: index = call $140load_global.1($148call_method.5, func=$140load_global.1, args=[Var($148call_method.5, umap_.py:204)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: interpolation = local_connectivity - index
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const164.11 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $166compare_op.12 = index > $const164.11
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool168 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $168pred = call bool168($166compare_op.12, func=bool168, args=(Var($166compare_op.12, umap_.py:206),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $168pred, 170, 232
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 170
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E8CF08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const174.3 = const(int, 1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $176binary_subtract.4 = index - $const174.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $178binary_subscr.5 = getitem(value=non_zero_dists, index=$176binary_subtract.4, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho[i] = $178binary_subscr.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $188load_global.9 = global(SMOOTH_K_TOLERANCE: 1e-05)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $190compare_op.10 = interpolation > $188load_global.9
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool192 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $192pred = call bool192($190compare_op.10, func=bool192, args=(Var($190compare_op.10, umap_.py:208),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $192pred, 194, 248
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 194
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E8CF08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $200binary_subscr.5 = getitem(value=rho, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $208binary_subscr.9 = getitem(value=non_zero_dists, index=index, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const214.12 = const(int, 1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $216binary_subtract.13 = index - $const214.12
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $218binary_subscr.14 = getitem(value=non_zero_dists, index=$216binary_subtract.13, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $220binary_subtract.15 = $208binary_subscr.9 - $218binary_subscr.14
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $222binary_multiply.16 = interpolation * $220binary_subtract.15
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $224inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$200binary_subscr.5, rhs=$222binary_multiply.16, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho[i] = $224inplace_add.17
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 248
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 232
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E8CF08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const236.3 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $238binary_subscr.4 = static_getitem(value=non_zero_dists, index=0, index_var=$const236.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $240binary_multiply.5 = interpolation * $238binary_subscr.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho[i] = $240binary_multiply.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 248
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 248
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E8CF08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 250
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E8CF08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $252load_attr.2 = getattr(value=non_zero_dists, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const254.3 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $256binary_subscr.4 = static_getitem(value=$252load_attr.2, index=0, index_var=$const254.3, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const258.5 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $260compare_op.6 = $256binary_subscr.4 > $const258.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool262 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $262pred = call bool262($260compare_op.6, func=bool262, args=(Var($260compare_op.6, umap_.py:214),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $262pred, 266, 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 266
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E8CF08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $266load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $268load_method.2 = getattr(value=$266load_global.1, attr=max)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $272call_method.4 = call $268load_method.2(non_zero_dists, func=$268load_method.2, args=[Var(non_zero_dists, umap_.py:202)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: rho[i] = $272call_method.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E8CF08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $282load_global.1 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $286call_function.3 = call $282load_global.1(n_iter, func=$282load_global.1, args=[Var(n_iter, umap_.py:189)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $288get_iter.4 = getiter(value=$286call_function.3)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi290.1 = $288get_iter.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E8CF08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: hi.2 = phi(incoming_values=[Var(hi, umap_.py:197), Var(hi.3, umap_.py:234)], incoming_blocks=[280, 472])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: lo.2 = phi(incoming_values=[Var(lo, umap_.py:196), Var(lo.3, umap_.py:231)], incoming_blocks=[280, 472])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $290for_iter.2 = iternext(value=$phi290.1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $290for_iter.3 = pair_first(value=$290for_iter.2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $290for_iter.4 = pair_second(value=$290for_iter.2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi292.2 = $290for_iter.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $290for_iter.4, 292, 476
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 292
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E8CF08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: n = $phi292.2
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: psum = const(float, 0.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E8CF08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $300load_global.2 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const302.3 = const(int, 1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $306load_attr.5 = getattr(value=distances, attr=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const308.6 = const(int, 1)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $310binary_subscr.7 = static_getitem(value=$306load_attr.5, index=1, index_var=$const308.6, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $312call_function.8 = call $300load_global.2($const302.3, $310binary_subscr.7, func=$300load_global.2, args=[Var($const302.3, umap_.py:220), Var($310binary_subscr.7, umap_.py:220)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $314get_iter.9 = getiter(value=$312call_function.8)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi316.2 = $314get_iter.9
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E8CF08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: psum.3 = phi(incoming_values=[Var(psum, umap_.py:219), Var(psum.4, umap_.py:223)], incoming_blocks=[298, 380])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $316for_iter.3 = iternext(value=$phi316.2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $316for_iter.4 = pair_first(value=$316for_iter.3)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $316for_iter.5 = pair_second(value=$316for_iter.3)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $phi318.3 = $316for_iter.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $316for_iter.5, 318, 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 318
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E8CF08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: j = $phi318.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $326build_tuple.7 = build_tuple(items=[Var(i, umap_.py:195), Var(j, umap_.py:220)])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $328binary_subscr.8 = getitem(value=distances, index=$326build_tuple.7, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $334binary_subscr.11 = getitem(value=rho, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: d = $328binary_subscr.8 - $334binary_subscr.11
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const342.14 = const(int, 0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $344compare_op.15 = d > $const342.14
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool346 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $346pred = call bool346($344compare_op.15, func=bool346, args=(Var($344compare_op.15, umap_.py:222),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $346pred, 350, 372
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 350
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E8CF08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $352load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $354load_method.5 = getattr(value=$352load_global.4, attr=exp)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $360binary_true_divide.8 = d / mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def var='mid' stmt=$360binary_true_divide.8 = d / mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 350
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 318 from label 350
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 318
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 318
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 316 from label 318
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 298 from label 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 292 from label 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 292
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 292
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 290 from label 292
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG insert phi node mid.4 = phi(incoming_values=[], incoming_blocks=[]) at 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 92 from label 280
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 92
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG incoming_def mid = const(float, 1.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG insert phi node mid.5 = phi(incoming_values=[], incoming_blocks=[]) at 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 450
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG incoming_def mid.2 = $454inplace_multiply.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 418
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG incoming_def mid.1 = $426binary_add.5 / $const428.6
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 460
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG incoming_def mid.3 = $464binary_add.4 / $const466.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG incoming_def mid.5 = phi(incoming_values=[Var(mid.2, umap_.py:236), Var(mid.1, umap_.py:232), Var(mid.3, umap_.py:238)], incoming_blocks=[450, 418, 460])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG replaced with: $360binary_true_divide.8 = d / mid.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $362unary_negative.9 = unary(fn=<built-in function neg>, value=$360binary_true_divide.8)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $364call_method.10 = call $354load_method.5($362unary_negative.9, func=$354load_method.5, args=[Var($362unary_negative.9, umap_.py:223)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $366inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum.3, rhs=$364call_method.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: psum.1 = $366inplace_add.11
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 380
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 372
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E8CF08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const374.4 = const(float, 1.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $376inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum.3, rhs=$const374.4, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: psum.2 = $376inplace_add.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 380
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 380
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E8CF08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: psum.4 = phi(incoming_values=[Var(psum.2, umap_.py:225), Var(psum.1, umap_.py:223)], incoming_blocks=[372, 350])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E8CF08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E8CF08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $386load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $388load_method.3 = getattr(value=$386load_global.2, attr=fabs)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $394binary_subtract.6 = psum.3 - target
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $396call_method.7 = call $388load_method.3($394binary_subtract.6, func=$388load_method.3, args=[Var($394binary_subtract.6, umap_.py:227)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $398load_global.8 = global(SMOOTH_K_TOLERANCE: 1e-05)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $400compare_op.9 = $396call_method.7 < $398load_global.8
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool402 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $402pred = call bool402($400compare_op.9, func=bool402, args=(Var($400compare_op.9, umap_.py:227),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $402pred, 406, 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 406
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E8CF08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 478
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E8CF08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $412compare_op.4 = psum.3 > target
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool414 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $414pred = call bool414($412compare_op.4, func=bool414, args=(Var($412compare_op.4, umap_.py:230),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $414pred, 418, 436
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 418
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E8CF08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: hi.1 = mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def var='mid' stmt=hi.1 = mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 418
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 408 from label 418
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 386 from label 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 384 from label 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 316 from label 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 298 from label 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 292 from label 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 292
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 292
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 290 from label 292
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG replaced with: hi.1 = mid.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $426binary_add.5 = lo.2 + hi.1
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const428.6 = const(float, 2.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mid.1 = $426binary_add.5 / $const428.6
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 436
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E8CF08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: lo.1 = mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def var='mid' stmt=lo.1 = mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 436
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 408 from label 436
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 386 from label 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 384 from label 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 316 from label 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 298 from label 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 292 from label 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 292
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 292
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 290 from label 292
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG replaced with: lo.1 = mid.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $442load_global.4 = global(NPY_INFINITY: inf)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $444compare_op.5 = hi.2 == $442load_global.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool446 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $446pred = call bool446($444compare_op.5, func=bool446, args=(Var($444compare_op.5, umap_.py:235),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $446pred, 450, 460
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 450
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E8CF08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const452.3 = const(int, 2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $454inplace_multiply.4 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=mid, rhs=$const452.3, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def var='mid' stmt=$454inplace_multiply.4 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=mid, rhs=$const452.3, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 450
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 436 from label 450
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 436
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 436
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 408 from label 436
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 386 from label 408
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 384 from label 386
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 316 from label 384
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 298 from label 316
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 292 from label 298
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 292
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 292
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 290 from label 292
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG replaced with: $454inplace_multiply.4 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=mid.4, rhs=$const452.3, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mid.2 = $454inplace_multiply.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 460
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E8CF08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $464binary_add.4 = lo.1 + hi.2
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const466.5 = const(float, 2.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mid.3 = $464binary_add.4 / $const466.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 472
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E8CF08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: hi.3 = phi(incoming_values=[Var(hi.2, umap_.py:234), Var(hi.1, umap_.py:231), Var(hi.2, umap_.py:234)], incoming_blocks=[450, 418, 460])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: lo.3 = phi(incoming_values=[Var(lo.1, umap_.py:234), Var(lo.2, umap_.py:231), Var(lo.1, umap_.py:234)], incoming_blocks=[450, 418, 460])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 476
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E8CF08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 478
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 478
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E8CF08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: result[i] = mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def var='mid' stmt=result[i] = mid
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_top label 478
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG idom 290 from label 478
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG find_def_from_bottom label 290
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG replaced with: result[i] = mid.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $490binary_subscr.6 = getitem(value=rho, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const492.7 = const(float, 0.0)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $494compare_op.8 = $490binary_subscr.6 > $const492.7
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool496 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $496pred = call bool496($494compare_op.8, func=bool496, args=(Var($494compare_op.8, umap_.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $496pred, 500, 542
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 500
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E8CF08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $500load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $502load_method.2 = getattr(value=$500load_global.1, attr=mean)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: mean_ith_distances = call $502load_method.2(ith_distances, func=$502load_method.2, args=[Var(ith_distances, umap_.py:201)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $514binary_subscr.7 = getitem(value=result, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $516load_global.8 = global(MIN_K_DIST_SCALE: 0.001)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $520binary_multiply.10 = $516load_global.8 * mean_ith_distances
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $522compare_op.11 = $514binary_subscr.7 < $520binary_multiply.10
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool524 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $524pred = call bool524($522compare_op.11, func=bool524, args=(Var($522compare_op.11, umap_.py:245),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $524pred, 528, 570
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 528
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E8CF08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $528load_global.1 = global(MIN_K_DIST_SCALE: 0.001)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $532binary_multiply.3 = $528load_global.1 * mean_ith_distances
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: result[i] = $532binary_multiply.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 575
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 542
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E8CF08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $546binary_subscr.3 = getitem(value=result, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $548load_global.4 = global(MIN_K_DIST_SCALE: 0.001)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $552binary_multiply.6 = $548load_global.4 * mean_distances
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $554compare_op.7 = $546binary_subscr.3 < $552binary_multiply.6
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: bool556 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $556pred = call bool556($554compare_op.7, func=bool556, args=(Var($554compare_op.7, umap_.py:248),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: branch $556pred, 558, 575
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 558
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E8CF08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $558load_global.1 = global(MIN_K_DIST_SCALE: 0.001)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $562binary_multiply.3 = $558load_global.1 * mean_distances
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: result[i] = $562binary_multiply.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 570
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 570
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E8CF08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 575
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 572
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E8CF08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 574
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 574
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E8CF08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $578build_tuple.2 = build_tuple(items=[Var(result, umap_.py:191), Var(rho, umap_.py:190)])
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $580return_value.3 = cast(value=$578build_tuple.2)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: return $580return_value.3
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block rewrite pass on 575
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A91E8CF08>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: jump 88
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4169)
           2	LOAD_GLOBAL(arg=0, lineno=4169)
           4	LOAD_ATTR(arg=1, lineno=4169)
           6	LOAD_FAST(arg=0, lineno=4169)
           8	LOAD_FAST(arg=1, lineno=4169)
          10	LOAD_CONST(arg=1, lineno=4169)
          12	CALL_FUNCTION_KW(arg=2, lineno=4169)
          14	STORE_FAST(arg=2, lineno=4169)
          16	LOAD_FAST(arg=2, lineno=4170)
          18	LOAD_METHOD(arg=2, lineno=4170)
          20	CALL_METHOD(arg=0, lineno=4170)
          22	POP_TOP(arg=None, lineno=4170)
          24	LOAD_FAST(arg=2, lineno=4171)
          26	RETURN_VALUE(arg=None, lineno=4171)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4169)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4169)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=4169)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$2load_global.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=4169)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$4load_attr.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=4169)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$4load_attr.1', '$shape6.2']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=4169)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$4load_attr.1', '$shape6.2', '$dtype8.3']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=12, inst=CALL_FUNCTION_KW(arg=2, lineno=4169)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$4load_attr.1', '$shape6.2', '$dtype8.3', '$const10.4']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=14, inst=STORE_FAST(arg=2, lineno=4169)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$12call_function_kw.5']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=16, inst=LOAD_FAST(arg=2, lineno=4170)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=18, inst=LOAD_METHOD(arg=2, lineno=4170)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$arr16.6']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=20, inst=CALL_METHOD(arg=0, lineno=4170)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$18load_method.7']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=22, inst=POP_TOP(arg=None, lineno=4170)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$20call_method.8']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=24, inst=LOAD_FAST(arg=2, lineno=4171)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=26, inst=RETURN_VALUE(arg=None, lineno=4171)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$arr24.9']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG -------------------------Prune PHIs-------------------------
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG defmap: {}
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG keep phismap: {}
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG new_out: defaultdict(<class 'dict'>, {})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG ----------------------DONE Prune PHIs-----------------------
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'res': '$shape6.2'}), (8, {'res': '$dtype8.3'}), (10, {'res': '$const10.4'}), (12, {'func': '$4load_attr.1', 'args': ['$shape6.2', '$dtype8.3'], 'names': '$const10.4', 'res': '$12call_function_kw.5'}), (14, {'value': '$12call_function_kw.5'}), (16, {'res': '$arr16.6'}), (18, {'item': '$arr16.6', 'res': '$18load_method.7'}), (20, {'func': '$18load_method.7', 'args': [], 'res': '$20call_method.8'}), (24, {'res': '$arr24.9'}), (26, {'retval': '$arr24.9', 'castval': '$26return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:42 interpreter.py DEBUG label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_attr.1']
    arr = call $4load_attr.1(shape, func=$4load_attr.1, args=[Var(shape, arrayobj.py:4169)], kws=[('dtype', Var(dtype, arrayobj.py:4169))], vararg=None, varkwarg=None, target=None) ['$4load_attr.1', 'arr', 'dtype', 'shape']
    $18load_method.7 = getattr(value=arr, attr=_zero_fill) ['$18load_method.7', 'arr']
    $20call_method.8 = call $18load_method.7(func=$18load_method.7, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$18load_method.7', '$20call_method.8']
    $26return_value.10 = cast(value=arr)     ['$26return_value.10', 'arr']
    return $26return_value.10                ['$26return_value.10']

Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 0
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91E9B508>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: shape = arg(0, name=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: dtype = arg(1, name=dtype)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: arr = call $4load_attr.1(shape, func=$4load_attr.1, args=[Var(shape, arrayobj.py:4169)], kws=[('dtype', Var(dtype, arrayobj.py:4169))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $18load_method.7 = getattr(value=arr, attr=_zero_fill)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $20call_method.8 = call $18load_method.7(func=$18load_method.7, args=[], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $26return_value.10 = cast(value=arr)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: return $26return_value.10
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG defs defaultdict(<class 'list'>,
            {'$18load_method.7': [<numba.core.ir.Assign object at 0x0000015A91E96AC8>],
             '$20call_method.8': [<numba.core.ir.Assign object at 0x0000015A91E96C08>],
             '$26return_value.10': [<numba.core.ir.Assign object at 0x0000015A91E96E88>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000015A8A9DBF08>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x0000015A91E962C8>],
             'arr': [<numba.core.ir.Assign object at 0x0000015A91E967C8>],
             'dtype': [<numba.core.ir.Assign object at 0x0000015A8A9D7F08>],
             'shape': [<numba.core.ir.Assign object at 0x0000015A8A9D9308>]})
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG SSA violators set()
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4101)
           2	LOAD_GLOBAL(arg=0, lineno=4101)
           4	LOAD_FAST(arg=0, lineno=4101)
           6	LOAD_FAST(arg=1, lineno=4101)
           8	LOAD_DEREF(arg=0, lineno=4101)
          10	CALL_FUNCTION(arg=3, lineno=4101)
          12	RETURN_VALUE(arg=None, lineno=4101)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4101)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4101)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4101)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$2load_global.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4101)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$2load_global.0', '$shape4.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=8, inst=LOAD_DEREF(arg=0, lineno=4101)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=4101)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2', '$8load_deref.3']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4101)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$10call_function.4']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG -------------------------Prune PHIs-------------------------
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG defmap: {}
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG keep phismap: {}
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG new_out: defaultdict(<class 'dict'>, {})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG ----------------------DONE Prune PHIs-----------------------
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'res': '$dtype6.2'}), (8, {'res': '$8load_deref.3'}), (10, {'func': '$2load_global.0', 'args': ['$shape4.1', '$dtype6.2', '$8load_deref.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:42 interpreter.py DEBUG label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$2load_global.0']
    $8load_deref.3 = freevar(retty: array(float32, 1d, C)) ['$8load_deref.3']
    $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8load_deref.3', 'dtype', 'shape']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 0
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91E83E88>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: shape = arg(0, name=shape)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: dtype = arg(1, name=dtype)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $8load_deref.3 = freevar(retty: array(float32, 1d, C))
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $12return_value.5 = cast(value=$10call_function.4)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: return $12return_value.5
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x0000015A91A0C388>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x0000015A91A0C508>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000015A91A04D88>],
             '$8load_deref.3': [<numba.core.ir.Assign object at 0x0000015A91A0C248>],
             'dtype': [<numba.core.ir.Assign object at 0x0000015A91A04C48>],
             'shape': [<numba.core.ir.Assign object at 0x0000015A91A04B48>]})
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG SSA violators set()
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4160)
           2	LOAD_GLOBAL(arg=0, lineno=4160)
           4	LOAD_FAST(arg=0, lineno=4160)
           6	CALL_FUNCTION(arg=1, lineno=4160)
           8	POP_TOP(arg=None, lineno=4160)
          10	LOAD_CONST(arg=0, lineno=4160)
          12	RETURN_VALUE(arg=None, lineno=4160)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4160)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4160)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4160)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$2load_global.0']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=4160)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$2load_global.0', '$self4.1']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=8, inst=POP_TOP(arg=None, lineno=4160)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$6call_function.2']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=10, inst=LOAD_CONST(arg=0, lineno=4160)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4160)
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG stack ['$const10.3']
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG -------------------------Prune PHIs-------------------------
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG defmap: {}
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG keep phismap: {}
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG new_out: defaultdict(<class 'dict'>, {})
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG ----------------------DONE Prune PHIs-----------------------
Sat 01 Jul 2023 19:39:42 byteflow.py DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$self4.1'}), (6, {'func': '$2load_global.0', 'args': ['$self4.1'], 'res': '$6call_function.2'}), (10, {'res': '$const10.3'}), (12, {'retval': '$const10.3', 'castval': '$12return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:42 interpreter.py DEBUG label 0:
    self = arg(0, name=self)                 ['self']
    $2load_global.0 = global(_zero_fill_array_method: <intrinsic _zero_fill_array_method>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(self, func=$2load_global.0, args=[Var(self, arrayobj.py:4160)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'self']
    $const10.3 = const(NoneType, None)       ['$const10.3']
    $12return_value.4 = cast(value=$const10.3) ['$12return_value.4', '$const10.3']
    return $12return_value.4                 ['$12return_value.4']

Sat 01 Jul 2023 19:39:42 ssa.py DEBUG ==== SSA block analysis pass on 0
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A91EC12C8>
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: self = arg(0, name=self)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $2load_global.0 = global(_zero_fill_array_method: <intrinsic _zero_fill_array_method>)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $6call_function.2 = call $2load_global.0(self, func=$2load_global.0, args=[Var(self, arrayobj.py:4160)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $const10.3 = const(NoneType, None)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: $12return_value.4 = cast(value=$const10.3)
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG on stmt: return $12return_value.4
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG defs defaultdict(<class 'list'>,
            {'$12return_value.4': [<numba.core.ir.Assign object at 0x0000015A91EBC788>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000015A91EBC1C8>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x0000015A91EBC488>],
             '$const10.3': [<numba.core.ir.Assign object at 0x0000015A91EBC5C8>],
             'self': [<numba.core.ir.Assign object at 0x0000015A91EBC048>]})
Sat 01 Jul 2023 19:39:42 ssa.py DEBUG SSA violators set()
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=416)
           2	LOAD_DEREF(arg=0, lineno=416)
           4	STORE_FAST(arg=1, lineno=416)
           6	SETUP_LOOP(arg=30, lineno=417)
           8	LOAD_GLOBAL(arg=0, lineno=417)
          10	LOAD_METHOD(arg=1, lineno=417)
          12	LOAD_FAST(arg=0, lineno=417)
          14	CALL_METHOD(arg=1, lineno=417)
          16	GET_ITER(arg=None, lineno=417)
>         18	FOR_ITER(arg=16, lineno=417)
          20	STORE_FAST(arg=2, lineno=417)
          22	LOAD_FAST(arg=1, lineno=418)
          24	LOAD_FAST(arg=2, lineno=418)
          26	LOAD_METHOD(arg=2, lineno=418)
          28	CALL_METHOD(arg=0, lineno=418)
          30	INPLACE_ADD(arg=None, lineno=418)
          32	STORE_FAST(arg=1, lineno=418)
          34	JUMP_ABSOLUTE(arg=18, lineno=418)
>         36	POP_BLOCK(arg=None, lineno=418)
>         38	LOAD_FAST(arg=1, lineno=419)
          40	LOAD_FAST(arg=0, lineno=419)
          42	LOAD_ATTR(arg=3, lineno=419)
          44	BINARY_TRUE_DIVIDE(arg=None, lineno=419)
          46	RETURN_VALUE(arg=None, lineno=419)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=416)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=416)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=4, inst=STORE_FAST(arg=1, lineno=416)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$2load_deref.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=6, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=6 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=6, inst=SETUP_LOOP(arg=30, lineno=417)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=8, inst=LOAD_GLOBAL(arg=0, lineno=417)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=10, inst=LOAD_METHOD(arg=1, lineno=417)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$8load_global.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=417)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$10load_method.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=417)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$10load_method.1', '$arr12.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=16, inst=GET_ITER(arg=None, lineno=417)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$14call_method.3']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=18, stack=('$16get_iter.4',), blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=18 nstack_initial=1)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: ['$phi18.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=18, inst=FOR_ITER(arg=16, lineno=417)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi18.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=36, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=20, stack=('$phi18.0', '$18for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=20 nstack_initial=2)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=36, inst=POP_BLOCK(arg=None, lineno=418)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=38, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=20 nstack_initial=2), State(pc_initial=38 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: ['$phi20.0', '$phi20.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=20, inst=STORE_FAST(arg=2, lineno=417)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi20.0', '$phi20.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=22, inst=LOAD_FAST(arg=1, lineno=418)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi20.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=24, inst=LOAD_FAST(arg=2, lineno=418)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi20.0', '$c22.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=26, inst=LOAD_METHOD(arg=2, lineno=418)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi20.0', '$c22.2', '$v24.3']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=28, inst=CALL_METHOD(arg=0, lineno=418)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi20.0', '$c22.2', '$26load_method.4']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=30, inst=INPLACE_ADD(arg=None, lineno=418)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi20.0', '$c22.2', '$28call_method.5']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=32, inst=STORE_FAST(arg=1, lineno=418)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi20.0', '$30inplace_add.6']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=34, inst=JUMP_ABSOLUTE(arg=18, lineno=418)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi20.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=18, stack=('$phi20.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=38 nstack_initial=0), State(pc_initial=18 nstack_initial=1)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=38, inst=LOAD_FAST(arg=1, lineno=419)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=40, inst=LOAD_FAST(arg=0, lineno=419)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$c38.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=42, inst=LOAD_ATTR(arg=3, lineno=419)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$c38.0', '$arr40.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=44, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=419)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$c38.0', '$42load_attr.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=419)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$44binary_true_divide.3']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=18 nstack_initial=1)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG -------------------------Prune PHIs-------------------------
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=6 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=1): {'$phi18.0'},
             State(pc_initial=20 nstack_initial=2): {'$phi20.1'},
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=38 nstack_initial=0): set()})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG defmap: {'$phi18.0': State(pc_initial=6 nstack_initial=0),
 '$phi20.1': State(pc_initial=18 nstack_initial=1)}
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0)),
                          ('$phi20.0', State(pc_initial=20 nstack_initial=2))},
             '$phi20.0': {('$phi18.0', State(pc_initial=18 nstack_initial=1))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0)),
                          ('$phi18.0', State(pc_initial=18 nstack_initial=1))},
             '$phi20.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG keep phismap: {'$phi18.0': {('$16get_iter.4', State(pc_initial=6 nstack_initial=0))},
 '$phi20.1': {('$18for_iter.2', State(pc_initial=18 nstack_initial=1))}}
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=6 nstack_initial=0): {'$phi18.0': '$16get_iter.4'},
             State(pc_initial=18 nstack_initial=1): {'$phi20.1': '$18for_iter.2'}})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG ----------------------DONE Prune PHIs-----------------------
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'value': '$2load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={6: ()})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=6 nstack_initial=0):
AdaptBlockInfo(insts=((8, {'res': '$8load_global.0'}), (10, {'item': '$8load_global.0', 'res': '$10load_method.1'}), (12, {'res': '$arr12.2'}), (14, {'func': '$10load_method.1', 'args': ['$arr12.2'], 'res': '$14call_method.3'}), (16, {'value': '$14call_method.3', 'res': '$16get_iter.4'})), outgoing_phis={'$phi18.0': '$16get_iter.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: ('$16get_iter.4',)})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=18 nstack_initial=1):
AdaptBlockInfo(insts=((18, {'iterator': '$phi18.0', 'pair': '$18for_iter.1', 'indval': '$18for_iter.2', 'pred': '$18for_iter.3'}),), outgoing_phis={'$phi20.1': '$18for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: (), 20: ('$phi18.0', '$18for_iter.2')})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=20 nstack_initial=2):
AdaptBlockInfo(insts=((20, {'value': '$phi20.1'}), (22, {'res': '$c22.2'}), (24, {'res': '$v24.3'}), (26, {'item': '$v24.3', 'res': '$26load_method.4'}), (28, {'func': '$26load_method.4', 'args': [], 'res': '$28call_method.5'}), (30, {'lhs': '$c22.2', 'rhs': '$28call_method.5', 'res': '$30inplace_add.6'}), (32, {'value': '$30inplace_add.6'}), (34, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={18: ('$phi20.0',)})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={38: ()})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=38 nstack_initial=0):
AdaptBlockInfo(insts=((38, {'res': '$c38.0'}), (40, {'res': '$arr40.1'}), (42, {'item': '$arr40.1', 'res': '$42load_attr.2'}), (44, {'lhs': '$c38.0', 'rhs': '$42load_attr.2', 'res': '$44binary_true_divide.3'}), (46, {'retval': '$44binary_true_divide.3', 'castval': '$46return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:43 interpreter.py DEBUG label 0:
    arr = arg(0, name=arr)                   ['arr']
    c = freevar(zero: 0.0)                   ['c']
    jump 6                                   []
label 6:
    $8load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>) ['$8load_global.0']
    $10load_method.1 = getattr(value=$8load_global.0, attr=nditer) ['$10load_method.1', '$8load_global.0']
    $14call_method.3 = call $10load_method.1(arr, func=$10load_method.1, args=[Var(arr, arraymath.py:416)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_method.1', '$14call_method.3', 'arr']
    $16get_iter.4 = getiter(value=$14call_method.3) ['$14call_method.3', '$16get_iter.4']
    $phi18.0 = $16get_iter.4                 ['$16get_iter.4', '$phi18.0']
    jump 18                                  []
label 18:
    $18for_iter.1 = iternext(value=$phi18.0) ['$18for_iter.1', '$phi18.0']
    $18for_iter.2 = pair_first(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.2']
    $18for_iter.3 = pair_second(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.3']
    $phi20.1 = $18for_iter.2                 ['$18for_iter.2', '$phi20.1']
    branch $18for_iter.3, 20, 36             ['$18for_iter.3']
label 20:
    v = $phi20.1                             ['$phi20.1', 'v']
    $26load_method.4 = getattr(value=v, attr=item) ['$26load_method.4', 'v']
    $28call_method.5 = call $26load_method.4(func=$26load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$26load_method.4', '$28call_method.5']
    $30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined) ['$28call_method.5', '$30inplace_add.6', 'c']
    c = $30inplace_add.6                     ['$30inplace_add.6', 'c']
    jump 18                                  []
label 36:
    jump 38                                  []
label 38:
    $42load_attr.2 = getattr(value=arr, attr=size) ['$42load_attr.2', 'arr']
    $44binary_true_divide.3 = c / $42load_attr.2 ['$42load_attr.2', '$44binary_true_divide.3', 'c']
    $46return_value.4 = cast(value=$44binary_true_divide.3) ['$44binary_true_divide.3', '$46return_value.4']
    return $46return_value.4                 ['$46return_value.4']

Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 0
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AA679F508>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: arr = arg(0, name=arr)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: c = freevar(zero: 0.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AA679F508>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $8load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $10load_method.1 = getattr(value=$8load_global.0, attr=nditer)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $14call_method.3 = call $10load_method.1(arr, func=$10load_method.1, args=[Var(arr, arraymath.py:416)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $16get_iter.4 = getiter(value=$14call_method.3)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi18.0 = $16get_iter.4
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 18
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 18
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AA679F508>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $18for_iter.1 = iternext(value=$phi18.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi20.1 = $18for_iter.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $18for_iter.3, 20, 36
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AA679F508>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: v = $phi20.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $26load_method.4 = getattr(value=v, attr=item)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $28call_method.5 = call $26load_method.4(func=$26load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: c = $30inplace_add.6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 18
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 36
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AA679F508>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 38
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 38
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AA679F508>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $42load_attr.2 = getattr(value=arr, attr=size)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $44binary_true_divide.3 = c / $42load_attr.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $46return_value.4 = cast(value=$44binary_true_divide.3)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return $46return_value.4
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG defs defaultdict(<class 'list'>,
            {'$10load_method.1': [<numba.core.ir.Assign object at 0x0000015A91E9B6C8>],
             '$14call_method.3': [<numba.core.ir.Assign object at 0x0000015A91E8DFC8>],
             '$16get_iter.4': [<numba.core.ir.Assign object at 0x0000015A91E8D0C8>],
             '$18for_iter.1': [<numba.core.ir.Assign object at 0x0000015A91A04508>],
             '$18for_iter.2': [<numba.core.ir.Assign object at 0x0000015A91A043C8>],
             '$18for_iter.3': [<numba.core.ir.Assign object at 0x0000015A91A04588>],
             '$26load_method.4': [<numba.core.ir.Assign object at 0x0000015A91A2A788>],
             '$28call_method.5': [<numba.core.ir.Assign object at 0x0000015A91A2A248>],
             '$30inplace_add.6': [<numba.core.ir.Assign object at 0x0000015A91A2ACC8>],
             '$42load_attr.2': [<numba.core.ir.Assign object at 0x0000015A91A2A408>],
             '$44binary_true_divide.3': [<numba.core.ir.Assign object at 0x0000015A91A2A588>],
             '$46return_value.4': [<numba.core.ir.Assign object at 0x0000015A91A2C9C8>],
             '$8load_global.0': [<numba.core.ir.Assign object at 0x0000015A91E9B948>],
             '$phi18.0': [<numba.core.ir.Assign object at 0x0000015A87E53E88>],
             '$phi20.1': [<numba.core.ir.Assign object at 0x0000015A91A04288>],
             'arr': [<numba.core.ir.Assign object at 0x0000015A91E9BE88>],
             'c': [<numba.core.ir.Assign object at 0x0000015A91E9BB88>,
                   <numba.core.ir.Assign object at 0x0000015A91A2A0C8>],
             'v': [<numba.core.ir.Assign object at 0x0000015A91A2A048>]})
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG SSA violators {'c'}
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Fix SSA violator on var c
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AA679F708>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: arr = arg(0, name=arr)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: c = freevar(zero: 0.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG first assign: c
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG replaced with: c = freevar(zero: 0.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AA679F708>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $8load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $10load_method.1 = getattr(value=$8load_global.0, attr=nditer)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $14call_method.3 = call $10load_method.1(arr, func=$10load_method.1, args=[Var(arr, arraymath.py:416)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $16get_iter.4 = getiter(value=$14call_method.3)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi18.0 = $16get_iter.4
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 18
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 18
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AA679F708>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $18for_iter.1 = iternext(value=$phi18.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi20.1 = $18for_iter.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $18for_iter.3, 20, 36
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AA679F708>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: v = $phi20.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $26load_method.4 = getattr(value=v, attr=item)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $28call_method.5 = call $26load_method.4(func=$26load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: c = $30inplace_add.6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG replaced with: c.1 = $30inplace_add.6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 18
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 36
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AA679F708>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 38
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 38
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AA679F708>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $42load_attr.2 = getattr(value=arr, attr=size)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $44binary_true_divide.3 = c / $42load_attr.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $46return_value.4 = cast(value=$44binary_true_divide.3)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return $46return_value.4
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000015AA679F648>],
             20: [<numba.core.ir.Assign object at 0x0000015AA679FBC8>]})
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AA679F708>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: arr = arg(0, name=arr)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: c = freevar(zero: 0.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AA679F708>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $8load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $10load_method.1 = getattr(value=$8load_global.0, attr=nditer)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $14call_method.3 = call $10load_method.1(arr, func=$10load_method.1, args=[Var(arr, arraymath.py:416)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $16get_iter.4 = getiter(value=$14call_method.3)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi18.0 = $16get_iter.4
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 18
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 18
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AA679F708>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $18for_iter.1 = iternext(value=$phi18.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi20.1 = $18for_iter.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $18for_iter.3, 20, 36
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AA679F708>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: v = $phi20.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $26load_method.4 = getattr(value=v, attr=item)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $28call_method.5 = call $26load_method.4(func=$26load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def var='c' stmt=$30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 18 from label 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 18
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 18
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG insert phi node c.2 = phi(incoming_values=[], incoming_blocks=[]) at 18
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG incoming_def c.1 = $30inplace_add.6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 0 from label 6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 0
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG incoming_def c = freevar(zero: 0.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG replaced with: $30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c.2, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: c.1 = $30inplace_add.6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 18
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 36
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AA679F708>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 38
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 38
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AA679F708>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $42load_attr.2 = getattr(value=arr, attr=size)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $44binary_true_divide.3 = c / $42load_attr.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def var='c' stmt=$44binary_true_divide.3 = c / $42load_attr.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 38
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 36 from label 38
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 36
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 36
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 18 from label 36
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 18
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG replaced with: $44binary_true_divide.3 = c.2 / $42load_attr.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $46return_value.4 = cast(value=$44binary_true_divide.3)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return $46return_value.4
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=3256)
           2	LOAD_GLOBAL(arg=0, lineno=3256)
           4	LOAD_FAST(arg=0, lineno=3256)
           6	CALL_FUNCTION(arg=1, lineno=3256)
           8	STORE_FAST(arg=2, lineno=3256)
          10	SETUP_LOOP(arg=52, lineno=3257)
          12	LOAD_GLOBAL(arg=1, lineno=3257)
          14	LOAD_FAST(arg=2, lineno=3257)
          16	CALL_FUNCTION(arg=1, lineno=3257)
          18	GET_ITER(arg=None, lineno=3257)
>         20	FOR_ITER(arg=40, lineno=3257)
          22	STORE_FAST(arg=3, lineno=3257)
          24	LOAD_FAST(arg=0, lineno=3258)
          26	LOAD_FAST(arg=3, lineno=3258)
          28	BINARY_SUBSCR(arg=None, lineno=3258)
          30	LOAD_FAST(arg=1, lineno=3258)
          32	LOAD_GLOBAL(arg=0, lineno=3258)
          34	LOAD_FAST(arg=1, lineno=3258)
          36	CALL_FUNCTION(arg=1, lineno=3258)
          38	LOAD_FAST(arg=2, lineno=3258)
          40	BINARY_SUBTRACT(arg=None, lineno=3258)
          42	LOAD_FAST(arg=3, lineno=3258)
          44	BINARY_ADD(arg=None, lineno=3258)
          46	BINARY_SUBSCR(arg=None, lineno=3258)
          48	COMPARE_OP(arg=3, lineno=3258)
          50	POP_JUMP_IF_FALSE(arg=20, lineno=3258)
          52	LOAD_GLOBAL(arg=2, lineno=3259)
          54	LOAD_CONST(arg=1, lineno=3259)
          56	CALL_FUNCTION(arg=1, lineno=3259)
          58	RAISE_VARARGS(arg=1, lineno=3259)
          60	JUMP_ABSOLUTE(arg=20, lineno=3259)
>         62	POP_BLOCK(arg=None, lineno=3259)
>         64	LOAD_CONST(arg=0, lineno=3259)
          66	RETURN_VALUE(arg=None, lineno=3259)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=3256)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3256)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3256)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$2load_global.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=3256)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$2load_global.0', '$shape4.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=8, inst=STORE_FAST(arg=2, lineno=3256)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$6call_function.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=10 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=10, inst=SETUP_LOOP(arg=52, lineno=3257)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=12, inst=LOAD_GLOBAL(arg=1, lineno=3257)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=14, inst=LOAD_FAST(arg=2, lineno=3257)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$12load_global.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=3257)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$12load_global.0', '$n14.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=18, inst=GET_ITER(arg=None, lineno=3257)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$16call_function.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=20, stack=('$18get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=20 nstack_initial=1)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: ['$phi20.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=20, inst=FOR_ITER(arg=40, lineno=3257)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi20.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=62, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=62, inst=POP_BLOCK(arg=None, lineno=3259)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=64, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=22 nstack_initial=2), State(pc_initial=64 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: ['$phi22.0', '$phi22.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=22, inst=STORE_FAST(arg=3, lineno=3257)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi22.0', '$phi22.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=3258)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi22.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=26, inst=LOAD_FAST(arg=3, lineno=3258)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi22.0', '$shape24.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=28, inst=BINARY_SUBSCR(arg=None, lineno=3258)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi22.0', '$shape24.2', '$i26.3']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=3258)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi22.0', '$28binary_subscr.4']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=32, inst=LOAD_GLOBAL(arg=0, lineno=3258)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi22.0', '$28binary_subscr.4', '$main_shape30.5']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=3258)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi22.0', '$28binary_subscr.4', '$main_shape30.5', '$32load_global.6']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=36, inst=CALL_FUNCTION(arg=1, lineno=3258)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi22.0', '$28binary_subscr.4', '$main_shape30.5', '$32load_global.6', '$main_shape34.7']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=3258)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi22.0', '$28binary_subscr.4', '$main_shape30.5', '$36call_function.8']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=40, inst=BINARY_SUBTRACT(arg=None, lineno=3258)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi22.0', '$28binary_subscr.4', '$main_shape30.5', '$36call_function.8', '$n38.9']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=42, inst=LOAD_FAST(arg=3, lineno=3258)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi22.0', '$28binary_subscr.4', '$main_shape30.5', '$40binary_subtract.10']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=44, inst=BINARY_ADD(arg=None, lineno=3258)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi22.0', '$28binary_subscr.4', '$main_shape30.5', '$40binary_subtract.10', '$i42.11']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=3258)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi22.0', '$28binary_subscr.4', '$main_shape30.5', '$44binary_add.12']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=48, inst=COMPARE_OP(arg=3, lineno=3258)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi22.0', '$28binary_subscr.4', '$46binary_subscr.13']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=20, lineno=3258)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi22.0', '$48compare_op.14']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=52, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=20, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=64 nstack_initial=0), State(pc_initial=52 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=64, inst=LOAD_CONST(arg=0, lineno=3259)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=3259)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$const64.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=52 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: ['$phi52.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=52, inst=LOAD_GLOBAL(arg=2, lineno=3259)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi52.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=54, inst=LOAD_CONST(arg=1, lineno=3259)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi52.0', '$52load_global.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=56, inst=CALL_FUNCTION(arg=1, lineno=3259)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi52.0', '$52load_global.1', '$const54.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=58, inst=RAISE_VARARGS(arg=1, lineno=3259)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi52.0', '$56call_function.3']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=20 nstack_initial=1)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG -------------------------Prune PHIs-------------------------
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=52 nstack_initial=1): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=0): set()})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG defmap: {'$phi20.0': State(pc_initial=10 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi52.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))}})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi52.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi52.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi52.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG keep phismap: {'$phi20.0': {('$18get_iter.3', State(pc_initial=10 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi20.0': '$18get_iter.3'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG ----------------------DONE Prune PHIs-----------------------
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'func': '$2load_global.0', 'args': ['$shape4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: ()})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$n14.1'}), (16, {'func': '$12load_global.0', 'args': ['$n14.1'], 'res': '$16call_function.2'}), (18, {'value': '$16call_function.2', 'res': '$18get_iter.3'})), outgoing_phis={'$phi20.0': '$18get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.3',)})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: (), 22: ('$phi20.0', '$20for_iter.2')})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'value': '$phi22.1'}), (24, {'res': '$shape24.2'}), (26, {'res': '$i26.3'}), (28, {'index': '$i26.3', 'target': '$shape24.2', 'res': '$28binary_subscr.4'}), (30, {'res': '$main_shape30.5'}), (32, {'res': '$32load_global.6'}), (34, {'res': '$main_shape34.7'}), (36, {'func': '$32load_global.6', 'args': ['$main_shape34.7'], 'res': '$36call_function.8'}), (38, {'res': '$n38.9'}), (40, {'lhs': '$36call_function.8', 'rhs': '$n38.9', 'res': '$40binary_subtract.10'}), (42, {'res': '$i42.11'}), (44, {'lhs': '$40binary_subtract.10', 'rhs': '$i42.11', 'res': '$44binary_add.12'}), (46, {'index': '$44binary_add.12', 'target': '$main_shape30.5', 'res': '$46binary_subscr.13'}), (48, {'lhs': '$28binary_subscr.4', 'rhs': '$46binary_subscr.13', 'res': '$48compare_op.14'}), (50, {'pred': '$48compare_op.14'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={52: ('$phi22.0',), 20: ('$phi22.0',)})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=52 nstack_initial=1):
AdaptBlockInfo(insts=((52, {'res': '$52load_global.1'}), (54, {'res': '$const54.2'}), (56, {'func': '$52load_global.1', 'args': ['$const54.2'], 'res': '$56call_function.3'}), (58, {'exc': '$56call_function.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 64, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={64: ()})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=64 nstack_initial=0):
AdaptBlockInfo(insts=((64, {'res': '$const64.0'}), (66, {'retval': '$const64.0', 'castval': '$66return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:43 interpreter.py DEBUG label 0:
    shape = arg(0, name=shape)               ['shape']
    main_shape = arg(1, name=main_shape)     ['main_shape']
    $2load_global.0 = global(len: <built-in function len>) ['$2load_global.0']
    n = call $2load_global.0(shape, func=$2load_global.0, args=[Var(shape, arrayobj.py:3256)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', 'n', 'shape']
    jump 10                                  []
label 10:
    $12load_global.0 = global(range: <class 'range'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(n, func=$12load_global.0, args=[Var(n, arrayobj.py:3256)], kws=(), vararg=None, varkwarg=None, target=None) ['$12load_global.0', '$16call_function.2', 'n']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 62             ['$20for_iter.3']
label 22:
    i = $phi22.1                             ['$phi22.1', 'i']
    $28binary_subscr.4 = getitem(value=shape, index=i, fn=<built-in function getitem>) ['$28binary_subscr.4', 'i', 'shape']
    $32load_global.6 = global(len: <built-in function len>) ['$32load_global.6']
    $36call_function.8 = call $32load_global.6(main_shape, func=$32load_global.6, args=[Var(main_shape, arrayobj.py:3256)], kws=(), vararg=None, varkwarg=None, target=None) ['$32load_global.6', '$36call_function.8', 'main_shape']
    $40binary_subtract.10 = $36call_function.8 - n ['$36call_function.8', '$40binary_subtract.10', 'n']
    $44binary_add.12 = $40binary_subtract.10 + i ['$40binary_subtract.10', '$44binary_add.12', 'i']
    $46binary_subscr.13 = getitem(value=main_shape, index=$44binary_add.12, fn=<built-in function getitem>) ['$44binary_add.12', '$46binary_subscr.13', 'main_shape']
    $48compare_op.14 = $28binary_subscr.4 != $46binary_subscr.13 ['$28binary_subscr.4', '$46binary_subscr.13', '$48compare_op.14']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48compare_op.14, func=bool50, args=(Var($48compare_op.14, arrayobj.py:3258),), kws=(), vararg=None, varkwarg=None, target=None) ['$48compare_op.14', '$50pred', 'bool50']
    branch $50pred, 52, 20                   ['$50pred']
label 52:
    $52load_global.1 = global(ValueError: <class 'ValueError'>) ['$52load_global.1']
    $const54.2 = const(str, nditer(): operands could not be broadcast together) ['$const54.2']
    $56call_function.3 = call $52load_global.1($const54.2, func=$52load_global.1, args=[Var($const54.2, arrayobj.py:3259)], kws=(), vararg=None, varkwarg=None, target=None) ['$52load_global.1', '$56call_function.3', '$const54.2']
    raise $56call_function.3                 ['$56call_function.3']
label 62:
    jump 64                                  []
label 64:
    $const64.0 = const(NoneType, None)       ['$const64.0']
    $66return_value.1 = cast(value=$const64.0) ['$66return_value.1', '$const64.0']
    return $66return_value.1                 ['$66return_value.1']

Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 0
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AA678E248>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: shape = arg(0, name=shape)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: main_shape = arg(1, name=main_shape)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $2load_global.0 = global(len: <built-in function len>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: n = const(int, 2)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 10
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 10
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AA678E248>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $12load_global.0 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $16call_function.2 = call $12load_global.0(n, func=$12load_global.0, args=[Var(n, arrayobj.py:3256)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi20.0 = $18get_iter.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AA678E248>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $20for_iter.1 = iternext(value=$phi20.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi22.1 = $20for_iter.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $20for_iter.3, 22, 62
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 22
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AA678E248>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: i = $phi22.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $28binary_subscr.4 = getitem(value=shape, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $32load_global.6 = global(len: <built-in function len>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $36call_function.8 = const(int, 2)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $40binary_subtract.10 = $36call_function.8 - n
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $44binary_add.12 = $40binary_subtract.10 + i
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $46binary_subscr.13 = getitem(value=main_shape, index=$44binary_add.12, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $48compare_op.14 = $28binary_subscr.4 != $46binary_subscr.13
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $50pred = call bool50($48compare_op.14, func=bool50, args=(Var($48compare_op.14, arrayobj.py:3258),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $50pred, 52, 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 52
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AA678E248>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $52load_global.1 = global(ValueError: <class 'ValueError'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const54.2 = const(str, nditer(): operands could not be broadcast together)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $56call_function.3 = call $52load_global.1($const54.2, func=$52load_global.1, args=[Var($const54.2, arrayobj.py:3259)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: <static> raise <class 'ValueError'>('nditer(): operands could not be broadcast together')
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 62
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AA678E248>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 64
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 64
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AA678E248>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const64.0 = const(NoneType, None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $66return_value.1 = cast(value=$const64.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return $66return_value.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG defs defaultdict(<class 'list'>,
            {'$12load_global.0': [<numba.core.ir.Assign object at 0x0000015A91A0FBC8>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x0000015A91E89D08>],
             '$18get_iter.3': [<numba.core.ir.Assign object at 0x0000015A91E89C08>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x0000015A919FD0C8>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x0000015A919FD1C8>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x0000015A919FD2C8>],
             '$28binary_subscr.4': [<numba.core.ir.Assign object at 0x0000015A919FD948>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000015A91A0F648>],
             '$32load_global.6': [<numba.core.ir.Assign object at 0x0000015A919FDC08>],
             '$36call_function.8': [<numba.core.ir.Assign object at 0x0000015A919FDE48>],
             '$40binary_subtract.10': [<numba.core.ir.Assign object at 0x0000015A91A06EC8>],
             '$44binary_add.12': [<numba.core.ir.Assign object at 0x0000015A91A06F48>],
             '$46binary_subscr.13': [<numba.core.ir.Assign object at 0x0000015A91A06408>],
             '$48compare_op.14': [<numba.core.ir.Assign object at 0x0000015A91A06188>],
             '$50pred': [<numba.core.ir.Assign object at 0x0000015A91A06488>],
             '$52load_global.1': [<numba.core.ir.Assign object at 0x0000015A91A06208>],
             '$56call_function.3': [<numba.core.ir.Assign object at 0x0000015A91A06908>],
             '$66return_value.1': [<numba.core.ir.Assign object at 0x0000015A91A11048>],
             '$const54.2': [<numba.core.ir.Assign object at 0x0000015A91A06A48>],
             '$const64.0': [<numba.core.ir.Assign object at 0x0000015A91A06688>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x0000015A91A0FC88>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x0000015A919FD388>],
             'bool50': [<numba.core.ir.Assign object at 0x0000015A91A06248>],
             'i': [<numba.core.ir.Assign object at 0x0000015A919FD588>],
             'main_shape': [<numba.core.ir.Assign object at 0x0000015A91A0F5C8>],
             'n': [<numba.core.ir.Assign object at 0x0000015A91A0F988>],
             'shape': [<numba.core.ir.Assign object at 0x0000015A91A0F588>]})
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG SSA violators set()
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=201)
           2	LOAD_FAST(arg=0, lineno=201)
           4	LOAD_CONST(arg=1, lineno=201)
           6	COMPARE_OP(arg=4, lineno=201)
           8	RETURN_VALUE(arg=None, lineno=201)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=201)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=201)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=201)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$ith_distances_12.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=201)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$ith_distances_12.0', '$const4.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=201)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$6compare_op.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG -------------------------Prune PHIs-------------------------
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG defmap: {}
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG keep phismap: {}
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG new_out: defaultdict(<class 'dict'>, {})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG ----------------------DONE Prune PHIs-----------------------
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$ith_distances_12.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$ith_distances_12.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'retval': '$6compare_op.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:43 interpreter.py DEBUG label 0:
    ith_distances_1 = arg(0, name=ith_distances_1) ['ith_distances_1']
    $const4.1 = const(float, 0.0)            ['$const4.1']
    $6compare_op.2 = ith_distances_1 > $const4.1 ['$6compare_op.2', '$const4.1', 'ith_distances_1']
    $8return_value.3 = cast(value=$6compare_op.2) ['$6compare_op.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 0
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AAC0B4B48>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: ith_distances_1 = arg(0, name=ith_distances_1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const4.1 = const(float, 0.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $6compare_op.2 = ith_distances_1 > $const4.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $8return_value.3 = cast(value=$6compare_op.2)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return $8return_value.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG defs defaultdict(<class 'list'>,
            {'$6compare_op.2': [<numba.core.ir.Assign object at 0x0000015AAC0B1E08>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x0000015AAC0B1F88>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000015AAC0B1C88>],
             'ith_distances_1': [<numba.core.ir.Assign object at 0x0000015AAC0B1888>]})
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG SSA violators set()
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=604)
           2	LOAD_FAST(arg=0, lineno=604)
           4	LOAD_ATTR(arg=0, lineno=604)
           6	LOAD_CONST(arg=1, lineno=604)
           8	COMPARE_OP(arg=2, lineno=604)
          10	POP_JUMP_IF_FALSE(arg=20, lineno=604)
          12	LOAD_GLOBAL(arg=1, lineno=605)
          14	LOAD_DEREF(arg=0, lineno=605)
          16	CALL_FUNCTION(arg=1, lineno=605)
          18	RAISE_VARARGS(arg=1, lineno=605)
>         20	LOAD_GLOBAL(arg=2, lineno=607)
          22	LOAD_METHOD(arg=3, lineno=607)
          24	LOAD_FAST(arg=0, lineno=607)
          26	CALL_METHOD(arg=1, lineno=607)
          28	STORE_FAST(arg=1, lineno=607)
          30	LOAD_GLOBAL(arg=4, lineno=608)
          32	LOAD_FAST(arg=1, lineno=608)
          34	CALL_FUNCTION(arg=1, lineno=608)
          36	LOAD_METHOD(arg=5, lineno=608)
          38	LOAD_CONST(arg=1, lineno=608)
          40	CALL_METHOD(arg=1, lineno=608)
          42	STORE_FAST(arg=2, lineno=608)
          44	LOAD_GLOBAL(arg=2, lineno=609)
          46	LOAD_METHOD(arg=6, lineno=609)
          48	LOAD_FAST(arg=2, lineno=609)
          50	CALL_METHOD(arg=1, lineno=609)
          52	POP_JUMP_IF_FALSE(arg=58, lineno=609)
          54	LOAD_FAST(arg=2, lineno=610)
          56	RETURN_VALUE(arg=None, lineno=610)
>         58	SETUP_LOOP(arg=46, lineno=612)
          60	LOAD_FAST(arg=1, lineno=612)
          62	GET_ITER(arg=None, lineno=612)
>         64	FOR_ITER(arg=38, lineno=612)
          66	STORE_FAST(arg=3, lineno=612)
          68	LOAD_FAST(arg=3, lineno=613)
          70	LOAD_METHOD(arg=7, lineno=613)
          72	CALL_METHOD(arg=0, lineno=613)
          74	STORE_FAST(arg=4, lineno=613)
          76	LOAD_GLOBAL(arg=2, lineno=614)
          78	LOAD_METHOD(arg=6, lineno=614)
          80	LOAD_FAST(arg=4, lineno=614)
          82	CALL_METHOD(arg=1, lineno=614)
          84	POP_JUMP_IF_FALSE(arg=90, lineno=614)
          86	LOAD_FAST(arg=4, lineno=615)
          88	RETURN_VALUE(arg=None, lineno=615)
>         90	LOAD_FAST(arg=4, lineno=616)
          92	LOAD_FAST(arg=2, lineno=616)
          94	COMPARE_OP(arg=4, lineno=616)
          96	POP_JUMP_IF_FALSE(arg=64, lineno=616)
          98	LOAD_FAST(arg=4, lineno=617)
         100	STORE_FAST(arg=2, lineno=617)
         102	JUMP_ABSOLUTE(arg=64, lineno=617)
>        104	POP_BLOCK(arg=None, lineno=617)
>        106	LOAD_FAST(arg=2, lineno=618)
         108	RETURN_VALUE(arg=None, lineno=618)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=604)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=604)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=604)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$arry2.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=604)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$4load_attr.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=8, inst=COMPARE_OP(arg=2, lineno=604)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$4load_attr.1', '$const6.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=10, inst=POP_JUMP_IF_FALSE(arg=20, lineno=604)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$8compare_op.3']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=12, stack=(), blockstack=(), npush=0), Edge(pc=20, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=12 nstack_initial=0), State(pc_initial=20 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=12, inst=LOAD_GLOBAL(arg=1, lineno=605)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=14, inst=LOAD_DEREF(arg=0, lineno=605)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$12load_global.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=605)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$12load_global.0', '$14load_deref.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=18, inst=RAISE_VARARGS(arg=1, lineno=605)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$16call_function.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=20 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=20, inst=LOAD_GLOBAL(arg=2, lineno=607)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=22, inst=LOAD_METHOD(arg=3, lineno=607)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$20load_global.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=607)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$22load_method.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=26, inst=CALL_METHOD(arg=1, lineno=607)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$22load_method.1', '$arry24.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=28, inst=STORE_FAST(arg=1, lineno=607)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$26call_method.3']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=30, inst=LOAD_GLOBAL(arg=4, lineno=608)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=608)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$30load_global.4']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=34, inst=CALL_FUNCTION(arg=1, lineno=608)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$30load_global.4', '$it32.5']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=36, inst=LOAD_METHOD(arg=5, lineno=608)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$34call_function.6']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=38, inst=LOAD_CONST(arg=1, lineno=608)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$36load_method.7']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=40, inst=CALL_METHOD(arg=1, lineno=608)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$36load_method.7', '$const38.8']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=42, inst=STORE_FAST(arg=2, lineno=608)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$40call_method.9']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=44, inst=LOAD_GLOBAL(arg=2, lineno=609)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=46, inst=LOAD_METHOD(arg=6, lineno=609)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$44load_global.10']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=48, inst=LOAD_FAST(arg=2, lineno=609)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$46load_method.11']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=50, inst=CALL_METHOD(arg=1, lineno=609)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$46load_method.11', '$max_value48.12']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=52, inst=POP_JUMP_IF_FALSE(arg=58, lineno=609)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$50call_method.13']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=58, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=58 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=54, inst=LOAD_FAST(arg=2, lineno=610)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=610)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$max_value54.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=58 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=58, inst=SETUP_LOOP(arg=46, lineno=612)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=60, inst=LOAD_FAST(arg=1, lineno=612)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=62, inst=GET_ITER(arg=None, lineno=612)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$it60.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=64, stack=('$62get_iter.1',), blockstack=({'kind': BlockKind(LOOP), 'end': 106, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=64 nstack_initial=1)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: ['$phi64.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=64, inst=FOR_ITER(arg=38, lineno=612)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi64.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 106, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=66, stack=('$phi64.0', '$64for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 106, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=66 nstack_initial=2)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=104, inst=POP_BLOCK(arg=None, lineno=617)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=66 nstack_initial=2), State(pc_initial=106 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: ['$phi66.0', '$phi66.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=66, inst=STORE_FAST(arg=3, lineno=612)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi66.0', '$phi66.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=68, inst=LOAD_FAST(arg=3, lineno=613)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi66.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=70, inst=LOAD_METHOD(arg=7, lineno=613)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi66.0', '$view68.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=72, inst=CALL_METHOD(arg=0, lineno=613)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi66.0', '$70load_method.3']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=74, inst=STORE_FAST(arg=4, lineno=613)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi66.0', '$72call_method.4']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=76, inst=LOAD_GLOBAL(arg=2, lineno=614)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi66.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=78, inst=LOAD_METHOD(arg=6, lineno=614)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi66.0', '$76load_global.5']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=80, inst=LOAD_FAST(arg=4, lineno=614)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi66.0', '$78load_method.6']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=82, inst=CALL_METHOD(arg=1, lineno=614)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi66.0', '$78load_method.6', '$v80.7']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=84, inst=POP_JUMP_IF_FALSE(arg=90, lineno=614)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi66.0', '$82call_method.8']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=86, stack=('$phi66.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 106, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=90, stack=('$phi66.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 106, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=86 nstack_initial=1), State(pc_initial=90 nstack_initial=1)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=106, inst=LOAD_FAST(arg=2, lineno=618)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=108, inst=RETURN_VALUE(arg=None, lineno=618)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$max_value106.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=86 nstack_initial=1), State(pc_initial=90 nstack_initial=1)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: ['$phi86.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=86, inst=LOAD_FAST(arg=4, lineno=615)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi86.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=88, inst=RETURN_VALUE(arg=None, lineno=615)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi86.0', '$v86.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=90 nstack_initial=1)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: ['$phi90.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=90, inst=LOAD_FAST(arg=4, lineno=616)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi90.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=92, inst=LOAD_FAST(arg=2, lineno=616)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi90.0', '$v90.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=94, inst=COMPARE_OP(arg=4, lineno=616)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi90.0', '$v90.1', '$max_value92.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=96, inst=POP_JUMP_IF_FALSE(arg=64, lineno=616)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi90.0', '$94compare_op.3']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=98, stack=('$phi90.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 106, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=64, stack=('$phi90.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 106, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=98 nstack_initial=1), State(pc_initial=64 nstack_initial=1)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: ['$phi98.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=98, inst=LOAD_FAST(arg=4, lineno=617)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi98.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=100, inst=STORE_FAST(arg=2, lineno=617)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi98.0', '$v98.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=102, inst=JUMP_ABSOLUTE(arg=64, lineno=617)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi98.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=64, stack=('$phi98.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 106, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=64 nstack_initial=1), State(pc_initial=64 nstack_initial=1)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=64 nstack_initial=1)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG -------------------------Prune PHIs-------------------------
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=12 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=54 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=1): {'$phi64.0'},
             State(pc_initial=66 nstack_initial=2): {'$phi66.1'},
             State(pc_initial=86 nstack_initial=1): set(),
             State(pc_initial=90 nstack_initial=1): set(),
             State(pc_initial=98 nstack_initial=1): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set()})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG defmap: {'$phi64.0': State(pc_initial=58 nstack_initial=0),
 '$phi66.1': State(pc_initial=64 nstack_initial=1)}
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi64.0': {('$62get_iter.1',
                           State(pc_initial=58 nstack_initial=0)),
                          ('$phi90.0', State(pc_initial=90 nstack_initial=1)),
                          ('$phi98.0', State(pc_initial=98 nstack_initial=1))},
             '$phi66.0': {('$phi64.0', State(pc_initial=64 nstack_initial=1))},
             '$phi66.1': {('$64for_iter.2',
                           State(pc_initial=64 nstack_initial=1))},
             '$phi86.0': {('$phi66.0', State(pc_initial=66 nstack_initial=2))},
             '$phi90.0': {('$phi66.0', State(pc_initial=66 nstack_initial=2))},
             '$phi98.0': {('$phi90.0', State(pc_initial=90 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi64.0': {('$62get_iter.1',
                           State(pc_initial=58 nstack_initial=0)),
                          ('$phi66.0', State(pc_initial=66 nstack_initial=2))},
             '$phi66.0': {('$62get_iter.1',
                           State(pc_initial=58 nstack_initial=0)),
                          ('$phi66.0', State(pc_initial=66 nstack_initial=2))},
             '$phi66.1': {('$64for_iter.2',
                           State(pc_initial=64 nstack_initial=1))},
             '$phi86.0': {('$62get_iter.1',
                           State(pc_initial=58 nstack_initial=0))},
             '$phi90.0': {('$62get_iter.1',
                           State(pc_initial=58 nstack_initial=0))},
             '$phi98.0': {('$62get_iter.1',
                           State(pc_initial=58 nstack_initial=0))}})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi64.0': {('$62get_iter.1',
                           State(pc_initial=58 nstack_initial=0))},
             '$phi66.0': {('$62get_iter.1',
                           State(pc_initial=58 nstack_initial=0))},
             '$phi66.1': {('$64for_iter.2',
                           State(pc_initial=64 nstack_initial=1))},
             '$phi86.0': {('$62get_iter.1',
                           State(pc_initial=58 nstack_initial=0))},
             '$phi90.0': {('$62get_iter.1',
                           State(pc_initial=58 nstack_initial=0))},
             '$phi98.0': {('$62get_iter.1',
                           State(pc_initial=58 nstack_initial=0))}})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi64.0': {('$62get_iter.1',
                           State(pc_initial=58 nstack_initial=0))},
             '$phi66.0': {('$62get_iter.1',
                           State(pc_initial=58 nstack_initial=0))},
             '$phi66.1': {('$64for_iter.2',
                           State(pc_initial=64 nstack_initial=1))},
             '$phi86.0': {('$62get_iter.1',
                           State(pc_initial=58 nstack_initial=0))},
             '$phi90.0': {('$62get_iter.1',
                           State(pc_initial=58 nstack_initial=0))},
             '$phi98.0': {('$62get_iter.1',
                           State(pc_initial=58 nstack_initial=0))}})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG keep phismap: {'$phi64.0': {('$62get_iter.1', State(pc_initial=58 nstack_initial=0))},
 '$phi66.1': {('$64for_iter.2', State(pc_initial=64 nstack_initial=1))}}
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=58 nstack_initial=0): {'$phi64.0': '$62get_iter.1'},
             State(pc_initial=64 nstack_initial=1): {'$phi66.1': '$64for_iter.2'}})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG ----------------------DONE Prune PHIs-----------------------
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arry2.0'}), (4, {'item': '$arry2.0', 'res': '$4load_attr.1'}), (6, {'res': '$const6.2'}), (8, {'lhs': '$4load_attr.1', 'rhs': '$const6.2', 'res': '$8compare_op.3'}), (10, {'pred': '$8compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: (), 20: ()})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=12 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$14load_deref.1'}), (16, {'func': '$12load_global.0', 'args': ['$14load_deref.1'], 'res': '$16call_function.2'}), (18, {'exc': '$16call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$20load_global.0'}), (22, {'item': '$20load_global.0', 'res': '$22load_method.1'}), (24, {'res': '$arry24.2'}), (26, {'func': '$22load_method.1', 'args': ['$arry24.2'], 'res': '$26call_method.3'}), (28, {'value': '$26call_method.3'}), (30, {'res': '$30load_global.4'}), (32, {'res': '$it32.5'}), (34, {'func': '$30load_global.4', 'args': ['$it32.5'], 'res': '$34call_function.6'}), (36, {'item': '$34call_function.6', 'res': '$36load_method.7'}), (38, {'res': '$const38.8'}), (40, {'func': '$36load_method.7', 'args': ['$const38.8'], 'res': '$40call_method.9'}), (42, {'value': '$40call_method.9'}), (44, {'res': '$44load_global.10'}), (46, {'item': '$44load_global.10', 'res': '$46load_method.11'}), (48, {'res': '$max_value48.12'}), (50, {'func': '$46load_method.11', 'args': ['$max_value48.12'], 'res': '$50call_method.13'}), (52, {'pred': '$50call_method.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 58: ()})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$max_value54.0'}), (56, {'retval': '$max_value54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$it60.0'}), (62, {'value': '$it60.0', 'res': '$62get_iter.1'})), outgoing_phis={'$phi64.0': '$62get_iter.1'}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: ('$62get_iter.1',)})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=64 nstack_initial=1):
AdaptBlockInfo(insts=((64, {'iterator': '$phi64.0', 'pair': '$64for_iter.1', 'indval': '$64for_iter.2', 'pred': '$64for_iter.3'}),), outgoing_phis={'$phi66.1': '$64for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 106, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={104: (), 66: ('$phi64.0', '$64for_iter.2')})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=66 nstack_initial=2):
AdaptBlockInfo(insts=((66, {'value': '$phi66.1'}), (68, {'res': '$view68.2'}), (70, {'item': '$view68.2', 'res': '$70load_method.3'}), (72, {'func': '$70load_method.3', 'args': [], 'res': '$72call_method.4'}), (74, {'value': '$72call_method.4'}), (76, {'res': '$76load_global.5'}), (78, {'item': '$76load_global.5', 'res': '$78load_method.6'}), (80, {'res': '$v80.7'}), (82, {'func': '$78load_method.6', 'args': ['$v80.7'], 'res': '$82call_method.8'}), (84, {'pred': '$82call_method.8'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 106, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={86: ('$phi66.0',), 90: ('$phi66.0',)})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=86 nstack_initial=1):
AdaptBlockInfo(insts=((86, {'res': '$v86.1'}), (88, {'retval': '$v86.1', 'castval': '$88return_value.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 106, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=90 nstack_initial=1):
AdaptBlockInfo(insts=((90, {'res': '$v90.1'}), (92, {'res': '$max_value92.2'}), (94, {'lhs': '$v90.1', 'rhs': '$max_value92.2', 'res': '$94compare_op.3'}), (96, {'pred': '$94compare_op.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 106, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={98: ('$phi90.0',), 64: ('$phi90.0',)})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=98 nstack_initial=1):
AdaptBlockInfo(insts=((98, {'res': '$v98.1'}), (100, {'value': '$v98.1'}), (102, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 106, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={64: ('$phi98.0',)})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 106, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={106: ()})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$max_value106.0'}), (108, {'retval': '$max_value106.0', 'castval': '$108return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:43 interpreter.py DEBUG label 0:
    arry = arg(0, name=arry)                 ['arry']
    $4load_attr.1 = getattr(value=arry, attr=size) ['$4load_attr.1', 'arry']
    $const6.2 = const(int, 0)                ['$const6.2']
    $8compare_op.3 = $4load_attr.1 == $const6.2 ['$4load_attr.1', '$8compare_op.3', '$const6.2']
    bool10 = global(bool: <class 'bool'>)    ['bool10']
    $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:604),), kws=(), vararg=None, varkwarg=None, target=None) ['$10pred', '$8compare_op.3', 'bool10']
    branch $10pred, 12, 20                   ['$10pred']
label 12:
    $12load_global.0 = global(ValueError: <class 'ValueError'>) ['$12load_global.0']
    $14load_deref.1 = freevar(MSG: zero-size array to reduction operation maximum which has no identity) ['$14load_deref.1']
    $16call_function.2 = call $12load_global.0($14load_deref.1, func=$12load_global.0, args=[Var($14load_deref.1, arraymath.py:605)], kws=(), vararg=None, varkwarg=None, target=None) ['$12load_global.0', '$14load_deref.1', '$16call_function.2']
    raise $16call_function.2                 ['$16call_function.2']
label 20:
    $20load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>) ['$20load_global.0']
    $22load_method.1 = getattr(value=$20load_global.0, attr=nditer) ['$20load_global.0', '$22load_method.1']
    it = call $22load_method.1(arry, func=$22load_method.1, args=[Var(arry, arraymath.py:604)], kws=(), vararg=None, varkwarg=None, target=None) ['$22load_method.1', 'arry', 'it']
    $30load_global.4 = global(next: <built-in function next>) ['$30load_global.4']
    $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:607)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_global.4', '$34call_function.6', 'it']
    $36load_method.7 = getattr(value=$34call_function.6, attr=take) ['$34call_function.6', '$36load_method.7']
    $const38.8 = const(int, 0)               ['$const38.8']
    max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:608)], kws=(), vararg=None, varkwarg=None, target=None) ['$36load_method.7', '$const38.8', 'max_value']
    $44load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>) ['$44load_global.10']
    $46load_method.11 = getattr(value=$44load_global.10, attr=isnan) ['$44load_global.10', '$46load_method.11']
    $50call_method.13 = call $46load_method.11(max_value, func=$46load_method.11, args=[Var(max_value, arraymath.py:608)], kws=(), vararg=None, varkwarg=None, target=None) ['$46load_method.11', '$50call_method.13', 'max_value']
    bool52 = global(bool: <class 'bool'>)    ['bool52']
    $52pred = call bool52($50call_method.13, func=bool52, args=(Var($50call_method.13, arraymath.py:609),), kws=(), vararg=None, varkwarg=None, target=None) ['$50call_method.13', '$52pred', 'bool52']
    branch $52pred, 54, 58                   ['$52pred']
label 54:
    $56return_value.1 = cast(value=max_value) ['$56return_value.1', 'max_value']
    return $56return_value.1                 ['$56return_value.1']
label 58:
    $62get_iter.1 = getiter(value=it)        ['$62get_iter.1', 'it']
    $phi64.0 = $62get_iter.1                 ['$62get_iter.1', '$phi64.0']
    jump 64                                  []
label 64:
    $64for_iter.1 = iternext(value=$phi64.0) ['$64for_iter.1', '$phi64.0']
    $64for_iter.2 = pair_first(value=$64for_iter.1) ['$64for_iter.1', '$64for_iter.2']
    $64for_iter.3 = pair_second(value=$64for_iter.1) ['$64for_iter.1', '$64for_iter.3']
    $phi66.1 = $64for_iter.2                 ['$64for_iter.2', '$phi66.1']
    branch $64for_iter.3, 66, 104            ['$64for_iter.3']
label 66:
    view = $phi66.1                          ['$phi66.1', 'view']
    $70load_method.3 = getattr(value=view, attr=item) ['$70load_method.3', 'view']
    v = call $70load_method.3(func=$70load_method.3, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$70load_method.3', 'v']
    $76load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>) ['$76load_global.5']
    $78load_method.6 = getattr(value=$76load_global.5, attr=isnan) ['$76load_global.5', '$78load_method.6']
    $82call_method.8 = call $78load_method.6(v, func=$78load_method.6, args=[Var(v, arraymath.py:613)], kws=(), vararg=None, varkwarg=None, target=None) ['$78load_method.6', '$82call_method.8', 'v']
    bool84 = global(bool: <class 'bool'>)    ['bool84']
    $84pred = call bool84($82call_method.8, func=bool84, args=(Var($82call_method.8, arraymath.py:614),), kws=(), vararg=None, varkwarg=None, target=None) ['$82call_method.8', '$84pred', 'bool84']
    branch $84pred, 86, 90                   ['$84pred']
label 86:
    $88return_value.2 = cast(value=v)        ['$88return_value.2', 'v']
    return $88return_value.2                 ['$88return_value.2']
label 90:
    $94compare_op.3 = v > max_value          ['$94compare_op.3', 'max_value', 'v']
    bool96 = global(bool: <class 'bool'>)    ['bool96']
    $96pred = call bool96($94compare_op.3, func=bool96, args=(Var($94compare_op.3, arraymath.py:616),), kws=(), vararg=None, varkwarg=None, target=None) ['$94compare_op.3', '$96pred', 'bool96']
    branch $96pred, 98, 64                   ['$96pred']
label 98:
    max_value = v                            ['max_value', 'v']
    jump 64                                  []
label 104:
    jump 106                                 []
label 106:
    $108return_value.1 = cast(value=max_value) ['$108return_value.1', 'max_value']
    return $108return_value.1                ['$108return_value.1']

Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 0
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AAD8B4DC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: arry = arg(0, name=arry)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $4load_attr.1 = getattr(value=arry, attr=size)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const6.2 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool10 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:604),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $10pred, 12, 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 12
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AAD8B4DC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $14load_deref.1 = freevar(MSG: zero-size array to reduction operation maximum which has no identity)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $16call_function.2 = call $12load_global.0($14load_deref.1, func=$12load_global.0, args=[Var($14load_deref.1, arraymath.py:605)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: <static> raise <class 'ValueError'>('zero-size array to reduction operation maximum which has no identity')
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AAD8B4DC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $20load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $22load_method.1 = getattr(value=$20load_global.0, attr=nditer)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: it = call $22load_method.1(arry, func=$22load_method.1, args=[Var(arry, arraymath.py:604)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $30load_global.4 = global(next: <built-in function next>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:607)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $36load_method.7 = getattr(value=$34call_function.6, attr=take)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const38.8 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:608)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $44load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $46load_method.11 = getattr(value=$44load_global.10, attr=isnan)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $50call_method.13 = call $46load_method.11(max_value, func=$46load_method.11, args=[Var(max_value, arraymath.py:608)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool52 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $52pred = call bool52($50call_method.13, func=bool52, args=(Var($50call_method.13, arraymath.py:609),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $52pred, 54, 58
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 54
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AAD8B4DC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $56return_value.1 = cast(value=max_value)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return $56return_value.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 58
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AAD8B4DC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $62get_iter.1 = getiter(value=it)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi64.0 = $62get_iter.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 64
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 64
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AAD8B4DC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $64for_iter.1 = iternext(value=$phi64.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $64for_iter.2 = pair_first(value=$64for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $64for_iter.3 = pair_second(value=$64for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi66.1 = $64for_iter.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $64for_iter.3, 66, 104
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 66
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AAD8B4DC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: view = $phi66.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $70load_method.3 = getattr(value=view, attr=item)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: v = call $70load_method.3(func=$70load_method.3, args=[], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $76load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $78load_method.6 = getattr(value=$76load_global.5, attr=isnan)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $82call_method.8 = call $78load_method.6(v, func=$78load_method.6, args=[Var(v, arraymath.py:613)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool84 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $84pred = call bool84($82call_method.8, func=bool84, args=(Var($82call_method.8, arraymath.py:614),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $84pred, 86, 90
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 86
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AAD8B4DC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $88return_value.2 = cast(value=v)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return $88return_value.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 90
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AAD8B4DC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $94compare_op.3 = v > max_value
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool96 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $96pred = call bool96($94compare_op.3, func=bool96, args=(Var($94compare_op.3, arraymath.py:616),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $96pred, 98, 107
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 98
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AAD8B4DC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: max_value = v
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 107
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 104
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AAD8B4DC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 106
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 106
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AAD8B4DC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $108return_value.1 = cast(value=max_value)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return $108return_value.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 107
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AAD8B4DC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 64
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG defs defaultdict(<class 'list'>,
            {'$108return_value.1': [<numba.core.ir.Assign object at 0x0000015AAE026DC8>],
             '$10pred': [<numba.core.ir.Assign object at 0x0000015AAD8B8F08>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x0000015AAD8BE0C8>],
             '$14load_deref.1': [<numba.core.ir.Assign object at 0x0000015AAD8AA388>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x0000015AAD89A7C8>],
             '$20load_global.0': [<numba.core.ir.Assign object at 0x0000015AAD89A688>],
             '$22load_method.1': [<numba.core.ir.Assign object at 0x0000015AAD89B148>],
             '$30load_global.4': [<numba.core.ir.Assign object at 0x0000015AAD8BE548>],
             '$34call_function.6': [<numba.core.ir.Assign object at 0x0000015AAD8BE7C8>],
             '$36load_method.7': [<numba.core.ir.Assign object at 0x0000015AAD8BE908>],
             '$44load_global.10': [<numba.core.ir.Assign object at 0x0000015AAD8BED88>],
             '$46load_method.11': [<numba.core.ir.Assign object at 0x0000015AAD8BEEC8>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x0000015AAD8B8848>],
             '$50call_method.13': [<numba.core.ir.Assign object at 0x0000015AAE020188>],
             '$52pred': [<numba.core.ir.Assign object at 0x0000015AAE020448>],
             '$56return_value.1': [<numba.core.ir.Assign object at 0x0000015AAE020688>],
             '$62get_iter.1': [<numba.core.ir.Assign object at 0x0000015AAE0209C8>],
             '$64for_iter.1': [<numba.core.ir.Assign object at 0x0000015AAE020C48>],
             '$64for_iter.2': [<numba.core.ir.Assign object at 0x0000015AAE020D48>],
             '$64for_iter.3': [<numba.core.ir.Assign object at 0x0000015AAE020E48>],
             '$70load_method.3': [<numba.core.ir.Assign object at 0x0000015AAE023408>],
             '$76load_global.5': [<numba.core.ir.Assign object at 0x0000015AAE0237C8>],
             '$78load_method.6': [<numba.core.ir.Assign object at 0x0000015AAE023908>],
             '$82call_method.8': [<numba.core.ir.Assign object at 0x0000015AAE023B88>],
             '$84pred': [<numba.core.ir.Assign object at 0x0000015AAE023E08>],
             '$88return_value.2': [<numba.core.ir.Assign object at 0x0000015AAE0260C8>],
             '$8compare_op.3': [<numba.core.ir.Assign object at 0x0000015AAD8B8808>],
             '$94compare_op.3': [<numba.core.ir.Assign object at 0x0000015AAE026508>],
             '$96pred': [<numba.core.ir.Assign object at 0x0000015AAE0267C8>],
             '$const38.8': [<numba.core.ir.Assign object at 0x0000015AAD8BEA08>],
             '$const6.2': [<numba.core.ir.Assign object at 0x0000015AAD8B89C8>],
             '$phi64.0': [<numba.core.ir.Assign object at 0x0000015AAE020848>],
             '$phi66.1': [<numba.core.ir.Assign object at 0x0000015AAE020F08>],
             'arry': [<numba.core.ir.Assign object at 0x0000015AAD8B8108>],
             'bool10': [<numba.core.ir.Assign object at 0x0000015AAD8B8DC8>],
             'bool52': [<numba.core.ir.Assign object at 0x0000015AAE020308>],
             'bool84': [<numba.core.ir.Assign object at 0x0000015AAE023CC8>],
             'bool96': [<numba.core.ir.Assign object at 0x0000015AAE026688>],
             'it': [<numba.core.ir.Assign object at 0x0000015AAD8BE2C8>],
             'max_value': [<numba.core.ir.Assign object at 0x0000015AAD8BEB48>,
                           <numba.core.ir.Assign object at 0x0000015AAE023608>],
             'v': [<numba.core.ir.Assign object at 0x0000015AAE023548>],
             'view': [<numba.core.ir.Assign object at 0x0000015AAE023148>]})
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG SSA violators {'max_value'}
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Fix SSA violator on var max_value
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AAE02EDC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: arry = arg(0, name=arry)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $4load_attr.1 = getattr(value=arry, attr=size)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const6.2 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool10 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:604),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $10pred, 12, 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 12
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AAE02EDC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $14load_deref.1 = freevar(MSG: zero-size array to reduction operation maximum which has no identity)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $16call_function.2 = call $12load_global.0($14load_deref.1, func=$12load_global.0, args=[Var($14load_deref.1, arraymath.py:605)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: <static> raise <class 'ValueError'>('zero-size array to reduction operation maximum which has no identity')
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AAE02EDC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $20load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $22load_method.1 = getattr(value=$20load_global.0, attr=nditer)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: it = call $22load_method.1(arry, func=$22load_method.1, args=[Var(arry, arraymath.py:604)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $30load_global.4 = global(next: <built-in function next>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:607)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $36load_method.7 = getattr(value=$34call_function.6, attr=take)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const38.8 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:608)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG first assign: max_value
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG replaced with: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:608)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $44load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $46load_method.11 = getattr(value=$44load_global.10, attr=isnan)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $50call_method.13 = call $46load_method.11(max_value, func=$46load_method.11, args=[Var(max_value, arraymath.py:608)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool52 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $52pred = call bool52($50call_method.13, func=bool52, args=(Var($50call_method.13, arraymath.py:609),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $52pred, 54, 58
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 54
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AAE02EDC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $56return_value.1 = cast(value=max_value)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return $56return_value.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 58
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AAE02EDC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $62get_iter.1 = getiter(value=it)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi64.0 = $62get_iter.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 64
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 64
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AAE02EDC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $64for_iter.1 = iternext(value=$phi64.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $64for_iter.2 = pair_first(value=$64for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $64for_iter.3 = pair_second(value=$64for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi66.1 = $64for_iter.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $64for_iter.3, 66, 104
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 66
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AAE02EDC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: view = $phi66.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $70load_method.3 = getattr(value=view, attr=item)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: v = call $70load_method.3(func=$70load_method.3, args=[], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $76load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $78load_method.6 = getattr(value=$76load_global.5, attr=isnan)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $82call_method.8 = call $78load_method.6(v, func=$78load_method.6, args=[Var(v, arraymath.py:613)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool84 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $84pred = call bool84($82call_method.8, func=bool84, args=(Var($82call_method.8, arraymath.py:614),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $84pred, 86, 90
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 86
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AAE02EDC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $88return_value.2 = cast(value=v)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return $88return_value.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 90
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AAE02EDC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $94compare_op.3 = v > max_value
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool96 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $96pred = call bool96($94compare_op.3, func=bool96, args=(Var($94compare_op.3, arraymath.py:616),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $96pred, 98, 107
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 98
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AAE02EDC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: max_value = v
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG replaced with: max_value.1 = v
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 107
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 104
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AAE02EDC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 106
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 106
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AAE02EDC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $108return_value.1 = cast(value=max_value)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return $108return_value.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 107
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AAE02EDC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 64
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {20: [<numba.core.ir.Assign object at 0x0000015AAE02EF88>],
             98: [<numba.core.ir.Assign object at 0x0000015AAE034508>]})
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AAE02EDC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: arry = arg(0, name=arry)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $4load_attr.1 = getattr(value=arry, attr=size)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const6.2 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool10 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:604),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $10pred, 12, 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 12
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AAE02EDC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $14load_deref.1 = freevar(MSG: zero-size array to reduction operation maximum which has no identity)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $16call_function.2 = call $12load_global.0($14load_deref.1, func=$12load_global.0, args=[Var($14load_deref.1, arraymath.py:605)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: <static> raise <class 'ValueError'>('zero-size array to reduction operation maximum which has no identity')
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AAE02EDC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $20load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $22load_method.1 = getattr(value=$20load_global.0, attr=nditer)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: it = call $22load_method.1(arry, func=$22load_method.1, args=[Var(arry, arraymath.py:604)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $30load_global.4 = global(next: <built-in function next>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:607)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $36load_method.7 = getattr(value=$34call_function.6, attr=take)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const38.8 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:608)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $44load_global.10 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $46load_method.11 = getattr(value=$44load_global.10, attr=isnan)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $50call_method.13 = call $46load_method.11(max_value, func=$46load_method.11, args=[Var(max_value, arraymath.py:608)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def var='max_value' stmt=$50call_method.13 = call $46load_method.11(max_value, func=$46load_method.11, args=[Var(max_value, arraymath.py:608)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool52 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $52pred = call bool52($50call_method.13, func=bool52, args=(Var($50call_method.13, arraymath.py:609),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $52pred, 54, 58
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 54
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AAE02EDC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $56return_value.1 = cast(value=max_value)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def var='max_value' stmt=$56return_value.1 = cast(value=max_value)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 54
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 20 from label 54
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return $56return_value.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 58
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AAE02EDC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $62get_iter.1 = getiter(value=it)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi64.0 = $62get_iter.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 64
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 64
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AAE02EDC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $64for_iter.1 = iternext(value=$phi64.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $64for_iter.2 = pair_first(value=$64for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $64for_iter.3 = pair_second(value=$64for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi66.1 = $64for_iter.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $64for_iter.3, 66, 104
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 66
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AAE02EDC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: view = $phi66.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $70load_method.3 = getattr(value=view, attr=item)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: v = call $70load_method.3(func=$70load_method.3, args=[], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $76load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $78load_method.6 = getattr(value=$76load_global.5, attr=isnan)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $82call_method.8 = call $78load_method.6(v, func=$78load_method.6, args=[Var(v, arraymath.py:613)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool84 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $84pred = call bool84($82call_method.8, func=bool84, args=(Var($82call_method.8, arraymath.py:614),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $84pred, 86, 90
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 86
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AAE02EDC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $88return_value.2 = cast(value=v)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return $88return_value.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 90
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AAE02EDC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $94compare_op.3 = v > max_value
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def var='max_value' stmt=$94compare_op.3 = v > max_value
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 90
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 66 from label 90
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 66
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 66
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 64 from label 66
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 64
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 64
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG insert phi node max_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 64
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 58
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 58
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 20 from label 58
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG incoming_def max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:608)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 107
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 107
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG insert phi node max_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 107
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 90
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 90
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 66 from label 90
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 66
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 66
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 64 from label 66
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 64
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG incoming_def max_value.2 = phi(incoming_values=[Var(max_value, arraymath.py:608)], incoming_blocks=[58])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 98
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG incoming_def max_value.1 = v
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG incoming_def max_value.3 = phi(incoming_values=[Var(max_value.2, arraymath.py:616), Var(max_value.1, arraymath.py:617)], incoming_blocks=[90, 98])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG replaced with: $94compare_op.3 = v > max_value.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool96 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $96pred = call bool96($94compare_op.3, func=bool96, args=(Var($94compare_op.3, arraymath.py:616),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $96pred, 98, 107
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 98
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AAE02EDC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: max_value.1 = v
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 107
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 104
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AAE02EDC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 106
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 106
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AAE02EDC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $108return_value.1 = cast(value=max_value)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def var='max_value' stmt=$108return_value.1 = cast(value=max_value)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 106
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 104 from label 106
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 104
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 104
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 64 from label 104
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 64
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG replaced with: $108return_value.1 = cast(value=max_value.2)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return $108return_value.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 107
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AAE02EDC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 64
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4396)
           2	LOAD_FAST(arg=1, lineno=4396)
           4	LOAD_FAST(arg=0, lineno=4396)
           6	LOAD_ATTR(arg=0, lineno=4396)
           8	LOAD_CONST(arg=1, lineno=4396)
          10	BINARY_SUBTRACT(arg=None, lineno=4396)
          12	COMPARE_OP(arg=4, lineno=4396)
          14	POP_JUMP_IF_TRUE(arg=28, lineno=4396)
          16	LOAD_FAST(arg=1, lineno=4396)
          18	LOAD_FAST(arg=0, lineno=4396)
          20	LOAD_ATTR(arg=0, lineno=4396)
          22	UNARY_NEGATIVE(arg=None, lineno=4396)
          24	COMPARE_OP(arg=0, lineno=4396)
          26	POP_JUMP_IF_FALSE(arg=36, lineno=4396)
>         28	LOAD_GLOBAL(arg=1, lineno=4397)
          30	LOAD_CONST(arg=2, lineno=4397)
          32	CALL_FUNCTION(arg=1, lineno=4397)
          34	RAISE_VARARGS(arg=1, lineno=4397)
>         36	LOAD_FAST(arg=0, lineno=4398)
          38	LOAD_METHOD(arg=2, lineno=4398)
          40	CALL_METHOD(arg=0, lineno=4398)
          42	LOAD_FAST(arg=1, lineno=4398)
          44	BINARY_SUBSCR(arg=None, lineno=4398)
          46	RETURN_VALUE(arg=None, lineno=4398)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4396)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=4396)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4396)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$indices2.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=6, inst=LOAD_ATTR(arg=0, lineno=4396)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$indices2.0', '$a4.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=4396)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$indices2.0', '$6load_attr.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=4396)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$indices2.0', '$6load_attr.2', '$const8.3']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=12, inst=COMPARE_OP(arg=4, lineno=4396)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$indices2.0', '$10binary_subtract.4']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=14, inst=POP_JUMP_IF_TRUE(arg=28, lineno=4396)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$12compare_op.5']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=16, stack=(), blockstack=(), npush=0), Edge(pc=28, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=16 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=4396)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=4396)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$indices16.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=20, inst=LOAD_ATTR(arg=0, lineno=4396)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$indices16.0', '$a18.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=22, inst=UNARY_NEGATIVE(arg=None, lineno=4396)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$indices16.0', '$20load_attr.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=24, inst=COMPARE_OP(arg=0, lineno=4396)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$indices16.0', '$22unary_negative.3']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=26, inst=POP_JUMP_IF_FALSE(arg=36, lineno=4396)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$24compare_op.4']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=28, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=28, inst=LOAD_GLOBAL(arg=1, lineno=4397)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=30, inst=LOAD_CONST(arg=2, lineno=4397)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$28load_global.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=32, inst=CALL_FUNCTION(arg=1, lineno=4397)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$28load_global.0', '$const30.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=34, inst=RAISE_VARARGS(arg=1, lineno=4397)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$32call_function.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=36 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=4398)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=38, inst=LOAD_METHOD(arg=2, lineno=4398)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$a36.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=40, inst=CALL_METHOD(arg=0, lineno=4398)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$38load_method.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=42, inst=LOAD_FAST(arg=1, lineno=4398)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$40call_method.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=4398)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$40call_method.2', '$indices42.3']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=4398)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$44binary_subscr.4']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG -------------------------Prune PHIs-------------------------
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set()})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG defmap: {}
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG keep phismap: {}
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG new_out: defaultdict(<class 'dict'>, {})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG ----------------------DONE Prune PHIs-----------------------
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$indices2.0'}), (4, {'res': '$a4.1'}), (6, {'item': '$a4.1', 'res': '$6load_attr.2'}), (8, {'res': '$const8.3'}), (10, {'lhs': '$6load_attr.2', 'rhs': '$const8.3', 'res': '$10binary_subtract.4'}), (12, {'lhs': '$indices2.0', 'rhs': '$10binary_subtract.4', 'res': '$12compare_op.5'}), (14, {'pred': '$12compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: (), 28: ()})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=16 nstack_initial=0):
AdaptBlockInfo(insts=((16, {'res': '$indices16.0'}), (18, {'res': '$a18.1'}), (20, {'item': '$a18.1', 'res': '$20load_attr.2'}), (22, {'value': '$20load_attr.2', 'res': '$22unary_negative.3'}), (24, {'lhs': '$indices16.0', 'rhs': '$22unary_negative.3', 'res': '$24compare_op.4'}), (26, {'pred': '$24compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: (), 36: ()})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$28load_global.0'}), (30, {'res': '$const30.1'}), (32, {'func': '$28load_global.0', 'args': ['$const30.1'], 'res': '$32call_function.2'}), (34, {'exc': '$32call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$a36.0'}), (38, {'item': '$a36.0', 'res': '$38load_method.1'}), (40, {'func': '$38load_method.1', 'args': [], 'res': '$40call_method.2'}), (42, {'res': '$indices42.3'}), (44, {'index': '$indices42.3', 'target': '$40call_method.2', 'res': '$44binary_subscr.4'}), (46, {'retval': '$44binary_subscr.4', 'castval': '$46return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:43 interpreter.py DEBUG label 0:
    a = arg(0, name=a)                       ['a']
    indices = arg(1, name=indices)           ['indices']
    $6load_attr.2 = getattr(value=a, attr=size) ['$6load_attr.2', 'a']
    $const8.3 = const(int, 1)                ['$const8.3']
    $10binary_subtract.4 = $6load_attr.2 - $const8.3 ['$10binary_subtract.4', '$6load_attr.2', '$const8.3']
    $12compare_op.5 = indices > $10binary_subtract.4 ['$10binary_subtract.4', '$12compare_op.5', 'indices']
    bool14 = global(bool: <class 'bool'>)    ['bool14']
    $14pred = call bool14($12compare_op.5, func=bool14, args=(Var($12compare_op.5, arrayobj.py:4396),), kws=(), vararg=None, varkwarg=None, target=None) ['$12compare_op.5', '$14pred', 'bool14']
    branch $14pred, 28, 16                   ['$14pred']
label 16:
    $20load_attr.2 = getattr(value=a, attr=size) ['$20load_attr.2', 'a']
    $22unary_negative.3 = unary(fn=<built-in function neg>, value=$20load_attr.2) ['$20load_attr.2', '$22unary_negative.3']
    $24compare_op.4 = indices < $22unary_negative.3 ['$22unary_negative.3', '$24compare_op.4', 'indices']
    bool26 = global(bool: <class 'bool'>)    ['bool26']
    $26pred = call bool26($24compare_op.4, func=bool26, args=(Var($24compare_op.4, arrayobj.py:4396),), kws=(), vararg=None, varkwarg=None, target=None) ['$24compare_op.4', '$26pred', 'bool26']
    branch $26pred, 28, 36                   ['$26pred']
label 28:
    $28load_global.0 = global(IndexError: <class 'IndexError'>) ['$28load_global.0']
    $const30.1 = const(str, Index out of bounds) ['$const30.1']
    $32call_function.2 = call $28load_global.0($const30.1, func=$28load_global.0, args=[Var($const30.1, arrayobj.py:4397)], kws=(), vararg=None, varkwarg=None, target=None) ['$28load_global.0', '$32call_function.2', '$const30.1']
    raise $32call_function.2                 ['$32call_function.2']
label 36:
    $38load_method.1 = getattr(value=a, attr=ravel) ['$38load_method.1', 'a']
    $40call_method.2 = call $38load_method.1(func=$38load_method.1, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$38load_method.1', '$40call_method.2']
    $44binary_subscr.4 = getitem(value=$40call_method.2, index=indices, fn=<built-in function getitem>) ['$40call_method.2', '$44binary_subscr.4', 'indices']
    $46return_value.5 = cast(value=$44binary_subscr.4) ['$44binary_subscr.4', '$46return_value.5']
    return $46return_value.5                 ['$46return_value.5']

Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 0
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AAE099CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: a = arg(0, name=a)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: indices = arg(1, name=indices)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $6load_attr.2 = getattr(value=a, attr=size)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const8.3 = const(int, 1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $10binary_subtract.4 = $6load_attr.2 - $const8.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $12compare_op.5 = indices > $10binary_subtract.4
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool14 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $14pred = call bool14($12compare_op.5, func=bool14, args=(Var($12compare_op.5, arrayobj.py:4396),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $14pred, 28, 16
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 16
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AAE099CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $20load_attr.2 = getattr(value=a, attr=size)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $22unary_negative.3 = unary(fn=<built-in function neg>, value=$20load_attr.2)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $24compare_op.4 = indices < $22unary_negative.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool26 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $26pred = call bool26($24compare_op.4, func=bool26, args=(Var($24compare_op.4, arrayobj.py:4396),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $26pred, 28, 36
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 28
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AAE099CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $28load_global.0 = global(IndexError: <class 'IndexError'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const30.1 = const(str, Index out of bounds)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $32call_function.2 = call $28load_global.0($const30.1, func=$28load_global.0, args=[Var($const30.1, arrayobj.py:4397)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: <static> raise <class 'IndexError'>('Index out of bounds')
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 36
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AAE099CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $38load_method.1 = getattr(value=a, attr=ravel)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $40call_method.2 = call $38load_method.1(func=$38load_method.1, args=[], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $44binary_subscr.4 = getitem(value=$40call_method.2, index=indices, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $46return_value.5 = cast(value=$44binary_subscr.4)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return $46return_value.5
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x0000015AAE08E608>],
             '$12compare_op.5': [<numba.core.ir.Assign object at 0x0000015AAE08E788>],
             '$14pred': [<numba.core.ir.Assign object at 0x0000015AAE08EA08>],
             '$20load_attr.2': [<numba.core.ir.Assign object at 0x0000015AAE08EE08>],
             '$22unary_negative.3': [<numba.core.ir.Assign object at 0x0000015AAE08EF48>],
             '$24compare_op.4': [<numba.core.ir.Assign object at 0x0000015AAE0900C8>],
             '$26pred': [<numba.core.ir.Assign object at 0x0000015AAE0903C8>],
             '$28load_global.0': [<numba.core.ir.Assign object at 0x0000015AAE090548>],
             '$32call_function.2': [<numba.core.ir.Assign object at 0x0000015AAE0907C8>],
             '$38load_method.1': [<numba.core.ir.Assign object at 0x0000015AAE090B48>],
             '$40call_method.2': [<numba.core.ir.Assign object at 0x0000015AAE090C88>],
             '$44binary_subscr.4': [<numba.core.ir.Assign object at 0x0000015AAE090F08>],
             '$46return_value.5': [<numba.core.ir.Assign object at 0x0000015AAE093108>],
             '$6load_attr.2': [<numba.core.ir.Assign object at 0x0000015AAE08E348>],
             '$const30.1': [<numba.core.ir.Assign object at 0x0000015AAE090688>],
             '$const8.3': [<numba.core.ir.Assign object at 0x0000015AAE08E4C8>],
             'a': [<numba.core.ir.Assign object at 0x0000015AAE089EC8>],
             'bool14': [<numba.core.ir.Assign object at 0x0000015AAE08E908>],
             'bool26': [<numba.core.ir.Assign object at 0x0000015AAE090288>],
             'indices': [<numba.core.ir.Assign object at 0x0000015AAE089F88>]})
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG SSA violators set()
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=1996)
           2	LOAD_FAST(arg=0, lineno=1996)
           4	LOAD_METHOD(arg=0, lineno=1996)
           6	LOAD_FAST(arg=0, lineno=1996)
           8	LOAD_ATTR(arg=1, lineno=1996)
          10	CALL_METHOD(arg=1, lineno=1996)
          12	RETURN_VALUE(arg=None, lineno=1996)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=1996)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1996)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=1996)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$ary2.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=1996)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$4load_method.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=8, inst=LOAD_ATTR(arg=1, lineno=1996)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$4load_method.1', '$ary6.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=10, inst=CALL_METHOD(arg=1, lineno=1996)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$4load_method.1', '$8load_attr.3']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=1996)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$10call_method.4']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG -------------------------Prune PHIs-------------------------
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG defmap: {}
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG keep phismap: {}
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG new_out: defaultdict(<class 'dict'>, {})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG ----------------------DONE Prune PHIs-----------------------
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$ary2.0'}), (4, {'item': '$ary2.0', 'res': '$4load_method.1'}), (6, {'res': '$ary6.2'}), (8, {'item': '$ary6.2', 'res': '$8load_attr.3'}), (10, {'func': '$4load_method.1', 'args': ['$8load_attr.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:43 interpreter.py DEBUG label 0:
    ary = arg(0, name=ary)                   ['ary']
    $4load_method.1 = getattr(value=ary, attr=reshape) ['$4load_method.1', 'ary']
    $8load_attr.3 = getattr(value=ary, attr=size) ['$8load_attr.3', 'ary']
    $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, arrayobj.py:1996)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_method.4', '$4load_method.1', '$8load_attr.3']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 0
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AB420A188>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: ary = arg(0, name=ary)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $4load_method.1 = getattr(value=ary, attr=reshape)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $8load_attr.3 = getattr(value=ary, attr=size)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, arrayobj.py:1996)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $12return_value.5 = cast(value=$10call_method.4)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return $12return_value.5
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x0000015AB41FD348>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x0000015AB41FD4C8>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x0000015AB41F8F08>],
             '$8load_attr.3': [<numba.core.ir.Assign object at 0x0000015AB41FD1C8>],
             'ary': [<numba.core.ir.Assign object at 0x0000015AB41F8C48>]})
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG SSA violators set()
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=1858)
           2	LOAD_CONST(arg=1, lineno=1858)
           4	STORE_FAST(arg=2, lineno=1858)
           6	LOAD_CONST(arg=2, lineno=1859)
           8	STORE_FAST(arg=3, lineno=1859)
          10	SETUP_LOOP(arg=50, lineno=1860)
          12	LOAD_GLOBAL(arg=0, lineno=1860)
          14	LOAD_FAST(arg=1, lineno=1860)
          16	CALL_FUNCTION(arg=1, lineno=1860)
          18	GET_ITER(arg=None, lineno=1860)
>         20	FOR_ITER(arg=38, lineno=1860)
          22	UNPACK_SEQUENCE(arg=2, lineno=1860)
          24	STORE_FAST(arg=4, lineno=1860)
          26	STORE_FAST(arg=5, lineno=1860)
          28	LOAD_FAST(arg=5, lineno=1861)
          30	LOAD_CONST(arg=1, lineno=1861)
          32	COMPARE_OP(arg=0, lineno=1861)
          34	POP_JUMP_IF_FALSE(arg=50, lineno=1861)
          36	LOAD_FAST(arg=2, lineno=1862)
          38	LOAD_CONST(arg=2, lineno=1862)
          40	INPLACE_ADD(arg=None, lineno=1862)
          42	STORE_FAST(arg=2, lineno=1862)
          44	LOAD_FAST(arg=4, lineno=1863)
          46	STORE_FAST(arg=6, lineno=1863)
          48	JUMP_ABSOLUTE(arg=20, lineno=1863)
>         50	LOAD_FAST(arg=3, lineno=1865)
          52	LOAD_FAST(arg=5, lineno=1865)
          54	INPLACE_MULTIPLY(arg=None, lineno=1865)
          56	STORE_FAST(arg=3, lineno=1865)
          58	JUMP_ABSOLUTE(arg=20, lineno=1865)
>         60	POP_BLOCK(arg=None, lineno=1865)
>         62	LOAD_FAST(arg=2, lineno=1867)
          64	LOAD_CONST(arg=1, lineno=1867)
          66	COMPARE_OP(arg=2, lineno=1867)
          68	POP_JUMP_IF_FALSE(arg=88, lineno=1867)
          70	LOAD_FAST(arg=0, lineno=1868)
          72	LOAD_FAST(arg=3, lineno=1868)
          74	COMPARE_OP(arg=3, lineno=1868)
          76	POP_JUMP_IF_FALSE(arg=168, lineno=1868)
          78	LOAD_GLOBAL(arg=1, lineno=1869)
          80	LOAD_CONST(arg=3, lineno=1869)
          82	CALL_FUNCTION(arg=1, lineno=1869)
          84	RAISE_VARARGS(arg=1, lineno=1869)
          86	JUMP_FORWARD(arg=80, lineno=1869)
>         88	LOAD_FAST(arg=2, lineno=1871)
          90	LOAD_CONST(arg=2, lineno=1871)
          92	COMPARE_OP(arg=2, lineno=1871)
          94	POP_JUMP_IF_FALSE(arg=160, lineno=1871)
          96	LOAD_FAST(arg=3, lineno=1873)
          98	LOAD_CONST(arg=1, lineno=1873)
         100	COMPARE_OP(arg=2, lineno=1873)
         102	POP_JUMP_IF_FALSE(arg=118, lineno=1873)
         104	LOAD_CONST(arg=1, lineno=1874)
         106	STORE_FAST(arg=7, lineno=1874)
         108	LOAD_FAST(arg=0, lineno=1875)
         110	LOAD_CONST(arg=1, lineno=1875)
         112	COMPARE_OP(arg=2, lineno=1875)
         114	STORE_FAST(arg=8, lineno=1875)
         116	JUMP_FORWARD(arg=20, lineno=1875)
>        118	LOAD_FAST(arg=0, lineno=1877)
         120	LOAD_FAST(arg=3, lineno=1877)
         122	BINARY_FLOOR_DIVIDE(arg=None, lineno=1877)
         124	STORE_FAST(arg=7, lineno=1877)
         126	LOAD_FAST(arg=0, lineno=1878)
         128	LOAD_FAST(arg=3, lineno=1878)
         130	BINARY_MODULO(arg=None, lineno=1878)
         132	LOAD_CONST(arg=1, lineno=1878)
         134	COMPARE_OP(arg=2, lineno=1878)
         136	STORE_FAST(arg=8, lineno=1878)
>        138	LOAD_FAST(arg=8, lineno=1879)
         140	POP_JUMP_IF_TRUE(arg=150, lineno=1879)
         142	LOAD_GLOBAL(arg=1, lineno=1880)
         144	LOAD_CONST(arg=3, lineno=1880)
         146	CALL_FUNCTION(arg=1, lineno=1880)
         148	RAISE_VARARGS(arg=1, lineno=1880)
>        150	LOAD_FAST(arg=7, lineno=1881)
         152	LOAD_FAST(arg=1, lineno=1881)
         154	LOAD_FAST(arg=6, lineno=1881)
         156	STORE_SUBSCR(arg=None, lineno=1881)
         158	JUMP_FORWARD(arg=8, lineno=1881)
>        160	LOAD_GLOBAL(arg=1, lineno=1884)
         162	LOAD_CONST(arg=4, lineno=1884)
         164	CALL_FUNCTION(arg=1, lineno=1884)
         166	RAISE_VARARGS(arg=1, lineno=1884)
>        168	LOAD_CONST(arg=0, lineno=1884)
         170	RETURN_VALUE(arg=None, lineno=1884)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=1858)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1858)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=4, inst=STORE_FAST(arg=2, lineno=1858)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$const2.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=6, inst=LOAD_CONST(arg=2, lineno=1859)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1859)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$const6.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=10 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=10, inst=SETUP_LOOP(arg=50, lineno=1860)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=1860)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1860)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$12load_global.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=1860)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$12load_global.0', '$shape14.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=18, inst=GET_ITER(arg=None, lineno=1860)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$16call_function.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=20, stack=('$18get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=20 nstack_initial=1)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: ['$phi20.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=20, inst=FOR_ITER(arg=38, lineno=1860)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi20.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=60, inst=POP_BLOCK(arg=None, lineno=1865)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=22 nstack_initial=2), State(pc_initial=62 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: ['$phi22.0', '$phi22.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=22, inst=UNPACK_SEQUENCE(arg=2, lineno=1860)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi22.0', '$phi22.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=24, inst=STORE_FAST(arg=4, lineno=1860)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi22.0', '$22unpack_sequence.3', '$22unpack_sequence.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=26, inst=STORE_FAST(arg=5, lineno=1860)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi22.0', '$22unpack_sequence.3']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=28, inst=LOAD_FAST(arg=5, lineno=1861)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi22.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=1861)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi22.0', '$s28.5']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=1861)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi22.0', '$s28.5', '$const30.6']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=50, lineno=1861)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi22.0', '$32compare_op.7']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=36, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=50, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=1867)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=1867)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$num_neg_value62.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=66, inst=COMPARE_OP(arg=2, lineno=1867)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$num_neg_value62.0', '$const64.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=88, lineno=1867)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$66compare_op.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: ['$phi36.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=1862)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi36.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=1862)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi36.0', '$num_neg_value36.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=40, inst=INPLACE_ADD(arg=None, lineno=1862)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi36.0', '$num_neg_value36.1', '$const38.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=42, inst=STORE_FAST(arg=2, lineno=1862)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi36.0', '$40inplace_add.3']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1863)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi36.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=46, inst=STORE_FAST(arg=6, lineno=1863)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi36.0', '$ax44.4']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=48, inst=JUMP_ABSOLUTE(arg=20, lineno=1863)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi36.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=20, stack=('$phi36.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: ['$phi50.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=1865)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi50.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=52, inst=LOAD_FAST(arg=5, lineno=1865)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi50.0', '$known_size50.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=54, inst=INPLACE_MULTIPLY(arg=None, lineno=1865)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi50.0', '$known_size50.1', '$s52.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=56, inst=STORE_FAST(arg=3, lineno=1865)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi50.0', '$54inplace_multiply.3']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=58, inst=JUMP_ABSOLUTE(arg=20, lineno=1865)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi50.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=20, stack=('$phi50.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1868)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=1868)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$origsize70.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=74, inst=COMPARE_OP(arg=3, lineno=1868)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$origsize70.0', '$known_size72.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=168, lineno=1868)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$74compare_op.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0), Edge(pc=168, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=1871)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=1871)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$num_neg_value88.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=92, inst=COMPARE_OP(arg=2, lineno=1871)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$num_neg_value88.0', '$const90.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=160, lineno=1871)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$92compare_op.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0), Edge(pc=160, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=78, inst=LOAD_GLOBAL(arg=1, lineno=1869)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=80, inst=LOAD_CONST(arg=3, lineno=1869)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$78load_global.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=1869)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$78load_global.0', '$const80.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=1869)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$82call_function.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=168, inst=LOAD_CONST(arg=0, lineno=1884)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=170, inst=RETURN_VALUE(arg=None, lineno=1884)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$const168.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1873)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=1873)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$known_size96.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=1873)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$known_size96.0', '$const98.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=118, lineno=1873)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$100compare_op.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=160 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=160, inst=LOAD_GLOBAL(arg=1, lineno=1884)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=162, inst=LOAD_CONST(arg=4, lineno=1884)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$160load_global.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=1884)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$160load_global.0', '$const162.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=166, inst=RAISE_VARARGS(arg=1, lineno=1884)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$164call_function.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=104, inst=LOAD_CONST(arg=1, lineno=1874)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=106, inst=STORE_FAST(arg=7, lineno=1874)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$const104.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=1875)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=110, inst=LOAD_CONST(arg=1, lineno=1875)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$origsize108.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=112, inst=COMPARE_OP(arg=2, lineno=1875)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$origsize108.1', '$const110.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=114, inst=STORE_FAST(arg=8, lineno=1875)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$112compare_op.3']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=116, inst=JUMP_FORWARD(arg=20, lineno=1875)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=1877)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=120, inst=LOAD_FAST(arg=3, lineno=1877)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$origsize118.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=122, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=1877)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$origsize118.0', '$known_size120.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=124, inst=STORE_FAST(arg=7, lineno=1877)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$122binary_floor_divide.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=126, inst=LOAD_FAST(arg=0, lineno=1878)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=128, inst=LOAD_FAST(arg=3, lineno=1878)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$origsize126.3']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=130, inst=BINARY_MODULO(arg=None, lineno=1878)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$origsize126.3', '$known_size128.4']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=132, inst=LOAD_CONST(arg=1, lineno=1878)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$130binary_modulo.5']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=134, inst=COMPARE_OP(arg=2, lineno=1878)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$130binary_modulo.5', '$const132.6']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=136, inst=STORE_FAST(arg=8, lineno=1878)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$134compare_op.7']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=138, inst=LOAD_FAST(arg=8, lineno=1879)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=140, inst=POP_JUMP_IF_TRUE(arg=150, lineno=1879)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$ok138.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=142, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=142, inst=LOAD_GLOBAL(arg=1, lineno=1880)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=1880)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$142load_global.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=146, inst=CALL_FUNCTION(arg=1, lineno=1880)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$142load_global.0', '$const144.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=148, inst=RAISE_VARARGS(arg=1, lineno=1880)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$146call_function.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=150 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=150, inst=LOAD_FAST(arg=7, lineno=1881)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=1881)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$inferred150.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=154, inst=LOAD_FAST(arg=6, lineno=1881)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$inferred150.0', '$shape152.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=156, inst=STORE_SUBSCR(arg=None, lineno=1881)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$inferred150.0', '$shape152.1', '$neg_ax154.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=158, inst=JUMP_FORWARD(arg=8, lineno=1881)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=168, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=168 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG -------------------------Prune PHIs-------------------------
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=36 nstack_initial=1): set(),
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=142 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=160 nstack_initial=0): set(),
             State(pc_initial=168 nstack_initial=0): set()})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG defmap: {'$phi20.0': State(pc_initial=10 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1)),
                          ('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi50.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))}})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG keep phismap: {'$phi20.0': {('$18get_iter.3', State(pc_initial=10 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi20.0': '$18get_iter.3'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG ----------------------DONE Prune PHIs-----------------------
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: ()})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$shape14.1'}), (16, {'func': '$12load_global.0', 'args': ['$shape14.1'], 'res': '$16call_function.2'}), (18, {'value': '$16call_function.2', 'res': '$18get_iter.3'})), outgoing_phis={'$phi20.0': '$18get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.3',)})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 22: ('$phi20.0', '$20for_iter.2')})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'iterable': '$phi22.1', 'stores': ['$22unpack_sequence.2', '$22unpack_sequence.3'], 'tupleobj': '$22unpack_sequence.4'}), (24, {'value': '$22unpack_sequence.2'}), (26, {'value': '$22unpack_sequence.3'}), (28, {'res': '$s28.5'}), (30, {'res': '$const30.6'}), (32, {'lhs': '$s28.5', 'rhs': '$const30.6', 'res': '$32compare_op.7'}), (34, {'pred': '$32compare_op.7'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: ('$phi22.0',), 50: ('$phi22.0',)})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'res': '$num_neg_value36.1'}), (38, {'res': '$const38.2'}), (40, {'lhs': '$num_neg_value36.1', 'rhs': '$const38.2', 'res': '$40inplace_add.3'}), (42, {'value': '$40inplace_add.3'}), (44, {'res': '$ax44.4'}), (46, {'value': '$ax44.4'}), (48, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi36.0',)})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$known_size50.1'}), (52, {'res': '$s52.2'}), (54, {'lhs': '$known_size50.1', 'rhs': '$s52.2', 'res': '$54inplace_multiply.3'}), (56, {'value': '$54inplace_multiply.3'}), (58, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi50.0',)})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: ()})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$num_neg_value62.0'}), (64, {'res': '$const64.1'}), (66, {'lhs': '$num_neg_value62.0', 'rhs': '$const64.1', 'res': '$66compare_op.2'}), (68, {'pred': '$66compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 88: ()})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$origsize70.0'}), (72, {'res': '$known_size72.1'}), (74, {'lhs': '$origsize70.0', 'rhs': '$known_size72.1', 'res': '$74compare_op.2'}), (76, {'pred': '$74compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: (), 168: ()})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$const80.1'}), (82, {'func': '$78load_global.0', 'args': ['$const80.1'], 'res': '$82call_function.2'}), (84, {'exc': '$82call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$num_neg_value88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$num_neg_value88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: (), 160: ()})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$known_size96.0'}), (98, {'res': '$const98.1'}), (100, {'lhs': '$known_size96.0', 'rhs': '$const98.1', 'res': '$100compare_op.2'}), (102, {'pred': '$100compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 118: ()})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$const104.0'}), (106, {'value': '$const104.0'}), (108, {'res': '$origsize108.1'}), (110, {'res': '$const110.2'}), (112, {'lhs': '$origsize108.1', 'rhs': '$const110.2', 'res': '$112compare_op.3'}), (114, {'value': '$112compare_op.3'}), (116, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$origsize118.0'}), (120, {'res': '$known_size120.1'}), (122, {'lhs': '$origsize118.0', 'rhs': '$known_size120.1', 'res': '$122binary_floor_divide.2'}), (124, {'value': '$122binary_floor_divide.2'}), (126, {'res': '$origsize126.3'}), (128, {'res': '$known_size128.4'}), (130, {'lhs': '$origsize126.3', 'rhs': '$known_size128.4', 'res': '$130binary_modulo.5'}), (132, {'res': '$const132.6'}), (134, {'lhs': '$130binary_modulo.5', 'rhs': '$const132.6', 'res': '$134compare_op.7'}), (136, {'value': '$134compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$ok138.0'}), (140, {'pred': '$ok138.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: (), 150: ()})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=142 nstack_initial=0):
AdaptBlockInfo(insts=((142, {'res': '$142load_global.0'}), (144, {'res': '$const144.1'}), (146, {'func': '$142load_global.0', 'args': ['$const144.1'], 'res': '$146call_function.2'}), (148, {'exc': '$146call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$inferred150.0'}), (152, {'res': '$shape152.1'}), (154, {'res': '$neg_ax154.2'}), (156, {'target': '$shape152.1', 'index': '$neg_ax154.2', 'value': '$inferred150.0'}), (158, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ()})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=160 nstack_initial=0):
AdaptBlockInfo(insts=((160, {'res': '$160load_global.0'}), (162, {'res': '$const162.1'}), (164, {'func': '$160load_global.0', 'args': ['$const162.1'], 'res': '$164call_function.2'}), (166, {'exc': '$164call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=168 nstack_initial=0):
AdaptBlockInfo(insts=((168, {'res': '$const168.0'}), (170, {'retval': '$const168.0', 'castval': '$170return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:43 interpreter.py DEBUG label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    jump 10                                  []
label 10:
    $12load_global.0 = global(enumerate: <class 'enumerate'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1858)], kws=(), vararg=None, varkwarg=None, target=None) ['$12load_global.0', '$16call_function.2', 'shape']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 60             ['$20for_iter.3']
label 22:
    $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2) ['$22unpack_sequence.4', '$phi22.1']
    $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.2', '$22unpack_sequence.4']
    $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.3', '$22unpack_sequence.4']
    ax = $22unpack_sequence.2                ['$22unpack_sequence.2', 'ax']
    s = $22unpack_sequence.3                 ['$22unpack_sequence.3', 's']
    $const30.6 = const(int, 0)               ['$const30.6']
    $32compare_op.7 = s < $const30.6         ['$32compare_op.7', '$const30.6', 's']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1861),), kws=(), vararg=None, varkwarg=None, target=None) ['$32compare_op.7', '$34pred', 'bool34']
    branch $34pred, 36, 50                   ['$34pred']
label 36:
    $const38.2 = const(int, 1)               ['$const38.2']
    $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.3', '$const38.2', 'num_neg_value']
    num_neg_value = $40inplace_add.3         ['$40inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 20                                  []
label 50:
    $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$54inplace_multiply.3', 'known_size', 's']
    known_size = $54inplace_multiply.3       ['$54inplace_multiply.3', 'known_size']
    jump 20                                  []
label 60:
    jump 62                                  []
label 62:
    $const64.1 = const(int, 0)               ['$const64.1']
    $66compare_op.2 = num_neg_value == $const64.1 ['$66compare_op.2', '$const64.1', 'num_neg_value']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1867),), kws=(), vararg=None, varkwarg=None, target=None) ['$66compare_op.2', '$68pred', 'bool68']
    branch $68pred, 70, 88                   ['$68pred']
label 70:
    $74compare_op.2 = origsize != known_size ['$74compare_op.2', 'known_size', 'origsize']
    bool76 = global(bool: <class 'bool'>)    ['bool76']
    $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1868),), kws=(), vararg=None, varkwarg=None, target=None) ['$74compare_op.2', '$76pred', 'bool76']
    branch $76pred, 78, 168                  ['$76pred']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, total size of new array must be unchanged) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1869)], kws=(), vararg=None, varkwarg=None, target=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise $82call_function.2                 ['$82call_function.2']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = num_neg_value == $const90.1 ['$92compare_op.2', '$const90.1', 'num_neg_value']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1871),), kws=(), vararg=None, varkwarg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 160                  ['$94pred']
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = known_size == $const98.1 ['$100compare_op.2', '$const98.1', 'known_size']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1873),), kws=(), vararg=None, varkwarg=None, target=None) ['$100compare_op.2', '$102pred', 'bool102']
    branch $102pred, 104, 118                ['$102pred']
label 104:
    inferred = const(int, 0)                 ['inferred']
    $const110.2 = const(int, 0)              ['$const110.2']
    ok = origsize == $const110.2             ['$const110.2', 'ok', 'origsize']
    jump 138                                 []
label 118:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $130binary_modulo.5 = origsize % known_size ['$130binary_modulo.5', 'known_size', 'origsize']
    $const132.6 = const(int, 0)              ['$const132.6']
    ok = $130binary_modulo.5 == $const132.6  ['$130binary_modulo.5', '$const132.6', 'ok']
    jump 138                                 []
label 138:
    bool140 = global(bool: <class 'bool'>)   ['bool140']
    $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1875),), kws=(), vararg=None, varkwarg=None, target=None) ['$140pred', 'bool140', 'ok']
    branch $140pred, 150, 142                ['$140pred']
label 142:
    $142load_global.0 = global(ValueError: <class 'ValueError'>) ['$142load_global.0']
    $const144.1 = const(str, total size of new array must be unchanged) ['$const144.1']
    $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1880)], kws=(), vararg=None, varkwarg=None, target=None) ['$142load_global.0', '$146call_function.2', '$const144.1']
    raise $146call_function.2                ['$146call_function.2']
label 150:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 168                                 []
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1884)], kws=(), vararg=None, varkwarg=None, target=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise $164call_function.2                ['$164call_function.2']
label 168:
    $const168.0 = const(NoneType, None)      ['$const168.0']
    $170return_value.1 = cast(value=$const168.0) ['$170return_value.1', '$const168.0']
    return $170return_value.1                ['$170return_value.1']

Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 0
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AB5301B08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: origsize = arg(0, name=origsize)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: shape = arg(1, name=shape)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: num_neg_value = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: known_size = const(int, 1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 10
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 10
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AB5301B08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1858)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi20.0 = $18get_iter.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AB5301B08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $20for_iter.1 = iternext(value=$phi20.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi22.1 = $20for_iter.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $20for_iter.3, 22, 60
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 22
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AB5301B08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: ax = $22unpack_sequence.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: s = $22unpack_sequence.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const30.6 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $32compare_op.7 = s < $const30.6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool34 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1861),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $34pred, 36, 50
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 36
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AB5301B08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const38.2 = const(int, 1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: num_neg_value = $40inplace_add.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: neg_ax = ax
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 169
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 50
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AB5301B08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: known_size = $54inplace_multiply.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 169
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 60
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AB5301B08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 62
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 62
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AB5301B08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const64.1 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $66compare_op.2 = num_neg_value == $const64.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool68 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1867),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $68pred, 70, 88
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 70
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AB5301B08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $74compare_op.2 = origsize != known_size
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool76 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1868),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $76pred, 78, 168
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 78
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AB5301B08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const80.1 = const(str, total size of new array must be unchanged)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1869)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 88
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AB5301B08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const90.1 = const(int, 1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $92compare_op.2 = num_neg_value == $const90.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool94 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1871),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $94pred, 96, 160
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 96
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AB5301B08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const98.1 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $100compare_op.2 = known_size == $const98.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool102 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1873),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $102pred, 104, 118
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 104
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AB5301B08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: inferred = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const110.2 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: ok = origsize == $const110.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 138
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 118
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AB5301B08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: inferred = origsize // known_size
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $130binary_modulo.5 = origsize % known_size
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const132.6 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: ok = $130binary_modulo.5 == $const132.6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 138
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 138
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AB5301B08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool140 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1875),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $140pred, 150, 142
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 142
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AB5301B08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const144.1 = const(str, total size of new array must be unchanged)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1880)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 150
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AB5301B08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: shape[neg_ax] = inferred
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 168
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 160
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AB5301B08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const162.1 = const(str, multiple negative shape values)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1884)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 168
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AB5301B08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const168.0 = const(NoneType, None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $170return_value.1 = cast(value=$const168.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return $170return_value.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 169
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AB5301B08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG defs defaultdict(<class 'list'>,
            {'$100compare_op.2': [<numba.core.ir.Assign object at 0x0000015AB5317308>],
             '$102pred': [<numba.core.ir.Assign object at 0x0000015AB53175C8>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x0000015AB52FDFC8>],
             '$130binary_modulo.5': [<numba.core.ir.Assign object at 0x0000015AB531B608>],
             '$140pred': [<numba.core.ir.Assign object at 0x0000015AB531BBC8>],
             '$142load_global.0': [<numba.core.ir.Assign object at 0x0000015AB531BD48>],
             '$146call_function.2': [<numba.core.ir.Assign object at 0x0000015AB531BFC8>],
             '$160load_global.0': [<numba.core.ir.Assign object at 0x0000015AB531E6C8>],
             '$164call_function.2': [<numba.core.ir.Assign object at 0x0000015AB531E948>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x0000015AB52FD788>],
             '$170return_value.1': [<numba.core.ir.Assign object at 0x0000015AB531ECC8>],
             '$18get_iter.3': [<numba.core.ir.Assign object at 0x0000015AB530F4C8>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x0000015AB530F888>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x0000015AB530F208>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x0000015AB530F908>],
             '$22unpack_sequence.2': [<numba.core.ir.Assign object at 0x0000015AB530FD48>],
             '$22unpack_sequence.3': [<numba.core.ir.Assign object at 0x0000015AB530FE48>],
             '$22unpack_sequence.4': [<numba.core.ir.Assign object at 0x0000015AB530FC08>],
             '$32compare_op.7': [<numba.core.ir.Assign object at 0x0000015AB530B4C8>],
             '$34pred': [<numba.core.ir.Assign object at 0x0000015AB530B748>],
             '$40inplace_add.3': [<numba.core.ir.Assign object at 0x0000015AB530BB88>],
             '$54inplace_multiply.3': [<numba.core.ir.Assign object at 0x0000015AB5312308>],
             '$66compare_op.2': [<numba.core.ir.Assign object at 0x0000015AB5312888>],
             '$68pred': [<numba.core.ir.Assign object at 0x0000015AB5312B48>],
             '$74compare_op.2': [<numba.core.ir.Assign object at 0x0000015AB5312FC8>],
             '$76pred': [<numba.core.ir.Assign object at 0x0000015AB53152C8>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x0000015AB5315408>],
             '$82call_function.2': [<numba.core.ir.Assign object at 0x0000015AB5315688>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x0000015AB5315B88>],
             '$94pred': [<numba.core.ir.Assign object at 0x0000015AB5315E48>],
             '$const110.2': [<numba.core.ir.Assign object at 0x0000015AB5317B48>],
             '$const132.6': [<numba.core.ir.Assign object at 0x0000015AB531B748>],
             '$const144.1': [<numba.core.ir.Assign object at 0x0000015AB531BE88>],
             '$const162.1': [<numba.core.ir.Assign object at 0x0000015AB531E808>],
             '$const168.0': [<numba.core.ir.Assign object at 0x0000015AB531EB88>],
             '$const30.6': [<numba.core.ir.Assign object at 0x0000015AB530B348>],
             '$const38.2': [<numba.core.ir.Assign object at 0x0000015AB530BA48>],
             '$const64.1': [<numba.core.ir.Assign object at 0x0000015AB5312748>],
             '$const80.1': [<numba.core.ir.Assign object at 0x0000015AB5315548>],
             '$const90.1': [<numba.core.ir.Assign object at 0x0000015AB5315A48>],
             '$const98.1': [<numba.core.ir.Assign object at 0x0000015AB53171C8>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x0000015AB52FD8C8>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x0000015AB530F9C8>],
             'ax': [<numba.core.ir.Assign object at 0x0000015AB530FF08>],
             'bool102': [<numba.core.ir.Assign object at 0x0000015AB5317488>],
             'bool140': [<numba.core.ir.Assign object at 0x0000015AB531BA88>],
             'bool34': [<numba.core.ir.Assign object at 0x0000015AB530B648>],
             'bool68': [<numba.core.ir.Assign object at 0x0000015AB5312A08>],
             'bool76': [<numba.core.ir.Assign object at 0x0000015AB5315188>],
             'bool94': [<numba.core.ir.Assign object at 0x0000015AB5315D08>],
             'inferred': [<numba.core.ir.Assign object at 0x0000015AB5317788>,
                          <numba.core.ir.Assign object at 0x0000015AB531B208>],
             'known_size': [<numba.core.ir.Assign object at 0x0000015AB52FDD08>,
                            <numba.core.ir.Assign object at 0x0000015AB530BE48>],
             'neg_ax': [<numba.core.ir.Assign object at 0x0000015AB530BE88>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x0000015AB52F65C8>,
                               <numba.core.ir.Assign object at 0x0000015AB530FFC8>],
             'ok': [<numba.core.ir.Assign object at 0x0000015AB5317C88>,
                    <numba.core.ir.Assign object at 0x0000015AB531B888>],
             'origsize': [<numba.core.ir.Assign object at 0x0000015AB5301048>],
             's': [<numba.core.ir.Assign object at 0x0000015AB530B048>],
             'shape': [<numba.core.ir.Assign object at 0x0000015AB52F6B48>]})
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG SSA violators {'inferred', 'num_neg_value', 'ok', 'known_size'}
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Fix SSA violator on var inferred
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5329D08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: origsize = arg(0, name=origsize)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: shape = arg(1, name=shape)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: num_neg_value = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: known_size = const(int, 1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 10
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 10
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5329D08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1858)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi20.0 = $18get_iter.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5329D08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $20for_iter.1 = iternext(value=$phi20.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi22.1 = $20for_iter.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $20for_iter.3, 22, 60
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 22
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5329D08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: ax = $22unpack_sequence.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: s = $22unpack_sequence.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const30.6 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $32compare_op.7 = s < $const30.6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool34 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1861),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $34pred, 36, 50
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 36
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5329D08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const38.2 = const(int, 1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: num_neg_value = $40inplace_add.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: neg_ax = ax
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 169
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 50
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5329D08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: known_size = $54inplace_multiply.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 169
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 60
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5329D08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 62
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 62
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5329D08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const64.1 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $66compare_op.2 = num_neg_value == $const64.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool68 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1867),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $68pred, 70, 88
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 70
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5329D08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $74compare_op.2 = origsize != known_size
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool76 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1868),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $76pred, 78, 168
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 78
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5329D08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const80.1 = const(str, total size of new array must be unchanged)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1869)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 88
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5329D08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const90.1 = const(int, 1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $92compare_op.2 = num_neg_value == $const90.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool94 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1871),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $94pred, 96, 160
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 96
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5329D08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const98.1 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $100compare_op.2 = known_size == $const98.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool102 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1873),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $102pred, 104, 118
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 104
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5329D08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: inferred = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG first assign: inferred
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG replaced with: inferred = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const110.2 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: ok = origsize == $const110.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 138
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 118
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5329D08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: inferred = origsize // known_size
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG replaced with: inferred.1 = origsize // known_size
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $130binary_modulo.5 = origsize % known_size
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const132.6 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: ok = $130binary_modulo.5 == $const132.6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 138
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 138
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5329D08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool140 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1875),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $140pred, 150, 142
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 142
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5329D08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const144.1 = const(str, total size of new array must be unchanged)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1880)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 150
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5329D08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: shape[neg_ax] = inferred
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 168
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 160
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5329D08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const162.1 = const(str, multiple negative shape values)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1884)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 168
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5329D08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const168.0 = const(NoneType, None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $170return_value.1 = cast(value=$const168.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return $170return_value.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 169
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5329D08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x0000015AB5329488>],
             118: [<numba.core.ir.Assign object at 0x0000015AB5329508>]})
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5329D08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: origsize = arg(0, name=origsize)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: shape = arg(1, name=shape)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: num_neg_value = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: known_size = const(int, 1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 10
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 10
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5329D08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1858)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi20.0 = $18get_iter.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5329D08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $20for_iter.1 = iternext(value=$phi20.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi22.1 = $20for_iter.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $20for_iter.3, 22, 60
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 22
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5329D08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: ax = $22unpack_sequence.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: s = $22unpack_sequence.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const30.6 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $32compare_op.7 = s < $const30.6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool34 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1861),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $34pred, 36, 50
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 36
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5329D08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const38.2 = const(int, 1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: num_neg_value = $40inplace_add.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: neg_ax = ax
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 169
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 50
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5329D08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: known_size = $54inplace_multiply.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 169
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 60
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5329D08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 62
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 62
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5329D08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const64.1 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $66compare_op.2 = num_neg_value == $const64.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool68 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1867),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $68pred, 70, 88
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 70
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5329D08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $74compare_op.2 = origsize != known_size
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool76 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1868),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $76pred, 78, 168
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 78
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5329D08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const80.1 = const(str, total size of new array must be unchanged)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1869)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 88
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5329D08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const90.1 = const(int, 1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $92compare_op.2 = num_neg_value == $const90.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool94 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1871),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $94pred, 96, 160
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 96
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5329D08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const98.1 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $100compare_op.2 = known_size == $const98.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool102 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1873),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $102pred, 104, 118
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 104
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5329D08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: inferred = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const110.2 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: ok = origsize == $const110.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 138
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 118
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5329D08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: inferred.1 = origsize // known_size
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $130binary_modulo.5 = origsize % known_size
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const132.6 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: ok = $130binary_modulo.5 == $const132.6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 138
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 138
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5329D08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool140 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1875),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $140pred, 150, 142
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 142
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5329D08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const144.1 = const(str, total size of new array must be unchanged)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1880)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 150
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5329D08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: shape[neg_ax] = inferred
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def var='inferred' stmt=shape[neg_ax] = inferred
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 150
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 138 from label 150
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 138
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 138
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 104
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG incoming_def inferred = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 118
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG incoming_def inferred.1 = origsize // known_size
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG replaced with: shape[neg_ax] = inferred.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 168
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 160
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5329D08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const162.1 = const(str, multiple negative shape values)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1884)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 168
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5329D08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const168.0 = const(NoneType, None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $170return_value.1 = cast(value=$const168.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return $170return_value.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 169
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5329D08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Fix SSA violator on var num_neg_value
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5329888>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: origsize = arg(0, name=origsize)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: shape = arg(1, name=shape)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: num_neg_value = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG first assign: num_neg_value
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG replaced with: num_neg_value = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: known_size = const(int, 1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 10
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 10
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5329888>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1858)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi20.0 = $18get_iter.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5329888>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $20for_iter.1 = iternext(value=$phi20.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi22.1 = $20for_iter.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $20for_iter.3, 22, 60
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 22
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5329888>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: ax = $22unpack_sequence.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: s = $22unpack_sequence.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const30.6 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $32compare_op.7 = s < $const30.6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool34 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1861),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $34pred, 36, 50
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 36
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5329888>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const38.2 = const(int, 1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: num_neg_value = $40inplace_add.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG replaced with: num_neg_value.1 = $40inplace_add.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: neg_ax = ax
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 169
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 50
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5329888>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: known_size = $54inplace_multiply.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 169
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 60
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5329888>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 62
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 62
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5329888>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const64.1 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $66compare_op.2 = num_neg_value == $const64.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool68 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1867),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $68pred, 70, 88
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 70
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5329888>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $74compare_op.2 = origsize != known_size
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool76 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1868),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $76pred, 78, 168
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 78
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5329888>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const80.1 = const(str, total size of new array must be unchanged)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1869)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 88
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5329888>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const90.1 = const(int, 1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $92compare_op.2 = num_neg_value == $const90.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool94 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1871),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $94pred, 96, 160
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 96
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5329888>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const98.1 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $100compare_op.2 = known_size == $const98.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool102 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1873),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $102pred, 104, 118
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 104
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5329888>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: inferred = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const110.2 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: ok = origsize == $const110.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 138
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 118
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5329888>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: inferred.1 = origsize // known_size
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $130binary_modulo.5 = origsize % known_size
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const132.6 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: ok = $130binary_modulo.5 == $const132.6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 138
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 138
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5329888>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1874), Var(inferred.1, arrayobj.py:1877)], incoming_blocks=[104, 118])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool140 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1875),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $140pred, 150, 142
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 142
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5329888>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const144.1 = const(str, total size of new array must be unchanged)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1880)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 150
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5329888>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: shape[neg_ax] = inferred.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 168
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 160
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5329888>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const162.1 = const(str, multiple negative shape values)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1884)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 168
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5329888>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const168.0 = const(NoneType, None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $170return_value.1 = cast(value=$const168.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return $170return_value.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 169
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5329888>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000015AB53296C8>],
             36: [<numba.core.ir.Assign object at 0x0000015AB5329988>]})
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB52FDBC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: origsize = arg(0, name=origsize)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: shape = arg(1, name=shape)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: num_neg_value = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: known_size = const(int, 1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 10
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 10
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB52FDBC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1858)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi20.0 = $18get_iter.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB52FDBC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $20for_iter.1 = iternext(value=$phi20.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi22.1 = $20for_iter.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $20for_iter.3, 22, 60
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 22
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB52FDBC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: ax = $22unpack_sequence.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: s = $22unpack_sequence.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const30.6 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $32compare_op.7 = s < $const30.6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool34 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1861),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $34pred, 36, 50
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 36
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB52FDBC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const38.2 = const(int, 1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def var='num_neg_value' stmt=$40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 36
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 22 from label 36
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 22
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 22
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 20 from label 22
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 169
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 169
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 50
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 50
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 22 from label 50
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 22
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 22
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 20 from label 22
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG incoming_def num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 36
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG incoming_def num_neg_value.1 = $40inplace_add.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1862), Var(num_neg_value.1, arrayobj.py:1862)], incoming_blocks=[50, 36])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 10
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 10
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 0 from label 10
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 0
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG incoming_def num_neg_value = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG replaced with: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: num_neg_value.1 = $40inplace_add.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: neg_ax = ax
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 169
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 50
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB52FDBC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: known_size = $54inplace_multiply.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 169
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 60
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB52FDBC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 62
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 62
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB52FDBC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const64.1 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $66compare_op.2 = num_neg_value == $const64.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def var='num_neg_value' stmt=$66compare_op.2 = num_neg_value == $const64.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 62
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 60 from label 62
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 60
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 60
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 20 from label 60
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG replaced with: $66compare_op.2 = num_neg_value.2 == $const64.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool68 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1867),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $68pred, 70, 88
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 70
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB52FDBC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $74compare_op.2 = origsize != known_size
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool76 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1868),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $76pred, 78, 168
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 78
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB52FDBC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const80.1 = const(str, total size of new array must be unchanged)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1869)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 88
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB52FDBC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const90.1 = const(int, 1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $92compare_op.2 = num_neg_value == $const90.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def var='num_neg_value' stmt=$92compare_op.2 = num_neg_value == $const90.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 88
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 62 from label 88
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 62
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 62
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 60 from label 62
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 60
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 60
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 20 from label 60
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG replaced with: $92compare_op.2 = num_neg_value.2 == $const90.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool94 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1871),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $94pred, 96, 160
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 96
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB52FDBC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const98.1 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $100compare_op.2 = known_size == $const98.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool102 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1873),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $102pred, 104, 118
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 104
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB52FDBC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: inferred = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const110.2 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: ok = origsize == $const110.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 138
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 118
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB52FDBC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: inferred.1 = origsize // known_size
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $130binary_modulo.5 = origsize % known_size
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const132.6 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: ok = $130binary_modulo.5 == $const132.6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 138
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 138
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB52FDBC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1874), Var(inferred.1, arrayobj.py:1877)], incoming_blocks=[104, 118])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool140 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1875),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $140pred, 150, 142
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 142
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB52FDBC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const144.1 = const(str, total size of new array must be unchanged)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1880)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 150
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB52FDBC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: shape[neg_ax] = inferred.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 168
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 160
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB52FDBC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const162.1 = const(str, multiple negative shape values)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1884)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 168
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB52FDBC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const168.0 = const(NoneType, None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $170return_value.1 = cast(value=$const168.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return $170return_value.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 169
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB52FDBC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Fix SSA violator on var ok
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5315F48>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: origsize = arg(0, name=origsize)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: shape = arg(1, name=shape)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: num_neg_value = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: known_size = const(int, 1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 10
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 10
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5315F48>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1858)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi20.0 = $18get_iter.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5315F48>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1862), Var(num_neg_value, arrayobj.py:1858)], incoming_blocks=[169, 10])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $20for_iter.1 = iternext(value=$phi20.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi22.1 = $20for_iter.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $20for_iter.3, 22, 60
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 22
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5315F48>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: ax = $22unpack_sequence.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: s = $22unpack_sequence.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const30.6 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $32compare_op.7 = s < $const30.6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool34 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1861),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $34pred, 36, 50
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 36
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5315F48>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const38.2 = const(int, 1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: num_neg_value.1 = $40inplace_add.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: neg_ax = ax
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 169
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 50
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5315F48>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: known_size = $54inplace_multiply.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 169
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 60
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5315F48>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 62
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 62
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5315F48>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const64.1 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool68 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1867),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $68pred, 70, 88
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 70
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5315F48>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $74compare_op.2 = origsize != known_size
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool76 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1868),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $76pred, 78, 168
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 78
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5315F48>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const80.1 = const(str, total size of new array must be unchanged)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1869)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 88
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5315F48>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const90.1 = const(int, 1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool94 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1871),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $94pred, 96, 160
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 96
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5315F48>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const98.1 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $100compare_op.2 = known_size == $const98.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool102 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1873),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $102pred, 104, 118
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 104
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5315F48>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: inferred = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const110.2 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: ok = origsize == $const110.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG first assign: ok
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG replaced with: ok = origsize == $const110.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 138
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 118
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5315F48>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: inferred.1 = origsize // known_size
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $130binary_modulo.5 = origsize % known_size
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const132.6 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: ok = $130binary_modulo.5 == $const132.6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG replaced with: ok.1 = $130binary_modulo.5 == $const132.6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 138
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 138
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5315F48>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1874), Var(inferred.1, arrayobj.py:1877)], incoming_blocks=[104, 118])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool140 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1875),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $140pred, 150, 142
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 142
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5315F48>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const144.1 = const(str, total size of new array must be unchanged)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1880)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 150
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5315F48>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: shape[neg_ax] = inferred.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 168
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 160
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5315F48>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const162.1 = const(str, multiple negative shape values)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1884)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 168
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5315F48>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const168.0 = const(NoneType, None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $170return_value.1 = cast(value=$const168.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return $170return_value.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 169
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB5315F48>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1862), Var(num_neg_value.1, arrayobj.py:1862)], incoming_blocks=[50, 36])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x0000015AB5329448>],
             118: [<numba.core.ir.Assign object at 0x0000015AB52FDBC8>]})
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5312048>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: origsize = arg(0, name=origsize)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: shape = arg(1, name=shape)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: num_neg_value = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: known_size = const(int, 1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 10
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 10
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5312048>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1858)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi20.0 = $18get_iter.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5312048>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1862), Var(num_neg_value, arrayobj.py:1858)], incoming_blocks=[169, 10])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $20for_iter.1 = iternext(value=$phi20.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi22.1 = $20for_iter.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $20for_iter.3, 22, 60
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 22
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5312048>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: ax = $22unpack_sequence.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: s = $22unpack_sequence.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const30.6 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $32compare_op.7 = s < $const30.6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool34 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1861),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $34pred, 36, 50
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 36
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5312048>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const38.2 = const(int, 1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: num_neg_value.1 = $40inplace_add.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: neg_ax = ax
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 169
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 50
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5312048>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: known_size = $54inplace_multiply.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 169
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 60
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5312048>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 62
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 62
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5312048>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const64.1 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool68 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1867),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $68pred, 70, 88
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 70
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5312048>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $74compare_op.2 = origsize != known_size
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool76 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1868),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $76pred, 78, 168
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 78
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5312048>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const80.1 = const(str, total size of new array must be unchanged)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1869)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 88
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5312048>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const90.1 = const(int, 1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool94 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1871),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $94pred, 96, 160
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 96
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5312048>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const98.1 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $100compare_op.2 = known_size == $const98.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool102 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1873),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $102pred, 104, 118
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 104
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5312048>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: inferred = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const110.2 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: ok = origsize == $const110.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 138
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 118
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5312048>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: inferred.1 = origsize // known_size
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $130binary_modulo.5 = origsize % known_size
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const132.6 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: ok.1 = $130binary_modulo.5 == $const132.6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 138
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 138
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5312048>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1874), Var(inferred.1, arrayobj.py:1877)], incoming_blocks=[104, 118])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool140 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1875),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def var='ok' stmt=$140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1875),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 138
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 104
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG incoming_def ok = origsize == $const110.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 118
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG incoming_def ok.1 = $130binary_modulo.5 == $const132.6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG replaced with: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1879),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $140pred, 150, 142
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 142
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5312048>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const144.1 = const(str, total size of new array must be unchanged)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1880)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 150
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5312048>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: shape[neg_ax] = inferred.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 168
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 160
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5312048>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const162.1 = const(str, multiple negative shape values)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1884)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 168
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5312048>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const168.0 = const(NoneType, None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $170return_value.1 = cast(value=$const168.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return $170return_value.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 169
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5312048>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1862), Var(num_neg_value.1, arrayobj.py:1862)], incoming_blocks=[50, 36])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Fix SSA violator on var known_size
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB531EF88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: origsize = arg(0, name=origsize)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: shape = arg(1, name=shape)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: num_neg_value = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: known_size = const(int, 1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG first assign: known_size
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG replaced with: known_size = const(int, 1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 10
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 10
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB531EF88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1858)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi20.0 = $18get_iter.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB531EF88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1862), Var(num_neg_value, arrayobj.py:1858)], incoming_blocks=[169, 10])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $20for_iter.1 = iternext(value=$phi20.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi22.1 = $20for_iter.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $20for_iter.3, 22, 60
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 22
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB531EF88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: ax = $22unpack_sequence.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: s = $22unpack_sequence.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const30.6 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $32compare_op.7 = s < $const30.6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool34 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1861),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $34pred, 36, 50
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 36
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB531EF88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const38.2 = const(int, 1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: num_neg_value.1 = $40inplace_add.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: neg_ax = ax
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 169
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 50
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB531EF88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: known_size = $54inplace_multiply.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG replaced with: known_size.1 = $54inplace_multiply.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 169
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 60
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB531EF88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 62
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 62
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB531EF88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const64.1 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool68 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1867),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $68pred, 70, 88
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 70
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB531EF88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $74compare_op.2 = origsize != known_size
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool76 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1868),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $76pred, 78, 168
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 78
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB531EF88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const80.1 = const(str, total size of new array must be unchanged)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1869)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 88
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB531EF88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const90.1 = const(int, 1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool94 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1871),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $94pred, 96, 160
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 96
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB531EF88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const98.1 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $100compare_op.2 = known_size == $const98.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool102 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1873),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $102pred, 104, 118
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 104
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB531EF88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: inferred = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const110.2 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: ok = origsize == $const110.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 138
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 118
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB531EF88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: inferred.1 = origsize // known_size
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $130binary_modulo.5 = origsize % known_size
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const132.6 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: ok.1 = $130binary_modulo.5 == $const132.6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 138
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 138
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB531EF88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1875), Var(ok.1, arrayobj.py:1878)], incoming_blocks=[104, 118])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1874), Var(inferred.1, arrayobj.py:1877)], incoming_blocks=[104, 118])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool140 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1879),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $140pred, 150, 142
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 142
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB531EF88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const144.1 = const(str, total size of new array must be unchanged)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1880)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 150
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB531EF88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: shape[neg_ax] = inferred.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 168
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 160
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB531EF88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const162.1 = const(str, multiple negative shape values)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1884)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 168
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB531EF88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const168.0 = const(NoneType, None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $170return_value.1 = cast(value=$const168.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return $170return_value.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 169
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015AB531EF88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1862), Var(num_neg_value.1, arrayobj.py:1862)], incoming_blocks=[50, 36])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000015AB53292C8>],
             50: [<numba.core.ir.Assign object at 0x0000015AB5329D08>]})
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5315F48>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: origsize = arg(0, name=origsize)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: shape = arg(1, name=shape)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: num_neg_value = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: known_size = const(int, 1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 10
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 10
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5315F48>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1858)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi20.0 = $18get_iter.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5315F48>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1862), Var(num_neg_value, arrayobj.py:1858)], incoming_blocks=[169, 10])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $20for_iter.1 = iternext(value=$phi20.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi22.1 = $20for_iter.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $20for_iter.3, 22, 60
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 22
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5315F48>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: ax = $22unpack_sequence.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: s = $22unpack_sequence.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const30.6 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $32compare_op.7 = s < $const30.6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool34 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1861),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $34pred, 36, 50
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 36
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5315F48>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const38.2 = const(int, 1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: num_neg_value.1 = $40inplace_add.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: neg_ax = ax
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 169
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 50
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5315F48>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def var='known_size' stmt=$54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 50
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 22 from label 50
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 22
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 22
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 20 from label 22
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 169
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 169
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 50
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG incoming_def known_size.1 = $54inplace_multiply.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 36
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 36
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 22 from label 36
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 22
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 22
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 20 from label 22
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG incoming_def known_size.2 = phi(incoming_values=[], incoming_blocks=[])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1865), Var(known_size.2, arrayobj.py:1865)], incoming_blocks=[50, 36])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 10
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 10
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 0 from label 10
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 0
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG incoming_def known_size = const(int, 1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG replaced with: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: known_size.1 = $54inplace_multiply.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 169
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 60
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5315F48>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 62
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 62
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5315F48>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const64.1 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool68 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1867),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $68pred, 70, 88
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 70
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5315F48>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $74compare_op.2 = origsize != known_size
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def var='known_size' stmt=$74compare_op.2 = origsize != known_size
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 70
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 62 from label 70
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 62
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 62
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 60 from label 62
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 60
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 60
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 20 from label 60
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG replaced with: $74compare_op.2 = origsize != known_size.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool76 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1868),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $76pred, 78, 168
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 78
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5315F48>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const80.1 = const(str, total size of new array must be unchanged)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1869)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 88
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5315F48>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const90.1 = const(int, 1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool94 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1871),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $94pred, 96, 160
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 96
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5315F48>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const98.1 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $100compare_op.2 = known_size == $const98.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def var='known_size' stmt=$100compare_op.2 = known_size == $const98.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 96
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 88 from label 96
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 88
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 88
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 62 from label 88
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 62
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 62
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 60 from label 62
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 60
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 60
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 20 from label 60
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG replaced with: $100compare_op.2 = known_size.2 == $const98.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool102 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1873),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $102pred, 104, 118
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 104
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5315F48>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: inferred = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const110.2 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: ok = origsize == $const110.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 138
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 118
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5315F48>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: inferred.1 = origsize // known_size
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def var='known_size' stmt=inferred.1 = origsize // known_size
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 118
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 96 from label 118
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 96
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 96
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 88 from label 96
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 88
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 88
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 62 from label 88
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 62
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 62
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 60 from label 62
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 60
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 60
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 20 from label 60
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG replaced with: inferred.1 = origsize // known_size.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $130binary_modulo.5 = origsize % known_size
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def var='known_size' stmt=$130binary_modulo.5 = origsize % known_size
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 118
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 96 from label 118
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 96
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 96
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 88 from label 96
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 88
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 88
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 62 from label 88
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 62
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 62
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 60 from label 62
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 60
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 60
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 20 from label 60
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG replaced with: $130binary_modulo.5 = origsize % known_size.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const132.6 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: ok.1 = $130binary_modulo.5 == $const132.6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 138
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 138
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5315F48>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1875), Var(ok.1, arrayobj.py:1878)], incoming_blocks=[104, 118])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1874), Var(inferred.1, arrayobj.py:1877)], incoming_blocks=[104, 118])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool140 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1879),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $140pred, 150, 142
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 142
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5315F48>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const144.1 = const(str, total size of new array must be unchanged)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1880)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 150
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5315F48>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: shape[neg_ax] = inferred.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 168
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 160
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5315F48>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const162.1 = const(str, multiple negative shape values)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1884)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 168
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5315F48>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const168.0 = const(NoneType, None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $170return_value.1 = cast(value=$const168.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return $170return_value.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 169
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015AB5315F48>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1862), Var(num_neg_value.1, arrayobj.py:1862)], incoming_blocks=[50, 36])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 20
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=416)
           2	LOAD_DEREF(arg=0, lineno=416)
           4	STORE_FAST(arg=1, lineno=416)
           6	SETUP_LOOP(arg=30, lineno=417)
           8	LOAD_GLOBAL(arg=0, lineno=417)
          10	LOAD_METHOD(arg=1, lineno=417)
          12	LOAD_FAST(arg=0, lineno=417)
          14	CALL_METHOD(arg=1, lineno=417)
          16	GET_ITER(arg=None, lineno=417)
>         18	FOR_ITER(arg=16, lineno=417)
          20	STORE_FAST(arg=2, lineno=417)
          22	LOAD_FAST(arg=1, lineno=418)
          24	LOAD_FAST(arg=2, lineno=418)
          26	LOAD_METHOD(arg=2, lineno=418)
          28	CALL_METHOD(arg=0, lineno=418)
          30	INPLACE_ADD(arg=None, lineno=418)
          32	STORE_FAST(arg=1, lineno=418)
          34	JUMP_ABSOLUTE(arg=18, lineno=418)
>         36	POP_BLOCK(arg=None, lineno=418)
>         38	LOAD_FAST(arg=1, lineno=419)
          40	LOAD_FAST(arg=0, lineno=419)
          42	LOAD_ATTR(arg=3, lineno=419)
          44	BINARY_TRUE_DIVIDE(arg=None, lineno=419)
          46	RETURN_VALUE(arg=None, lineno=419)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=416)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=416)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=4, inst=STORE_FAST(arg=1, lineno=416)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$2load_deref.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=6, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=6 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=6, inst=SETUP_LOOP(arg=30, lineno=417)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=8, inst=LOAD_GLOBAL(arg=0, lineno=417)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=10, inst=LOAD_METHOD(arg=1, lineno=417)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$8load_global.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=417)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$10load_method.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=417)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$10load_method.1', '$arr12.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=16, inst=GET_ITER(arg=None, lineno=417)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$14call_method.3']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=18, stack=('$16get_iter.4',), blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=18 nstack_initial=1)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: ['$phi18.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=18, inst=FOR_ITER(arg=16, lineno=417)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi18.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=36, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=20, stack=('$phi18.0', '$18for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=20 nstack_initial=2)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=36, inst=POP_BLOCK(arg=None, lineno=418)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=38, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=20 nstack_initial=2), State(pc_initial=38 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: ['$phi20.0', '$phi20.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=20, inst=STORE_FAST(arg=2, lineno=417)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi20.0', '$phi20.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=22, inst=LOAD_FAST(arg=1, lineno=418)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi20.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=24, inst=LOAD_FAST(arg=2, lineno=418)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi20.0', '$c22.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=26, inst=LOAD_METHOD(arg=2, lineno=418)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi20.0', '$c22.2', '$v24.3']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=28, inst=CALL_METHOD(arg=0, lineno=418)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi20.0', '$c22.2', '$26load_method.4']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=30, inst=INPLACE_ADD(arg=None, lineno=418)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi20.0', '$c22.2', '$28call_method.5']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=32, inst=STORE_FAST(arg=1, lineno=418)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi20.0', '$30inplace_add.6']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=34, inst=JUMP_ABSOLUTE(arg=18, lineno=418)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi20.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=18, stack=('$phi20.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=38 nstack_initial=0), State(pc_initial=18 nstack_initial=1)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=38, inst=LOAD_FAST(arg=1, lineno=419)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=40, inst=LOAD_FAST(arg=0, lineno=419)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$c38.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=42, inst=LOAD_ATTR(arg=3, lineno=419)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$c38.0', '$arr40.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=44, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=419)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$c38.0', '$42load_attr.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=419)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$44binary_true_divide.3']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=18 nstack_initial=1)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG -------------------------Prune PHIs-------------------------
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=6 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=1): {'$phi18.0'},
             State(pc_initial=20 nstack_initial=2): {'$phi20.1'},
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=38 nstack_initial=0): set()})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG defmap: {'$phi18.0': State(pc_initial=6 nstack_initial=0),
 '$phi20.1': State(pc_initial=18 nstack_initial=1)}
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0)),
                          ('$phi20.0', State(pc_initial=20 nstack_initial=2))},
             '$phi20.0': {('$phi18.0', State(pc_initial=18 nstack_initial=1))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0)),
                          ('$phi18.0', State(pc_initial=18 nstack_initial=1))},
             '$phi20.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.4',
                           State(pc_initial=6 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG keep phismap: {'$phi18.0': {('$16get_iter.4', State(pc_initial=6 nstack_initial=0))},
 '$phi20.1': {('$18for_iter.2', State(pc_initial=18 nstack_initial=1))}}
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=6 nstack_initial=0): {'$phi18.0': '$16get_iter.4'},
             State(pc_initial=18 nstack_initial=1): {'$phi20.1': '$18for_iter.2'}})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG ----------------------DONE Prune PHIs-----------------------
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'value': '$2load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={6: ()})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=6 nstack_initial=0):
AdaptBlockInfo(insts=((8, {'res': '$8load_global.0'}), (10, {'item': '$8load_global.0', 'res': '$10load_method.1'}), (12, {'res': '$arr12.2'}), (14, {'func': '$10load_method.1', 'args': ['$arr12.2'], 'res': '$14call_method.3'}), (16, {'value': '$14call_method.3', 'res': '$16get_iter.4'})), outgoing_phis={'$phi18.0': '$16get_iter.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: ('$16get_iter.4',)})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=18 nstack_initial=1):
AdaptBlockInfo(insts=((18, {'iterator': '$phi18.0', 'pair': '$18for_iter.1', 'indval': '$18for_iter.2', 'pred': '$18for_iter.3'}),), outgoing_phis={'$phi20.1': '$18for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: (), 20: ('$phi18.0', '$18for_iter.2')})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=20 nstack_initial=2):
AdaptBlockInfo(insts=((20, {'value': '$phi20.1'}), (22, {'res': '$c22.2'}), (24, {'res': '$v24.3'}), (26, {'item': '$v24.3', 'res': '$26load_method.4'}), (28, {'func': '$26load_method.4', 'args': [], 'res': '$28call_method.5'}), (30, {'lhs': '$c22.2', 'rhs': '$28call_method.5', 'res': '$30inplace_add.6'}), (32, {'value': '$30inplace_add.6'}), (34, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={18: ('$phi20.0',)})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 38, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={38: ()})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=38 nstack_initial=0):
AdaptBlockInfo(insts=((38, {'res': '$c38.0'}), (40, {'res': '$arr40.1'}), (42, {'item': '$arr40.1', 'res': '$42load_attr.2'}), (44, {'lhs': '$c38.0', 'rhs': '$42load_attr.2', 'res': '$44binary_true_divide.3'}), (46, {'retval': '$44binary_true_divide.3', 'castval': '$46return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:43 interpreter.py DEBUG label 0:
    arr = arg(0, name=arr)                   ['arr']
    c = freevar(zero: 0.0)                   ['c']
    jump 6                                   []
label 6:
    $8load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>) ['$8load_global.0']
    $10load_method.1 = getattr(value=$8load_global.0, attr=nditer) ['$10load_method.1', '$8load_global.0']
    $14call_method.3 = call $10load_method.1(arr, func=$10load_method.1, args=[Var(arr, arraymath.py:416)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_method.1', '$14call_method.3', 'arr']
    $16get_iter.4 = getiter(value=$14call_method.3) ['$14call_method.3', '$16get_iter.4']
    $phi18.0 = $16get_iter.4                 ['$16get_iter.4', '$phi18.0']
    jump 18                                  []
label 18:
    $18for_iter.1 = iternext(value=$phi18.0) ['$18for_iter.1', '$phi18.0']
    $18for_iter.2 = pair_first(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.2']
    $18for_iter.3 = pair_second(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.3']
    $phi20.1 = $18for_iter.2                 ['$18for_iter.2', '$phi20.1']
    branch $18for_iter.3, 20, 36             ['$18for_iter.3']
label 20:
    v = $phi20.1                             ['$phi20.1', 'v']
    $26load_method.4 = getattr(value=v, attr=item) ['$26load_method.4', 'v']
    $28call_method.5 = call $26load_method.4(func=$26load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$26load_method.4', '$28call_method.5']
    $30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined) ['$28call_method.5', '$30inplace_add.6', 'c']
    c = $30inplace_add.6                     ['$30inplace_add.6', 'c']
    jump 18                                  []
label 36:
    jump 38                                  []
label 38:
    $42load_attr.2 = getattr(value=arr, attr=size) ['$42load_attr.2', 'arr']
    $44binary_true_divide.3 = c / $42load_attr.2 ['$42load_attr.2', '$44binary_true_divide.3', 'c']
    $46return_value.4 = cast(value=$44binary_true_divide.3) ['$44binary_true_divide.3', '$46return_value.4']
    return $46return_value.4                 ['$46return_value.4']

Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 0
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A42107C08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: arr = arg(0, name=arr)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: c = freevar(zero: 0.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A42107C08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $8load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $10load_method.1 = getattr(value=$8load_global.0, attr=nditer)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $14call_method.3 = call $10load_method.1(arr, func=$10load_method.1, args=[Var(arr, arraymath.py:416)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $16get_iter.4 = getiter(value=$14call_method.3)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi18.0 = $16get_iter.4
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 18
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 18
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A42107C08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $18for_iter.1 = iternext(value=$phi18.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi20.1 = $18for_iter.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $18for_iter.3, 20, 36
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A42107C08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: v = $phi20.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $26load_method.4 = getattr(value=v, attr=item)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $28call_method.5 = call $26load_method.4(func=$26load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: c = $30inplace_add.6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 18
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 36
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A42107C08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 38
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 38
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A42107C08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $42load_attr.2 = getattr(value=arr, attr=size)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $44binary_true_divide.3 = c / $42load_attr.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $46return_value.4 = cast(value=$44binary_true_divide.3)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return $46return_value.4
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG defs defaultdict(<class 'list'>,
            {'$10load_method.1': [<numba.core.ir.Assign object at 0x0000015A56246EC8>],
             '$14call_method.3': [<numba.core.ir.Assign object at 0x0000015A56246648>],
             '$16get_iter.4': [<numba.core.ir.Assign object at 0x0000015A56246BC8>],
             '$18for_iter.1': [<numba.core.ir.Assign object at 0x0000015A56246348>],
             '$18for_iter.2': [<numba.core.ir.Assign object at 0x0000015A56246188>],
             '$18for_iter.3': [<numba.core.ir.Assign object at 0x0000015A56246488>],
             '$26load_method.4': [<numba.core.ir.Assign object at 0x0000015A38B88F48>],
             '$28call_method.5': [<numba.core.ir.Assign object at 0x0000015A38B88548>],
             '$30inplace_add.6': [<numba.core.ir.Assign object at 0x0000015A38B885C8>],
             '$42load_attr.2': [<numba.core.ir.Assign object at 0x0000015A57451608>],
             '$44binary_true_divide.3': [<numba.core.ir.Assign object at 0x0000015A57451EC8>],
             '$46return_value.4': [<numba.core.ir.Assign object at 0x0000015A39C7A288>],
             '$8load_global.0': [<numba.core.ir.Assign object at 0x0000015A56246688>],
             '$phi18.0': [<numba.core.ir.Assign object at 0x0000015A56246D48>],
             '$phi20.1': [<numba.core.ir.Assign object at 0x0000015A562469C8>],
             'arr': [<numba.core.ir.Assign object at 0x0000015A56E2B4C8>],
             'c': [<numba.core.ir.Assign object at 0x0000015A56E2B548>,
                   <numba.core.ir.Assign object at 0x0000015A39C696C8>],
             'v': [<numba.core.ir.Assign object at 0x0000015A39C697C8>]})
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG SSA violators {'c'}
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Fix SSA violator on var c
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A42107988>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: arr = arg(0, name=arr)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: c = freevar(zero: 0.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG first assign: c
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG replaced with: c = freevar(zero: 0.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A42107988>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $8load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $10load_method.1 = getattr(value=$8load_global.0, attr=nditer)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $14call_method.3 = call $10load_method.1(arr, func=$10load_method.1, args=[Var(arr, arraymath.py:416)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $16get_iter.4 = getiter(value=$14call_method.3)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi18.0 = $16get_iter.4
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 18
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 18
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A42107988>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $18for_iter.1 = iternext(value=$phi18.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi20.1 = $18for_iter.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $18for_iter.3, 20, 36
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A42107988>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: v = $phi20.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $26load_method.4 = getattr(value=v, attr=item)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $28call_method.5 = call $26load_method.4(func=$26load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: c = $30inplace_add.6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG replaced with: c.1 = $30inplace_add.6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 18
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 36
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A42107988>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 38
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 38
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A42107988>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $42load_attr.2 = getattr(value=arr, attr=size)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $44binary_true_divide.3 = c / $42load_attr.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $46return_value.4 = cast(value=$44binary_true_divide.3)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return $46return_value.4
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000015A42107848>],
             20: [<numba.core.ir.Assign object at 0x0000015A421076C8>]})
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42107988>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: arr = arg(0, name=arr)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: c = freevar(zero: 0.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42107988>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $8load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $10load_method.1 = getattr(value=$8load_global.0, attr=nditer)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $14call_method.3 = call $10load_method.1(arr, func=$10load_method.1, args=[Var(arr, arraymath.py:416)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $16get_iter.4 = getiter(value=$14call_method.3)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi18.0 = $16get_iter.4
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 18
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 18
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42107988>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $18for_iter.1 = iternext(value=$phi18.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi20.1 = $18for_iter.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $18for_iter.3, 20, 36
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42107988>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: v = $phi20.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $26load_method.4 = getattr(value=v, attr=item)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $28call_method.5 = call $26load_method.4(func=$26load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def var='c' stmt=$30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 18 from label 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 18
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 18
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG insert phi node c.2 = phi(incoming_values=[], incoming_blocks=[]) at 18
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 20
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG incoming_def c.1 = $30inplace_add.6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 0 from label 6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 0
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG incoming_def c = freevar(zero: 0.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG replaced with: $30inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c.2, rhs=$28call_method.5, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: c.1 = $30inplace_add.6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 18
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 36
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42107988>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 38
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 38
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42107988>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $42load_attr.2 = getattr(value=arr, attr=size)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $44binary_true_divide.3 = c / $42load_attr.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def var='c' stmt=$44binary_true_divide.3 = c / $42load_attr.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 38
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 36 from label 38
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 36
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 36
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 18 from label 36
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 18
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG replaced with: $44binary_true_divide.3 = c.2 / $42load_attr.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $46return_value.4 = cast(value=$44binary_true_divide.3)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return $46return_value.4
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=407)
           2	LOAD_FAST(arg=0, lineno=407)
           4	LOAD_ATTR(arg=0, lineno=407)
           6	LOAD_CONST(arg=1, lineno=407)
           8	BINARY_SUBSCR(arg=None, lineno=407)
          10	STORE_FAST(arg=6, lineno=407)
          12	LOAD_FAST(arg=0, lineno=408)
          14	LOAD_ATTR(arg=0, lineno=408)
          16	LOAD_CONST(arg=2, lineno=408)
          18	BINARY_SUBSCR(arg=None, lineno=408)
          20	STORE_FAST(arg=7, lineno=408)
          22	LOAD_GLOBAL(arg=1, lineno=410)
          24	LOAD_ATTR(arg=2, lineno=410)
          26	LOAD_FAST(arg=0, lineno=410)
          28	LOAD_ATTR(arg=3, lineno=410)
          30	LOAD_GLOBAL(arg=1, lineno=410)
          32	LOAD_ATTR(arg=4, lineno=410)
          34	LOAD_CONST(arg=3, lineno=410)
          36	CALL_FUNCTION_KW(arg=2, lineno=410)
          38	STORE_FAST(arg=8, lineno=410)
          40	LOAD_GLOBAL(arg=1, lineno=411)
          42	LOAD_ATTR(arg=2, lineno=411)
          44	LOAD_FAST(arg=0, lineno=411)
          46	LOAD_ATTR(arg=3, lineno=411)
          48	LOAD_GLOBAL(arg=1, lineno=411)
          50	LOAD_ATTR(arg=4, lineno=411)
          52	LOAD_CONST(arg=3, lineno=411)
          54	CALL_FUNCTION_KW(arg=2, lineno=411)
          56	STORE_FAST(arg=9, lineno=411)
          58	LOAD_GLOBAL(arg=1, lineno=412)
          60	LOAD_ATTR(arg=2, lineno=412)
          62	LOAD_FAST(arg=0, lineno=412)
          64	LOAD_ATTR(arg=3, lineno=412)
          66	LOAD_GLOBAL(arg=1, lineno=412)
          68	LOAD_ATTR(arg=5, lineno=412)
          70	LOAD_CONST(arg=3, lineno=412)
          72	CALL_FUNCTION_KW(arg=2, lineno=412)
          74	STORE_FAST(arg=10, lineno=412)
          76	LOAD_FAST(arg=4, lineno=413)
          78	POP_JUMP_IF_FALSE(arg=100, lineno=413)
          80	LOAD_GLOBAL(arg=1, lineno=414)
          82	LOAD_ATTR(arg=2, lineno=414)
          84	LOAD_FAST(arg=0, lineno=414)
          86	LOAD_ATTR(arg=3, lineno=414)
          88	LOAD_GLOBAL(arg=1, lineno=414)
          90	LOAD_ATTR(arg=5, lineno=414)
          92	LOAD_CONST(arg=3, lineno=414)
          94	CALL_FUNCTION_KW(arg=2, lineno=414)
          96	STORE_FAST(arg=11, lineno=414)
          98	JUMP_FORWARD(arg=4, lineno=414)
>        100	LOAD_CONST(arg=4, lineno=416)
         102	STORE_FAST(arg=11, lineno=416)
>        104	SETUP_LOOP(arg=244, lineno=418)
         106	LOAD_GLOBAL(arg=6, lineno=418)
         108	LOAD_FAST(arg=6, lineno=418)
         110	CALL_FUNCTION(arg=1, lineno=418)
         112	GET_ITER(arg=None, lineno=418)
>        114	FOR_ITER(arg=232, lineno=418)
         116	STORE_FAST(arg=12, lineno=418)
         118	SETUP_LOOP(arg=226, lineno=419)
         120	LOAD_GLOBAL(arg=6, lineno=419)
         122	LOAD_FAST(arg=7, lineno=419)
         124	CALL_FUNCTION(arg=1, lineno=419)
         126	GET_ITER(arg=None, lineno=419)
>        128	FOR_ITER(arg=214, lineno=419)
         130	STORE_FAST(arg=13, lineno=419)
         132	LOAD_FAST(arg=0, lineno=420)
         134	LOAD_FAST(arg=12, lineno=420)
         136	LOAD_FAST(arg=13, lineno=420)
         138	BUILD_TUPLE(arg=2, lineno=420)
         140	BINARY_SUBSCR(arg=None, lineno=420)
         142	LOAD_CONST(arg=5, lineno=420)
         144	COMPARE_OP(arg=2, lineno=420)
         146	POP_JUMP_IF_FALSE(arg=150, lineno=420)
         148	JUMP_ABSOLUTE(arg=128, lineno=421)
>        150	LOAD_FAST(arg=5, lineno=424)
         152	LOAD_CONST(arg=6, lineno=424)
         154	COMPARE_OP(arg=2, lineno=424)
         156	LOAD_FAST(arg=0, lineno=424)
         158	LOAD_FAST(arg=12, lineno=424)
         160	LOAD_FAST(arg=13, lineno=424)
         162	BUILD_TUPLE(arg=2, lineno=424)
         164	BINARY_SUBSCR(arg=None, lineno=424)
         166	LOAD_FAST(arg=12, lineno=424)
         168	COMPARE_OP(arg=2, lineno=424)
         170	BINARY_AND(arg=None, lineno=424)
         172	POP_JUMP_IF_FALSE(arg=180, lineno=424)
         174	LOAD_CONST(arg=7, lineno=425)
         176	STORE_FAST(arg=14, lineno=425)
         178	JUMP_FORWARD(arg=78, lineno=425)
>        180	LOAD_FAST(arg=1, lineno=426)
         182	LOAD_FAST(arg=12, lineno=426)
         184	LOAD_FAST(arg=13, lineno=426)
         186	BUILD_TUPLE(arg=2, lineno=426)
         188	BINARY_SUBSCR(arg=None, lineno=426)
         190	LOAD_FAST(arg=3, lineno=426)
         192	LOAD_FAST(arg=12, lineno=426)
         194	BINARY_SUBSCR(arg=None, lineno=426)
         196	BINARY_SUBTRACT(arg=None, lineno=426)
         198	LOAD_CONST(arg=7, lineno=426)
         200	COMPARE_OP(arg=1, lineno=426)
         202	POP_JUMP_IF_TRUE(arg=216, lineno=426)
         204	LOAD_FAST(arg=2, lineno=426)
         206	LOAD_FAST(arg=12, lineno=426)
         208	BINARY_SUBSCR(arg=None, lineno=426)
         210	LOAD_CONST(arg=7, lineno=426)
         212	COMPARE_OP(arg=2, lineno=426)
         214	POP_JUMP_IF_FALSE(arg=222, lineno=426)
>        216	LOAD_CONST(arg=8, lineno=427)
         218	STORE_FAST(arg=14, lineno=427)
         220	JUMP_FORWARD(arg=36, lineno=427)
>        222	LOAD_GLOBAL(arg=1, lineno=429)
         224	LOAD_METHOD(arg=7, lineno=429)
         226	LOAD_FAST(arg=1, lineno=429)
         228	LOAD_FAST(arg=12, lineno=429)
         230	LOAD_FAST(arg=13, lineno=429)
         232	BUILD_TUPLE(arg=2, lineno=429)
         234	BINARY_SUBSCR(arg=None, lineno=429)
         236	LOAD_FAST(arg=3, lineno=429)
         238	LOAD_FAST(arg=12, lineno=429)
         240	BINARY_SUBSCR(arg=None, lineno=429)
         242	BINARY_SUBTRACT(arg=None, lineno=429)
         244	LOAD_FAST(arg=2, lineno=429)
         246	LOAD_FAST(arg=12, lineno=429)
         248	BINARY_SUBSCR(arg=None, lineno=429)
         250	BINARY_TRUE_DIVIDE(arg=None, lineno=429)
         252	UNARY_NEGATIVE(arg=None, lineno=429)
         254	CALL_METHOD(arg=1, lineno=429)
         256	STORE_FAST(arg=14, lineno=429)
>        258	LOAD_FAST(arg=12, lineno=431)
         260	LOAD_FAST(arg=8, lineno=431)
         262	LOAD_FAST(arg=12, lineno=431)
         264	LOAD_FAST(arg=7, lineno=431)
         266	BINARY_MULTIPLY(arg=None, lineno=431)
         268	LOAD_FAST(arg=13, lineno=431)
         270	BINARY_ADD(arg=None, lineno=431)
         272	STORE_SUBSCR(arg=None, lineno=431)
         274	LOAD_FAST(arg=0, lineno=432)
         276	LOAD_FAST(arg=12, lineno=432)
         278	LOAD_FAST(arg=13, lineno=432)
         280	BUILD_TUPLE(arg=2, lineno=432)
         282	BINARY_SUBSCR(arg=None, lineno=432)
         284	LOAD_FAST(arg=9, lineno=432)
         286	LOAD_FAST(arg=12, lineno=432)
         288	LOAD_FAST(arg=7, lineno=432)
         290	BINARY_MULTIPLY(arg=None, lineno=432)
         292	LOAD_FAST(arg=13, lineno=432)
         294	BINARY_ADD(arg=None, lineno=432)
         296	STORE_SUBSCR(arg=None, lineno=432)
         298	LOAD_FAST(arg=14, lineno=433)
         300	LOAD_FAST(arg=10, lineno=433)
         302	LOAD_FAST(arg=12, lineno=433)
         304	LOAD_FAST(arg=7, lineno=433)
         306	BINARY_MULTIPLY(arg=None, lineno=433)
         308	LOAD_FAST(arg=13, lineno=433)
         310	BINARY_ADD(arg=None, lineno=433)
         312	STORE_SUBSCR(arg=None, lineno=433)
         314	LOAD_FAST(arg=4, lineno=434)
         316	POP_JUMP_IF_FALSE(arg=128, lineno=434)
         318	LOAD_FAST(arg=1, lineno=435)
         320	LOAD_FAST(arg=12, lineno=435)
         322	LOAD_FAST(arg=13, lineno=435)
         324	BUILD_TUPLE(arg=2, lineno=435)
         326	BINARY_SUBSCR(arg=None, lineno=435)
         328	LOAD_FAST(arg=11, lineno=435)
         330	LOAD_FAST(arg=12, lineno=435)
         332	LOAD_FAST(arg=7, lineno=435)
         334	BINARY_MULTIPLY(arg=None, lineno=435)
         336	LOAD_FAST(arg=13, lineno=435)
         338	BINARY_ADD(arg=None, lineno=435)
         340	STORE_SUBSCR(arg=None, lineno=435)
         342	JUMP_ABSOLUTE(arg=128, lineno=435)
>        344	POP_BLOCK(arg=None, lineno=435)
>        346	JUMP_ABSOLUTE(arg=114, lineno=435)
>        348	POP_BLOCK(arg=None, lineno=435)
>        350	LOAD_FAST(arg=8, lineno=437)
         352	LOAD_FAST(arg=9, lineno=437)
         354	LOAD_FAST(arg=10, lineno=437)
         356	LOAD_FAST(arg=11, lineno=437)
         358	BUILD_TUPLE(arg=4, lineno=437)
         360	RETURN_VALUE(arg=None, lineno=437)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=407)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=407)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=407)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$knn_indices2.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=407)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$4load_attr.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=8, inst=BINARY_SUBSCR(arg=None, lineno=407)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$4load_attr.1', '$const6.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=10, inst=STORE_FAST(arg=6, lineno=407)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$8binary_subscr.3']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=408)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=14, inst=LOAD_ATTR(arg=0, lineno=408)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$knn_indices12.4']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=16, inst=LOAD_CONST(arg=2, lineno=408)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$14load_attr.5']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=18, inst=BINARY_SUBSCR(arg=None, lineno=408)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$14load_attr.5', '$const16.6']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=20, inst=STORE_FAST(arg=7, lineno=408)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$18binary_subscr.7']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=22, inst=LOAD_GLOBAL(arg=1, lineno=410)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=24, inst=LOAD_ATTR(arg=2, lineno=410)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$22load_global.8']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=410)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$24load_attr.9']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=28, inst=LOAD_ATTR(arg=3, lineno=410)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$24load_attr.9', '$knn_indices26.10']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=30, inst=LOAD_GLOBAL(arg=1, lineno=410)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$24load_attr.9', '$28load_attr.11']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=32, inst=LOAD_ATTR(arg=4, lineno=410)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$24load_attr.9', '$28load_attr.11', '$30load_global.12']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=34, inst=LOAD_CONST(arg=3, lineno=410)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$24load_attr.9', '$28load_attr.11', '$32load_attr.13']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=36, inst=CALL_FUNCTION_KW(arg=2, lineno=410)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$24load_attr.9', '$28load_attr.11', '$32load_attr.13', '$const34.14']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=38, inst=STORE_FAST(arg=8, lineno=410)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$36call_function_kw.15']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=40, inst=LOAD_GLOBAL(arg=1, lineno=411)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=42, inst=LOAD_ATTR(arg=2, lineno=411)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$40load_global.16']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=44, inst=LOAD_FAST(arg=0, lineno=411)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$42load_attr.17']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=46, inst=LOAD_ATTR(arg=3, lineno=411)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$42load_attr.17', '$knn_indices44.18']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=48, inst=LOAD_GLOBAL(arg=1, lineno=411)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$42load_attr.17', '$46load_attr.19']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=50, inst=LOAD_ATTR(arg=4, lineno=411)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$42load_attr.17', '$46load_attr.19', '$48load_global.20']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=52, inst=LOAD_CONST(arg=3, lineno=411)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$42load_attr.17', '$46load_attr.19', '$50load_attr.21']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=54, inst=CALL_FUNCTION_KW(arg=2, lineno=411)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$42load_attr.17', '$46load_attr.19', '$50load_attr.21', '$const52.22']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=56, inst=STORE_FAST(arg=9, lineno=411)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$54call_function_kw.23']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=58, inst=LOAD_GLOBAL(arg=1, lineno=412)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=60, inst=LOAD_ATTR(arg=2, lineno=412)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$58load_global.24']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=62, inst=LOAD_FAST(arg=0, lineno=412)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$60load_attr.25']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=64, inst=LOAD_ATTR(arg=3, lineno=412)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$60load_attr.25', '$knn_indices62.26']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=66, inst=LOAD_GLOBAL(arg=1, lineno=412)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$60load_attr.25', '$64load_attr.27']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=68, inst=LOAD_ATTR(arg=5, lineno=412)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$60load_attr.25', '$64load_attr.27', '$66load_global.28']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=70, inst=LOAD_CONST(arg=3, lineno=412)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$60load_attr.25', '$64load_attr.27', '$68load_attr.29']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=72, inst=CALL_FUNCTION_KW(arg=2, lineno=412)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$60load_attr.25', '$64load_attr.27', '$68load_attr.29', '$const70.30']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=74, inst=STORE_FAST(arg=10, lineno=412)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$72call_function_kw.31']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=76, inst=LOAD_FAST(arg=4, lineno=413)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=78, inst=POP_JUMP_IF_FALSE(arg=100, lineno=413)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$return_dists76.32']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=80, stack=(), blockstack=(), npush=0), Edge(pc=100, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=80 nstack_initial=0), State(pc_initial=100 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=80, inst=LOAD_GLOBAL(arg=1, lineno=414)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=82, inst=LOAD_ATTR(arg=2, lineno=414)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$80load_global.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=84, inst=LOAD_FAST(arg=0, lineno=414)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$82load_attr.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=86, inst=LOAD_ATTR(arg=3, lineno=414)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$82load_attr.1', '$knn_indices84.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=88, inst=LOAD_GLOBAL(arg=1, lineno=414)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$82load_attr.1', '$86load_attr.3']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=90, inst=LOAD_ATTR(arg=5, lineno=414)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$82load_attr.1', '$86load_attr.3', '$88load_global.4']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=92, inst=LOAD_CONST(arg=3, lineno=414)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$82load_attr.1', '$86load_attr.3', '$90load_attr.5']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=94, inst=CALL_FUNCTION_KW(arg=2, lineno=414)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$82load_attr.1', '$86load_attr.3', '$90load_attr.5', '$const92.6']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=96, inst=STORE_FAST(arg=11, lineno=414)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$94call_function_kw.7']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=98, inst=JUMP_FORWARD(arg=4, lineno=414)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=100 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=100, inst=LOAD_CONST(arg=4, lineno=416)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=102, inst=STORE_FAST(arg=11, lineno=416)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$const100.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=104, inst=SETUP_LOOP(arg=244, lineno=418)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=106, inst=LOAD_GLOBAL(arg=6, lineno=418)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=108, inst=LOAD_FAST(arg=6, lineno=418)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$106load_global.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=110, inst=CALL_FUNCTION(arg=1, lineno=418)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$106load_global.0', '$n_samples108.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=112, inst=GET_ITER(arg=None, lineno=418)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$110call_function.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=114, stack=('$112get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 350, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=114 nstack_initial=1)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=114 nstack_initial=1)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: ['$phi114.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=114, inst=FOR_ITER(arg=232, lineno=418)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi114.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=348, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 350, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=116, stack=('$phi114.0', '$114for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 350, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=348 nstack_initial=0), State(pc_initial=116 nstack_initial=2)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=348, inst=POP_BLOCK(arg=None, lineno=435)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=350, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=116 nstack_initial=2), State(pc_initial=350 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: ['$phi116.0', '$phi116.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=116, inst=STORE_FAST(arg=12, lineno=418)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi116.0', '$phi116.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=118, stack=('$phi116.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 350, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=350 nstack_initial=0), State(pc_initial=118 nstack_initial=1)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=350, inst=LOAD_FAST(arg=8, lineno=437)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=352, inst=LOAD_FAST(arg=9, lineno=437)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$rows350.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=354, inst=LOAD_FAST(arg=10, lineno=437)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$rows350.0', '$cols352.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=356, inst=LOAD_FAST(arg=11, lineno=437)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$rows350.0', '$cols352.1', '$vals354.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=358, inst=BUILD_TUPLE(arg=4, lineno=437)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$rows350.0', '$cols352.1', '$vals354.2', '$dists356.3']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=360, inst=RETURN_VALUE(arg=None, lineno=437)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$358build_tuple.4']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=118 nstack_initial=1)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: ['$phi118.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=118, inst=SETUP_LOOP(arg=226, lineno=419)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi118.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=120, inst=LOAD_GLOBAL(arg=6, lineno=419)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi118.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=122, inst=LOAD_FAST(arg=7, lineno=419)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi118.0', '$120load_global.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=124, inst=CALL_FUNCTION(arg=1, lineno=419)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi118.0', '$120load_global.1', '$n_neighbors122.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=126, inst=GET_ITER(arg=None, lineno=419)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi118.0', '$124call_function.3']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=128, stack=('$phi118.0', '$126get_iter.4'), blockstack=({'kind': BlockKind(LOOP), 'end': 350, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 346, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=128 nstack_initial=2)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: ['$phi128.0', '$phi128.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=128, inst=FOR_ITER(arg=214, lineno=419)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi128.0', '$phi128.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=344, stack=('$phi128.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 350, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 346, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0), Edge(pc=130, stack=('$phi128.0', '$phi128.1', '$128for_iter.3'), blockstack=({'kind': BlockKind(LOOP), 'end': 350, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 346, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=344 nstack_initial=1), State(pc_initial=130 nstack_initial=3)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: ['$phi344.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=344, inst=POP_BLOCK(arg=None, lineno=435)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi344.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=346, stack=('$phi344.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 350, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=130 nstack_initial=3), State(pc_initial=346 nstack_initial=1)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: ['$phi130.0', '$phi130.1', '$phi130.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=130, inst=STORE_FAST(arg=13, lineno=419)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi130.0', '$phi130.1', '$phi130.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=132, inst=LOAD_FAST(arg=0, lineno=420)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi130.0', '$phi130.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=134, inst=LOAD_FAST(arg=12, lineno=420)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi130.0', '$phi130.1', '$knn_indices132.3']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=136, inst=LOAD_FAST(arg=13, lineno=420)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi130.0', '$phi130.1', '$knn_indices132.3', '$i134.4']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=138, inst=BUILD_TUPLE(arg=2, lineno=420)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi130.0', '$phi130.1', '$knn_indices132.3', '$i134.4', '$j136.5']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=140, inst=BINARY_SUBSCR(arg=None, lineno=420)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi130.0', '$phi130.1', '$knn_indices132.3', '$138build_tuple.6']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=142, inst=LOAD_CONST(arg=5, lineno=420)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi130.0', '$phi130.1', '$140binary_subscr.7']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=144, inst=COMPARE_OP(arg=2, lineno=420)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi130.0', '$phi130.1', '$140binary_subscr.7', '$const142.8']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=146, inst=POP_JUMP_IF_FALSE(arg=150, lineno=420)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi130.0', '$phi130.1', '$144compare_op.9']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=148, stack=('$phi130.0', '$phi130.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 350, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 346, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0), Edge(pc=150, stack=('$phi130.0', '$phi130.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 350, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 346, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=346 nstack_initial=1), State(pc_initial=148 nstack_initial=2), State(pc_initial=150 nstack_initial=2)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: ['$phi346.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=346, inst=JUMP_ABSOLUTE(arg=114, lineno=435)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi346.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=114, stack=('$phi346.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 350, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=148 nstack_initial=2), State(pc_initial=150 nstack_initial=2), State(pc_initial=114 nstack_initial=1)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: ['$phi148.0', '$phi148.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=148, inst=JUMP_ABSOLUTE(arg=128, lineno=421)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi148.0', '$phi148.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=128, stack=('$phi148.0', '$phi148.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 350, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 346, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=150 nstack_initial=2), State(pc_initial=114 nstack_initial=1), State(pc_initial=128 nstack_initial=2)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: ['$phi150.0', '$phi150.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=150, inst=LOAD_FAST(arg=5, lineno=424)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi150.0', '$phi150.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=152, inst=LOAD_CONST(arg=6, lineno=424)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi150.0', '$phi150.1', '$bipartite150.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=154, inst=COMPARE_OP(arg=2, lineno=424)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi150.0', '$phi150.1', '$bipartite150.2', '$const152.3']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=156, inst=LOAD_FAST(arg=0, lineno=424)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi150.0', '$phi150.1', '$154compare_op.4']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=158, inst=LOAD_FAST(arg=12, lineno=424)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi150.0', '$phi150.1', '$154compare_op.4', '$knn_indices156.5']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=160, inst=LOAD_FAST(arg=13, lineno=424)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi150.0', '$phi150.1', '$154compare_op.4', '$knn_indices156.5', '$i158.6']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=162, inst=BUILD_TUPLE(arg=2, lineno=424)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi150.0', '$phi150.1', '$154compare_op.4', '$knn_indices156.5', '$i158.6', '$j160.7']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=164, inst=BINARY_SUBSCR(arg=None, lineno=424)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi150.0', '$phi150.1', '$154compare_op.4', '$knn_indices156.5', '$162build_tuple.8']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=166, inst=LOAD_FAST(arg=12, lineno=424)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi150.0', '$phi150.1', '$154compare_op.4', '$164binary_subscr.9']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=168, inst=COMPARE_OP(arg=2, lineno=424)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi150.0', '$phi150.1', '$154compare_op.4', '$164binary_subscr.9', '$i166.10']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=170, inst=BINARY_AND(arg=None, lineno=424)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi150.0', '$phi150.1', '$154compare_op.4', '$168compare_op.11']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=172, inst=POP_JUMP_IF_FALSE(arg=180, lineno=424)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi150.0', '$phi150.1', '$170binary_and.12']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=174, stack=('$phi150.0', '$phi150.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 350, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 346, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0), Edge(pc=180, stack=('$phi150.0', '$phi150.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 350, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 346, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=114 nstack_initial=1), State(pc_initial=128 nstack_initial=2), State(pc_initial=174 nstack_initial=2), State(pc_initial=180 nstack_initial=2)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=128 nstack_initial=2), State(pc_initial=174 nstack_initial=2), State(pc_initial=180 nstack_initial=2)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=174 nstack_initial=2), State(pc_initial=180 nstack_initial=2)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: ['$phi174.0', '$phi174.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=174, inst=LOAD_CONST(arg=7, lineno=425)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi174.0', '$phi174.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=176, inst=STORE_FAST(arg=14, lineno=425)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi174.0', '$phi174.1', '$const174.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=178, inst=JUMP_FORWARD(arg=78, lineno=425)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi174.0', '$phi174.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=258, stack=('$phi174.0', '$phi174.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 350, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 346, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=180 nstack_initial=2), State(pc_initial=258 nstack_initial=2)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: ['$phi180.0', '$phi180.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=180, inst=LOAD_FAST(arg=1, lineno=426)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi180.0', '$phi180.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=182, inst=LOAD_FAST(arg=12, lineno=426)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi180.0', '$phi180.1', '$knn_dists180.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=184, inst=LOAD_FAST(arg=13, lineno=426)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi180.0', '$phi180.1', '$knn_dists180.2', '$i182.3']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=186, inst=BUILD_TUPLE(arg=2, lineno=426)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi180.0', '$phi180.1', '$knn_dists180.2', '$i182.3', '$j184.4']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=188, inst=BINARY_SUBSCR(arg=None, lineno=426)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi180.0', '$phi180.1', '$knn_dists180.2', '$186build_tuple.5']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=190, inst=LOAD_FAST(arg=3, lineno=426)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi180.0', '$phi180.1', '$188binary_subscr.6']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=192, inst=LOAD_FAST(arg=12, lineno=426)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi180.0', '$phi180.1', '$188binary_subscr.6', '$rhos190.7']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=194, inst=BINARY_SUBSCR(arg=None, lineno=426)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi180.0', '$phi180.1', '$188binary_subscr.6', '$rhos190.7', '$i192.8']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=196, inst=BINARY_SUBTRACT(arg=None, lineno=426)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi180.0', '$phi180.1', '$188binary_subscr.6', '$194binary_subscr.9']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=198, inst=LOAD_CONST(arg=7, lineno=426)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi180.0', '$phi180.1', '$196binary_subtract.10']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=200, inst=COMPARE_OP(arg=1, lineno=426)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi180.0', '$phi180.1', '$196binary_subtract.10', '$const198.11']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=202, inst=POP_JUMP_IF_TRUE(arg=216, lineno=426)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi180.0', '$phi180.1', '$200compare_op.12']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=204, stack=('$phi180.0', '$phi180.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 350, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 346, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0), Edge(pc=216, stack=('$phi180.0', '$phi180.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 350, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 346, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=258 nstack_initial=2), State(pc_initial=204 nstack_initial=2), State(pc_initial=216 nstack_initial=2)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: ['$phi258.0', '$phi258.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=258, inst=LOAD_FAST(arg=12, lineno=431)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi258.0', '$phi258.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=260, inst=LOAD_FAST(arg=8, lineno=431)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi258.0', '$phi258.1', '$i258.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=262, inst=LOAD_FAST(arg=12, lineno=431)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi258.0', '$phi258.1', '$i258.2', '$rows260.3']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=264, inst=LOAD_FAST(arg=7, lineno=431)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi258.0', '$phi258.1', '$i258.2', '$rows260.3', '$i262.4']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=266, inst=BINARY_MULTIPLY(arg=None, lineno=431)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi258.0', '$phi258.1', '$i258.2', '$rows260.3', '$i262.4', '$n_neighbors264.5']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=268, inst=LOAD_FAST(arg=13, lineno=431)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi258.0', '$phi258.1', '$i258.2', '$rows260.3', '$266binary_multiply.6']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=270, inst=BINARY_ADD(arg=None, lineno=431)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi258.0', '$phi258.1', '$i258.2', '$rows260.3', '$266binary_multiply.6', '$j268.7']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=272, inst=STORE_SUBSCR(arg=None, lineno=431)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi258.0', '$phi258.1', '$i258.2', '$rows260.3', '$270binary_add.8']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=274, inst=LOAD_FAST(arg=0, lineno=432)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi258.0', '$phi258.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=276, inst=LOAD_FAST(arg=12, lineno=432)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi258.0', '$phi258.1', '$knn_indices274.9']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=278, inst=LOAD_FAST(arg=13, lineno=432)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi258.0', '$phi258.1', '$knn_indices274.9', '$i276.10']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=280, inst=BUILD_TUPLE(arg=2, lineno=432)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi258.0', '$phi258.1', '$knn_indices274.9', '$i276.10', '$j278.11']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=282, inst=BINARY_SUBSCR(arg=None, lineno=432)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi258.0', '$phi258.1', '$knn_indices274.9', '$280build_tuple.12']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=284, inst=LOAD_FAST(arg=9, lineno=432)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi258.0', '$phi258.1', '$282binary_subscr.13']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=286, inst=LOAD_FAST(arg=12, lineno=432)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi258.0', '$phi258.1', '$282binary_subscr.13', '$cols284.14']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=288, inst=LOAD_FAST(arg=7, lineno=432)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi258.0', '$phi258.1', '$282binary_subscr.13', '$cols284.14', '$i286.15']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=290, inst=BINARY_MULTIPLY(arg=None, lineno=432)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi258.0', '$phi258.1', '$282binary_subscr.13', '$cols284.14', '$i286.15', '$n_neighbors288.16']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=292, inst=LOAD_FAST(arg=13, lineno=432)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi258.0', '$phi258.1', '$282binary_subscr.13', '$cols284.14', '$290binary_multiply.17']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=294, inst=BINARY_ADD(arg=None, lineno=432)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi258.0', '$phi258.1', '$282binary_subscr.13', '$cols284.14', '$290binary_multiply.17', '$j292.18']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=296, inst=STORE_SUBSCR(arg=None, lineno=432)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi258.0', '$phi258.1', '$282binary_subscr.13', '$cols284.14', '$294binary_add.19']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=298, inst=LOAD_FAST(arg=14, lineno=433)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi258.0', '$phi258.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=300, inst=LOAD_FAST(arg=10, lineno=433)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi258.0', '$phi258.1', '$val298.20']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=302, inst=LOAD_FAST(arg=12, lineno=433)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi258.0', '$phi258.1', '$val298.20', '$vals300.21']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=304, inst=LOAD_FAST(arg=7, lineno=433)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi258.0', '$phi258.1', '$val298.20', '$vals300.21', '$i302.22']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=306, inst=BINARY_MULTIPLY(arg=None, lineno=433)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi258.0', '$phi258.1', '$val298.20', '$vals300.21', '$i302.22', '$n_neighbors304.23']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=308, inst=LOAD_FAST(arg=13, lineno=433)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi258.0', '$phi258.1', '$val298.20', '$vals300.21', '$306binary_multiply.24']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=310, inst=BINARY_ADD(arg=None, lineno=433)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi258.0', '$phi258.1', '$val298.20', '$vals300.21', '$306binary_multiply.24', '$j308.25']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=312, inst=STORE_SUBSCR(arg=None, lineno=433)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi258.0', '$phi258.1', '$val298.20', '$vals300.21', '$310binary_add.26']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=314, inst=LOAD_FAST(arg=4, lineno=434)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi258.0', '$phi258.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=316, inst=POP_JUMP_IF_FALSE(arg=128, lineno=434)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi258.0', '$phi258.1', '$return_dists314.27']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=318, stack=('$phi258.0', '$phi258.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 350, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 346, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0), Edge(pc=128, stack=('$phi258.0', '$phi258.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 350, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 346, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=204 nstack_initial=2), State(pc_initial=216 nstack_initial=2), State(pc_initial=318 nstack_initial=2), State(pc_initial=128 nstack_initial=2)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: ['$phi204.0', '$phi204.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=204, inst=LOAD_FAST(arg=2, lineno=426)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi204.0', '$phi204.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=206, inst=LOAD_FAST(arg=12, lineno=426)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi204.0', '$phi204.1', '$sigmas204.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=208, inst=BINARY_SUBSCR(arg=None, lineno=426)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi204.0', '$phi204.1', '$sigmas204.2', '$i206.3']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=210, inst=LOAD_CONST(arg=7, lineno=426)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi204.0', '$phi204.1', '$208binary_subscr.4']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=212, inst=COMPARE_OP(arg=2, lineno=426)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi204.0', '$phi204.1', '$208binary_subscr.4', '$const210.5']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=214, inst=POP_JUMP_IF_FALSE(arg=222, lineno=426)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi204.0', '$phi204.1', '$212compare_op.6']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=216, stack=('$phi204.0', '$phi204.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 350, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 346, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0), Edge(pc=222, stack=('$phi204.0', '$phi204.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 350, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 346, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=216 nstack_initial=2), State(pc_initial=318 nstack_initial=2), State(pc_initial=128 nstack_initial=2), State(pc_initial=216 nstack_initial=2), State(pc_initial=222 nstack_initial=2)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: ['$phi216.0', '$phi216.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=216, inst=LOAD_CONST(arg=8, lineno=427)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi216.0', '$phi216.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=218, inst=STORE_FAST(arg=14, lineno=427)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi216.0', '$phi216.1', '$const216.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=220, inst=JUMP_FORWARD(arg=36, lineno=427)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi216.0', '$phi216.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=258, stack=('$phi216.0', '$phi216.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 350, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 346, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=318 nstack_initial=2), State(pc_initial=128 nstack_initial=2), State(pc_initial=216 nstack_initial=2), State(pc_initial=222 nstack_initial=2), State(pc_initial=258 nstack_initial=2)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: ['$phi318.0', '$phi318.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=318, inst=LOAD_FAST(arg=1, lineno=435)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi318.0', '$phi318.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=320, inst=LOAD_FAST(arg=12, lineno=435)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi318.0', '$phi318.1', '$knn_dists318.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=322, inst=LOAD_FAST(arg=13, lineno=435)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi318.0', '$phi318.1', '$knn_dists318.2', '$i320.3']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=324, inst=BUILD_TUPLE(arg=2, lineno=435)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi318.0', '$phi318.1', '$knn_dists318.2', '$i320.3', '$j322.4']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=326, inst=BINARY_SUBSCR(arg=None, lineno=435)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi318.0', '$phi318.1', '$knn_dists318.2', '$324build_tuple.5']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=328, inst=LOAD_FAST(arg=11, lineno=435)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi318.0', '$phi318.1', '$326binary_subscr.6']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=330, inst=LOAD_FAST(arg=12, lineno=435)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi318.0', '$phi318.1', '$326binary_subscr.6', '$dists328.7']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=332, inst=LOAD_FAST(arg=7, lineno=435)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi318.0', '$phi318.1', '$326binary_subscr.6', '$dists328.7', '$i330.8']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=334, inst=BINARY_MULTIPLY(arg=None, lineno=435)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi318.0', '$phi318.1', '$326binary_subscr.6', '$dists328.7', '$i330.8', '$n_neighbors332.9']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=336, inst=LOAD_FAST(arg=13, lineno=435)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi318.0', '$phi318.1', '$326binary_subscr.6', '$dists328.7', '$334binary_multiply.10']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=338, inst=BINARY_ADD(arg=None, lineno=435)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi318.0', '$phi318.1', '$326binary_subscr.6', '$dists328.7', '$334binary_multiply.10', '$j336.11']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=340, inst=STORE_SUBSCR(arg=None, lineno=435)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi318.0', '$phi318.1', '$326binary_subscr.6', '$dists328.7', '$338binary_add.12']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=342, inst=JUMP_ABSOLUTE(arg=128, lineno=435)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi318.0', '$phi318.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=128, stack=('$phi318.0', '$phi318.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 350, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 346, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=128 nstack_initial=2), State(pc_initial=216 nstack_initial=2), State(pc_initial=222 nstack_initial=2), State(pc_initial=258 nstack_initial=2), State(pc_initial=128 nstack_initial=2)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=216 nstack_initial=2), State(pc_initial=222 nstack_initial=2), State(pc_initial=258 nstack_initial=2), State(pc_initial=128 nstack_initial=2)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=222 nstack_initial=2), State(pc_initial=258 nstack_initial=2), State(pc_initial=128 nstack_initial=2)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: ['$phi222.0', '$phi222.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=222, inst=LOAD_GLOBAL(arg=1, lineno=429)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi222.0', '$phi222.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=224, inst=LOAD_METHOD(arg=7, lineno=429)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi222.0', '$phi222.1', '$222load_global.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=226, inst=LOAD_FAST(arg=1, lineno=429)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi222.0', '$phi222.1', '$224load_method.3']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=228, inst=LOAD_FAST(arg=12, lineno=429)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi222.0', '$phi222.1', '$224load_method.3', '$knn_dists226.4']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=230, inst=LOAD_FAST(arg=13, lineno=429)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi222.0', '$phi222.1', '$224load_method.3', '$knn_dists226.4', '$i228.5']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=232, inst=BUILD_TUPLE(arg=2, lineno=429)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi222.0', '$phi222.1', '$224load_method.3', '$knn_dists226.4', '$i228.5', '$j230.6']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=234, inst=BINARY_SUBSCR(arg=None, lineno=429)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi222.0', '$phi222.1', '$224load_method.3', '$knn_dists226.4', '$232build_tuple.7']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=236, inst=LOAD_FAST(arg=3, lineno=429)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi222.0', '$phi222.1', '$224load_method.3', '$234binary_subscr.8']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=238, inst=LOAD_FAST(arg=12, lineno=429)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi222.0', '$phi222.1', '$224load_method.3', '$234binary_subscr.8', '$rhos236.9']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=240, inst=BINARY_SUBSCR(arg=None, lineno=429)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi222.0', '$phi222.1', '$224load_method.3', '$234binary_subscr.8', '$rhos236.9', '$i238.10']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=242, inst=BINARY_SUBTRACT(arg=None, lineno=429)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi222.0', '$phi222.1', '$224load_method.3', '$234binary_subscr.8', '$240binary_subscr.11']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=244, inst=LOAD_FAST(arg=2, lineno=429)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi222.0', '$phi222.1', '$224load_method.3', '$242binary_subtract.12']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=246, inst=LOAD_FAST(arg=12, lineno=429)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi222.0', '$phi222.1', '$224load_method.3', '$242binary_subtract.12', '$sigmas244.13']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=248, inst=BINARY_SUBSCR(arg=None, lineno=429)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi222.0', '$phi222.1', '$224load_method.3', '$242binary_subtract.12', '$sigmas244.13', '$i246.14']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=250, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=429)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi222.0', '$phi222.1', '$224load_method.3', '$242binary_subtract.12', '$248binary_subscr.15']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=252, inst=UNARY_NEGATIVE(arg=None, lineno=429)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi222.0', '$phi222.1', '$224load_method.3', '$250binary_true_divide.16']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=254, inst=CALL_METHOD(arg=1, lineno=429)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi222.0', '$phi222.1', '$224load_method.3', '$252unary_negative.17']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=256, inst=STORE_FAST(arg=14, lineno=429)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$phi222.0', '$phi222.1', '$254call_method.18']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[Edge(pc=258, stack=('$phi222.0', '$phi222.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 350, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 346, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=258 nstack_initial=2), State(pc_initial=128 nstack_initial=2), State(pc_initial=258 nstack_initial=2)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=128 nstack_initial=2), State(pc_initial=258 nstack_initial=2)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=258 nstack_initial=2)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG -------------------------Prune PHIs-------------------------
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=0): set(),
             State(pc_initial=100 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=1): {'$phi114.0'},
             State(pc_initial=116 nstack_initial=2): {'$phi116.1'},
             State(pc_initial=118 nstack_initial=1): set(),
             State(pc_initial=128 nstack_initial=2): {'$phi128.1'},
             State(pc_initial=130 nstack_initial=3): {'$phi130.2'},
             State(pc_initial=148 nstack_initial=2): set(),
             State(pc_initial=150 nstack_initial=2): set(),
             State(pc_initial=174 nstack_initial=2): set(),
             State(pc_initial=180 nstack_initial=2): set(),
             State(pc_initial=204 nstack_initial=2): set(),
             State(pc_initial=216 nstack_initial=2): set(),
             State(pc_initial=222 nstack_initial=2): set(),
             State(pc_initial=258 nstack_initial=2): set(),
             State(pc_initial=318 nstack_initial=2): set(),
             State(pc_initial=344 nstack_initial=1): set(),
             State(pc_initial=346 nstack_initial=1): set(),
             State(pc_initial=348 nstack_initial=0): set(),
             State(pc_initial=350 nstack_initial=0): set()})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG defmap: {'$phi114.0': State(pc_initial=104 nstack_initial=0),
 '$phi116.1': State(pc_initial=114 nstack_initial=1),
 '$phi128.1': State(pc_initial=118 nstack_initial=1),
 '$phi130.2': State(pc_initial=128 nstack_initial=2)}
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi114.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0)),
                           ('$phi346.0',
                            State(pc_initial=346 nstack_initial=1))},
             '$phi116.0': {('$phi114.0',
                            State(pc_initial=114 nstack_initial=1))},
             '$phi116.1': {('$114for_iter.2',
                            State(pc_initial=114 nstack_initial=1))},
             '$phi118.0': {('$phi116.0',
                            State(pc_initial=116 nstack_initial=2))},
             '$phi128.0': {('$phi118.0',
                            State(pc_initial=118 nstack_initial=1)),
                           ('$phi148.0',
                            State(pc_initial=148 nstack_initial=2)),
                           ('$phi258.0',
                            State(pc_initial=258 nstack_initial=2)),
                           ('$phi318.0',
                            State(pc_initial=318 nstack_initial=2))},
             '$phi128.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1)),
                           ('$phi148.1',
                            State(pc_initial=148 nstack_initial=2)),
                           ('$phi258.1',
                            State(pc_initial=258 nstack_initial=2)),
                           ('$phi318.1',
                            State(pc_initial=318 nstack_initial=2))},
             '$phi130.0': {('$phi128.0',
                            State(pc_initial=128 nstack_initial=2))},
             '$phi130.1': {('$phi128.1',
                            State(pc_initial=128 nstack_initial=2))},
             '$phi130.2': {('$128for_iter.3',
                            State(pc_initial=128 nstack_initial=2))},
             '$phi148.0': {('$phi130.0',
                            State(pc_initial=130 nstack_initial=3))},
             '$phi148.1': {('$phi130.1',
                            State(pc_initial=130 nstack_initial=3))},
             '$phi150.0': {('$phi130.0',
                            State(pc_initial=130 nstack_initial=3))},
             '$phi150.1': {('$phi130.1',
                            State(pc_initial=130 nstack_initial=3))},
             '$phi174.0': {('$phi150.0',
                            State(pc_initial=150 nstack_initial=2))},
             '$phi174.1': {('$phi150.1',
                            State(pc_initial=150 nstack_initial=2))},
             '$phi180.0': {('$phi150.0',
                            State(pc_initial=150 nstack_initial=2))},
             '$phi180.1': {('$phi150.1',
                            State(pc_initial=150 nstack_initial=2))},
             '$phi204.0': {('$phi180.0',
                            State(pc_initial=180 nstack_initial=2))},
             '$phi204.1': {('$phi180.1',
                            State(pc_initial=180 nstack_initial=2))},
             '$phi216.0': {('$phi180.0',
                            State(pc_initial=180 nstack_initial=2)),
                           ('$phi204.0',
                            State(pc_initial=204 nstack_initial=2))},
             '$phi216.1': {('$phi180.1',
                            State(pc_initial=180 nstack_initial=2)),
                           ('$phi204.1',
                            State(pc_initial=204 nstack_initial=2))},
             '$phi222.0': {('$phi204.0',
                            State(pc_initial=204 nstack_initial=2))},
             '$phi222.1': {('$phi204.1',
                            State(pc_initial=204 nstack_initial=2))},
             '$phi258.0': {('$phi174.0',
                            State(pc_initial=174 nstack_initial=2)),
                           ('$phi216.0',
                            State(pc_initial=216 nstack_initial=2)),
                           ('$phi222.0',
                            State(pc_initial=222 nstack_initial=2))},
             '$phi258.1': {('$phi174.1',
                            State(pc_initial=174 nstack_initial=2)),
                           ('$phi216.1',
                            State(pc_initial=216 nstack_initial=2)),
                           ('$phi222.1',
                            State(pc_initial=222 nstack_initial=2))},
             '$phi318.0': {('$phi258.0',
                            State(pc_initial=258 nstack_initial=2))},
             '$phi318.1': {('$phi258.1',
                            State(pc_initial=258 nstack_initial=2))},
             '$phi344.0': {('$phi128.0',
                            State(pc_initial=128 nstack_initial=2))},
             '$phi346.0': {('$phi344.0',
                            State(pc_initial=344 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi114.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0)),
                           ('$phi344.0',
                            State(pc_initial=344 nstack_initial=1))},
             '$phi116.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0)),
                           ('$phi344.0',
                            State(pc_initial=344 nstack_initial=1))},
             '$phi116.1': {('$114for_iter.2',
                            State(pc_initial=114 nstack_initial=1))},
             '$phi118.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0)),
                           ('$phi344.0',
                            State(pc_initial=344 nstack_initial=1))},
             '$phi128.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0)),
                           ('$phi130.0',
                            State(pc_initial=130 nstack_initial=3)),
                           ('$phi174.0',
                            State(pc_initial=174 nstack_initial=2)),
                           ('$phi216.0',
                            State(pc_initial=216 nstack_initial=2)),
                           ('$phi222.0',
                            State(pc_initial=222 nstack_initial=2)),
                           ('$phi344.0',
                            State(pc_initial=344 nstack_initial=1))},
             '$phi128.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1)),
                           ('$phi130.1',
                            State(pc_initial=130 nstack_initial=3)),
                           ('$phi174.1',
                            State(pc_initial=174 nstack_initial=2)),
                           ('$phi216.1',
                            State(pc_initial=216 nstack_initial=2)),
                           ('$phi222.1',
                            State(pc_initial=222 nstack_initial=2))},
             '$phi130.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0)),
                           ('$phi130.0',
                            State(pc_initial=130 nstack_initial=3)),
                           ('$phi174.0',
                            State(pc_initial=174 nstack_initial=2)),
                           ('$phi216.0',
                            State(pc_initial=216 nstack_initial=2)),
                           ('$phi222.0',
                            State(pc_initial=222 nstack_initial=2)),
                           ('$phi344.0',
                            State(pc_initial=344 nstack_initial=1))},
             '$phi130.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1)),
                           ('$phi130.1',
                            State(pc_initial=130 nstack_initial=3)),
                           ('$phi174.1',
                            State(pc_initial=174 nstack_initial=2)),
                           ('$phi216.1',
                            State(pc_initial=216 nstack_initial=2)),
                           ('$phi222.1',
                            State(pc_initial=222 nstack_initial=2))},
             '$phi130.2': {('$128for_iter.3',
                            State(pc_initial=128 nstack_initial=2))},
             '$phi148.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0)),
                           ('$phi174.0',
                            State(pc_initial=174 nstack_initial=2)),
                           ('$phi216.0',
                            State(pc_initial=216 nstack_initial=2)),
                           ('$phi222.0',
                            State(pc_initial=222 nstack_initial=2)),
                           ('$phi344.0',
                            State(pc_initial=344 nstack_initial=1))},
             '$phi148.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1)),
                           ('$phi174.1',
                            State(pc_initial=174 nstack_initial=2)),
                           ('$phi216.1',
                            State(pc_initial=216 nstack_initial=2)),
                           ('$phi222.1',
                            State(pc_initial=222 nstack_initial=2))},
             '$phi150.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0)),
                           ('$phi174.0',
                            State(pc_initial=174 nstack_initial=2)),
                           ('$phi216.0',
                            State(pc_initial=216 nstack_initial=2)),
                           ('$phi222.0',
                            State(pc_initial=222 nstack_initial=2)),
                           ('$phi344.0',
                            State(pc_initial=344 nstack_initial=1))},
             '$phi150.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1)),
                           ('$phi174.1',
                            State(pc_initial=174 nstack_initial=2)),
                           ('$phi216.1',
                            State(pc_initial=216 nstack_initial=2)),
                           ('$phi222.1',
                            State(pc_initial=222 nstack_initial=2))},
             '$phi174.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0)),
                           ('$phi174.0',
                            State(pc_initial=174 nstack_initial=2)),
                           ('$phi216.0',
                            State(pc_initial=216 nstack_initial=2)),
                           ('$phi222.0',
                            State(pc_initial=222 nstack_initial=2)),
                           ('$phi344.0',
                            State(pc_initial=344 nstack_initial=1))},
             '$phi174.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1)),
                           ('$phi174.1',
                            State(pc_initial=174 nstack_initial=2)),
                           ('$phi216.1',
                            State(pc_initial=216 nstack_initial=2)),
                           ('$phi222.1',
                            State(pc_initial=222 nstack_initial=2))},
             '$phi180.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0)),
                           ('$phi174.0',
                            State(pc_initial=174 nstack_initial=2)),
                           ('$phi216.0',
                            State(pc_initial=216 nstack_initial=2)),
                           ('$phi222.0',
                            State(pc_initial=222 nstack_initial=2)),
                           ('$phi344.0',
                            State(pc_initial=344 nstack_initial=1))},
             '$phi180.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1)),
                           ('$phi174.1',
                            State(pc_initial=174 nstack_initial=2)),
                           ('$phi216.1',
                            State(pc_initial=216 nstack_initial=2)),
                           ('$phi222.1',
                            State(pc_initial=222 nstack_initial=2))},
             '$phi204.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0)),
                           ('$phi174.0',
                            State(pc_initial=174 nstack_initial=2)),
                           ('$phi216.0',
                            State(pc_initial=216 nstack_initial=2)),
                           ('$phi222.0',
                            State(pc_initial=222 nstack_initial=2)),
                           ('$phi344.0',
                            State(pc_initial=344 nstack_initial=1))},
             '$phi204.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1)),
                           ('$phi174.1',
                            State(pc_initial=174 nstack_initial=2)),
                           ('$phi216.1',
                            State(pc_initial=216 nstack_initial=2)),
                           ('$phi222.1',
                            State(pc_initial=222 nstack_initial=2))},
             '$phi216.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0)),
                           ('$phi174.0',
                            State(pc_initial=174 nstack_initial=2)),
                           ('$phi216.0',
                            State(pc_initial=216 nstack_initial=2)),
                           ('$phi222.0',
                            State(pc_initial=222 nstack_initial=2)),
                           ('$phi344.0',
                            State(pc_initial=344 nstack_initial=1))},
             '$phi216.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1)),
                           ('$phi174.1',
                            State(pc_initial=174 nstack_initial=2)),
                           ('$phi216.1',
                            State(pc_initial=216 nstack_initial=2)),
                           ('$phi222.1',
                            State(pc_initial=222 nstack_initial=2))},
             '$phi222.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0)),
                           ('$phi174.0',
                            State(pc_initial=174 nstack_initial=2)),
                           ('$phi216.0',
                            State(pc_initial=216 nstack_initial=2)),
                           ('$phi222.0',
                            State(pc_initial=222 nstack_initial=2)),
                           ('$phi344.0',
                            State(pc_initial=344 nstack_initial=1))},
             '$phi222.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1)),
                           ('$phi174.1',
                            State(pc_initial=174 nstack_initial=2)),
                           ('$phi216.1',
                            State(pc_initial=216 nstack_initial=2)),
                           ('$phi222.1',
                            State(pc_initial=222 nstack_initial=2))},
             '$phi258.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0)),
                           ('$phi344.0',
                            State(pc_initial=344 nstack_initial=1))},
             '$phi258.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1))},
             '$phi318.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0)),
                           ('$phi344.0',
                            State(pc_initial=344 nstack_initial=1))},
             '$phi318.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1))},
             '$phi344.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0)),
                           ('$phi130.0',
                            State(pc_initial=130 nstack_initial=3)),
                           ('$phi174.0',
                            State(pc_initial=174 nstack_initial=2)),
                           ('$phi216.0',
                            State(pc_initial=216 nstack_initial=2)),
                           ('$phi222.0',
                            State(pc_initial=222 nstack_initial=2)),
                           ('$phi344.0',
                            State(pc_initial=344 nstack_initial=1))},
             '$phi346.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0)),
                           ('$phi130.0',
                            State(pc_initial=130 nstack_initial=3)),
                           ('$phi174.0',
                            State(pc_initial=174 nstack_initial=2)),
                           ('$phi216.0',
                            State(pc_initial=216 nstack_initial=2)),
                           ('$phi222.0',
                            State(pc_initial=222 nstack_initial=2))}})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi114.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0)),
                           ('$phi130.0',
                            State(pc_initial=130 nstack_initial=3)),
                           ('$phi174.0',
                            State(pc_initial=174 nstack_initial=2)),
                           ('$phi216.0',
                            State(pc_initial=216 nstack_initial=2)),
                           ('$phi222.0',
                            State(pc_initial=222 nstack_initial=2))},
             '$phi116.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0)),
                           ('$phi130.0',
                            State(pc_initial=130 nstack_initial=3)),
                           ('$phi174.0',
                            State(pc_initial=174 nstack_initial=2)),
                           ('$phi216.0',
                            State(pc_initial=216 nstack_initial=2)),
                           ('$phi222.0',
                            State(pc_initial=222 nstack_initial=2))},
             '$phi116.1': {('$114for_iter.2',
                            State(pc_initial=114 nstack_initial=1))},
             '$phi118.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0)),
                           ('$phi130.0',
                            State(pc_initial=130 nstack_initial=3)),
                           ('$phi174.0',
                            State(pc_initial=174 nstack_initial=2)),
                           ('$phi216.0',
                            State(pc_initial=216 nstack_initial=2)),
                           ('$phi222.0',
                            State(pc_initial=222 nstack_initial=2))},
             '$phi128.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0))},
             '$phi128.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1))},
             '$phi130.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0))},
             '$phi130.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1))},
             '$phi130.2': {('$128for_iter.3',
                            State(pc_initial=128 nstack_initial=2))},
             '$phi148.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0))},
             '$phi148.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1))},
             '$phi150.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0))},
             '$phi150.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1))},
             '$phi174.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0)),
                           ('$phi130.0',
                            State(pc_initial=130 nstack_initial=3))},
             '$phi174.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1))},
             '$phi180.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0)),
                           ('$phi130.0',
                            State(pc_initial=130 nstack_initial=3))},
             '$phi180.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1))},
             '$phi204.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0)),
                           ('$phi130.0',
                            State(pc_initial=130 nstack_initial=3))},
             '$phi204.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1))},
             '$phi216.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0)),
                           ('$phi130.0',
                            State(pc_initial=130 nstack_initial=3))},
             '$phi216.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1))},
             '$phi222.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0)),
                           ('$phi130.0',
                            State(pc_initial=130 nstack_initial=3))},
             '$phi222.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1))},
             '$phi258.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0)),
                           ('$phi130.0',
                            State(pc_initial=130 nstack_initial=3))},
             '$phi258.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1))},
             '$phi318.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0)),
                           ('$phi130.0',
                            State(pc_initial=130 nstack_initial=3)),
                           ('$phi174.0',
                            State(pc_initial=174 nstack_initial=2)),
                           ('$phi216.0',
                            State(pc_initial=216 nstack_initial=2)),
                           ('$phi222.0',
                            State(pc_initial=222 nstack_initial=2))},
             '$phi318.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1))},
             '$phi344.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0))},
             '$phi346.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0))}})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi114.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0))},
             '$phi116.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0))},
             '$phi116.1': {('$114for_iter.2',
                            State(pc_initial=114 nstack_initial=1))},
             '$phi118.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0))},
             '$phi128.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0))},
             '$phi128.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1))},
             '$phi130.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0))},
             '$phi130.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1))},
             '$phi130.2': {('$128for_iter.3',
                            State(pc_initial=128 nstack_initial=2))},
             '$phi148.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0))},
             '$phi148.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1))},
             '$phi150.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0))},
             '$phi150.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1))},
             '$phi174.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0))},
             '$phi174.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1))},
             '$phi180.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0))},
             '$phi180.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1))},
             '$phi204.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0))},
             '$phi204.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1))},
             '$phi216.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0))},
             '$phi216.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1))},
             '$phi222.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0))},
             '$phi222.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1))},
             '$phi258.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0))},
             '$phi258.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1))},
             '$phi318.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0))},
             '$phi318.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1))},
             '$phi344.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0))},
             '$phi346.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0))}})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi114.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0))},
             '$phi116.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0))},
             '$phi116.1': {('$114for_iter.2',
                            State(pc_initial=114 nstack_initial=1))},
             '$phi118.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0))},
             '$phi128.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0))},
             '$phi128.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1))},
             '$phi130.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0))},
             '$phi130.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1))},
             '$phi130.2': {('$128for_iter.3',
                            State(pc_initial=128 nstack_initial=2))},
             '$phi148.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0))},
             '$phi148.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1))},
             '$phi150.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0))},
             '$phi150.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1))},
             '$phi174.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0))},
             '$phi174.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1))},
             '$phi180.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0))},
             '$phi180.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1))},
             '$phi204.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0))},
             '$phi204.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1))},
             '$phi216.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0))},
             '$phi216.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1))},
             '$phi222.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0))},
             '$phi222.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1))},
             '$phi258.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0))},
             '$phi258.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1))},
             '$phi318.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0))},
             '$phi318.1': {('$126get_iter.4',
                            State(pc_initial=118 nstack_initial=1))},
             '$phi344.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0))},
             '$phi346.0': {('$112get_iter.3',
                            State(pc_initial=104 nstack_initial=0))}})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG keep phismap: {'$phi114.0': {('$112get_iter.3', State(pc_initial=104 nstack_initial=0))},
 '$phi116.1': {('$114for_iter.2', State(pc_initial=114 nstack_initial=1))},
 '$phi128.1': {('$126get_iter.4', State(pc_initial=118 nstack_initial=1))},
 '$phi130.2': {('$128for_iter.3', State(pc_initial=128 nstack_initial=2))}}
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=104 nstack_initial=0): {'$phi114.0': '$112get_iter.3'},
             State(pc_initial=114 nstack_initial=1): {'$phi116.1': '$114for_iter.2'},
             State(pc_initial=118 nstack_initial=1): {'$phi128.1': '$126get_iter.4'},
             State(pc_initial=128 nstack_initial=2): {'$phi130.2': '$128for_iter.3'}})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG ----------------------DONE Prune PHIs-----------------------
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$knn_indices2.0'}), (4, {'item': '$knn_indices2.0', 'res': '$4load_attr.1'}), (6, {'res': '$const6.2'}), (8, {'index': '$const6.2', 'target': '$4load_attr.1', 'res': '$8binary_subscr.3'}), (10, {'value': '$8binary_subscr.3'}), (12, {'res': '$knn_indices12.4'}), (14, {'item': '$knn_indices12.4', 'res': '$14load_attr.5'}), (16, {'res': '$const16.6'}), (18, {'index': '$const16.6', 'target': '$14load_attr.5', 'res': '$18binary_subscr.7'}), (20, {'value': '$18binary_subscr.7'}), (22, {'res': '$22load_global.8'}), (24, {'item': '$22load_global.8', 'res': '$24load_attr.9'}), (26, {'res': '$knn_indices26.10'}), (28, {'item': '$knn_indices26.10', 'res': '$28load_attr.11'}), (30, {'res': '$30load_global.12'}), (32, {'item': '$30load_global.12', 'res': '$32load_attr.13'}), (34, {'res': '$const34.14'}), (36, {'func': '$24load_attr.9', 'args': ['$28load_attr.11', '$32load_attr.13'], 'names': '$const34.14', 'res': '$36call_function_kw.15'}), (38, {'value': '$36call_function_kw.15'}), (40, {'res': '$40load_global.16'}), (42, {'item': '$40load_global.16', 'res': '$42load_attr.17'}), (44, {'res': '$knn_indices44.18'}), (46, {'item': '$knn_indices44.18', 'res': '$46load_attr.19'}), (48, {'res': '$48load_global.20'}), (50, {'item': '$48load_global.20', 'res': '$50load_attr.21'}), (52, {'res': '$const52.22'}), (54, {'func': '$42load_attr.17', 'args': ['$46load_attr.19', '$50load_attr.21'], 'names': '$const52.22', 'res': '$54call_function_kw.23'}), (56, {'value': '$54call_function_kw.23'}), (58, {'res': '$58load_global.24'}), (60, {'item': '$58load_global.24', 'res': '$60load_attr.25'}), (62, {'res': '$knn_indices62.26'}), (64, {'item': '$knn_indices62.26', 'res': '$64load_attr.27'}), (66, {'res': '$66load_global.28'}), (68, {'item': '$66load_global.28', 'res': '$68load_attr.29'}), (70, {'res': '$const70.30'}), (72, {'func': '$60load_attr.25', 'args': ['$64load_attr.27', '$68load_attr.29'], 'names': '$const70.30', 'res': '$72call_function_kw.31'}), (74, {'value': '$72call_function_kw.31'}), (76, {'res': '$return_dists76.32'}), (78, {'pred': '$return_dists76.32'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: (), 100: ()})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=80 nstack_initial=0):
AdaptBlockInfo(insts=((80, {'res': '$80load_global.0'}), (82, {'item': '$80load_global.0', 'res': '$82load_attr.1'}), (84, {'res': '$knn_indices84.2'}), (86, {'item': '$knn_indices84.2', 'res': '$86load_attr.3'}), (88, {'res': '$88load_global.4'}), (90, {'item': '$88load_global.4', 'res': '$90load_attr.5'}), (92, {'res': '$const92.6'}), (94, {'func': '$82load_attr.1', 'args': ['$86load_attr.3', '$90load_attr.5'], 'names': '$const92.6', 'res': '$94call_function_kw.7'}), (96, {'value': '$94call_function_kw.7'}), (98, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: ()})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=100 nstack_initial=0):
AdaptBlockInfo(insts=((100, {'res': '$const100.0'}), (102, {'value': '$const100.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: ()})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$106load_global.0'}), (108, {'res': '$n_samples108.1'}), (110, {'func': '$106load_global.0', 'args': ['$n_samples108.1'], 'res': '$110call_function.2'}), (112, {'value': '$110call_function.2', 'res': '$112get_iter.3'})), outgoing_phis={'$phi114.0': '$112get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: ('$112get_iter.3',)})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=114 nstack_initial=1):
AdaptBlockInfo(insts=((114, {'iterator': '$phi114.0', 'pair': '$114for_iter.1', 'indval': '$114for_iter.2', 'pred': '$114for_iter.3'}),), outgoing_phis={'$phi116.1': '$114for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 350, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={348: (), 116: ('$phi114.0', '$114for_iter.2')})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=116 nstack_initial=2):
AdaptBlockInfo(insts=((116, {'value': '$phi116.1'}),), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 350, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={118: ('$phi116.0',)})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=118 nstack_initial=1):
AdaptBlockInfo(insts=((120, {'res': '$120load_global.1'}), (122, {'res': '$n_neighbors122.2'}), (124, {'func': '$120load_global.1', 'args': ['$n_neighbors122.2'], 'res': '$124call_function.3'}), (126, {'value': '$124call_function.3', 'res': '$126get_iter.4'})), outgoing_phis={'$phi128.1': '$126get_iter.4'}, blockstack=({'kind': BlockKind(LOOP), 'end': 350, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={128: ('$phi118.0', '$126get_iter.4')})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=128 nstack_initial=2):
AdaptBlockInfo(insts=((128, {'iterator': '$phi128.1', 'pair': '$128for_iter.2', 'indval': '$128for_iter.3', 'pred': '$128for_iter.4'}),), outgoing_phis={'$phi130.2': '$128for_iter.3'}, blockstack=({'kind': BlockKind(LOOP), 'end': 350, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 346, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={344: ('$phi128.0',), 130: ('$phi128.0', '$phi128.1', '$128for_iter.3')})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=130 nstack_initial=3):
AdaptBlockInfo(insts=((130, {'value': '$phi130.2'}), (132, {'res': '$knn_indices132.3'}), (134, {'res': '$i134.4'}), (136, {'res': '$j136.5'}), (138, {'items': ['$i134.4', '$j136.5'], 'res': '$138build_tuple.6'}), (140, {'index': '$138build_tuple.6', 'target': '$knn_indices132.3', 'res': '$140binary_subscr.7'}), (142, {'res': '$const142.8'}), (144, {'lhs': '$140binary_subscr.7', 'rhs': '$const142.8', 'res': '$144compare_op.9'}), (146, {'pred': '$144compare_op.9'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 350, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 346, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={148: ('$phi130.0', '$phi130.1'), 150: ('$phi130.0', '$phi130.1')})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=148 nstack_initial=2):
AdaptBlockInfo(insts=((148, {}),), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 350, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 346, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={128: ('$phi148.0', '$phi148.1')})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=150 nstack_initial=2):
AdaptBlockInfo(insts=((150, {'res': '$bipartite150.2'}), (152, {'res': '$const152.3'}), (154, {'lhs': '$bipartite150.2', 'rhs': '$const152.3', 'res': '$154compare_op.4'}), (156, {'res': '$knn_indices156.5'}), (158, {'res': '$i158.6'}), (160, {'res': '$j160.7'}), (162, {'items': ['$i158.6', '$j160.7'], 'res': '$162build_tuple.8'}), (164, {'index': '$162build_tuple.8', 'target': '$knn_indices156.5', 'res': '$164binary_subscr.9'}), (166, {'res': '$i166.10'}), (168, {'lhs': '$164binary_subscr.9', 'rhs': '$i166.10', 'res': '$168compare_op.11'}), (170, {'lhs': '$154compare_op.4', 'rhs': '$168compare_op.11', 'res': '$170binary_and.12'}), (172, {'pred': '$170binary_and.12'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 350, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 346, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={174: ('$phi150.0', '$phi150.1'), 180: ('$phi150.0', '$phi150.1')})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=174 nstack_initial=2):
AdaptBlockInfo(insts=((174, {'res': '$const174.2'}), (176, {'value': '$const174.2'}), (178, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 350, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 346, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={258: ('$phi174.0', '$phi174.1')})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=180 nstack_initial=2):
AdaptBlockInfo(insts=((180, {'res': '$knn_dists180.2'}), (182, {'res': '$i182.3'}), (184, {'res': '$j184.4'}), (186, {'items': ['$i182.3', '$j184.4'], 'res': '$186build_tuple.5'}), (188, {'index': '$186build_tuple.5', 'target': '$knn_dists180.2', 'res': '$188binary_subscr.6'}), (190, {'res': '$rhos190.7'}), (192, {'res': '$i192.8'}), (194, {'index': '$i192.8', 'target': '$rhos190.7', 'res': '$194binary_subscr.9'}), (196, {'lhs': '$188binary_subscr.6', 'rhs': '$194binary_subscr.9', 'res': '$196binary_subtract.10'}), (198, {'res': '$const198.11'}), (200, {'lhs': '$196binary_subtract.10', 'rhs': '$const198.11', 'res': '$200compare_op.12'}), (202, {'pred': '$200compare_op.12'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 350, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 346, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={204: ('$phi180.0', '$phi180.1'), 216: ('$phi180.0', '$phi180.1')})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=204 nstack_initial=2):
AdaptBlockInfo(insts=((204, {'res': '$sigmas204.2'}), (206, {'res': '$i206.3'}), (208, {'index': '$i206.3', 'target': '$sigmas204.2', 'res': '$208binary_subscr.4'}), (210, {'res': '$const210.5'}), (212, {'lhs': '$208binary_subscr.4', 'rhs': '$const210.5', 'res': '$212compare_op.6'}), (214, {'pred': '$212compare_op.6'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 350, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 346, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={216: ('$phi204.0', '$phi204.1'), 222: ('$phi204.0', '$phi204.1')})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=216 nstack_initial=2):
AdaptBlockInfo(insts=((216, {'res': '$const216.2'}), (218, {'value': '$const216.2'}), (220, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 350, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 346, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={258: ('$phi216.0', '$phi216.1')})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=222 nstack_initial=2):
AdaptBlockInfo(insts=((222, {'res': '$222load_global.2'}), (224, {'item': '$222load_global.2', 'res': '$224load_method.3'}), (226, {'res': '$knn_dists226.4'}), (228, {'res': '$i228.5'}), (230, {'res': '$j230.6'}), (232, {'items': ['$i228.5', '$j230.6'], 'res': '$232build_tuple.7'}), (234, {'index': '$232build_tuple.7', 'target': '$knn_dists226.4', 'res': '$234binary_subscr.8'}), (236, {'res': '$rhos236.9'}), (238, {'res': '$i238.10'}), (240, {'index': '$i238.10', 'target': '$rhos236.9', 'res': '$240binary_subscr.11'}), (242, {'lhs': '$234binary_subscr.8', 'rhs': '$240binary_subscr.11', 'res': '$242binary_subtract.12'}), (244, {'res': '$sigmas244.13'}), (246, {'res': '$i246.14'}), (248, {'index': '$i246.14', 'target': '$sigmas244.13', 'res': '$248binary_subscr.15'}), (250, {'lhs': '$242binary_subtract.12', 'rhs': '$248binary_subscr.15', 'res': '$250binary_true_divide.16'}), (252, {'value': '$250binary_true_divide.16', 'res': '$252unary_negative.17'}), (254, {'func': '$224load_method.3', 'args': ['$252unary_negative.17'], 'res': '$254call_method.18'}), (256, {'value': '$254call_method.18'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 350, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 346, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={258: ('$phi222.0', '$phi222.1')})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=258 nstack_initial=2):
AdaptBlockInfo(insts=((258, {'res': '$i258.2'}), (260, {'res': '$rows260.3'}), (262, {'res': '$i262.4'}), (264, {'res': '$n_neighbors264.5'}), (266, {'lhs': '$i262.4', 'rhs': '$n_neighbors264.5', 'res': '$266binary_multiply.6'}), (268, {'res': '$j268.7'}), (270, {'lhs': '$266binary_multiply.6', 'rhs': '$j268.7', 'res': '$270binary_add.8'}), (272, {'target': '$rows260.3', 'index': '$270binary_add.8', 'value': '$i258.2'}), (274, {'res': '$knn_indices274.9'}), (276, {'res': '$i276.10'}), (278, {'res': '$j278.11'}), (280, {'items': ['$i276.10', '$j278.11'], 'res': '$280build_tuple.12'}), (282, {'index': '$280build_tuple.12', 'target': '$knn_indices274.9', 'res': '$282binary_subscr.13'}), (284, {'res': '$cols284.14'}), (286, {'res': '$i286.15'}), (288, {'res': '$n_neighbors288.16'}), (290, {'lhs': '$i286.15', 'rhs': '$n_neighbors288.16', 'res': '$290binary_multiply.17'}), (292, {'res': '$j292.18'}), (294, {'lhs': '$290binary_multiply.17', 'rhs': '$j292.18', 'res': '$294binary_add.19'}), (296, {'target': '$cols284.14', 'index': '$294binary_add.19', 'value': '$282binary_subscr.13'}), (298, {'res': '$val298.20'}), (300, {'res': '$vals300.21'}), (302, {'res': '$i302.22'}), (304, {'res': '$n_neighbors304.23'}), (306, {'lhs': '$i302.22', 'rhs': '$n_neighbors304.23', 'res': '$306binary_multiply.24'}), (308, {'res': '$j308.25'}), (310, {'lhs': '$306binary_multiply.24', 'rhs': '$j308.25', 'res': '$310binary_add.26'}), (312, {'target': '$vals300.21', 'index': '$310binary_add.26', 'value': '$val298.20'}), (314, {'res': '$return_dists314.27'}), (316, {'pred': '$return_dists314.27'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 350, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 346, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={318: ('$phi258.0', '$phi258.1'), 128: ('$phi258.0', '$phi258.1')})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=318 nstack_initial=2):
AdaptBlockInfo(insts=((318, {'res': '$knn_dists318.2'}), (320, {'res': '$i320.3'}), (322, {'res': '$j322.4'}), (324, {'items': ['$i320.3', '$j322.4'], 'res': '$324build_tuple.5'}), (326, {'index': '$324build_tuple.5', 'target': '$knn_dists318.2', 'res': '$326binary_subscr.6'}), (328, {'res': '$dists328.7'}), (330, {'res': '$i330.8'}), (332, {'res': '$n_neighbors332.9'}), (334, {'lhs': '$i330.8', 'rhs': '$n_neighbors332.9', 'res': '$334binary_multiply.10'}), (336, {'res': '$j336.11'}), (338, {'lhs': '$334binary_multiply.10', 'rhs': '$j336.11', 'res': '$338binary_add.12'}), (340, {'target': '$dists328.7', 'index': '$338binary_add.12', 'value': '$326binary_subscr.6'}), (342, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 350, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 346, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={128: ('$phi318.0', '$phi318.1')})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=344 nstack_initial=1):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 350, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 346, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={346: ('$phi344.0',)})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=346 nstack_initial=1):
AdaptBlockInfo(insts=((346, {}),), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 350, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={114: ('$phi346.0',)})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=348 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 350, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={350: ()})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=350 nstack_initial=0):
AdaptBlockInfo(insts=((350, {'res': '$rows350.0'}), (352, {'res': '$cols352.1'}), (354, {'res': '$vals354.2'}), (356, {'res': '$dists356.3'}), (358, {'items': ['$rows350.0', '$cols352.1', '$vals354.2', '$dists356.3'], 'res': '$358build_tuple.4'}), (360, {'retval': '$358build_tuple.4', 'castval': '$360return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:43 interpreter.py DEBUG label 0:
    knn_indices = arg(0, name=knn_indices)   ['knn_indices']
    knn_dists = arg(1, name=knn_dists)       ['knn_dists']
    sigmas = arg(2, name=sigmas)             ['sigmas']
    rhos = arg(3, name=rhos)                 ['rhos']
    return_dists = arg(4, name=return_dists) ['return_dists']
    bipartite = arg(5, name=bipartite)       ['bipartite']
    $4load_attr.1 = getattr(value=knn_indices, attr=shape) ['$4load_attr.1', 'knn_indices']
    $const6.2 = const(int, 0)                ['$const6.2']
    n_samples = getitem(value=$4load_attr.1, index=$const6.2, fn=<built-in function getitem>) ['$4load_attr.1', '$const6.2', 'n_samples']
    $14load_attr.5 = getattr(value=knn_indices, attr=shape) ['$14load_attr.5', 'knn_indices']
    $const16.6 = const(int, 1)               ['$const16.6']
    n_neighbors = getitem(value=$14load_attr.5, index=$const16.6, fn=<built-in function getitem>) ['$14load_attr.5', '$const16.6', 'n_neighbors']
    $22load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>) ['$22load_global.8']
    $24load_attr.9 = getattr(value=$22load_global.8, attr=zeros) ['$22load_global.8', '$24load_attr.9']
    $28load_attr.11 = getattr(value=knn_indices, attr=size) ['$28load_attr.11', 'knn_indices']
    $30load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>) ['$30load_global.12']
    $32load_attr.13 = getattr(value=$30load_global.12, attr=int32) ['$30load_global.12', '$32load_attr.13']
    rows = call $24load_attr.9($28load_attr.11, func=$24load_attr.9, args=[Var($28load_attr.11, umap_.py:410)], kws=[('dtype', Var($32load_attr.13, umap_.py:410))], vararg=None, varkwarg=None, target=None) ['$24load_attr.9', '$28load_attr.11', '$32load_attr.13', 'rows']
    $40load_global.16 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>) ['$40load_global.16']
    $42load_attr.17 = getattr(value=$40load_global.16, attr=zeros) ['$40load_global.16', '$42load_attr.17']
    $46load_attr.19 = getattr(value=knn_indices, attr=size) ['$46load_attr.19', 'knn_indices']
    $48load_global.20 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>) ['$48load_global.20']
    $50load_attr.21 = getattr(value=$48load_global.20, attr=int32) ['$48load_global.20', '$50load_attr.21']
    cols = call $42load_attr.17($46load_attr.19, func=$42load_attr.17, args=[Var($46load_attr.19, umap_.py:411)], kws=[('dtype', Var($50load_attr.21, umap_.py:411))], vararg=None, varkwarg=None, target=None) ['$42load_attr.17', '$46load_attr.19', '$50load_attr.21', 'cols']
    $58load_global.24 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>) ['$58load_global.24']
    $60load_attr.25 = getattr(value=$58load_global.24, attr=zeros) ['$58load_global.24', '$60load_attr.25']
    $64load_attr.27 = getattr(value=knn_indices, attr=size) ['$64load_attr.27', 'knn_indices']
    $66load_global.28 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>) ['$66load_global.28']
    $68load_attr.29 = getattr(value=$66load_global.28, attr=float32) ['$66load_global.28', '$68load_attr.29']
    vals = call $60load_attr.25($64load_attr.27, func=$60load_attr.25, args=[Var($64load_attr.27, umap_.py:412)], kws=[('dtype', Var($68load_attr.29, umap_.py:412))], vararg=None, varkwarg=None, target=None) ['$60load_attr.25', '$64load_attr.27', '$68load_attr.29', 'vals']
    bool78 = global(bool: <class 'bool'>)    ['bool78']
    $78pred = call bool78(return_dists, func=bool78, args=(Var(return_dists, umap_.py:407),), kws=(), vararg=None, varkwarg=None, target=None) ['$78pred', 'bool78', 'return_dists']
    branch $78pred, 80, 100                  ['$78pred']
label 80:
    $80load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>) ['$80load_global.0']
    $82load_attr.1 = getattr(value=$80load_global.0, attr=zeros) ['$80load_global.0', '$82load_attr.1']
    $86load_attr.3 = getattr(value=knn_indices, attr=size) ['$86load_attr.3', 'knn_indices']
    $88load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>) ['$88load_global.4']
    $90load_attr.5 = getattr(value=$88load_global.4, attr=float32) ['$88load_global.4', '$90load_attr.5']
    dists = call $82load_attr.1($86load_attr.3, func=$82load_attr.1, args=[Var($86load_attr.3, umap_.py:414)], kws=[('dtype', Var($90load_attr.5, umap_.py:414))], vararg=None, varkwarg=None, target=None) ['$82load_attr.1', '$86load_attr.3', '$90load_attr.5', 'dists']
    jump 104                                 []
label 100:
    dists = const(NoneType, None)            ['dists']
    jump 104                                 []
label 104:
    $106load_global.0 = global(range: <class 'range'>) ['$106load_global.0']
    $110call_function.2 = call $106load_global.0(n_samples, func=$106load_global.0, args=[Var(n_samples, umap_.py:407)], kws=(), vararg=None, varkwarg=None, target=None) ['$106load_global.0', '$110call_function.2', 'n_samples']
    $112get_iter.3 = getiter(value=$110call_function.2) ['$110call_function.2', '$112get_iter.3']
    $phi114.0 = $112get_iter.3               ['$112get_iter.3', '$phi114.0']
    jump 114                                 []
label 114:
    $114for_iter.1 = iternext(value=$phi114.0) ['$114for_iter.1', '$phi114.0']
    $114for_iter.2 = pair_first(value=$114for_iter.1) ['$114for_iter.1', '$114for_iter.2']
    $114for_iter.3 = pair_second(value=$114for_iter.1) ['$114for_iter.1', '$114for_iter.3']
    $phi116.1 = $114for_iter.2               ['$114for_iter.2', '$phi116.1']
    branch $114for_iter.3, 116, 348          ['$114for_iter.3']
label 116:
    i = $phi116.1                            ['$phi116.1', 'i']
    jump 118                                 []
label 118:
    $120load_global.1 = global(range: <class 'range'>) ['$120load_global.1']
    $124call_function.3 = call $120load_global.1(n_neighbors, func=$120load_global.1, args=[Var(n_neighbors, umap_.py:408)], kws=(), vararg=None, varkwarg=None, target=None) ['$120load_global.1', '$124call_function.3', 'n_neighbors']
    $126get_iter.4 = getiter(value=$124call_function.3) ['$124call_function.3', '$126get_iter.4']
    $phi128.1 = $126get_iter.4               ['$126get_iter.4', '$phi128.1']
    jump 128                                 []
label 128:
    $128for_iter.2 = iternext(value=$phi128.1) ['$128for_iter.2', '$phi128.1']
    $128for_iter.3 = pair_first(value=$128for_iter.2) ['$128for_iter.2', '$128for_iter.3']
    $128for_iter.4 = pair_second(value=$128for_iter.2) ['$128for_iter.2', '$128for_iter.4']
    $phi130.2 = $128for_iter.3               ['$128for_iter.3', '$phi130.2']
    branch $128for_iter.4, 130, 344          ['$128for_iter.4']
label 130:
    j = $phi130.2                            ['$phi130.2', 'j']
    $138build_tuple.6 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)]) ['$138build_tuple.6', 'i', 'j']
    $140binary_subscr.7 = getitem(value=knn_indices, index=$138build_tuple.6, fn=<built-in function getitem>) ['$138build_tuple.6', '$140binary_subscr.7', 'knn_indices']
    $const142.8 = const(int, -1)             ['$const142.8']
    $144compare_op.9 = $140binary_subscr.7 == $const142.8 ['$140binary_subscr.7', '$144compare_op.9', '$const142.8']
    bool146 = global(bool: <class 'bool'>)   ['bool146']
    $146pred = call bool146($144compare_op.9, func=bool146, args=(Var($144compare_op.9, umap_.py:420),), kws=(), vararg=None, varkwarg=None, target=None) ['$144compare_op.9', '$146pred', 'bool146']
    branch $146pred, 148, 150                ['$146pred']
label 148:
    jump 128                                 []
label 150:
    $const152.3 = const(bool, False)         ['$const152.3']
    $154compare_op.4 = bipartite == $const152.3 ['$154compare_op.4', '$const152.3', 'bipartite']
    $162build_tuple.8 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)]) ['$162build_tuple.8', 'i', 'j']
    $164binary_subscr.9 = getitem(value=knn_indices, index=$162build_tuple.8, fn=<built-in function getitem>) ['$162build_tuple.8', '$164binary_subscr.9', 'knn_indices']
    $168compare_op.11 = $164binary_subscr.9 == i ['$164binary_subscr.9', '$168compare_op.11', 'i']
    $170binary_and.12 = $154compare_op.4 & $168compare_op.11 ['$154compare_op.4', '$168compare_op.11', '$170binary_and.12']
    bool172 = global(bool: <class 'bool'>)   ['bool172']
    $172pred = call bool172($170binary_and.12, func=bool172, args=(Var($170binary_and.12, umap_.py:424),), kws=(), vararg=None, varkwarg=None, target=None) ['$170binary_and.12', '$172pred', 'bool172']
    branch $172pred, 174, 180                ['$172pred']
label 174:
    val = const(float, 0.0)                  ['val']
    jump 258                                 []
label 180:
    $186build_tuple.5 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)]) ['$186build_tuple.5', 'i', 'j']
    $188binary_subscr.6 = getitem(value=knn_dists, index=$186build_tuple.5, fn=<built-in function getitem>) ['$186build_tuple.5', '$188binary_subscr.6', 'knn_dists']
    $194binary_subscr.9 = getitem(value=rhos, index=i, fn=<built-in function getitem>) ['$194binary_subscr.9', 'i', 'rhos']
    $196binary_subtract.10 = $188binary_subscr.6 - $194binary_subscr.9 ['$188binary_subscr.6', '$194binary_subscr.9', '$196binary_subtract.10']
    $const198.11 = const(float, 0.0)         ['$const198.11']
    $200compare_op.12 = $196binary_subtract.10 <= $const198.11 ['$196binary_subtract.10', '$200compare_op.12', '$const198.11']
    bool202 = global(bool: <class 'bool'>)   ['bool202']
    $202pred = call bool202($200compare_op.12, func=bool202, args=(Var($200compare_op.12, umap_.py:426),), kws=(), vararg=None, varkwarg=None, target=None) ['$200compare_op.12', '$202pred', 'bool202']
    branch $202pred, 216, 204                ['$202pred']
label 204:
    $208binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$208binary_subscr.4', 'i', 'sigmas']
    $const210.5 = const(float, 0.0)          ['$const210.5']
    $212compare_op.6 = $208binary_subscr.4 == $const210.5 ['$208binary_subscr.4', '$212compare_op.6', '$const210.5']
    bool214 = global(bool: <class 'bool'>)   ['bool214']
    $214pred = call bool214($212compare_op.6, func=bool214, args=(Var($212compare_op.6, umap_.py:426),), kws=(), vararg=None, varkwarg=None, target=None) ['$212compare_op.6', '$214pred', 'bool214']
    branch $214pred, 216, 222                ['$214pred']
label 216:
    val = const(float, 1.0)                  ['val']
    jump 258                                 []
label 222:
    $222load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>) ['$222load_global.2']
    $224load_method.3 = getattr(value=$222load_global.2, attr=exp) ['$222load_global.2', '$224load_method.3']
    $232build_tuple.7 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)]) ['$232build_tuple.7', 'i', 'j']
    $234binary_subscr.8 = getitem(value=knn_dists, index=$232build_tuple.7, fn=<built-in function getitem>) ['$232build_tuple.7', '$234binary_subscr.8', 'knn_dists']
    $240binary_subscr.11 = getitem(value=rhos, index=i, fn=<built-in function getitem>) ['$240binary_subscr.11', 'i', 'rhos']
    $242binary_subtract.12 = $234binary_subscr.8 - $240binary_subscr.11 ['$234binary_subscr.8', '$240binary_subscr.11', '$242binary_subtract.12']
    $248binary_subscr.15 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$248binary_subscr.15', 'i', 'sigmas']
    $250binary_true_divide.16 = $242binary_subtract.12 / $248binary_subscr.15 ['$242binary_subtract.12', '$248binary_subscr.15', '$250binary_true_divide.16']
    $252unary_negative.17 = unary(fn=<built-in function neg>, value=$250binary_true_divide.16) ['$250binary_true_divide.16', '$252unary_negative.17']
    val = call $224load_method.3($252unary_negative.17, func=$224load_method.3, args=[Var($252unary_negative.17, umap_.py:429)], kws=(), vararg=None, varkwarg=None, target=None) ['$224load_method.3', '$252unary_negative.17', 'val']
    jump 258                                 []
label 258:
    $266binary_multiply.6 = i * n_neighbors  ['$266binary_multiply.6', 'i', 'n_neighbors']
    $270binary_add.8 = $266binary_multiply.6 + j ['$266binary_multiply.6', '$270binary_add.8', 'j']
    rows[$270binary_add.8] = i               ['$270binary_add.8', 'i', 'rows']
    $280build_tuple.12 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)]) ['$280build_tuple.12', 'i', 'j']
    $282binary_subscr.13 = getitem(value=knn_indices, index=$280build_tuple.12, fn=<built-in function getitem>) ['$280build_tuple.12', '$282binary_subscr.13', 'knn_indices']
    $290binary_multiply.17 = i * n_neighbors ['$290binary_multiply.17', 'i', 'n_neighbors']
    $294binary_add.19 = $290binary_multiply.17 + j ['$290binary_multiply.17', '$294binary_add.19', 'j']
    cols[$294binary_add.19] = $282binary_subscr.13 ['$282binary_subscr.13', '$294binary_add.19', 'cols']
    $306binary_multiply.24 = i * n_neighbors ['$306binary_multiply.24', 'i', 'n_neighbors']
    $310binary_add.26 = $306binary_multiply.24 + j ['$306binary_multiply.24', '$310binary_add.26', 'j']
    vals[$310binary_add.26] = val            ['$310binary_add.26', 'val', 'vals']
    bool316 = global(bool: <class 'bool'>)   ['bool316']
    $316pred = call bool316(return_dists, func=bool316, args=(Var(return_dists, umap_.py:407),), kws=(), vararg=None, varkwarg=None, target=None) ['$316pred', 'bool316', 'return_dists']
    branch $316pred, 318, 128                ['$316pred']
label 318:
    $324build_tuple.5 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)]) ['$324build_tuple.5', 'i', 'j']
    $326binary_subscr.6 = getitem(value=knn_dists, index=$324build_tuple.5, fn=<built-in function getitem>) ['$324build_tuple.5', '$326binary_subscr.6', 'knn_dists']
    $334binary_multiply.10 = i * n_neighbors ['$334binary_multiply.10', 'i', 'n_neighbors']
    $338binary_add.12 = $334binary_multiply.10 + j ['$334binary_multiply.10', '$338binary_add.12', 'j']
    dists[$338binary_add.12] = $326binary_subscr.6 ['$326binary_subscr.6', '$338binary_add.12', 'dists']
    jump 128                                 []
label 344:
    jump 346                                 []
label 346:
    jump 114                                 []
label 348:
    jump 350                                 []
label 350:
    $358build_tuple.4 = build_tuple(items=[Var(rows, umap_.py:410), Var(cols, umap_.py:411), Var(vals, umap_.py:412), Var(dists, umap_.py:414)]) ['$358build_tuple.4', 'cols', 'dists', 'rows', 'vals']
    $360return_value.5 = cast(value=$358build_tuple.4) ['$358build_tuple.4', '$360return_value.5']
    return $360return_value.5                ['$360return_value.5']

Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 0
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: knn_indices = arg(0, name=knn_indices)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: knn_dists = arg(1, name=knn_dists)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: sigmas = arg(2, name=sigmas)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: rhos = arg(3, name=rhos)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return_dists = arg(4, name=return_dists)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bipartite = arg(5, name=bipartite)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $4load_attr.1 = getattr(value=knn_indices, attr=shape)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const6.2 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: n_samples = static_getitem(value=$4load_attr.1, index=0, index_var=$const6.2, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $14load_attr.5 = getattr(value=knn_indices, attr=shape)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const16.6 = const(int, 1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: n_neighbors = static_getitem(value=$14load_attr.5, index=1, index_var=$const16.6, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $22load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $24load_attr.9 = getattr(value=$22load_global.8, attr=zeros)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $28load_attr.11 = getattr(value=knn_indices, attr=size)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $30load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $32load_attr.13 = getattr(value=$30load_global.12, attr=int32)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: rows = call $24load_attr.9($28load_attr.11, func=$24load_attr.9, args=[Var($28load_attr.11, umap_.py:410)], kws=[('dtype', Var($32load_attr.13, umap_.py:410))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $40load_global.16 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $42load_attr.17 = getattr(value=$40load_global.16, attr=zeros)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $46load_attr.19 = getattr(value=knn_indices, attr=size)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $48load_global.20 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $50load_attr.21 = getattr(value=$48load_global.20, attr=int32)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: cols = call $42load_attr.17($46load_attr.19, func=$42load_attr.17, args=[Var($46load_attr.19, umap_.py:411)], kws=[('dtype', Var($50load_attr.21, umap_.py:411))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $58load_global.24 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $60load_attr.25 = getattr(value=$58load_global.24, attr=zeros)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $64load_attr.27 = getattr(value=knn_indices, attr=size)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $66load_global.28 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $68load_attr.29 = getattr(value=$66load_global.28, attr=float32)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: vals = call $60load_attr.25($64load_attr.27, func=$60load_attr.25, args=[Var($64load_attr.27, umap_.py:412)], kws=[('dtype', Var($68load_attr.29, umap_.py:412))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool78 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $78pred = call bool78(return_dists, func=bool78, args=(Var(return_dists, umap_.py:407),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $78pred, 80, 100
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 80
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $80load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $82load_attr.1 = getattr(value=$80load_global.0, attr=zeros)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $86load_attr.3 = getattr(value=knn_indices, attr=size)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $88load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $90load_attr.5 = getattr(value=$88load_global.4, attr=float32)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: dists = call $82load_attr.1($86load_attr.3, func=$82load_attr.1, args=[Var($86load_attr.3, umap_.py:414)], kws=[('dtype', Var($90load_attr.5, umap_.py:414))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 104
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 100
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: dists = const(NoneType, None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 104
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 104
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $106load_global.0 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $110call_function.2 = call $106load_global.0(n_samples, func=$106load_global.0, args=[Var(n_samples, umap_.py:407)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $112get_iter.3 = getiter(value=$110call_function.2)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi114.0 = $112get_iter.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 114
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 114
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $114for_iter.1 = iternext(value=$phi114.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $114for_iter.2 = pair_first(value=$114for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $114for_iter.3 = pair_second(value=$114for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi116.1 = $114for_iter.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $114for_iter.3, 116, 348
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 116
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: i = $phi116.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 118
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 118
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $120load_global.1 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $124call_function.3 = call $120load_global.1(n_neighbors, func=$120load_global.1, args=[Var(n_neighbors, umap_.py:408)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $126get_iter.4 = getiter(value=$124call_function.3)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi128.1 = $126get_iter.4
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 128
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 128
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $128for_iter.2 = iternext(value=$phi128.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $128for_iter.3 = pair_first(value=$128for_iter.2)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $128for_iter.4 = pair_second(value=$128for_iter.2)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi130.2 = $128for_iter.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $128for_iter.4, 130, 344
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 130
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: j = $phi130.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $138build_tuple.6 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $140binary_subscr.7 = getitem(value=knn_indices, index=$138build_tuple.6, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const142.8 = const(int, -1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $144compare_op.9 = $140binary_subscr.7 == $const142.8
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool146 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $146pred = call bool146($144compare_op.9, func=bool146, args=(Var($144compare_op.9, umap_.py:420),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $146pred, 148, 150
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 148
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 351
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 150
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const152.3 = const(bool, False)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $154compare_op.4 = bipartite == $const152.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $162build_tuple.8 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $164binary_subscr.9 = getitem(value=knn_indices, index=$162build_tuple.8, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $168compare_op.11 = $164binary_subscr.9 == i
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $170binary_and.12 = $154compare_op.4 & $168compare_op.11
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool172 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $172pred = call bool172($170binary_and.12, func=bool172, args=(Var($170binary_and.12, umap_.py:424),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $172pred, 174, 180
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 174
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: val = const(float, 0.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 258
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 180
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $186build_tuple.5 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $188binary_subscr.6 = getitem(value=knn_dists, index=$186build_tuple.5, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $194binary_subscr.9 = getitem(value=rhos, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $196binary_subtract.10 = $188binary_subscr.6 - $194binary_subscr.9
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const198.11 = const(float, 0.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $200compare_op.12 = $196binary_subtract.10 <= $const198.11
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool202 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $202pred = call bool202($200compare_op.12, func=bool202, args=(Var($200compare_op.12, umap_.py:426),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $202pred, 216, 204
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 204
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $208binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const210.5 = const(float, 0.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $212compare_op.6 = $208binary_subscr.4 == $const210.5
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool214 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $214pred = call bool214($212compare_op.6, func=bool214, args=(Var($212compare_op.6, umap_.py:426),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $214pred, 216, 222
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 216
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: val = const(float, 1.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 258
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 222
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $222load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $224load_method.3 = getattr(value=$222load_global.2, attr=exp)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $232build_tuple.7 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $234binary_subscr.8 = getitem(value=knn_dists, index=$232build_tuple.7, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $240binary_subscr.11 = getitem(value=rhos, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $242binary_subtract.12 = $234binary_subscr.8 - $240binary_subscr.11
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $248binary_subscr.15 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $250binary_true_divide.16 = $242binary_subtract.12 / $248binary_subscr.15
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $252unary_negative.17 = unary(fn=<built-in function neg>, value=$250binary_true_divide.16)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: val = call $224load_method.3($252unary_negative.17, func=$224load_method.3, args=[Var($252unary_negative.17, umap_.py:429)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 258
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 258
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $266binary_multiply.6 = i * n_neighbors
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $270binary_add.8 = $266binary_multiply.6 + j
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: rows[$270binary_add.8] = i
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $280build_tuple.12 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $282binary_subscr.13 = getitem(value=knn_indices, index=$280build_tuple.12, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $290binary_multiply.17 = i * n_neighbors
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $294binary_add.19 = $290binary_multiply.17 + j
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: cols[$294binary_add.19] = $282binary_subscr.13
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $306binary_multiply.24 = i * n_neighbors
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $310binary_add.26 = $306binary_multiply.24 + j
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: vals[$310binary_add.26] = val
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool316 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $316pred = call bool316(return_dists, func=bool316, args=(Var(return_dists, umap_.py:407),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $316pred, 318, 351
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 318
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $324build_tuple.5 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $326binary_subscr.6 = getitem(value=knn_dists, index=$324build_tuple.5, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $334binary_multiply.10 = i * n_neighbors
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $338binary_add.12 = $334binary_multiply.10 + j
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: dists[$338binary_add.12] = $326binary_subscr.6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 351
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 344
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 346
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 346
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 114
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 348
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 350
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 350
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $358build_tuple.4 = build_tuple(items=[Var(rows, umap_.py:410), Var(cols, umap_.py:411), Var(vals, umap_.py:412), Var(dists, umap_.py:414)])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $360return_value.5 = cast(value=$358build_tuple.4)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return $360return_value.5
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 351
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 128
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG defs defaultdict(<class 'list'>,
            {'$106load_global.0': [<numba.core.ir.Assign object at 0x0000015A39C9D608>],
             '$110call_function.2': [<numba.core.ir.Assign object at 0x0000015A39C74F88>],
             '$112get_iter.3': [<numba.core.ir.Assign object at 0x0000015A39C74E88>],
             '$114for_iter.1': [<numba.core.ir.Assign object at 0x0000015A3FAC4788>],
             '$114for_iter.2': [<numba.core.ir.Assign object at 0x0000015A3FAC4E88>],
             '$114for_iter.3': [<numba.core.ir.Assign object at 0x0000015A3FAC49C8>],
             '$120load_global.1': [<numba.core.ir.Assign object at 0x0000015A3FAC48C8>],
             '$124call_function.3': [<numba.core.ir.Assign object at 0x0000015A3FAC4208>],
             '$126get_iter.4': [<numba.core.ir.Assign object at 0x0000015A4214A188>],
             '$128for_iter.2': [<numba.core.ir.Assign object at 0x0000015A4214AA48>],
             '$128for_iter.3': [<numba.core.ir.Assign object at 0x0000015A4214A588>],
             '$128for_iter.4': [<numba.core.ir.Assign object at 0x0000015A4214AA88>],
             '$138build_tuple.6': [<numba.core.ir.Assign object at 0x0000015A4214A688>],
             '$140binary_subscr.7': [<numba.core.ir.Assign object at 0x0000015A42153188>],
             '$144compare_op.9': [<numba.core.ir.Assign object at 0x0000015A42153588>],
             '$146pred': [<numba.core.ir.Assign object at 0x0000015A42153F08>],
             '$14load_attr.5': [<numba.core.ir.Assign object at 0x0000015A91E7EB08>],
             '$154compare_op.4': [<numba.core.ir.Assign object at 0x0000015A42153A08>],
             '$162build_tuple.8': [<numba.core.ir.Assign object at 0x0000015A42174408>],
             '$164binary_subscr.9': [<numba.core.ir.Assign object at 0x0000015A42174A88>],
             '$168compare_op.11': [<numba.core.ir.Assign object at 0x0000015A42174388>],
             '$170binary_and.12': [<numba.core.ir.Assign object at 0x0000015A42174EC8>],
             '$172pred': [<numba.core.ir.Assign object at 0x0000015A42174548>],
             '$186build_tuple.5': [<numba.core.ir.Assign object at 0x0000015A39CCE788>],
             '$188binary_subscr.6': [<numba.core.ir.Assign object at 0x0000015A39CCE808>],
             '$194binary_subscr.9': [<numba.core.ir.Assign object at 0x0000015A3FA87B48>],
             '$196binary_subtract.10': [<numba.core.ir.Assign object at 0x0000015A3FA87AC8>],
             '$200compare_op.12': [<numba.core.ir.Assign object at 0x0000015A3FA87188>],
             '$202pred': [<numba.core.ir.Assign object at 0x0000015A3FA87948>],
             '$208binary_subscr.4': [<numba.core.ir.Assign object at 0x0000015A3FA87988>],
             '$212compare_op.6': [<numba.core.ir.Assign object at 0x0000015A3FA874C8>],
             '$214pred': [<numba.core.ir.Assign object at 0x0000015A4219AB48>],
             '$222load_global.2': [<numba.core.ir.Assign object at 0x0000015A4219AAC8>],
             '$224load_method.3': [<numba.core.ir.Assign object at 0x0000015A4219A788>],
             '$22load_global.8': [<numba.core.ir.Assign object at 0x0000015A91E8A608>],
             '$232build_tuple.7': [<numba.core.ir.Assign object at 0x0000015A4219A288>],
             '$234binary_subscr.8': [<numba.core.ir.Assign object at 0x0000015A4219A5C8>],
             '$240binary_subscr.11': [<numba.core.ir.Assign object at 0x0000015A4E4E6A88>],
             '$242binary_subtract.12': [<numba.core.ir.Assign object at 0x0000015A4E4E60C8>],
             '$248binary_subscr.15': [<numba.core.ir.Assign object at 0x0000015A4E4E6C08>],
             '$24load_attr.9': [<numba.core.ir.Assign object at 0x0000015AA67ABD88>],
             '$250binary_true_divide.16': [<numba.core.ir.Assign object at 0x0000015A4E4E6CC8>],
             '$252unary_negative.17': [<numba.core.ir.Assign object at 0x0000015A4E4E6BC8>],
             '$266binary_multiply.6': [<numba.core.ir.Assign object at 0x0000015A4E4E6448>],
             '$270binary_add.8': [<numba.core.ir.Assign object at 0x0000015A562345C8>],
             '$280build_tuple.12': [<numba.core.ir.Assign object at 0x0000015A56234AC8>],
             '$282binary_subscr.13': [<numba.core.ir.Assign object at 0x0000015A56234A88>],
             '$28load_attr.11': [<numba.core.ir.Assign object at 0x0000015AA67AB808>],
             '$290binary_multiply.17': [<numba.core.ir.Assign object at 0x0000015A56234CC8>],
             '$294binary_add.19': [<numba.core.ir.Assign object at 0x0000015A56230A48>],
             '$306binary_multiply.24': [<numba.core.ir.Assign object at 0x0000015A56230408>],
             '$30load_global.12': [<numba.core.ir.Assign object at 0x0000015AA67ABA08>],
             '$310binary_add.26': [<numba.core.ir.Assign object at 0x0000015A56230B88>],
             '$316pred': [<numba.core.ir.Assign object at 0x0000015A56230048>],
             '$324build_tuple.5': [<numba.core.ir.Assign object at 0x0000015A42150EC8>],
             '$326binary_subscr.6': [<numba.core.ir.Assign object at 0x0000015A42150188>],
             '$32load_attr.13': [<numba.core.ir.Assign object at 0x0000015A8AF780C8>],
             '$334binary_multiply.10': [<numba.core.ir.Assign object at 0x0000015A42150208>],
             '$338binary_add.12': [<numba.core.ir.Assign object at 0x0000015A42150288>],
             '$358build_tuple.4': [<numba.core.ir.Assign object at 0x0000015A4213F948>],
             '$360return_value.5': [<numba.core.ir.Assign object at 0x0000015A4213F188>],
             '$40load_global.16': [<numba.core.ir.Assign object at 0x0000015AA6789788>],
             '$42load_attr.17': [<numba.core.ir.Assign object at 0x0000015AA6794BC8>],
             '$46load_attr.19': [<numba.core.ir.Assign object at 0x0000015A3F29FB88>],
             '$48load_global.20': [<numba.core.ir.Assign object at 0x0000015A3F29F6C8>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x0000015A91E7A788>],
             '$50load_attr.21': [<numba.core.ir.Assign object at 0x0000015A3F29FC48>],
             '$58load_global.24': [<numba.core.ir.Assign object at 0x0000015A3F29F488>],
             '$60load_attr.25': [<numba.core.ir.Assign object at 0x0000015A3F29F888>],
             '$64load_attr.27': [<numba.core.ir.Assign object at 0x0000015A3F29F8C8>],
             '$66load_global.28': [<numba.core.ir.Assign object at 0x0000015A421013C8>],
             '$68load_attr.29': [<numba.core.ir.Assign object at 0x0000015A42101DC8>],
             '$78pred': [<numba.core.ir.Assign object at 0x0000015A3FA8A648>],
             '$80load_global.0': [<numba.core.ir.Assign object at 0x0000015A3F29F1C8>],
             '$82load_attr.1': [<numba.core.ir.Assign object at 0x0000015A3FA8ACC8>],
             '$86load_attr.3': [<numba.core.ir.Assign object at 0x0000015A3FA8AA88>],
             '$88load_global.4': [<numba.core.ir.Assign object at 0x0000015A3FA8A508>],
             '$90load_attr.5': [<numba.core.ir.Assign object at 0x0000015A3FA8AB88>],
             '$const142.8': [<numba.core.ir.Assign object at 0x0000015A42153908>],
             '$const152.3': [<numba.core.ir.Assign object at 0x0000015A42153FC8>],
             '$const16.6': [<numba.core.ir.Assign object at 0x0000015A91E83708>],
             '$const198.11': [<numba.core.ir.Assign object at 0x0000015A3FA87D48>],
             '$const210.5': [<numba.core.ir.Assign object at 0x0000015A3FA87388>],
             '$const6.2': [<numba.core.ir.Assign object at 0x0000015A91E7A748>],
             '$phi114.0': [<numba.core.ir.Assign object at 0x0000015A39C9D3C8>],
             '$phi116.1': [<numba.core.ir.Assign object at 0x0000015A3FAC4948>],
             '$phi128.1': [<numba.core.ir.Assign object at 0x0000015A3FAC44C8>],
             '$phi130.2': [<numba.core.ir.Assign object at 0x0000015A4214AF08>],
             'bipartite': [<numba.core.ir.Assign object at 0x0000015A91E8C248>],
             'bool146': [<numba.core.ir.Assign object at 0x0000015A42153548>],
             'bool172': [<numba.core.ir.Assign object at 0x0000015A42174688>],
             'bool202': [<numba.core.ir.Assign object at 0x0000015A3FA87F88>],
             'bool214': [<numba.core.ir.Assign object at 0x0000015A3FA87F48>],
             'bool316': [<numba.core.ir.Assign object at 0x0000015A562305C8>],
             'bool78': [<numba.core.ir.Assign object at 0x0000015A3FA8A688>],
             'cols': [<numba.core.ir.Assign object at 0x0000015A3F29FD08>],
             'dists': [<numba.core.ir.Assign object at 0x0000015A39C9DFC8>,
                       <numba.core.ir.Assign object at 0x0000015A39C9D8C8>],
             'i': [<numba.core.ir.Assign object at 0x0000015A3FAC4588>],
             'j': [<numba.core.ir.Assign object at 0x0000015A4214AD48>],
             'knn_dists': [<numba.core.ir.Assign object at 0x0000015A91E77948>],
             'knn_indices': [<numba.core.ir.Assign object at 0x0000015A29F0B5C8>],
             'n_neighbors': [<numba.core.ir.Assign object at 0x0000015A87E5AD88>],
             'n_samples': [<numba.core.ir.Assign object at 0x0000015A87E5A6C8>],
             'return_dists': [<numba.core.ir.Assign object at 0x0000015AA67A8E48>],
             'rhos': [<numba.core.ir.Assign object at 0x0000015AA679CF48>],
             'rows': [<numba.core.ir.Assign object at 0x0000015A87E4E388>],
             'sigmas': [<numba.core.ir.Assign object at 0x0000015A91E77988>],
             'val': [<numba.core.ir.Assign object at 0x0000015A42174888>,
                     <numba.core.ir.Assign object at 0x0000015A4219AB88>,
                     <numba.core.ir.Assign object at 0x0000015A4E4E6C48>],
             'vals': [<numba.core.ir.Assign object at 0x0000015A42101448>]})
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG SSA violators {'dists', 'val'}
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Fix SSA violator on var dists
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: knn_indices = arg(0, name=knn_indices)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: knn_dists = arg(1, name=knn_dists)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: sigmas = arg(2, name=sigmas)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: rhos = arg(3, name=rhos)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return_dists = arg(4, name=return_dists)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bipartite = arg(5, name=bipartite)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $4load_attr.1 = getattr(value=knn_indices, attr=shape)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const6.2 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: n_samples = static_getitem(value=$4load_attr.1, index=0, index_var=$const6.2, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $14load_attr.5 = getattr(value=knn_indices, attr=shape)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const16.6 = const(int, 1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: n_neighbors = static_getitem(value=$14load_attr.5, index=1, index_var=$const16.6, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $22load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $24load_attr.9 = getattr(value=$22load_global.8, attr=zeros)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $28load_attr.11 = getattr(value=knn_indices, attr=size)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $30load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $32load_attr.13 = getattr(value=$30load_global.12, attr=int32)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: rows = call $24load_attr.9($28load_attr.11, func=$24load_attr.9, args=[Var($28load_attr.11, umap_.py:410)], kws=[('dtype', Var($32load_attr.13, umap_.py:410))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $40load_global.16 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $42load_attr.17 = getattr(value=$40load_global.16, attr=zeros)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $46load_attr.19 = getattr(value=knn_indices, attr=size)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $48load_global.20 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $50load_attr.21 = getattr(value=$48load_global.20, attr=int32)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: cols = call $42load_attr.17($46load_attr.19, func=$42load_attr.17, args=[Var($46load_attr.19, umap_.py:411)], kws=[('dtype', Var($50load_attr.21, umap_.py:411))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $58load_global.24 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $60load_attr.25 = getattr(value=$58load_global.24, attr=zeros)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $64load_attr.27 = getattr(value=knn_indices, attr=size)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $66load_global.28 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $68load_attr.29 = getattr(value=$66load_global.28, attr=float32)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: vals = call $60load_attr.25($64load_attr.27, func=$60load_attr.25, args=[Var($64load_attr.27, umap_.py:412)], kws=[('dtype', Var($68load_attr.29, umap_.py:412))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool78 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $78pred = call bool78(return_dists, func=bool78, args=(Var(return_dists, umap_.py:407),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $78pred, 80, 100
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 80
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $80load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $82load_attr.1 = getattr(value=$80load_global.0, attr=zeros)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $86load_attr.3 = getattr(value=knn_indices, attr=size)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $88load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $90load_attr.5 = getattr(value=$88load_global.4, attr=float32)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: dists = call $82load_attr.1($86load_attr.3, func=$82load_attr.1, args=[Var($86load_attr.3, umap_.py:414)], kws=[('dtype', Var($90load_attr.5, umap_.py:414))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG first assign: dists
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG replaced with: dists = call $82load_attr.1($86load_attr.3, func=$82load_attr.1, args=[Var($86load_attr.3, umap_.py:414)], kws=[('dtype', Var($90load_attr.5, umap_.py:414))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 104
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 100
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: dists = const(NoneType, None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG replaced with: dists.1 = const(NoneType, None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 104
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 104
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $106load_global.0 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $110call_function.2 = call $106load_global.0(n_samples, func=$106load_global.0, args=[Var(n_samples, umap_.py:407)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $112get_iter.3 = getiter(value=$110call_function.2)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi114.0 = $112get_iter.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 114
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 114
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $114for_iter.1 = iternext(value=$phi114.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $114for_iter.2 = pair_first(value=$114for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $114for_iter.3 = pair_second(value=$114for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi116.1 = $114for_iter.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $114for_iter.3, 116, 348
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 116
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: i = $phi116.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 118
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 118
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $120load_global.1 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $124call_function.3 = call $120load_global.1(n_neighbors, func=$120load_global.1, args=[Var(n_neighbors, umap_.py:408)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $126get_iter.4 = getiter(value=$124call_function.3)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi128.1 = $126get_iter.4
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 128
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 128
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $128for_iter.2 = iternext(value=$phi128.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $128for_iter.3 = pair_first(value=$128for_iter.2)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $128for_iter.4 = pair_second(value=$128for_iter.2)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi130.2 = $128for_iter.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $128for_iter.4, 130, 344
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 130
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: j = $phi130.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $138build_tuple.6 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $140binary_subscr.7 = getitem(value=knn_indices, index=$138build_tuple.6, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const142.8 = const(int, -1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $144compare_op.9 = $140binary_subscr.7 == $const142.8
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool146 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $146pred = call bool146($144compare_op.9, func=bool146, args=(Var($144compare_op.9, umap_.py:420),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $146pred, 148, 150
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 148
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 351
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 150
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const152.3 = const(bool, False)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $154compare_op.4 = bipartite == $const152.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $162build_tuple.8 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $164binary_subscr.9 = getitem(value=knn_indices, index=$162build_tuple.8, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $168compare_op.11 = $164binary_subscr.9 == i
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $170binary_and.12 = $154compare_op.4 & $168compare_op.11
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool172 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $172pred = call bool172($170binary_and.12, func=bool172, args=(Var($170binary_and.12, umap_.py:424),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $172pred, 174, 180
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 174
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: val = const(float, 0.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 258
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 180
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $186build_tuple.5 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $188binary_subscr.6 = getitem(value=knn_dists, index=$186build_tuple.5, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $194binary_subscr.9 = getitem(value=rhos, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $196binary_subtract.10 = $188binary_subscr.6 - $194binary_subscr.9
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const198.11 = const(float, 0.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $200compare_op.12 = $196binary_subtract.10 <= $const198.11
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool202 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $202pred = call bool202($200compare_op.12, func=bool202, args=(Var($200compare_op.12, umap_.py:426),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $202pred, 216, 204
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 204
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $208binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const210.5 = const(float, 0.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $212compare_op.6 = $208binary_subscr.4 == $const210.5
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool214 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $214pred = call bool214($212compare_op.6, func=bool214, args=(Var($212compare_op.6, umap_.py:426),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $214pred, 216, 222
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 216
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: val = const(float, 1.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 258
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 222
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $222load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $224load_method.3 = getattr(value=$222load_global.2, attr=exp)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $232build_tuple.7 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $234binary_subscr.8 = getitem(value=knn_dists, index=$232build_tuple.7, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $240binary_subscr.11 = getitem(value=rhos, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $242binary_subtract.12 = $234binary_subscr.8 - $240binary_subscr.11
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $248binary_subscr.15 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $250binary_true_divide.16 = $242binary_subtract.12 / $248binary_subscr.15
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $252unary_negative.17 = unary(fn=<built-in function neg>, value=$250binary_true_divide.16)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: val = call $224load_method.3($252unary_negative.17, func=$224load_method.3, args=[Var($252unary_negative.17, umap_.py:429)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 258
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 258
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $266binary_multiply.6 = i * n_neighbors
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $270binary_add.8 = $266binary_multiply.6 + j
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: rows[$270binary_add.8] = i
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $280build_tuple.12 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $282binary_subscr.13 = getitem(value=knn_indices, index=$280build_tuple.12, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $290binary_multiply.17 = i * n_neighbors
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $294binary_add.19 = $290binary_multiply.17 + j
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: cols[$294binary_add.19] = $282binary_subscr.13
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $306binary_multiply.24 = i * n_neighbors
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $310binary_add.26 = $306binary_multiply.24 + j
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: vals[$310binary_add.26] = val
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool316 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $316pred = call bool316(return_dists, func=bool316, args=(Var(return_dists, umap_.py:407),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $316pred, 318, 351
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 318
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $324build_tuple.5 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $326binary_subscr.6 = getitem(value=knn_dists, index=$324build_tuple.5, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $334binary_multiply.10 = i * n_neighbors
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $338binary_add.12 = $334binary_multiply.10 + j
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: dists[$338binary_add.12] = $326binary_subscr.6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 351
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 344
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 346
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 346
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 114
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 348
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 350
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 350
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $358build_tuple.4 = build_tuple(items=[Var(rows, umap_.py:410), Var(cols, umap_.py:411), Var(vals, umap_.py:412), Var(dists, umap_.py:414)])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $360return_value.5 = cast(value=$358build_tuple.4)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return $360return_value.5
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 351
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 128
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {80: [<numba.core.ir.Assign object at 0x0000015A919F4288>],
             100: [<numba.core.ir.Assign object at 0x0000015AA6791348>]})
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: knn_indices = arg(0, name=knn_indices)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: knn_dists = arg(1, name=knn_dists)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: sigmas = arg(2, name=sigmas)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: rhos = arg(3, name=rhos)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return_dists = arg(4, name=return_dists)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bipartite = arg(5, name=bipartite)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $4load_attr.1 = getattr(value=knn_indices, attr=shape)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const6.2 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: n_samples = static_getitem(value=$4load_attr.1, index=0, index_var=$const6.2, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $14load_attr.5 = getattr(value=knn_indices, attr=shape)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const16.6 = const(int, 1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: n_neighbors = static_getitem(value=$14load_attr.5, index=1, index_var=$const16.6, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $22load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $24load_attr.9 = getattr(value=$22load_global.8, attr=zeros)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $28load_attr.11 = getattr(value=knn_indices, attr=size)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $30load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $32load_attr.13 = getattr(value=$30load_global.12, attr=int32)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: rows = call $24load_attr.9($28load_attr.11, func=$24load_attr.9, args=[Var($28load_attr.11, umap_.py:410)], kws=[('dtype', Var($32load_attr.13, umap_.py:410))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $40load_global.16 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $42load_attr.17 = getattr(value=$40load_global.16, attr=zeros)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $46load_attr.19 = getattr(value=knn_indices, attr=size)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $48load_global.20 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $50load_attr.21 = getattr(value=$48load_global.20, attr=int32)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: cols = call $42load_attr.17($46load_attr.19, func=$42load_attr.17, args=[Var($46load_attr.19, umap_.py:411)], kws=[('dtype', Var($50load_attr.21, umap_.py:411))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $58load_global.24 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $60load_attr.25 = getattr(value=$58load_global.24, attr=zeros)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $64load_attr.27 = getattr(value=knn_indices, attr=size)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $66load_global.28 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $68load_attr.29 = getattr(value=$66load_global.28, attr=float32)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: vals = call $60load_attr.25($64load_attr.27, func=$60load_attr.25, args=[Var($64load_attr.27, umap_.py:412)], kws=[('dtype', Var($68load_attr.29, umap_.py:412))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool78 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $78pred = call bool78(return_dists, func=bool78, args=(Var(return_dists, umap_.py:407),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $78pred, 80, 100
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 80
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $80load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $82load_attr.1 = getattr(value=$80load_global.0, attr=zeros)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $86load_attr.3 = getattr(value=knn_indices, attr=size)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $88load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $90load_attr.5 = getattr(value=$88load_global.4, attr=float32)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: dists = call $82load_attr.1($86load_attr.3, func=$82load_attr.1, args=[Var($86load_attr.3, umap_.py:414)], kws=[('dtype', Var($90load_attr.5, umap_.py:414))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 104
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 100
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: dists.1 = const(NoneType, None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 104
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 104
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $106load_global.0 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $110call_function.2 = call $106load_global.0(n_samples, func=$106load_global.0, args=[Var(n_samples, umap_.py:407)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $112get_iter.3 = getiter(value=$110call_function.2)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi114.0 = $112get_iter.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 114
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 114
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $114for_iter.1 = iternext(value=$phi114.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $114for_iter.2 = pair_first(value=$114for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $114for_iter.3 = pair_second(value=$114for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi116.1 = $114for_iter.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $114for_iter.3, 116, 348
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 116
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: i = $phi116.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 118
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 118
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $120load_global.1 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $124call_function.3 = call $120load_global.1(n_neighbors, func=$120load_global.1, args=[Var(n_neighbors, umap_.py:408)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $126get_iter.4 = getiter(value=$124call_function.3)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi128.1 = $126get_iter.4
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 128
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 128
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $128for_iter.2 = iternext(value=$phi128.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $128for_iter.3 = pair_first(value=$128for_iter.2)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $128for_iter.4 = pair_second(value=$128for_iter.2)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi130.2 = $128for_iter.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $128for_iter.4, 130, 344
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 130
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: j = $phi130.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $138build_tuple.6 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $140binary_subscr.7 = getitem(value=knn_indices, index=$138build_tuple.6, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const142.8 = const(int, -1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $144compare_op.9 = $140binary_subscr.7 == $const142.8
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool146 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $146pred = call bool146($144compare_op.9, func=bool146, args=(Var($144compare_op.9, umap_.py:420),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $146pred, 148, 150
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 148
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 351
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 150
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const152.3 = const(bool, False)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $154compare_op.4 = bipartite == $const152.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $162build_tuple.8 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $164binary_subscr.9 = getitem(value=knn_indices, index=$162build_tuple.8, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $168compare_op.11 = $164binary_subscr.9 == i
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $170binary_and.12 = $154compare_op.4 & $168compare_op.11
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool172 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $172pred = call bool172($170binary_and.12, func=bool172, args=(Var($170binary_and.12, umap_.py:424),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $172pred, 174, 180
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 174
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: val = const(float, 0.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 258
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 180
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $186build_tuple.5 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $188binary_subscr.6 = getitem(value=knn_dists, index=$186build_tuple.5, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $194binary_subscr.9 = getitem(value=rhos, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $196binary_subtract.10 = $188binary_subscr.6 - $194binary_subscr.9
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const198.11 = const(float, 0.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $200compare_op.12 = $196binary_subtract.10 <= $const198.11
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool202 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $202pred = call bool202($200compare_op.12, func=bool202, args=(Var($200compare_op.12, umap_.py:426),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $202pred, 216, 204
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 204
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $208binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const210.5 = const(float, 0.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $212compare_op.6 = $208binary_subscr.4 == $const210.5
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool214 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $214pred = call bool214($212compare_op.6, func=bool214, args=(Var($212compare_op.6, umap_.py:426),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $214pred, 216, 222
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 216
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: val = const(float, 1.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 258
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 222
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $222load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $224load_method.3 = getattr(value=$222load_global.2, attr=exp)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $232build_tuple.7 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $234binary_subscr.8 = getitem(value=knn_dists, index=$232build_tuple.7, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $240binary_subscr.11 = getitem(value=rhos, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $242binary_subtract.12 = $234binary_subscr.8 - $240binary_subscr.11
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $248binary_subscr.15 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $250binary_true_divide.16 = $242binary_subtract.12 / $248binary_subscr.15
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $252unary_negative.17 = unary(fn=<built-in function neg>, value=$250binary_true_divide.16)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: val = call $224load_method.3($252unary_negative.17, func=$224load_method.3, args=[Var($252unary_negative.17, umap_.py:429)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 258
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 258
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $266binary_multiply.6 = i * n_neighbors
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $270binary_add.8 = $266binary_multiply.6 + j
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: rows[$270binary_add.8] = i
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $280build_tuple.12 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $282binary_subscr.13 = getitem(value=knn_indices, index=$280build_tuple.12, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $290binary_multiply.17 = i * n_neighbors
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $294binary_add.19 = $290binary_multiply.17 + j
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: cols[$294binary_add.19] = $282binary_subscr.13
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $306binary_multiply.24 = i * n_neighbors
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $310binary_add.26 = $306binary_multiply.24 + j
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: vals[$310binary_add.26] = val
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool316 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $316pred = call bool316(return_dists, func=bool316, args=(Var(return_dists, umap_.py:407),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $316pred, 318, 351
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 318
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $324build_tuple.5 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $326binary_subscr.6 = getitem(value=knn_dists, index=$324build_tuple.5, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $334binary_multiply.10 = i * n_neighbors
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $338binary_add.12 = $334binary_multiply.10 + j
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: dists[$338binary_add.12] = $326binary_subscr.6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def var='dists' stmt=dists[$338binary_add.12] = $326binary_subscr.6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 318
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 258 from label 318
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 258
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 258
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 150 from label 258
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 150
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 150
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 130 from label 150
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 130
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 130
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 128 from label 130
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 128
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 128
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 118 from label 128
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 118
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 118
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 116 from label 118
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 116
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 116
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 114 from label 116
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 114
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 114
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 104 from label 114
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 104
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 104
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG insert phi node dists.2 = phi(incoming_values=[], incoming_blocks=[]) at 104
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 80
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG incoming_def dists = call $82load_attr.1($86load_attr.3, func=$82load_attr.1, args=[Var($86load_attr.3, umap_.py:414)], kws=[('dtype', Var($90load_attr.5, umap_.py:414))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 100
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG incoming_def dists.1 = const(NoneType, None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG replaced with: dists.2[$338binary_add.12] = $326binary_subscr.6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 351
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 344
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 346
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 346
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 114
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 348
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 350
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 350
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $358build_tuple.4 = build_tuple(items=[Var(rows, umap_.py:410), Var(cols, umap_.py:411), Var(vals, umap_.py:412), Var(dists, umap_.py:414)])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def var='dists' stmt=$358build_tuple.4 = build_tuple(items=[Var(rows, umap_.py:410), Var(cols, umap_.py:411), Var(vals, umap_.py:412), Var(dists, umap_.py:414)])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 350
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 348 from label 350
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 348
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 348
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 114 from label 348
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 114
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 114
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG idom 104 from label 114
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 104
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG replaced with: $358build_tuple.4 = build_tuple(items=[Var(rows, umap_.py:410), Var(cols, umap_.py:411), Var(vals, umap_.py:412), Var(dists.2, umap_.py:435)])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $360return_value.5 = cast(value=$358build_tuple.4)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return $360return_value.5
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 351
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9DB408>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 128
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Fix SSA violator on var val
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A42153A88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: knn_indices = arg(0, name=knn_indices)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: knn_dists = arg(1, name=knn_dists)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: sigmas = arg(2, name=sigmas)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: rhos = arg(3, name=rhos)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return_dists = arg(4, name=return_dists)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bipartite = arg(5, name=bipartite)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $4load_attr.1 = getattr(value=knn_indices, attr=shape)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const6.2 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: n_samples = static_getitem(value=$4load_attr.1, index=0, index_var=$const6.2, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $14load_attr.5 = getattr(value=knn_indices, attr=shape)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const16.6 = const(int, 1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: n_neighbors = static_getitem(value=$14load_attr.5, index=1, index_var=$const16.6, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $22load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $24load_attr.9 = getattr(value=$22load_global.8, attr=zeros)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $28load_attr.11 = getattr(value=knn_indices, attr=size)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $30load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $32load_attr.13 = getattr(value=$30load_global.12, attr=int32)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: rows = call $24load_attr.9($28load_attr.11, func=$24load_attr.9, args=[Var($28load_attr.11, umap_.py:410)], kws=[('dtype', Var($32load_attr.13, umap_.py:410))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $40load_global.16 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $42load_attr.17 = getattr(value=$40load_global.16, attr=zeros)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $46load_attr.19 = getattr(value=knn_indices, attr=size)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $48load_global.20 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $50load_attr.21 = getattr(value=$48load_global.20, attr=int32)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: cols = call $42load_attr.17($46load_attr.19, func=$42load_attr.17, args=[Var($46load_attr.19, umap_.py:411)], kws=[('dtype', Var($50load_attr.21, umap_.py:411))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $58load_global.24 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $60load_attr.25 = getattr(value=$58load_global.24, attr=zeros)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $64load_attr.27 = getattr(value=knn_indices, attr=size)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $66load_global.28 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $68load_attr.29 = getattr(value=$66load_global.28, attr=float32)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: vals = call $60load_attr.25($64load_attr.27, func=$60load_attr.25, args=[Var($64load_attr.27, umap_.py:412)], kws=[('dtype', Var($68load_attr.29, umap_.py:412))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool78 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $78pred = call bool78(return_dists, func=bool78, args=(Var(return_dists, umap_.py:407),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $78pred, 80, 100
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 80
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A42153A88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $80load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $82load_attr.1 = getattr(value=$80load_global.0, attr=zeros)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $86load_attr.3 = getattr(value=knn_indices, attr=size)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $88load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $90load_attr.5 = getattr(value=$88load_global.4, attr=float32)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: dists = call $82load_attr.1($86load_attr.3, func=$82load_attr.1, args=[Var($86load_attr.3, umap_.py:414)], kws=[('dtype', Var($90load_attr.5, umap_.py:414))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 104
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 100
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A42153A88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: dists.1 = const(NoneType, None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 104
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 104
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A42153A88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: dists.2 = phi(incoming_values=[Var(dists, umap_.py:414), Var(dists.1, umap_.py:416)], incoming_blocks=[80, 100])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $106load_global.0 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $110call_function.2 = call $106load_global.0(n_samples, func=$106load_global.0, args=[Var(n_samples, umap_.py:407)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $112get_iter.3 = getiter(value=$110call_function.2)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi114.0 = $112get_iter.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 114
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 114
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A42153A88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $114for_iter.1 = iternext(value=$phi114.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $114for_iter.2 = pair_first(value=$114for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $114for_iter.3 = pair_second(value=$114for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi116.1 = $114for_iter.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $114for_iter.3, 116, 348
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 116
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A42153A88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: i = $phi116.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 118
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 118
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A42153A88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $120load_global.1 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $124call_function.3 = call $120load_global.1(n_neighbors, func=$120load_global.1, args=[Var(n_neighbors, umap_.py:408)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $126get_iter.4 = getiter(value=$124call_function.3)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi128.1 = $126get_iter.4
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 128
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 128
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A42153A88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $128for_iter.2 = iternext(value=$phi128.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $128for_iter.3 = pair_first(value=$128for_iter.2)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $128for_iter.4 = pair_second(value=$128for_iter.2)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi130.2 = $128for_iter.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $128for_iter.4, 130, 344
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 130
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A42153A88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: j = $phi130.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $138build_tuple.6 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $140binary_subscr.7 = getitem(value=knn_indices, index=$138build_tuple.6, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const142.8 = const(int, -1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $144compare_op.9 = $140binary_subscr.7 == $const142.8
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool146 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $146pred = call bool146($144compare_op.9, func=bool146, args=(Var($144compare_op.9, umap_.py:420),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $146pred, 148, 150
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 148
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A42153A88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 351
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 150
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A42153A88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const152.3 = const(bool, False)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $154compare_op.4 = bipartite == $const152.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $162build_tuple.8 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $164binary_subscr.9 = getitem(value=knn_indices, index=$162build_tuple.8, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $168compare_op.11 = $164binary_subscr.9 == i
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $170binary_and.12 = $154compare_op.4 & $168compare_op.11
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool172 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $172pred = call bool172($170binary_and.12, func=bool172, args=(Var($170binary_and.12, umap_.py:424),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $172pred, 174, 180
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 174
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A42153A88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: val = const(float, 0.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG first assign: val
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG replaced with: val = const(float, 0.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 258
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 180
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A42153A88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $186build_tuple.5 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $188binary_subscr.6 = getitem(value=knn_dists, index=$186build_tuple.5, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $194binary_subscr.9 = getitem(value=rhos, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $196binary_subtract.10 = $188binary_subscr.6 - $194binary_subscr.9
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const198.11 = const(float, 0.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $200compare_op.12 = $196binary_subtract.10 <= $const198.11
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool202 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $202pred = call bool202($200compare_op.12, func=bool202, args=(Var($200compare_op.12, umap_.py:426),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $202pred, 216, 204
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 204
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A42153A88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $208binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const210.5 = const(float, 0.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $212compare_op.6 = $208binary_subscr.4 == $const210.5
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool214 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $214pred = call bool214($212compare_op.6, func=bool214, args=(Var($212compare_op.6, umap_.py:426),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $214pred, 216, 222
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 216
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A42153A88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: val = const(float, 1.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG replaced with: val.1 = const(float, 1.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 258
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 222
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A42153A88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $222load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $224load_method.3 = getattr(value=$222load_global.2, attr=exp)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $232build_tuple.7 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $234binary_subscr.8 = getitem(value=knn_dists, index=$232build_tuple.7, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $240binary_subscr.11 = getitem(value=rhos, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $242binary_subtract.12 = $234binary_subscr.8 - $240binary_subscr.11
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $248binary_subscr.15 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $250binary_true_divide.16 = $242binary_subtract.12 / $248binary_subscr.15
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $252unary_negative.17 = unary(fn=<built-in function neg>, value=$250binary_true_divide.16)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: val = call $224load_method.3($252unary_negative.17, func=$224load_method.3, args=[Var($252unary_negative.17, umap_.py:429)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG replaced with: val.2 = call $224load_method.3($252unary_negative.17, func=$224load_method.3, args=[Var($252unary_negative.17, umap_.py:429)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 258
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 258
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A42153A88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $266binary_multiply.6 = i * n_neighbors
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $270binary_add.8 = $266binary_multiply.6 + j
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: rows[$270binary_add.8] = i
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $280build_tuple.12 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $282binary_subscr.13 = getitem(value=knn_indices, index=$280build_tuple.12, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $290binary_multiply.17 = i * n_neighbors
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $294binary_add.19 = $290binary_multiply.17 + j
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: cols[$294binary_add.19] = $282binary_subscr.13
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $306binary_multiply.24 = i * n_neighbors
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $310binary_add.26 = $306binary_multiply.24 + j
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: vals[$310binary_add.26] = val
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool316 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $316pred = call bool316(return_dists, func=bool316, args=(Var(return_dists, umap_.py:407),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $316pred, 318, 351
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 318
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A42153A88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $324build_tuple.5 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $326binary_subscr.6 = getitem(value=knn_dists, index=$324build_tuple.5, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $334binary_multiply.10 = i * n_neighbors
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $338binary_add.12 = $334binary_multiply.10 + j
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: dists.2[$338binary_add.12] = $326binary_subscr.6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 351
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 344
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A42153A88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 346
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 346
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A42153A88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 114
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 348
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A42153A88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 350
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 350
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A42153A88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $358build_tuple.4 = build_tuple(items=[Var(rows, umap_.py:410), Var(cols, umap_.py:411), Var(vals, umap_.py:412), Var(dists.2, umap_.py:435)])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $360return_value.5 = cast(value=$358build_tuple.4)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return $360return_value.5
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 351
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A42153A88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 128
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {174: [<numba.core.ir.Assign object at 0x0000015A8A9DD708>],
             216: [<numba.core.ir.Assign object at 0x0000015A91E2F6C8>],
             222: [<numba.core.ir.Assign object at 0x0000015A8A9DB408>]})
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: knn_indices = arg(0, name=knn_indices)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: knn_dists = arg(1, name=knn_dists)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: sigmas = arg(2, name=sigmas)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: rhos = arg(3, name=rhos)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return_dists = arg(4, name=return_dists)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bipartite = arg(5, name=bipartite)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $4load_attr.1 = getattr(value=knn_indices, attr=shape)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const6.2 = const(int, 0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: n_samples = static_getitem(value=$4load_attr.1, index=0, index_var=$const6.2, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $14load_attr.5 = getattr(value=knn_indices, attr=shape)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const16.6 = const(int, 1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: n_neighbors = static_getitem(value=$14load_attr.5, index=1, index_var=$const16.6, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $22load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $24load_attr.9 = getattr(value=$22load_global.8, attr=zeros)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $28load_attr.11 = getattr(value=knn_indices, attr=size)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $30load_global.12 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $32load_attr.13 = getattr(value=$30load_global.12, attr=int32)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: rows = call $24load_attr.9($28load_attr.11, func=$24load_attr.9, args=[Var($28load_attr.11, umap_.py:410)], kws=[('dtype', Var($32load_attr.13, umap_.py:410))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $40load_global.16 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $42load_attr.17 = getattr(value=$40load_global.16, attr=zeros)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $46load_attr.19 = getattr(value=knn_indices, attr=size)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $48load_global.20 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $50load_attr.21 = getattr(value=$48load_global.20, attr=int32)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: cols = call $42load_attr.17($46load_attr.19, func=$42load_attr.17, args=[Var($46load_attr.19, umap_.py:411)], kws=[('dtype', Var($50load_attr.21, umap_.py:411))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $58load_global.24 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $60load_attr.25 = getattr(value=$58load_global.24, attr=zeros)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $64load_attr.27 = getattr(value=knn_indices, attr=size)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $66load_global.28 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $68load_attr.29 = getattr(value=$66load_global.28, attr=float32)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: vals = call $60load_attr.25($64load_attr.27, func=$60load_attr.25, args=[Var($64load_attr.27, umap_.py:412)], kws=[('dtype', Var($68load_attr.29, umap_.py:412))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool78 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $78pred = call bool78(return_dists, func=bool78, args=(Var(return_dists, umap_.py:407),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $78pred, 80, 100
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 80
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $80load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $82load_attr.1 = getattr(value=$80load_global.0, attr=zeros)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $86load_attr.3 = getattr(value=knn_indices, attr=size)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $88load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $90load_attr.5 = getattr(value=$88load_global.4, attr=float32)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: dists = call $82load_attr.1($86load_attr.3, func=$82load_attr.1, args=[Var($86load_attr.3, umap_.py:414)], kws=[('dtype', Var($90load_attr.5, umap_.py:414))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 104
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 100
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: dists.1 = const(NoneType, None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 104
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 104
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: dists.2 = phi(incoming_values=[Var(dists, umap_.py:414), Var(dists.1, umap_.py:416)], incoming_blocks=[80, 100])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $106load_global.0 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $110call_function.2 = call $106load_global.0(n_samples, func=$106load_global.0, args=[Var(n_samples, umap_.py:407)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $112get_iter.3 = getiter(value=$110call_function.2)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi114.0 = $112get_iter.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 114
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 114
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $114for_iter.1 = iternext(value=$phi114.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $114for_iter.2 = pair_first(value=$114for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $114for_iter.3 = pair_second(value=$114for_iter.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi116.1 = $114for_iter.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $114for_iter.3, 116, 348
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 116
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: i = $phi116.1
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 118
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 118
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $120load_global.1 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $124call_function.3 = call $120load_global.1(n_neighbors, func=$120load_global.1, args=[Var(n_neighbors, umap_.py:408)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $126get_iter.4 = getiter(value=$124call_function.3)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi128.1 = $126get_iter.4
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 128
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 128
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $128for_iter.2 = iternext(value=$phi128.1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $128for_iter.3 = pair_first(value=$128for_iter.2)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $128for_iter.4 = pair_second(value=$128for_iter.2)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $phi130.2 = $128for_iter.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $128for_iter.4, 130, 344
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 130
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: j = $phi130.2
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $138build_tuple.6 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $140binary_subscr.7 = getitem(value=knn_indices, index=$138build_tuple.6, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const142.8 = const(int, -1)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $144compare_op.9 = $140binary_subscr.7 == $const142.8
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool146 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $146pred = call bool146($144compare_op.9, func=bool146, args=(Var($144compare_op.9, umap_.py:420),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $146pred, 148, 150
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 148
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 351
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 150
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const152.3 = const(bool, False)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $154compare_op.4 = bipartite == $const152.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $162build_tuple.8 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $164binary_subscr.9 = getitem(value=knn_indices, index=$162build_tuple.8, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $168compare_op.11 = $164binary_subscr.9 == i
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $170binary_and.12 = $154compare_op.4 & $168compare_op.11
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool172 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $172pred = call bool172($170binary_and.12, func=bool172, args=(Var($170binary_and.12, umap_.py:424),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $172pred, 174, 180
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 174
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: val = const(float, 0.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 258
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 180
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $186build_tuple.5 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $188binary_subscr.6 = getitem(value=knn_dists, index=$186build_tuple.5, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $194binary_subscr.9 = getitem(value=rhos, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $196binary_subtract.10 = $188binary_subscr.6 - $194binary_subscr.9
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const198.11 = const(float, 0.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $200compare_op.12 = $196binary_subtract.10 <= $const198.11
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool202 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $202pred = call bool202($200compare_op.12, func=bool202, args=(Var($200compare_op.12, umap_.py:426),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $202pred, 216, 204
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 204
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $208binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const210.5 = const(float, 0.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $212compare_op.6 = $208binary_subscr.4 == $const210.5
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool214 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $214pred = call bool214($212compare_op.6, func=bool214, args=(Var($212compare_op.6, umap_.py:426),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $214pred, 216, 222
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 216
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: val.1 = const(float, 1.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 258
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 222
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $222load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $224load_method.3 = getattr(value=$222load_global.2, attr=exp)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $232build_tuple.7 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $234binary_subscr.8 = getitem(value=knn_dists, index=$232build_tuple.7, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $240binary_subscr.11 = getitem(value=rhos, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $242binary_subtract.12 = $234binary_subscr.8 - $240binary_subscr.11
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $248binary_subscr.15 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $250binary_true_divide.16 = $242binary_subtract.12 / $248binary_subscr.15
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $252unary_negative.17 = unary(fn=<built-in function neg>, value=$250binary_true_divide.16)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: val.2 = call $224load_method.3($252unary_negative.17, func=$224load_method.3, args=[Var($252unary_negative.17, umap_.py:429)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 258
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 258
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $266binary_multiply.6 = i * n_neighbors
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $270binary_add.8 = $266binary_multiply.6 + j
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: rows[$270binary_add.8] = i
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $280build_tuple.12 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $282binary_subscr.13 = getitem(value=knn_indices, index=$280build_tuple.12, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $290binary_multiply.17 = i * n_neighbors
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $294binary_add.19 = $290binary_multiply.17 + j
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: cols[$294binary_add.19] = $282binary_subscr.13
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $306binary_multiply.24 = i * n_neighbors
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $310binary_add.26 = $306binary_multiply.24 + j
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: vals[$310binary_add.26] = val
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def var='val' stmt=vals[$310binary_add.26] = val
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_top label 258
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG insert phi node val.3 = phi(incoming_values=[], incoming_blocks=[]) at 258
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 216
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG incoming_def val.1 = const(float, 1.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 222
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG incoming_def val.2 = call $224load_method.3($252unary_negative.17, func=$224load_method.3, args=[Var($252unary_negative.17, umap_.py:429)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG find_def_from_bottom label 174
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG incoming_def val = const(float, 0.0)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG replaced with: vals[$310binary_add.26] = val.3
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: bool316 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $316pred = call bool316(return_dists, func=bool316, args=(Var(return_dists, umap_.py:407),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: branch $316pred, 318, 351
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 318
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $324build_tuple.5 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $326binary_subscr.6 = getitem(value=knn_dists, index=$324build_tuple.5, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $334binary_multiply.10 = i * n_neighbors
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $338binary_add.12 = $334binary_multiply.10 + j
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: dists.2[$338binary_add.12] = $326binary_subscr.6
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 351
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 344
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 346
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 346
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 114
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 348
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 350
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 350
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $358build_tuple.4 = build_tuple(items=[Var(rows, umap_.py:410), Var(cols, umap_.py:411), Var(vals, umap_.py:412), Var(dists.2, umap_.py:435)])
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $360return_value.5 = cast(value=$358build_tuple.4)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return $360return_value.5
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block rewrite pass on 351
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A9D7CC8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: jump 128
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4169)
           2	LOAD_GLOBAL(arg=0, lineno=4169)
           4	LOAD_ATTR(arg=1, lineno=4169)
           6	LOAD_FAST(arg=0, lineno=4169)
           8	LOAD_FAST(arg=1, lineno=4169)
          10	LOAD_CONST(arg=1, lineno=4169)
          12	CALL_FUNCTION_KW(arg=2, lineno=4169)
          14	STORE_FAST(arg=2, lineno=4169)
          16	LOAD_FAST(arg=2, lineno=4170)
          18	LOAD_METHOD(arg=2, lineno=4170)
          20	CALL_METHOD(arg=0, lineno=4170)
          22	POP_TOP(arg=None, lineno=4170)
          24	LOAD_FAST(arg=2, lineno=4171)
          26	RETURN_VALUE(arg=None, lineno=4171)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4169)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4169)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=4169)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$2load_global.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=4169)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$4load_attr.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=4169)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$4load_attr.1', '$shape6.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=4169)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$4load_attr.1', '$shape6.2', '$dtype8.3']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=12, inst=CALL_FUNCTION_KW(arg=2, lineno=4169)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$4load_attr.1', '$shape6.2', '$dtype8.3', '$const10.4']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=14, inst=STORE_FAST(arg=2, lineno=4169)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$12call_function_kw.5']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=16, inst=LOAD_FAST(arg=2, lineno=4170)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=18, inst=LOAD_METHOD(arg=2, lineno=4170)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$arr16.6']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=20, inst=CALL_METHOD(arg=0, lineno=4170)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$18load_method.7']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=22, inst=POP_TOP(arg=None, lineno=4170)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$20call_method.8']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=24, inst=LOAD_FAST(arg=2, lineno=4171)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=26, inst=RETURN_VALUE(arg=None, lineno=4171)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$arr24.9']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG -------------------------Prune PHIs-------------------------
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG defmap: {}
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG keep phismap: {}
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG new_out: defaultdict(<class 'dict'>, {})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG ----------------------DONE Prune PHIs-----------------------
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'res': '$shape6.2'}), (8, {'res': '$dtype8.3'}), (10, {'res': '$const10.4'}), (12, {'func': '$4load_attr.1', 'args': ['$shape6.2', '$dtype8.3'], 'names': '$const10.4', 'res': '$12call_function_kw.5'}), (14, {'value': '$12call_function_kw.5'}), (16, {'res': '$arr16.6'}), (18, {'item': '$arr16.6', 'res': '$18load_method.7'}), (20, {'func': '$18load_method.7', 'args': [], 'res': '$20call_method.8'}), (24, {'res': '$arr24.9'}), (26, {'retval': '$arr24.9', 'castval': '$26return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:43 interpreter.py DEBUG label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_attr.1']
    arr = call $4load_attr.1(shape, func=$4load_attr.1, args=[Var(shape, arrayobj.py:4169)], kws=[('dtype', Var(dtype, arrayobj.py:4169))], vararg=None, varkwarg=None, target=None) ['$4load_attr.1', 'arr', 'dtype', 'shape']
    $18load_method.7 = getattr(value=arr, attr=_zero_fill) ['$18load_method.7', 'arr']
    $20call_method.8 = call $18load_method.7(func=$18load_method.7, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$18load_method.7', '$20call_method.8']
    $26return_value.10 = cast(value=arr)     ['$26return_value.10', 'arr']
    return $26return_value.10                ['$26return_value.10']

Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 0
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A3FA99F88>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: shape = arg(0, name=shape)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: dtype = arg(1, name=dtype)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: arr = call $4load_attr.1(shape, func=$4load_attr.1, args=[Var(shape, arrayobj.py:4169)], kws=[('dtype', Var(dtype, arrayobj.py:4169))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $18load_method.7 = getattr(value=arr, attr=_zero_fill)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $20call_method.8 = call $18load_method.7(func=$18load_method.7, args=[], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $26return_value.10 = cast(value=arr)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return $26return_value.10
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG defs defaultdict(<class 'list'>,
            {'$18load_method.7': [<numba.core.ir.Assign object at 0x0000015A3FA89B48>],
             '$20call_method.8': [<numba.core.ir.Assign object at 0x0000015A3FA89708>],
             '$26return_value.10': [<numba.core.ir.Assign object at 0x0000015A3FA89A88>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000015A42153B88>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x0000015A91E7E348>],
             'arr': [<numba.core.ir.Assign object at 0x0000015A3FA89688>],
             'dtype': [<numba.core.ir.Assign object at 0x0000015A42174F88>],
             'shape': [<numba.core.ir.Assign object at 0x0000015A421742C8>]})
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG SSA violators set()
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4101)
           2	LOAD_GLOBAL(arg=0, lineno=4101)
           4	LOAD_FAST(arg=0, lineno=4101)
           6	LOAD_FAST(arg=1, lineno=4101)
           8	LOAD_DEREF(arg=0, lineno=4101)
          10	CALL_FUNCTION(arg=3, lineno=4101)
          12	RETURN_VALUE(arg=None, lineno=4101)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4101)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4101)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4101)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$2load_global.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4101)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$2load_global.0', '$shape4.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=8, inst=LOAD_DEREF(arg=0, lineno=4101)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=4101)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2', '$8load_deref.3']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4101)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$10call_function.4']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG -------------------------Prune PHIs-------------------------
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG defmap: {}
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG keep phismap: {}
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG new_out: defaultdict(<class 'dict'>, {})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG ----------------------DONE Prune PHIs-----------------------
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'res': '$dtype6.2'}), (8, {'res': '$8load_deref.3'}), (10, {'func': '$2load_global.0', 'args': ['$shape4.1', '$dtype6.2', '$8load_deref.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:43 interpreter.py DEBUG label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$2load_global.0']
    $8load_deref.3 = freevar(retty: array(int32, 1d, C)) ['$8load_deref.3']
    $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8load_deref.3', 'dtype', 'shape']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 0
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A3FA898C8>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: shape = arg(0, name=shape)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: dtype = arg(1, name=dtype)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $8load_deref.3 = freevar(retty: array(int32, 1d, C))
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $12return_value.5 = cast(value=$10call_function.4)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return $12return_value.5
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x0000015A3FAA28C8>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x0000015A3FAA2688>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000015A3FAA2308>],
             '$8load_deref.3': [<numba.core.ir.Assign object at 0x0000015A3FAA22C8>],
             'dtype': [<numba.core.ir.Assign object at 0x0000015A3FAA2388>],
             'shape': [<numba.core.ir.Assign object at 0x0000015A3FAA2DC8>]})
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG SSA violators set()
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4160)
           2	LOAD_GLOBAL(arg=0, lineno=4160)
           4	LOAD_FAST(arg=0, lineno=4160)
           6	CALL_FUNCTION(arg=1, lineno=4160)
           8	POP_TOP(arg=None, lineno=4160)
          10	LOAD_CONST(arg=0, lineno=4160)
          12	RETURN_VALUE(arg=None, lineno=4160)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4160)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4160)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4160)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$2load_global.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=4160)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$2load_global.0', '$self4.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=8, inst=POP_TOP(arg=None, lineno=4160)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$6call_function.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=10, inst=LOAD_CONST(arg=0, lineno=4160)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4160)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$const10.3']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG -------------------------Prune PHIs-------------------------
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG defmap: {}
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG keep phismap: {}
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG new_out: defaultdict(<class 'dict'>, {})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG ----------------------DONE Prune PHIs-----------------------
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$self4.1'}), (6, {'func': '$2load_global.0', 'args': ['$self4.1'], 'res': '$6call_function.2'}), (10, {'res': '$const10.3'}), (12, {'retval': '$const10.3', 'castval': '$12return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:43 interpreter.py DEBUG label 0:
    self = arg(0, name=self)                 ['self']
    $2load_global.0 = global(_zero_fill_array_method: <intrinsic _zero_fill_array_method>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(self, func=$2load_global.0, args=[Var(self, arrayobj.py:4160)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'self']
    $const10.3 = const(NoneType, None)       ['$const10.3']
    $12return_value.4 = cast(value=$const10.3) ['$12return_value.4', '$const10.3']
    return $12return_value.4                 ['$12return_value.4']

Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 0
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A29913B08>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: self = arg(0, name=self)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $2load_global.0 = global(_zero_fill_array_method: <intrinsic _zero_fill_array_method>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $6call_function.2 = call $2load_global.0(self, func=$2load_global.0, args=[Var(self, arrayobj.py:4160)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $const10.3 = const(NoneType, None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $12return_value.4 = cast(value=$const10.3)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return $12return_value.4
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG defs defaultdict(<class 'list'>,
            {'$12return_value.4': [<numba.core.ir.Assign object at 0x0000015A29E8D588>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000015A29E8D148>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x0000015A29E8D908>],
             '$const10.3': [<numba.core.ir.Assign object at 0x0000015A29E8D8C8>],
             'self': [<numba.core.ir.Assign object at 0x0000015A29E7FD08>]})
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG SSA violators set()
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4169)
           2	LOAD_GLOBAL(arg=0, lineno=4169)
           4	LOAD_ATTR(arg=1, lineno=4169)
           6	LOAD_FAST(arg=0, lineno=4169)
           8	LOAD_FAST(arg=1, lineno=4169)
          10	LOAD_CONST(arg=1, lineno=4169)
          12	CALL_FUNCTION_KW(arg=2, lineno=4169)
          14	STORE_FAST(arg=2, lineno=4169)
          16	LOAD_FAST(arg=2, lineno=4170)
          18	LOAD_METHOD(arg=2, lineno=4170)
          20	CALL_METHOD(arg=0, lineno=4170)
          22	POP_TOP(arg=None, lineno=4170)
          24	LOAD_FAST(arg=2, lineno=4171)
          26	RETURN_VALUE(arg=None, lineno=4171)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4169)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4169)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=4169)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$2load_global.0']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=4169)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$4load_attr.1']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=4169)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$4load_attr.1', '$shape6.2']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=4169)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$4load_attr.1', '$shape6.2', '$dtype8.3']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=12, inst=CALL_FUNCTION_KW(arg=2, lineno=4169)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$4load_attr.1', '$shape6.2', '$dtype8.3', '$const10.4']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=14, inst=STORE_FAST(arg=2, lineno=4169)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$12call_function_kw.5']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=16, inst=LOAD_FAST(arg=2, lineno=4170)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=18, inst=LOAD_METHOD(arg=2, lineno=4170)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$arr16.6']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=20, inst=CALL_METHOD(arg=0, lineno=4170)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$18load_method.7']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=22, inst=POP_TOP(arg=None, lineno=4170)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$20call_method.8']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=24, inst=LOAD_FAST(arg=2, lineno=4171)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG dispatch pc=26, inst=RETURN_VALUE(arg=None, lineno=4171)
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG stack ['$arr24.9']
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG -------------------------Prune PHIs-------------------------
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG defmap: {}
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG keep phismap: {}
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG new_out: defaultdict(<class 'dict'>, {})
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG ----------------------DONE Prune PHIs-----------------------
Sat 01 Jul 2023 19:39:43 byteflow.py DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'res': '$shape6.2'}), (8, {'res': '$dtype8.3'}), (10, {'res': '$const10.4'}), (12, {'func': '$4load_attr.1', 'args': ['$shape6.2', '$dtype8.3'], 'names': '$const10.4', 'res': '$12call_function_kw.5'}), (14, {'value': '$12call_function_kw.5'}), (16, {'res': '$arr16.6'}), (18, {'item': '$arr16.6', 'res': '$18load_method.7'}), (20, {'func': '$18load_method.7', 'args': [], 'res': '$20call_method.8'}), (24, {'res': '$arr24.9'}), (26, {'retval': '$arr24.9', 'castval': '$26return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:43 interpreter.py DEBUG label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_attr.1']
    arr = call $4load_attr.1(shape, func=$4load_attr.1, args=[Var(shape, arrayobj.py:4169)], kws=[('dtype', Var(dtype, arrayobj.py:4169))], vararg=None, varkwarg=None, target=None) ['$4load_attr.1', 'arr', 'dtype', 'shape']
    $18load_method.7 = getattr(value=arr, attr=_zero_fill) ['$18load_method.7', 'arr']
    $20call_method.8 = call $18load_method.7(func=$18load_method.7, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$18load_method.7', '$20call_method.8']
    $26return_value.10 = cast(value=arr)     ['$26return_value.10', 'arr']
    return $26return_value.10                ['$26return_value.10']

Sat 01 Jul 2023 19:39:43 ssa.py DEBUG ==== SSA block analysis pass on 0
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AB57F8088>
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: shape = arg(0, name=shape)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: dtype = arg(1, name=dtype)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: arr = call $4load_attr.1(shape, func=$4load_attr.1, args=[Var(shape, arrayobj.py:4169)], kws=[('dtype', Var(dtype, arrayobj.py:4169))], vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $18load_method.7 = getattr(value=arr, attr=_zero_fill)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $20call_method.8 = call $18load_method.7(func=$18load_method.7, args=[], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: $26return_value.10 = cast(value=arr)
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG on stmt: return $26return_value.10
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG defs defaultdict(<class 'list'>,
            {'$18load_method.7': [<numba.core.ir.Assign object at 0x0000015AB5810C48>],
             '$20call_method.8': [<numba.core.ir.Assign object at 0x0000015AB5810E08>],
             '$26return_value.10': [<numba.core.ir.Assign object at 0x0000015AB5810608>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000015AB580E688>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x0000015AB580ED48>],
             'arr': [<numba.core.ir.Assign object at 0x0000015AB5810508>],
             'dtype': [<numba.core.ir.Assign object at 0x0000015AB580E7C8>],
             'shape': [<numba.core.ir.Assign object at 0x0000015AB580E188>]})
Sat 01 Jul 2023 19:39:43 ssa.py DEBUG SSA violators set()
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4101)
           2	LOAD_GLOBAL(arg=0, lineno=4101)
           4	LOAD_FAST(arg=0, lineno=4101)
           6	LOAD_FAST(arg=1, lineno=4101)
           8	LOAD_DEREF(arg=0, lineno=4101)
          10	CALL_FUNCTION(arg=3, lineno=4101)
          12	RETURN_VALUE(arg=None, lineno=4101)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4101)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4101)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4101)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$2load_global.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4101)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$2load_global.0', '$shape4.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=8, inst=LOAD_DEREF(arg=0, lineno=4101)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=4101)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2', '$8load_deref.3']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4101)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$10call_function.4']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG -------------------------Prune PHIs-------------------------
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG defmap: {}
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG keep phismap: {}
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG new_out: defaultdict(<class 'dict'>, {})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG ----------------------DONE Prune PHIs-----------------------
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'res': '$dtype6.2'}), (8, {'res': '$8load_deref.3'}), (10, {'func': '$2load_global.0', 'args': ['$shape4.1', '$dtype6.2', '$8load_deref.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:44 interpreter.py DEBUG label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$2load_global.0']
    $8load_deref.3 = freevar(retty: array(int32, 1d, C)) ['$8load_deref.3']
    $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8load_deref.3', 'dtype', 'shape']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 0
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AB58269C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: shape = arg(0, name=shape)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dtype = arg(1, name=dtype)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $8load_deref.3 = freevar(retty: array(int32, 1d, C))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $12return_value.5 = cast(value=$10call_function.4)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: return $12return_value.5
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x0000015AB58416C8>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x0000015AB5841188>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000015AB58116C8>],
             '$8load_deref.3': [<numba.core.ir.Assign object at 0x0000015AB58413C8>],
             'dtype': [<numba.core.ir.Assign object at 0x0000015AB5811B88>],
             'shape': [<numba.core.ir.Assign object at 0x0000015AB5811BC8>]})
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG SSA violators set()
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=4101)
           2	LOAD_GLOBAL(arg=0, lineno=4101)
           4	LOAD_FAST(arg=0, lineno=4101)
           6	LOAD_FAST(arg=1, lineno=4101)
           8	LOAD_DEREF(arg=0, lineno=4101)
          10	CALL_FUNCTION(arg=3, lineno=4101)
          12	RETURN_VALUE(arg=None, lineno=4101)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=4101)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4101)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4101)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$2load_global.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4101)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$2load_global.0', '$shape4.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=8, inst=LOAD_DEREF(arg=0, lineno=4101)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=4101)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$2load_global.0', '$shape4.1', '$dtype6.2', '$8load_deref.3']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4101)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$10call_function.4']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG -------------------------Prune PHIs-------------------------
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG defmap: {}
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG keep phismap: {}
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG new_out: defaultdict(<class 'dict'>, {})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG ----------------------DONE Prune PHIs-----------------------
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'res': '$dtype6.2'}), (8, {'res': '$8load_deref.3'}), (10, {'func': '$2load_global.0', 'args': ['$shape4.1', '$dtype6.2', '$8load_deref.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:44 interpreter.py DEBUG label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$2load_global.0']
    $8load_deref.3 = freevar(retty: array(float32, 1d, C)) ['$8load_deref.3']
    $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8load_deref.3', 'dtype', 'shape']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 0
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A28D0EB08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: shape = arg(0, name=shape)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dtype = arg(1, name=dtype)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $8load_deref.3 = freevar(retty: array(float32, 1d, C))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $12return_value.5 = cast(value=$10call_function.4)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: return $12return_value.5
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x0000015B286A7348>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x0000015B286A7D48>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000015A26F56C48>],
             '$8load_deref.3': [<numba.core.ir.Assign object at 0x0000015B286A7E08>],
             'dtype': [<numba.core.ir.Assign object at 0x0000015A26F56088>],
             'shape': [<numba.core.ir.Assign object at 0x0000015A26F56C08>]})
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG SSA violators set()
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=2)
           2	SETUP_LOOP(arg=40, lineno=2)
           4	LOAD_GLOBAL(arg=0, lineno=2)
           6	LOAD_FAST(arg=0, lineno=2)
           8	LOAD_CONST(arg=1, lineno=2)
          10	BINARY_SUBSCR(arg=None, lineno=2)
          12	LOAD_FAST(arg=0, lineno=2)
          14	LOAD_CONST(arg=2, lineno=2)
          16	BINARY_SUBSCR(arg=None, lineno=2)
          18	LOAD_GLOBAL(arg=1, lineno=2)
          20	LOAD_METHOD(arg=2, lineno=2)
          22	LOAD_CONST(arg=2, lineno=2)
          24	CALL_METHOD(arg=1, lineno=2)
          26	BINARY_ADD(arg=None, lineno=2)
          28	CALL_FUNCTION(arg=2, lineno=2)
          30	GET_ITER(arg=None, lineno=2)
>         32	FOR_ITER(arg=8, lineno=2)
          34	STORE_FAST(arg=2, lineno=2)
          36	LOAD_CONST(arg=1, lineno=3)
          38	STORE_FAST(arg=3, lineno=3)
          40	JUMP_ABSOLUTE(arg=32, lineno=3)
>         42	POP_BLOCK(arg=None, lineno=3)
>         44	LOAD_CONST(arg=0, lineno=4)
          46	RETURN_VALUE(arg=None, lineno=4)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=2, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=2 nstack_initial=0)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=2, inst=SETUP_LOOP(arg=40, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=4, inst=LOAD_GLOBAL(arg=0, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$sched6.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=10, inst=BINARY_SUBSCR(arg=None, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$sched6.1', '$const8.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=14, inst=LOAD_CONST(arg=2, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3', '$sched12.4']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=16, inst=BINARY_SUBSCR(arg=None, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3', '$sched12.4', '$const14.5']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=18, inst=LOAD_GLOBAL(arg=1, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3', '$16binary_subscr.6']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=20, inst=LOAD_METHOD(arg=2, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3', '$16binary_subscr.6', '$18load_global.7']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=22, inst=LOAD_CONST(arg=2, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3', '$16binary_subscr.6', '$20load_method.8']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=24, inst=CALL_METHOD(arg=1, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3', '$16binary_subscr.6', '$20load_method.8', '$const22.9']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=26, inst=BINARY_ADD(arg=None, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3', '$16binary_subscr.6', '$24call_method.10']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=28, inst=CALL_FUNCTION(arg=2, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3', '$26binary_add.11']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=30, inst=GET_ITER(arg=None, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$28call_function.12']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=32, stack=('$30get_iter.13',), blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=32 nstack_initial=1)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: ['$phi32.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=32, inst=FOR_ITER(arg=8, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi32.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=42, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=34, stack=('$phi32.0', '$32for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=34 nstack_initial=2)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=42, inst=POP_BLOCK(arg=None, lineno=3)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=34 nstack_initial=2), State(pc_initial=44 nstack_initial=0)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: ['$phi34.0', '$phi34.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=34, inst=STORE_FAST(arg=2, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi34.0', '$phi34.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=3)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi34.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=38, inst=STORE_FAST(arg=3, lineno=3)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi34.0', '$const36.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=40, inst=JUMP_ABSOLUTE(arg=32, lineno=3)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi34.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=32, stack=('$phi34.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=32 nstack_initial=1)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=44, inst=LOAD_CONST(arg=0, lineno=4)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=4)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$const44.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=32 nstack_initial=1)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG -------------------------Prune PHIs-------------------------
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=2 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=1): {'$phi32.0'},
             State(pc_initial=34 nstack_initial=2): {'$phi34.1'},
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set()})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG defmap: {'$phi32.0': State(pc_initial=2 nstack_initial=0),
 '$phi34.1': State(pc_initial=32 nstack_initial=1)}
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi32.0': {('$30get_iter.13',
                           State(pc_initial=2 nstack_initial=0)),
                          ('$phi34.0', State(pc_initial=34 nstack_initial=2))},
             '$phi34.0': {('$phi32.0', State(pc_initial=32 nstack_initial=1))},
             '$phi34.1': {('$32for_iter.2',
                           State(pc_initial=32 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi32.0': {('$30get_iter.13',
                           State(pc_initial=2 nstack_initial=0)),
                          ('$phi32.0', State(pc_initial=32 nstack_initial=1))},
             '$phi34.0': {('$30get_iter.13',
                           State(pc_initial=2 nstack_initial=0))},
             '$phi34.1': {('$32for_iter.2',
                           State(pc_initial=32 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi32.0': {('$30get_iter.13',
                           State(pc_initial=2 nstack_initial=0))},
             '$phi34.0': {('$30get_iter.13',
                           State(pc_initial=2 nstack_initial=0))},
             '$phi34.1': {('$32for_iter.2',
                           State(pc_initial=32 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi32.0': {('$30get_iter.13',
                           State(pc_initial=2 nstack_initial=0))},
             '$phi34.0': {('$30get_iter.13',
                           State(pc_initial=2 nstack_initial=0))},
             '$phi34.1': {('$32for_iter.2',
                           State(pc_initial=32 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG keep phismap: {'$phi32.0': {('$30get_iter.13', State(pc_initial=2 nstack_initial=0))},
 '$phi34.1': {('$32for_iter.2', State(pc_initial=32 nstack_initial=1))}}
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=2 nstack_initial=0): {'$phi32.0': '$30get_iter.13'},
             State(pc_initial=32 nstack_initial=1): {'$phi34.1': '$32for_iter.2'}})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG ----------------------DONE Prune PHIs-----------------------
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={2: ()})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=2 nstack_initial=0):
AdaptBlockInfo(insts=((4, {'res': '$4load_global.0'}), (6, {'res': '$sched6.1'}), (8, {'res': '$const8.2'}), (10, {'index': '$const8.2', 'target': '$sched6.1', 'res': '$10binary_subscr.3'}), (12, {'res': '$sched12.4'}), (14, {'res': '$const14.5'}), (16, {'index': '$const14.5', 'target': '$sched12.4', 'res': '$16binary_subscr.6'}), (18, {'res': '$18load_global.7'}), (20, {'item': '$18load_global.7', 'res': '$20load_method.8'}), (22, {'res': '$const22.9'}), (24, {'func': '$20load_method.8', 'args': ['$const22.9'], 'res': '$24call_method.10'}), (26, {'lhs': '$16binary_subscr.6', 'rhs': '$24call_method.10', 'res': '$26binary_add.11'}), (28, {'func': '$4load_global.0', 'args': ['$10binary_subscr.3', '$26binary_add.11'], 'res': '$28call_function.12'}), (30, {'value': '$28call_function.12', 'res': '$30get_iter.13'})), outgoing_phis={'$phi32.0': '$30get_iter.13'}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: ('$30get_iter.13',)})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=32 nstack_initial=1):
AdaptBlockInfo(insts=((32, {'iterator': '$phi32.0', 'pair': '$32for_iter.1', 'indval': '$32for_iter.2', 'pred': '$32for_iter.3'}),), outgoing_phis={'$phi34.1': '$32for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={42: (), 34: ('$phi32.0', '$32for_iter.2')})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=34 nstack_initial=2):
AdaptBlockInfo(insts=((34, {'value': '$phi34.1'}), (36, {'res': '$const36.2'}), (38, {'value': '$const36.2'}), (40, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={32: ('$phi34.0',)})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={44: ()})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$const44.0'}), (46, {'retval': '$const44.0', 'castval': '$46return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:44 interpreter.py DEBUG label 0:
    sched = arg(0, name=sched)               ['sched']
    rows = arg(1, name=rows)                 ['rows']
    jump 2                                   []
label 2:
    $4load_global.0 = global(range: <class 'range'>) ['$4load_global.0']
    $const8.2 = const(int, 0)                ['$const8.2']
    $10binary_subscr.3 = getitem(value=sched, index=$const8.2, fn=<built-in function getitem>) ['$10binary_subscr.3', '$const8.2', 'sched']
    $const14.5 = const(int, 1)               ['$const14.5']
    $16binary_subscr.6 = getitem(value=sched, index=$const14.5, fn=<built-in function getitem>) ['$16binary_subscr.6', '$const14.5', 'sched']
    $18load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>) ['$18load_global.7']
    $20load_method.8 = getattr(value=$18load_global.7, attr=uint8) ['$18load_global.7', '$20load_method.8']
    $const22.9 = const(int, 1)               ['$const22.9']
    $24call_method.10 = call $20load_method.8($const22.9, func=$20load_method.8, args=[Var($const22.9, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None) ['$20load_method.8', '$24call_method.10', '$const22.9']
    $26binary_add.11 = $16binary_subscr.6 + $24call_method.10 ['$16binary_subscr.6', '$24call_method.10', '$26binary_add.11']
    $28call_function.12 = call $4load_global.0($10binary_subscr.3, $26binary_add.11, func=$4load_global.0, args=[Var($10binary_subscr.3, <string>:2), Var($26binary_add.11, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None) ['$10binary_subscr.3', '$26binary_add.11', '$28call_function.12', '$4load_global.0']
    $30get_iter.13 = getiter(value=$28call_function.12) ['$28call_function.12', '$30get_iter.13']
    $phi32.0 = $30get_iter.13                ['$30get_iter.13', '$phi32.0']
    jump 32                                  []
label 32:
    $32for_iter.1 = iternext(value=$phi32.0) ['$32for_iter.1', '$phi32.0']
    $32for_iter.2 = pair_first(value=$32for_iter.1) ['$32for_iter.1', '$32for_iter.2']
    $32for_iter.3 = pair_second(value=$32for_iter.1) ['$32for_iter.1', '$32for_iter.3']
    $phi34.1 = $32for_iter.2                 ['$32for_iter.2', '$phi34.1']
    branch $32for_iter.3, 34, 42             ['$32for_iter.3']
label 34:
    parfor__index_96 = $phi34.1              ['$phi34.1', 'parfor__index_96']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 32                                  []
label 42:
    jump 44                                  []
label 44:
    $const44.0 = const(NoneType, None)       ['$const44.0']
    $46return_value.1 = cast(value=$const44.0) ['$46return_value.1', '$const44.0']
    return $46return_value.1                 ['$46return_value.1']

Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 0
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AA6786788>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: sched.221 = arg(0, name=sched)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: rows = arg(1, name=rows)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $expr_out_var.100 = const(int32, 0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AA6786788>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $4load_global.0.222 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const8.2.223 = const(int, 0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $10binary_subscr.3.224 = getitem(value=sched.221, index=$const8.2.223, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const14.5.225 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $16binary_subscr.6.226 = getitem(value=sched.221, index=$const14.5.225, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $18load_global.7.227 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $20load_method.8.228 = getattr(value=$18load_global.7.227, attr=uint8)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const22.9.229 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $24call_method.10.230 = call $20load_method.8.228($const22.9.229, func=$20load_method.8.228, args=[Var($const22.9.229, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $26binary_add.11.231 = $16binary_subscr.6.226 + $24call_method.10.230
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $28call_function.12.232 = call $4load_global.0.222($10binary_subscr.3.224, $26binary_add.11.231, func=$4load_global.0.222, args=[Var($10binary_subscr.3.224, <string>:2), Var($26binary_add.11.231, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $30get_iter.13.233 = getiter(value=$28call_function.12.232)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi32.0.234 = $30get_iter.13.233
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 32
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 32
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AA6786788>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $32for_iter.1.235 = iternext(value=$phi32.0.234)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $32for_iter.2.236 = pair_first(value=$32for_iter.1.235)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $32for_iter.3.237 = pair_second(value=$32for_iter.1.235)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi34.1.238 = $32for_iter.2.236
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $32for_iter.3.237, 34, 397
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 34
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AA6786788>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: parfor__index_96 = $phi34.1.238
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 42
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 397
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AA6786788>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 398
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 398
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AA6786788>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const44.0.239 = const(NoneType, None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $46return_value.1.240 = cast(value=$const44.0.239)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: return $46return_value.1.240
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 42
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AA6786788>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: rows[parfor__index_96] = $expr_out_var.100
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 44
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 44
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AA6786788>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 32
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG defs defaultdict(<class 'list'>,
            {'$10binary_subscr.3.224': [<numba.core.ir.Assign object at 0x0000015AB5815088>],
             '$16binary_subscr.6.226': [<numba.core.ir.Assign object at 0x0000015AB5815448>],
             '$18load_global.7.227': [<numba.core.ir.Assign object at 0x0000015AB5815588>],
             '$20load_method.8.228': [<numba.core.ir.Assign object at 0x0000015AB5815708>],
             '$24call_method.10.230': [<numba.core.ir.Assign object at 0x0000015AB5815948>],
             '$26binary_add.11.231': [<numba.core.ir.Assign object at 0x0000015AB5815AC8>],
             '$28call_function.12.232': [<numba.core.ir.Assign object at 0x0000015AB5815C08>],
             '$30get_iter.13.233': [<numba.core.ir.Assign object at 0x0000015AB5815D88>],
             '$32for_iter.1.235': [<numba.core.ir.Assign object at 0x0000015AB5815FC8>],
             '$32for_iter.2.236': [<numba.core.ir.Assign object at 0x0000015AB5824108>],
             '$32for_iter.3.237': [<numba.core.ir.Assign object at 0x0000015AB5824208>],
             '$46return_value.1.240': [<numba.core.ir.Assign object at 0x0000015AB5824B48>],
             '$4load_global.0.222': [<numba.core.ir.Assign object at 0x0000015AB5820348>],
             '$const14.5.225': [<numba.core.ir.Assign object at 0x0000015AB5815308>],
             '$const22.9.229': [<numba.core.ir.Assign object at 0x0000015AB5815808>],
             '$const44.0.239': [<numba.core.ir.Assign object at 0x0000015AB58249C8>],
             '$const8.2.223': [<numba.core.ir.Assign object at 0x0000015AB58202C8>],
             '$expr_out_var.100': [<numba.core.ir.Assign object at 0x0000015AB581BB48>],
             '$phi32.0.234': [<numba.core.ir.Assign object at 0x0000015AB5820408>],
             '$phi34.1.238': [<numba.core.ir.Assign object at 0x0000015AB58242C8>],
             'parfor__index_96': [<numba.core.ir.Assign object at 0x0000015AB58244C8>],
             'rows': [<numba.core.ir.Assign object at 0x0000015AB5820448>],
             'sched.221': [<numba.core.ir.Assign object at 0x0000015AB5820588>]})
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG SSA violators set()
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=2)
           2	SETUP_LOOP(arg=40, lineno=2)
           4	LOAD_GLOBAL(arg=0, lineno=2)
           6	LOAD_FAST(arg=0, lineno=2)
           8	LOAD_CONST(arg=1, lineno=2)
          10	BINARY_SUBSCR(arg=None, lineno=2)
          12	LOAD_FAST(arg=0, lineno=2)
          14	LOAD_CONST(arg=2, lineno=2)
          16	BINARY_SUBSCR(arg=None, lineno=2)
          18	LOAD_GLOBAL(arg=1, lineno=2)
          20	LOAD_METHOD(arg=2, lineno=2)
          22	LOAD_CONST(arg=2, lineno=2)
          24	CALL_METHOD(arg=1, lineno=2)
          26	BINARY_ADD(arg=None, lineno=2)
          28	CALL_FUNCTION(arg=2, lineno=2)
          30	GET_ITER(arg=None, lineno=2)
>         32	FOR_ITER(arg=8, lineno=2)
          34	STORE_FAST(arg=2, lineno=2)
          36	LOAD_CONST(arg=1, lineno=3)
          38	STORE_FAST(arg=3, lineno=3)
          40	JUMP_ABSOLUTE(arg=32, lineno=3)
>         42	POP_BLOCK(arg=None, lineno=3)
>         44	LOAD_CONST(arg=0, lineno=4)
          46	RETURN_VALUE(arg=None, lineno=4)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=2, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=2 nstack_initial=0)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=2, inst=SETUP_LOOP(arg=40, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=4, inst=LOAD_GLOBAL(arg=0, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$sched6.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=10, inst=BINARY_SUBSCR(arg=None, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$sched6.1', '$const8.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=14, inst=LOAD_CONST(arg=2, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3', '$sched12.4']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=16, inst=BINARY_SUBSCR(arg=None, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3', '$sched12.4', '$const14.5']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=18, inst=LOAD_GLOBAL(arg=1, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3', '$16binary_subscr.6']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=20, inst=LOAD_METHOD(arg=2, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3', '$16binary_subscr.6', '$18load_global.7']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=22, inst=LOAD_CONST(arg=2, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3', '$16binary_subscr.6', '$20load_method.8']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=24, inst=CALL_METHOD(arg=1, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3', '$16binary_subscr.6', '$20load_method.8', '$const22.9']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=26, inst=BINARY_ADD(arg=None, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3', '$16binary_subscr.6', '$24call_method.10']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=28, inst=CALL_FUNCTION(arg=2, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3', '$26binary_add.11']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=30, inst=GET_ITER(arg=None, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$28call_function.12']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=32, stack=('$30get_iter.13',), blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=32 nstack_initial=1)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: ['$phi32.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=32, inst=FOR_ITER(arg=8, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi32.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=42, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=34, stack=('$phi32.0', '$32for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=34 nstack_initial=2)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=42, inst=POP_BLOCK(arg=None, lineno=3)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=34 nstack_initial=2), State(pc_initial=44 nstack_initial=0)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: ['$phi34.0', '$phi34.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=34, inst=STORE_FAST(arg=2, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi34.0', '$phi34.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=3)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi34.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=38, inst=STORE_FAST(arg=3, lineno=3)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi34.0', '$const36.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=40, inst=JUMP_ABSOLUTE(arg=32, lineno=3)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi34.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=32, stack=('$phi34.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=32 nstack_initial=1)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=44, inst=LOAD_CONST(arg=0, lineno=4)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=4)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$const44.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=32 nstack_initial=1)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG -------------------------Prune PHIs-------------------------
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=2 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=1): {'$phi32.0'},
             State(pc_initial=34 nstack_initial=2): {'$phi34.1'},
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set()})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG defmap: {'$phi32.0': State(pc_initial=2 nstack_initial=0),
 '$phi34.1': State(pc_initial=32 nstack_initial=1)}
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi32.0': {('$30get_iter.13',
                           State(pc_initial=2 nstack_initial=0)),
                          ('$phi34.0', State(pc_initial=34 nstack_initial=2))},
             '$phi34.0': {('$phi32.0', State(pc_initial=32 nstack_initial=1))},
             '$phi34.1': {('$32for_iter.2',
                           State(pc_initial=32 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi32.0': {('$30get_iter.13',
                           State(pc_initial=2 nstack_initial=0)),
                          ('$phi32.0', State(pc_initial=32 nstack_initial=1))},
             '$phi34.0': {('$30get_iter.13',
                           State(pc_initial=2 nstack_initial=0))},
             '$phi34.1': {('$32for_iter.2',
                           State(pc_initial=32 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi32.0': {('$30get_iter.13',
                           State(pc_initial=2 nstack_initial=0))},
             '$phi34.0': {('$30get_iter.13',
                           State(pc_initial=2 nstack_initial=0))},
             '$phi34.1': {('$32for_iter.2',
                           State(pc_initial=32 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi32.0': {('$30get_iter.13',
                           State(pc_initial=2 nstack_initial=0))},
             '$phi34.0': {('$30get_iter.13',
                           State(pc_initial=2 nstack_initial=0))},
             '$phi34.1': {('$32for_iter.2',
                           State(pc_initial=32 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG keep phismap: {'$phi32.0': {('$30get_iter.13', State(pc_initial=2 nstack_initial=0))},
 '$phi34.1': {('$32for_iter.2', State(pc_initial=32 nstack_initial=1))}}
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=2 nstack_initial=0): {'$phi32.0': '$30get_iter.13'},
             State(pc_initial=32 nstack_initial=1): {'$phi34.1': '$32for_iter.2'}})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG ----------------------DONE Prune PHIs-----------------------
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={2: ()})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=2 nstack_initial=0):
AdaptBlockInfo(insts=((4, {'res': '$4load_global.0'}), (6, {'res': '$sched6.1'}), (8, {'res': '$const8.2'}), (10, {'index': '$const8.2', 'target': '$sched6.1', 'res': '$10binary_subscr.3'}), (12, {'res': '$sched12.4'}), (14, {'res': '$const14.5'}), (16, {'index': '$const14.5', 'target': '$sched12.4', 'res': '$16binary_subscr.6'}), (18, {'res': '$18load_global.7'}), (20, {'item': '$18load_global.7', 'res': '$20load_method.8'}), (22, {'res': '$const22.9'}), (24, {'func': '$20load_method.8', 'args': ['$const22.9'], 'res': '$24call_method.10'}), (26, {'lhs': '$16binary_subscr.6', 'rhs': '$24call_method.10', 'res': '$26binary_add.11'}), (28, {'func': '$4load_global.0', 'args': ['$10binary_subscr.3', '$26binary_add.11'], 'res': '$28call_function.12'}), (30, {'value': '$28call_function.12', 'res': '$30get_iter.13'})), outgoing_phis={'$phi32.0': '$30get_iter.13'}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: ('$30get_iter.13',)})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=32 nstack_initial=1):
AdaptBlockInfo(insts=((32, {'iterator': '$phi32.0', 'pair': '$32for_iter.1', 'indval': '$32for_iter.2', 'pred': '$32for_iter.3'}),), outgoing_phis={'$phi34.1': '$32for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={42: (), 34: ('$phi32.0', '$32for_iter.2')})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=34 nstack_initial=2):
AdaptBlockInfo(insts=((34, {'value': '$phi34.1'}), (36, {'res': '$const36.2'}), (38, {'value': '$const36.2'}), (40, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={32: ('$phi34.0',)})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={44: ()})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$const44.0'}), (46, {'retval': '$const44.0', 'castval': '$46return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:44 interpreter.py DEBUG label 0:
    sched = arg(0, name=sched)               ['sched']
    cols = arg(1, name=cols)                 ['cols']
    jump 2                                   []
label 2:
    $4load_global.0 = global(range: <class 'range'>) ['$4load_global.0']
    $const8.2 = const(int, 0)                ['$const8.2']
    $10binary_subscr.3 = getitem(value=sched, index=$const8.2, fn=<built-in function getitem>) ['$10binary_subscr.3', '$const8.2', 'sched']
    $const14.5 = const(int, 1)               ['$const14.5']
    $16binary_subscr.6 = getitem(value=sched, index=$const14.5, fn=<built-in function getitem>) ['$16binary_subscr.6', '$const14.5', 'sched']
    $18load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>) ['$18load_global.7']
    $20load_method.8 = getattr(value=$18load_global.7, attr=uint8) ['$18load_global.7', '$20load_method.8']
    $const22.9 = const(int, 1)               ['$const22.9']
    $24call_method.10 = call $20load_method.8($const22.9, func=$20load_method.8, args=[Var($const22.9, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None) ['$20load_method.8', '$24call_method.10', '$const22.9']
    $26binary_add.11 = $16binary_subscr.6 + $24call_method.10 ['$16binary_subscr.6', '$24call_method.10', '$26binary_add.11']
    $28call_function.12 = call $4load_global.0($10binary_subscr.3, $26binary_add.11, func=$4load_global.0, args=[Var($10binary_subscr.3, <string>:2), Var($26binary_add.11, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None) ['$10binary_subscr.3', '$26binary_add.11', '$28call_function.12', '$4load_global.0']
    $30get_iter.13 = getiter(value=$28call_function.12) ['$28call_function.12', '$30get_iter.13']
    $phi32.0 = $30get_iter.13                ['$30get_iter.13', '$phi32.0']
    jump 32                                  []
label 32:
    $32for_iter.1 = iternext(value=$phi32.0) ['$32for_iter.1', '$phi32.0']
    $32for_iter.2 = pair_first(value=$32for_iter.1) ['$32for_iter.1', '$32for_iter.2']
    $32for_iter.3 = pair_second(value=$32for_iter.1) ['$32for_iter.1', '$32for_iter.3']
    $phi34.1 = $32for_iter.2                 ['$32for_iter.2', '$phi34.1']
    branch $32for_iter.3, 34, 42             ['$32for_iter.3']
label 34:
    parfor__index_101 = $phi34.1             ['$phi34.1', 'parfor__index_101']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 32                                  []
label 42:
    jump 44                                  []
label 44:
    $const44.0 = const(NoneType, None)       ['$const44.0']
    $46return_value.1 = cast(value=$const44.0) ['$46return_value.1', '$const44.0']
    return $46return_value.1                 ['$46return_value.1']

Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 0
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AB5815448>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: sched.246 = arg(0, name=sched)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: cols = arg(1, name=cols)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $expr_out_var.105 = const(int32, 0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AB5815448>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $4load_global.0.247 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const8.2.248 = const(int, 0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $10binary_subscr.3.249 = getitem(value=sched.246, index=$const8.2.248, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const14.5.250 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $16binary_subscr.6.251 = getitem(value=sched.246, index=$const14.5.250, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $18load_global.7.252 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $20load_method.8.253 = getattr(value=$18load_global.7.252, attr=uint8)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const22.9.254 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $24call_method.10.255 = call $20load_method.8.253($const22.9.254, func=$20load_method.8.253, args=[Var($const22.9.254, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $26binary_add.11.256 = $16binary_subscr.6.251 + $24call_method.10.255
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $28call_function.12.257 = call $4load_global.0.247($10binary_subscr.3.249, $26binary_add.11.256, func=$4load_global.0.247, args=[Var($10binary_subscr.3.249, <string>:2), Var($26binary_add.11.256, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $30get_iter.13.258 = getiter(value=$28call_function.12.257)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi32.0.259 = $30get_iter.13.258
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 32
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 32
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AB5815448>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $32for_iter.1.260 = iternext(value=$phi32.0.259)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $32for_iter.2.261 = pair_first(value=$32for_iter.1.260)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $32for_iter.3.262 = pair_second(value=$32for_iter.1.260)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi34.1.263 = $32for_iter.2.261
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $32for_iter.3.262, 34, 398
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 34
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AB5815448>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: parfor__index_101 = $phi34.1.263
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 42
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 398
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AB5815448>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 399
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 399
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AB5815448>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const44.0.264 = const(NoneType, None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $46return_value.1.265 = cast(value=$const44.0.264)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: return $46return_value.1.265
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 42
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AB5815448>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: cols[parfor__index_101] = $expr_out_var.105
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 44
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 44
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AB5815448>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 32
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG defs defaultdict(<class 'list'>,
            {'$10binary_subscr.3.249': [<numba.core.ir.Assign object at 0x0000015AB4201748>],
             '$16binary_subscr.6.251': [<numba.core.ir.Assign object at 0x0000015AB4201288>],
             '$18load_global.7.252': [<numba.core.ir.Assign object at 0x0000015AB4201B88>],
             '$20load_method.8.253': [<numba.core.ir.Assign object at 0x0000015A420F3788>],
             '$24call_method.10.255': [<numba.core.ir.Assign object at 0x0000015A420F3548>],
             '$26binary_add.11.256': [<numba.core.ir.Assign object at 0x0000015A420F3108>],
             '$28call_function.12.257': [<numba.core.ir.Assign object at 0x0000015A420F3088>],
             '$30get_iter.13.258': [<numba.core.ir.Assign object at 0x0000015A420F3388>],
             '$32for_iter.1.260': [<numba.core.ir.Assign object at 0x0000015A420F3B08>],
             '$32for_iter.2.261': [<numba.core.ir.Assign object at 0x0000015A420F3F88>],
             '$32for_iter.3.262': [<numba.core.ir.Assign object at 0x0000015A420F3E08>],
             '$46return_value.1.265': [<numba.core.ir.Assign object at 0x0000015AA6786908>],
             '$4load_global.0.247': [<numba.core.ir.Assign object at 0x0000015AB4201F08>],
             '$const14.5.250': [<numba.core.ir.Assign object at 0x0000015AB4201408>],
             '$const22.9.254': [<numba.core.ir.Assign object at 0x0000015A420F3FC8>],
             '$const44.0.264': [<numba.core.ir.Assign object at 0x0000015AA6786088>],
             '$const8.2.248': [<numba.core.ir.Assign object at 0x0000015AB4201808>],
             '$expr_out_var.105': [<numba.core.ir.Assign object at 0x0000015AB58118C8>],
             '$phi32.0.259': [<numba.core.ir.Assign object at 0x0000015AB42017C8>],
             '$phi34.1.263': [<numba.core.ir.Assign object at 0x0000015A420F3DC8>],
             'cols': [<numba.core.ir.Assign object at 0x0000015A42117708>],
             'parfor__index_101': [<numba.core.ir.Assign object at 0x0000015A420F3A48>],
             'sched.246': [<numba.core.ir.Assign object at 0x0000015A421176C8>]})
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG SSA violators set()
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=2)
           2	SETUP_LOOP(arg=40, lineno=2)
           4	LOAD_GLOBAL(arg=0, lineno=2)
           6	LOAD_FAST(arg=0, lineno=2)
           8	LOAD_CONST(arg=1, lineno=2)
          10	BINARY_SUBSCR(arg=None, lineno=2)
          12	LOAD_FAST(arg=0, lineno=2)
          14	LOAD_CONST(arg=2, lineno=2)
          16	BINARY_SUBSCR(arg=None, lineno=2)
          18	LOAD_GLOBAL(arg=1, lineno=2)
          20	LOAD_METHOD(arg=2, lineno=2)
          22	LOAD_CONST(arg=2, lineno=2)
          24	CALL_METHOD(arg=1, lineno=2)
          26	BINARY_ADD(arg=None, lineno=2)
          28	CALL_FUNCTION(arg=2, lineno=2)
          30	GET_ITER(arg=None, lineno=2)
>         32	FOR_ITER(arg=8, lineno=2)
          34	STORE_FAST(arg=2, lineno=2)
          36	LOAD_CONST(arg=1, lineno=3)
          38	STORE_FAST(arg=3, lineno=3)
          40	JUMP_ABSOLUTE(arg=32, lineno=3)
>         42	POP_BLOCK(arg=None, lineno=3)
>         44	LOAD_CONST(arg=0, lineno=4)
          46	RETURN_VALUE(arg=None, lineno=4)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=2, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=2 nstack_initial=0)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=2, inst=SETUP_LOOP(arg=40, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=4, inst=LOAD_GLOBAL(arg=0, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$sched6.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=10, inst=BINARY_SUBSCR(arg=None, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$sched6.1', '$const8.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=14, inst=LOAD_CONST(arg=2, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3', '$sched12.4']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=16, inst=BINARY_SUBSCR(arg=None, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3', '$sched12.4', '$const14.5']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=18, inst=LOAD_GLOBAL(arg=1, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3', '$16binary_subscr.6']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=20, inst=LOAD_METHOD(arg=2, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3', '$16binary_subscr.6', '$18load_global.7']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=22, inst=LOAD_CONST(arg=2, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3', '$16binary_subscr.6', '$20load_method.8']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=24, inst=CALL_METHOD(arg=1, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3', '$16binary_subscr.6', '$20load_method.8', '$const22.9']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=26, inst=BINARY_ADD(arg=None, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3', '$16binary_subscr.6', '$24call_method.10']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=28, inst=CALL_FUNCTION(arg=2, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3', '$26binary_add.11']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=30, inst=GET_ITER(arg=None, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$28call_function.12']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=32, stack=('$30get_iter.13',), blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=32 nstack_initial=1)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: ['$phi32.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=32, inst=FOR_ITER(arg=8, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi32.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=42, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=34, stack=('$phi32.0', '$32for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=34 nstack_initial=2)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=42, inst=POP_BLOCK(arg=None, lineno=3)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=34 nstack_initial=2), State(pc_initial=44 nstack_initial=0)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: ['$phi34.0', '$phi34.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=34, inst=STORE_FAST(arg=2, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi34.0', '$phi34.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=3)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi34.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=38, inst=STORE_FAST(arg=3, lineno=3)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi34.0', '$const36.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=40, inst=JUMP_ABSOLUTE(arg=32, lineno=3)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi34.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=32, stack=('$phi34.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=32 nstack_initial=1)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=44, inst=LOAD_CONST(arg=0, lineno=4)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=4)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$const44.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=32 nstack_initial=1)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG -------------------------Prune PHIs-------------------------
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=2 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=1): {'$phi32.0'},
             State(pc_initial=34 nstack_initial=2): {'$phi34.1'},
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set()})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG defmap: {'$phi32.0': State(pc_initial=2 nstack_initial=0),
 '$phi34.1': State(pc_initial=32 nstack_initial=1)}
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi32.0': {('$30get_iter.13',
                           State(pc_initial=2 nstack_initial=0)),
                          ('$phi34.0', State(pc_initial=34 nstack_initial=2))},
             '$phi34.0': {('$phi32.0', State(pc_initial=32 nstack_initial=1))},
             '$phi34.1': {('$32for_iter.2',
                           State(pc_initial=32 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi32.0': {('$30get_iter.13',
                           State(pc_initial=2 nstack_initial=0)),
                          ('$phi32.0', State(pc_initial=32 nstack_initial=1))},
             '$phi34.0': {('$30get_iter.13',
                           State(pc_initial=2 nstack_initial=0))},
             '$phi34.1': {('$32for_iter.2',
                           State(pc_initial=32 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi32.0': {('$30get_iter.13',
                           State(pc_initial=2 nstack_initial=0))},
             '$phi34.0': {('$30get_iter.13',
                           State(pc_initial=2 nstack_initial=0))},
             '$phi34.1': {('$32for_iter.2',
                           State(pc_initial=32 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi32.0': {('$30get_iter.13',
                           State(pc_initial=2 nstack_initial=0))},
             '$phi34.0': {('$30get_iter.13',
                           State(pc_initial=2 nstack_initial=0))},
             '$phi34.1': {('$32for_iter.2',
                           State(pc_initial=32 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG keep phismap: {'$phi32.0': {('$30get_iter.13', State(pc_initial=2 nstack_initial=0))},
 '$phi34.1': {('$32for_iter.2', State(pc_initial=32 nstack_initial=1))}}
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=2 nstack_initial=0): {'$phi32.0': '$30get_iter.13'},
             State(pc_initial=32 nstack_initial=1): {'$phi34.1': '$32for_iter.2'}})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG ----------------------DONE Prune PHIs-----------------------
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={2: ()})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=2 nstack_initial=0):
AdaptBlockInfo(insts=((4, {'res': '$4load_global.0'}), (6, {'res': '$sched6.1'}), (8, {'res': '$const8.2'}), (10, {'index': '$const8.2', 'target': '$sched6.1', 'res': '$10binary_subscr.3'}), (12, {'res': '$sched12.4'}), (14, {'res': '$const14.5'}), (16, {'index': '$const14.5', 'target': '$sched12.4', 'res': '$16binary_subscr.6'}), (18, {'res': '$18load_global.7'}), (20, {'item': '$18load_global.7', 'res': '$20load_method.8'}), (22, {'res': '$const22.9'}), (24, {'func': '$20load_method.8', 'args': ['$const22.9'], 'res': '$24call_method.10'}), (26, {'lhs': '$16binary_subscr.6', 'rhs': '$24call_method.10', 'res': '$26binary_add.11'}), (28, {'func': '$4load_global.0', 'args': ['$10binary_subscr.3', '$26binary_add.11'], 'res': '$28call_function.12'}), (30, {'value': '$28call_function.12', 'res': '$30get_iter.13'})), outgoing_phis={'$phi32.0': '$30get_iter.13'}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: ('$30get_iter.13',)})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=32 nstack_initial=1):
AdaptBlockInfo(insts=((32, {'iterator': '$phi32.0', 'pair': '$32for_iter.1', 'indval': '$32for_iter.2', 'pred': '$32for_iter.3'}),), outgoing_phis={'$phi34.1': '$32for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={42: (), 34: ('$phi32.0', '$32for_iter.2')})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=34 nstack_initial=2):
AdaptBlockInfo(insts=((34, {'value': '$phi34.1'}), (36, {'res': '$const36.2'}), (38, {'value': '$const36.2'}), (40, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={32: ('$phi34.0',)})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={44: ()})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$const44.0'}), (46, {'retval': '$const44.0', 'castval': '$46return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:44 interpreter.py DEBUG label 0:
    sched = arg(0, name=sched)               ['sched']
    vals = arg(1, name=vals)                 ['vals']
    jump 2                                   []
label 2:
    $4load_global.0 = global(range: <class 'range'>) ['$4load_global.0']
    $const8.2 = const(int, 0)                ['$const8.2']
    $10binary_subscr.3 = getitem(value=sched, index=$const8.2, fn=<built-in function getitem>) ['$10binary_subscr.3', '$const8.2', 'sched']
    $const14.5 = const(int, 1)               ['$const14.5']
    $16binary_subscr.6 = getitem(value=sched, index=$const14.5, fn=<built-in function getitem>) ['$16binary_subscr.6', '$const14.5', 'sched']
    $18load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>) ['$18load_global.7']
    $20load_method.8 = getattr(value=$18load_global.7, attr=uint8) ['$18load_global.7', '$20load_method.8']
    $const22.9 = const(int, 1)               ['$const22.9']
    $24call_method.10 = call $20load_method.8($const22.9, func=$20load_method.8, args=[Var($const22.9, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None) ['$20load_method.8', '$24call_method.10', '$const22.9']
    $26binary_add.11 = $16binary_subscr.6 + $24call_method.10 ['$16binary_subscr.6', '$24call_method.10', '$26binary_add.11']
    $28call_function.12 = call $4load_global.0($10binary_subscr.3, $26binary_add.11, func=$4load_global.0, args=[Var($10binary_subscr.3, <string>:2), Var($26binary_add.11, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None) ['$10binary_subscr.3', '$26binary_add.11', '$28call_function.12', '$4load_global.0']
    $30get_iter.13 = getiter(value=$28call_function.12) ['$28call_function.12', '$30get_iter.13']
    $phi32.0 = $30get_iter.13                ['$30get_iter.13', '$phi32.0']
    jump 32                                  []
label 32:
    $32for_iter.1 = iternext(value=$phi32.0) ['$32for_iter.1', '$phi32.0']
    $32for_iter.2 = pair_first(value=$32for_iter.1) ['$32for_iter.1', '$32for_iter.2']
    $32for_iter.3 = pair_second(value=$32for_iter.1) ['$32for_iter.1', '$32for_iter.3']
    $phi34.1 = $32for_iter.2                 ['$32for_iter.2', '$phi34.1']
    branch $32for_iter.3, 34, 42             ['$32for_iter.3']
label 34:
    parfor__index_106 = $phi34.1             ['$phi34.1', 'parfor__index_106']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 32                                  []
label 42:
    jump 44                                  []
label 44:
    $const44.0 = const(NoneType, None)       ['$const44.0']
    $46return_value.1 = cast(value=$const44.0) ['$46return_value.1', '$const44.0']
    return $46return_value.1                 ['$46return_value.1']

Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 0
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AA4D06F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: sched.271 = arg(0, name=sched)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: vals = arg(1, name=vals)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $expr_out_var.110 = const(float32, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AA4D06F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $4load_global.0.272 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const8.2.273 = const(int, 0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $10binary_subscr.3.274 = getitem(value=sched.271, index=$const8.2.273, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const14.5.275 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $16binary_subscr.6.276 = getitem(value=sched.271, index=$const14.5.275, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $18load_global.7.277 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $20load_method.8.278 = getattr(value=$18load_global.7.277, attr=uint8)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const22.9.279 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $24call_method.10.280 = call $20load_method.8.278($const22.9.279, func=$20load_method.8.278, args=[Var($const22.9.279, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $26binary_add.11.281 = $16binary_subscr.6.276 + $24call_method.10.280
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $28call_function.12.282 = call $4load_global.0.272($10binary_subscr.3.274, $26binary_add.11.281, func=$4load_global.0.272, args=[Var($10binary_subscr.3.274, <string>:2), Var($26binary_add.11.281, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $30get_iter.13.283 = getiter(value=$28call_function.12.282)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi32.0.284 = $30get_iter.13.283
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 32
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 32
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AA4D06F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $32for_iter.1.285 = iternext(value=$phi32.0.284)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $32for_iter.2.286 = pair_first(value=$32for_iter.1.285)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $32for_iter.3.287 = pair_second(value=$32for_iter.1.285)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi34.1.288 = $32for_iter.2.286
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $32for_iter.3.287, 34, 399
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 34
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AA4D06F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: parfor__index_106 = $phi34.1.288
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 42
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 399
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AA4D06F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 400
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 400
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AA4D06F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const44.0.289 = const(NoneType, None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $46return_value.1.290 = cast(value=$const44.0.289)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: return $46return_value.1.290
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 42
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AA4D06F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: vals[parfor__index_106] = $expr_out_var.110
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 44
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 44
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015AA4D06F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 32
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG defs defaultdict(<class 'list'>,
            {'$10binary_subscr.3.274': [<numba.core.ir.Assign object at 0x0000015AA4D1A448>],
             '$16binary_subscr.6.276': [<numba.core.ir.Assign object at 0x0000015AA4D1A7C8>],
             '$18load_global.7.277': [<numba.core.ir.Assign object at 0x0000015AA4D1A908>],
             '$20load_method.8.278': [<numba.core.ir.Assign object at 0x0000015AA4D1AA48>],
             '$24call_method.10.280': [<numba.core.ir.Assign object at 0x0000015AA4D1AC88>],
             '$26binary_add.11.281': [<numba.core.ir.Assign object at 0x0000015AA4D1AE08>],
             '$28call_function.12.282': [<numba.core.ir.Assign object at 0x0000015AA4D1AF48>],
             '$30get_iter.13.283': [<numba.core.ir.Assign object at 0x0000015AA4CFE108>],
             '$32for_iter.1.285': [<numba.core.ir.Assign object at 0x0000015AA4CFE348>],
             '$32for_iter.2.286': [<numba.core.ir.Assign object at 0x0000015AA4CFE448>],
             '$32for_iter.3.287': [<numba.core.ir.Assign object at 0x0000015AA4CFE548>],
             '$46return_value.1.290': [<numba.core.ir.Assign object at 0x0000015AA4CFEE88>],
             '$4load_global.0.272': [<numba.core.ir.Assign object at 0x0000015AA4CE9FC8>],
             '$const14.5.275': [<numba.core.ir.Assign object at 0x0000015AA4D1A688>],
             '$const22.9.279': [<numba.core.ir.Assign object at 0x0000015AA4D1AB48>],
             '$const44.0.289': [<numba.core.ir.Assign object at 0x0000015AA4CFED08>],
             '$const8.2.273': [<numba.core.ir.Assign object at 0x0000015AA4D1A3C8>],
             '$expr_out_var.110': [<numba.core.ir.Assign object at 0x0000015A2994F948>],
             '$phi32.0.284': [<numba.core.ir.Assign object at 0x0000015AA4D1A508>],
             '$phi34.1.288': [<numba.core.ir.Assign object at 0x0000015AA4CFE608>],
             'parfor__index_106': [<numba.core.ir.Assign object at 0x0000015AA4CFE808>],
             'sched.271': [<numba.core.ir.Assign object at 0x0000015A8AF50788>],
             'vals': [<numba.core.ir.Assign object at 0x0000015A8AF50608>]})
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG SSA violators set()
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=2)
           2	SETUP_LOOP(arg=40, lineno=2)
           4	LOAD_GLOBAL(arg=0, lineno=2)
           6	LOAD_FAST(arg=0, lineno=2)
           8	LOAD_CONST(arg=1, lineno=2)
          10	BINARY_SUBSCR(arg=None, lineno=2)
          12	LOAD_FAST(arg=0, lineno=2)
          14	LOAD_CONST(arg=2, lineno=2)
          16	BINARY_SUBSCR(arg=None, lineno=2)
          18	LOAD_GLOBAL(arg=1, lineno=2)
          20	LOAD_METHOD(arg=2, lineno=2)
          22	LOAD_CONST(arg=2, lineno=2)
          24	CALL_METHOD(arg=1, lineno=2)
          26	BINARY_ADD(arg=None, lineno=2)
          28	CALL_FUNCTION(arg=2, lineno=2)
          30	GET_ITER(arg=None, lineno=2)
>         32	FOR_ITER(arg=8, lineno=2)
          34	STORE_FAST(arg=2, lineno=2)
          36	LOAD_CONST(arg=1, lineno=3)
          38	STORE_FAST(arg=3, lineno=3)
          40	JUMP_ABSOLUTE(arg=32, lineno=3)
>         42	POP_BLOCK(arg=None, lineno=3)
>         44	LOAD_CONST(arg=0, lineno=4)
          46	RETURN_VALUE(arg=None, lineno=4)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=2, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=2 nstack_initial=0)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=2, inst=SETUP_LOOP(arg=40, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=4, inst=LOAD_GLOBAL(arg=0, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$sched6.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=10, inst=BINARY_SUBSCR(arg=None, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$sched6.1', '$const8.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=14, inst=LOAD_CONST(arg=2, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3', '$sched12.4']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=16, inst=BINARY_SUBSCR(arg=None, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3', '$sched12.4', '$const14.5']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=18, inst=LOAD_GLOBAL(arg=1, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3', '$16binary_subscr.6']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=20, inst=LOAD_METHOD(arg=2, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3', '$16binary_subscr.6', '$18load_global.7']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=22, inst=LOAD_CONST(arg=2, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3', '$16binary_subscr.6', '$20load_method.8']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=24, inst=CALL_METHOD(arg=1, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3', '$16binary_subscr.6', '$20load_method.8', '$const22.9']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=26, inst=BINARY_ADD(arg=None, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3', '$16binary_subscr.6', '$24call_method.10']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=28, inst=CALL_FUNCTION(arg=2, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$4load_global.0', '$10binary_subscr.3', '$26binary_add.11']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=30, inst=GET_ITER(arg=None, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$28call_function.12']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=32, stack=('$30get_iter.13',), blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=32 nstack_initial=1)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: ['$phi32.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=32, inst=FOR_ITER(arg=8, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi32.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=42, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=34, stack=('$phi32.0', '$32for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=34 nstack_initial=2)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=42, inst=POP_BLOCK(arg=None, lineno=3)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=34 nstack_initial=2), State(pc_initial=44 nstack_initial=0)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: ['$phi34.0', '$phi34.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=34, inst=STORE_FAST(arg=2, lineno=2)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi34.0', '$phi34.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=3)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi34.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=38, inst=STORE_FAST(arg=3, lineno=3)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi34.0', '$const36.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=40, inst=JUMP_ABSOLUTE(arg=32, lineno=3)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi34.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=32, stack=('$phi34.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=32 nstack_initial=1)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=44, inst=LOAD_CONST(arg=0, lineno=4)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=4)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$const44.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=32 nstack_initial=1)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG -------------------------Prune PHIs-------------------------
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=2 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=1): {'$phi32.0'},
             State(pc_initial=34 nstack_initial=2): {'$phi34.1'},
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set()})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG defmap: {'$phi32.0': State(pc_initial=2 nstack_initial=0),
 '$phi34.1': State(pc_initial=32 nstack_initial=1)}
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi32.0': {('$30get_iter.13',
                           State(pc_initial=2 nstack_initial=0)),
                          ('$phi34.0', State(pc_initial=34 nstack_initial=2))},
             '$phi34.0': {('$phi32.0', State(pc_initial=32 nstack_initial=1))},
             '$phi34.1': {('$32for_iter.2',
                           State(pc_initial=32 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi32.0': {('$30get_iter.13',
                           State(pc_initial=2 nstack_initial=0)),
                          ('$phi32.0', State(pc_initial=32 nstack_initial=1))},
             '$phi34.0': {('$30get_iter.13',
                           State(pc_initial=2 nstack_initial=0))},
             '$phi34.1': {('$32for_iter.2',
                           State(pc_initial=32 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi32.0': {('$30get_iter.13',
                           State(pc_initial=2 nstack_initial=0))},
             '$phi34.0': {('$30get_iter.13',
                           State(pc_initial=2 nstack_initial=0))},
             '$phi34.1': {('$32for_iter.2',
                           State(pc_initial=32 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi32.0': {('$30get_iter.13',
                           State(pc_initial=2 nstack_initial=0))},
             '$phi34.0': {('$30get_iter.13',
                           State(pc_initial=2 nstack_initial=0))},
             '$phi34.1': {('$32for_iter.2',
                           State(pc_initial=32 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG keep phismap: {'$phi32.0': {('$30get_iter.13', State(pc_initial=2 nstack_initial=0))},
 '$phi34.1': {('$32for_iter.2', State(pc_initial=32 nstack_initial=1))}}
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=2 nstack_initial=0): {'$phi32.0': '$30get_iter.13'},
             State(pc_initial=32 nstack_initial=1): {'$phi34.1': '$32for_iter.2'}})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG ----------------------DONE Prune PHIs-----------------------
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={2: ()})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=2 nstack_initial=0):
AdaptBlockInfo(insts=((4, {'res': '$4load_global.0'}), (6, {'res': '$sched6.1'}), (8, {'res': '$const8.2'}), (10, {'index': '$const8.2', 'target': '$sched6.1', 'res': '$10binary_subscr.3'}), (12, {'res': '$sched12.4'}), (14, {'res': '$const14.5'}), (16, {'index': '$const14.5', 'target': '$sched12.4', 'res': '$16binary_subscr.6'}), (18, {'res': '$18load_global.7'}), (20, {'item': '$18load_global.7', 'res': '$20load_method.8'}), (22, {'res': '$const22.9'}), (24, {'func': '$20load_method.8', 'args': ['$const22.9'], 'res': '$24call_method.10'}), (26, {'lhs': '$16binary_subscr.6', 'rhs': '$24call_method.10', 'res': '$26binary_add.11'}), (28, {'func': '$4load_global.0', 'args': ['$10binary_subscr.3', '$26binary_add.11'], 'res': '$28call_function.12'}), (30, {'value': '$28call_function.12', 'res': '$30get_iter.13'})), outgoing_phis={'$phi32.0': '$30get_iter.13'}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: ('$30get_iter.13',)})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=32 nstack_initial=1):
AdaptBlockInfo(insts=((32, {'iterator': '$phi32.0', 'pair': '$32for_iter.1', 'indval': '$32for_iter.2', 'pred': '$32for_iter.3'}),), outgoing_phis={'$phi34.1': '$32for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={42: (), 34: ('$phi32.0', '$32for_iter.2')})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=34 nstack_initial=2):
AdaptBlockInfo(insts=((34, {'value': '$phi34.1'}), (36, {'res': '$const36.2'}), (38, {'value': '$const36.2'}), (40, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={32: ('$phi34.0',)})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 44, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={44: ()})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$const44.0'}), (46, {'retval': '$const44.0', 'castval': '$46return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:44 interpreter.py DEBUG label 0:
    sched = arg(0, name=sched)               ['sched']
    dists = arg(1, name=dists)               ['dists']
    jump 2                                   []
label 2:
    $4load_global.0 = global(range: <class 'range'>) ['$4load_global.0']
    $const8.2 = const(int, 0)                ['$const8.2']
    $10binary_subscr.3 = getitem(value=sched, index=$const8.2, fn=<built-in function getitem>) ['$10binary_subscr.3', '$const8.2', 'sched']
    $const14.5 = const(int, 1)               ['$const14.5']
    $16binary_subscr.6 = getitem(value=sched, index=$const14.5, fn=<built-in function getitem>) ['$16binary_subscr.6', '$const14.5', 'sched']
    $18load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>) ['$18load_global.7']
    $20load_method.8 = getattr(value=$18load_global.7, attr=uint8) ['$18load_global.7', '$20load_method.8']
    $const22.9 = const(int, 1)               ['$const22.9']
    $24call_method.10 = call $20load_method.8($const22.9, func=$20load_method.8, args=[Var($const22.9, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None) ['$20load_method.8', '$24call_method.10', '$const22.9']
    $26binary_add.11 = $16binary_subscr.6 + $24call_method.10 ['$16binary_subscr.6', '$24call_method.10', '$26binary_add.11']
    $28call_function.12 = call $4load_global.0($10binary_subscr.3, $26binary_add.11, func=$4load_global.0, args=[Var($10binary_subscr.3, <string>:2), Var($26binary_add.11, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None) ['$10binary_subscr.3', '$26binary_add.11', '$28call_function.12', '$4load_global.0']
    $30get_iter.13 = getiter(value=$28call_function.12) ['$28call_function.12', '$30get_iter.13']
    $phi32.0 = $30get_iter.13                ['$30get_iter.13', '$phi32.0']
    jump 32                                  []
label 32:
    $32for_iter.1 = iternext(value=$phi32.0) ['$32for_iter.1', '$phi32.0']
    $32for_iter.2 = pair_first(value=$32for_iter.1) ['$32for_iter.1', '$32for_iter.2']
    $32for_iter.3 = pair_second(value=$32for_iter.1) ['$32for_iter.1', '$32for_iter.3']
    $phi34.1 = $32for_iter.2                 ['$32for_iter.2', '$phi34.1']
    branch $32for_iter.3, 34, 42             ['$32for_iter.3']
label 34:
    parfor__index_111 = $phi34.1             ['$phi34.1', 'parfor__index_111']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 32                                  []
label 42:
    jump 44                                  []
label 44:
    $const44.0 = const(NoneType, None)       ['$const44.0']
    $46return_value.1 = cast(value=$const44.0) ['$46return_value.1', '$const44.0']
    return $46return_value.1                 ['$46return_value.1']

Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 0
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015ABB35FB08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: sched.296 = arg(0, name=sched)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dists = arg(1, name=dists)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $expr_out_var.115 = const(float32, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015ABB35FB08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $4load_global.0.297 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const8.2.298 = const(int, 0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $10binary_subscr.3.299 = getitem(value=sched.296, index=$const8.2.298, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const14.5.300 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $16binary_subscr.6.301 = getitem(value=sched.296, index=$const14.5.300, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $18load_global.7.302 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $20load_method.8.303 = getattr(value=$18load_global.7.302, attr=uint8)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const22.9.304 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $24call_method.10.305 = call $20load_method.8.303($const22.9.304, func=$20load_method.8.303, args=[Var($const22.9.304, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $26binary_add.11.306 = $16binary_subscr.6.301 + $24call_method.10.305
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $28call_function.12.307 = call $4load_global.0.297($10binary_subscr.3.299, $26binary_add.11.306, func=$4load_global.0.297, args=[Var($10binary_subscr.3.299, <string>:2), Var($26binary_add.11.306, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $30get_iter.13.308 = getiter(value=$28call_function.12.307)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi32.0.309 = $30get_iter.13.308
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 32
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 32
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015ABB35FB08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $32for_iter.1.310 = iternext(value=$phi32.0.309)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $32for_iter.2.311 = pair_first(value=$32for_iter.1.310)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $32for_iter.3.312 = pair_second(value=$32for_iter.1.310)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi34.1.313 = $32for_iter.2.311
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $32for_iter.3.312, 34, 400
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 34
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015ABB35FB08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: parfor__index_111 = $phi34.1.313
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 42
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 400
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015ABB35FB08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 401
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 401
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015ABB35FB08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const44.0.314 = const(NoneType, None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $46return_value.1.315 = cast(value=$const44.0.314)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: return $46return_value.1.315
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 42
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015ABB35FB08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dists[parfor__index_111] = $expr_out_var.115
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 44
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 44
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015ABB35FB08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 32
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG defs defaultdict(<class 'list'>,
            {'$10binary_subscr.3.299': [<numba.core.ir.Assign object at 0x0000015ABB3840C8>],
             '$16binary_subscr.6.301': [<numba.core.ir.Assign object at 0x0000015ABB384488>],
             '$18load_global.7.302': [<numba.core.ir.Assign object at 0x0000015ABB3845C8>],
             '$20load_method.8.303': [<numba.core.ir.Assign object at 0x0000015ABB384708>],
             '$24call_method.10.305': [<numba.core.ir.Assign object at 0x0000015ABB384948>],
             '$26binary_add.11.306': [<numba.core.ir.Assign object at 0x0000015ABB384AC8>],
             '$28call_function.12.307': [<numba.core.ir.Assign object at 0x0000015ABB384C08>],
             '$30get_iter.13.308': [<numba.core.ir.Assign object at 0x0000015ABB384D88>],
             '$32for_iter.1.310': [<numba.core.ir.Assign object at 0x0000015ABB384FC8>],
             '$32for_iter.2.311': [<numba.core.ir.Assign object at 0x0000015ABB365488>],
             '$32for_iter.3.312': [<numba.core.ir.Assign object at 0x0000015ABB365948>],
             '$46return_value.1.315': [<numba.core.ir.Assign object at 0x0000015ABB365D88>],
             '$4load_global.0.297': [<numba.core.ir.Assign object at 0x0000015ABB382D48>],
             '$const14.5.300': [<numba.core.ir.Assign object at 0x0000015ABB384348>],
             '$const22.9.304': [<numba.core.ir.Assign object at 0x0000015ABB384808>],
             '$const44.0.314': [<numba.core.ir.Assign object at 0x0000015ABB365D48>],
             '$const8.2.298': [<numba.core.ir.Assign object at 0x0000015ABB382E88>],
             '$expr_out_var.115': [<numba.core.ir.Assign object at 0x0000015A28D0DC08>],
             '$phi32.0.309': [<numba.core.ir.Assign object at 0x0000015AA4CE3F48>],
             '$phi34.1.313': [<numba.core.ir.Assign object at 0x0000015ABB365408>],
             'dists': [<numba.core.ir.Assign object at 0x0000015AA4CE95C8>],
             'parfor__index_111': [<numba.core.ir.Assign object at 0x0000015ABB365888>],
             'sched.296': [<numba.core.ir.Assign object at 0x0000015AA4CE9588>]})
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG SSA violators set()
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=90)
           2	SETUP_LOOP(arg=818, lineno=90)
           6	LOAD_GLOBAL(arg=0, lineno=90)
           8	LOAD_METHOD(arg=1, lineno=90)
          10	LOAD_FAST(arg=5, lineno=90)
          12	LOAD_ATTR(arg=2, lineno=90)
          14	LOAD_CONST(arg=1, lineno=90)
          16	BINARY_SUBSCR(arg=None, lineno=90)
          18	CALL_METHOD(arg=1, lineno=90)
          20	GET_ITER(arg=None, lineno=90)
>         22	FOR_ITER(arg=796, lineno=90)
          26	STORE_FAST(arg=27, lineno=90)
          28	LOAD_FAST(arg=15, lineno=91)
          30	LOAD_FAST(arg=27, lineno=91)
          32	BINARY_SUBSCR(arg=None, lineno=91)
          34	LOAD_FAST(arg=16, lineno=91)
          36	COMPARE_OP(arg=1, lineno=91)
          38	POP_JUMP_IF_FALSE(arg=22, lineno=91)
          40	LOAD_FAST(arg=2, lineno=92)
          42	LOAD_FAST(arg=27, lineno=92)
          44	BINARY_SUBSCR(arg=None, lineno=92)
          46	STORE_FAST(arg=28, lineno=92)
          48	LOAD_FAST(arg=3, lineno=93)
          50	LOAD_FAST(arg=27, lineno=93)
          52	BINARY_SUBSCR(arg=None, lineno=93)
          54	STORE_FAST(arg=29, lineno=93)
          56	LOAD_FAST(arg=0, lineno=95)
          58	LOAD_FAST(arg=28, lineno=95)
          60	BINARY_SUBSCR(arg=None, lineno=95)
          62	STORE_FAST(arg=30, lineno=95)
          64	LOAD_FAST(arg=1, lineno=96)
          66	LOAD_FAST(arg=29, lineno=96)
          68	BINARY_SUBSCR(arg=None, lineno=96)
          70	STORE_FAST(arg=31, lineno=96)
          72	LOAD_GLOBAL(arg=3, lineno=98)
          74	LOAD_FAST(arg=30, lineno=98)
          76	LOAD_FAST(arg=31, lineno=98)
          78	CALL_FUNCTION(arg=2, lineno=98)
          80	STORE_FAST(arg=32, lineno=98)
          82	LOAD_FAST(arg=17, lineno=100)
          84	POP_JUMP_IF_FALSE(arg=354, lineno=100)
          88	LOAD_CONST(arg=2, lineno=101)
          90	LOAD_CONST(arg=2, lineno=101)
          92	LOAD_FAST(arg=6, lineno=101)
          94	LOAD_GLOBAL(arg=4, lineno=101)
          96	LOAD_FAST(arg=32, lineno=101)
          98	LOAD_FAST(arg=7, lineno=101)
         100	CALL_FUNCTION(arg=2, lineno=101)
         102	BINARY_MULTIPLY(arg=None, lineno=101)
         104	BINARY_ADD(arg=None, lineno=101)
         106	BINARY_TRUE_DIVIDE(arg=None, lineno=101)
         108	STORE_FAST(arg=33, lineno=101)
         110	LOAD_FAST(arg=6, lineno=103)
         112	LOAD_FAST(arg=7, lineno=103)
         114	BINARY_MULTIPLY(arg=None, lineno=103)
         116	LOAD_GLOBAL(arg=4, lineno=103)
         118	LOAD_FAST(arg=32, lineno=103)
         120	LOAD_FAST(arg=7, lineno=103)
         122	LOAD_CONST(arg=3, lineno=103)
         124	BINARY_SUBTRACT(arg=None, lineno=103)
         126	CALL_FUNCTION(arg=2, lineno=103)
         128	BINARY_MULTIPLY(arg=None, lineno=103)
         130	LOAD_CONST(arg=2, lineno=103)
         132	LOAD_FAST(arg=6, lineno=103)
         134	LOAD_GLOBAL(arg=4, lineno=103)
         136	LOAD_FAST(arg=32, lineno=103)
         138	LOAD_FAST(arg=7, lineno=103)
         140	CALL_FUNCTION(arg=2, lineno=103)
         142	BINARY_MULTIPLY(arg=None, lineno=103)
         144	BINARY_ADD(arg=None, lineno=103)
         146	BINARY_TRUE_DIVIDE(arg=None, lineno=103)
         148	STORE_FAST(arg=34, lineno=103)
         150	LOAD_FAST(arg=33, lineno=106)
         152	LOAD_FAST(arg=18, lineno=106)
         154	LOAD_FAST(arg=29, lineno=106)
         156	BINARY_SUBSCR(arg=None, lineno=106)
         158	BINARY_TRUE_DIVIDE(arg=None, lineno=106)
         160	STORE_FAST(arg=35, lineno=106)
         162	LOAD_FAST(arg=33, lineno=107)
         164	LOAD_FAST(arg=18, lineno=107)
         166	LOAD_FAST(arg=28, lineno=107)
         168	BINARY_SUBSCR(arg=None, lineno=107)
         170	BINARY_TRUE_DIVIDE(arg=None, lineno=107)
         172	STORE_FAST(arg=36, lineno=107)
         174	LOAD_FAST(arg=35, lineno=109)
         176	LOAD_CONST(arg=2, lineno=110)
         178	LOAD_FAST(arg=7, lineno=110)
         180	LOAD_CONST(arg=3, lineno=110)
         182	LOAD_FAST(arg=33, lineno=110)
         184	BINARY_SUBTRACT(arg=None, lineno=110)
         186	BINARY_MULTIPLY(arg=None, lineno=110)
         188	BINARY_SUBTRACT(arg=None, lineno=110)
         190	LOAD_GLOBAL(arg=5, lineno=110)
         192	LOAD_METHOD(arg=6, lineno=110)
         194	LOAD_FAST(arg=19, lineno=110)
         196	LOAD_FAST(arg=29, lineno=110)
         198	BINARY_SUBSCR(arg=None, lineno=110)
         200	CALL_METHOD(arg=1, lineno=110)
         202	BINARY_TRUE_DIVIDE(arg=None, lineno=110)
         204	LOAD_FAST(arg=34, lineno=110)
         206	BINARY_ADD(arg=None, lineno=110)
         208	BINARY_MULTIPLY(arg=None, lineno=110)
         210	STORE_FAST(arg=37, lineno=110)
         212	LOAD_FAST(arg=36, lineno=112)
         214	LOAD_CONST(arg=2, lineno=113)
         216	LOAD_FAST(arg=7, lineno=113)
         218	LOAD_CONST(arg=3, lineno=113)
         220	LOAD_FAST(arg=33, lineno=113)
         222	BINARY_SUBTRACT(arg=None, lineno=113)
         224	BINARY_MULTIPLY(arg=None, lineno=113)
         226	BINARY_SUBTRACT(arg=None, lineno=113)
         228	LOAD_GLOBAL(arg=5, lineno=113)
         230	LOAD_METHOD(arg=6, lineno=113)
         232	LOAD_FAST(arg=19, lineno=113)
         234	LOAD_FAST(arg=28, lineno=113)
         236	BINARY_SUBSCR(arg=None, lineno=113)
         238	CALL_METHOD(arg=1, lineno=113)
         240	BINARY_TRUE_DIVIDE(arg=None, lineno=113)
         242	LOAD_FAST(arg=34, lineno=113)
         244	BINARY_ADD(arg=None, lineno=113)
         246	BINARY_MULTIPLY(arg=None, lineno=113)
         248	STORE_FAST(arg=38, lineno=113)
         250	LOAD_FAST(arg=21, lineno=116)
         252	LOAD_FAST(arg=21, lineno=116)
         254	BINARY_MULTIPLY(arg=None, lineno=116)
         256	STORE_FAST(arg=39, lineno=116)
         258	LOAD_FAST(arg=24, lineno=118)
         260	LOAD_FAST(arg=29, lineno=118)
         262	BINARY_SUBSCR(arg=None, lineno=118)
         264	LOAD_FAST(arg=20, lineno=119)
         266	LOAD_FAST(arg=19, lineno=119)
         268	LOAD_FAST(arg=29, lineno=119)
         270	BINARY_SUBSCR(arg=None, lineno=119)
         272	LOAD_FAST(arg=22, lineno=119)
         274	BINARY_SUBTRACT(arg=None, lineno=119)
         276	BINARY_MULTIPLY(arg=None, lineno=119)
         278	LOAD_FAST(arg=39, lineno=119)
         280	BINARY_TRUE_DIVIDE(arg=None, lineno=119)
         282	BINARY_SUBTRACT(arg=None, lineno=119)
         284	STORE_FAST(arg=40, lineno=119)
         286	LOAD_FAST(arg=24, lineno=122)
         288	LOAD_FAST(arg=28, lineno=122)
         290	BINARY_SUBSCR(arg=None, lineno=122)
         292	LOAD_FAST(arg=20, lineno=123)
         294	LOAD_FAST(arg=19, lineno=123)
         296	LOAD_FAST(arg=28, lineno=123)
         298	BINARY_SUBSCR(arg=None, lineno=123)
         300	LOAD_FAST(arg=22, lineno=123)
         302	BINARY_SUBTRACT(arg=None, lineno=123)
         304	BINARY_MULTIPLY(arg=None, lineno=123)
         306	LOAD_FAST(arg=39, lineno=123)
         308	BINARY_TRUE_DIVIDE(arg=None, lineno=123)
         310	BINARY_SUBTRACT(arg=None, lineno=123)
         312	STORE_FAST(arg=41, lineno=123)
         314	LOAD_FAST(arg=23, lineno=131)
         316	LOAD_FAST(arg=26, lineno=131)
         318	BINARY_MULTIPLY(arg=None, lineno=131)
         320	LOAD_FAST(arg=40, lineno=131)
         322	LOAD_FAST(arg=37, lineno=131)
         324	BINARY_MULTIPLY(arg=None, lineno=131)
         326	LOAD_FAST(arg=41, lineno=131)
         328	LOAD_FAST(arg=38, lineno=131)
         330	BINARY_MULTIPLY(arg=None, lineno=131)
         332	BINARY_ADD(arg=None, lineno=131)
         334	BINARY_MULTIPLY(arg=None, lineno=131)
         336	LOAD_FAST(arg=25, lineno=131)
         338	LOAD_FAST(arg=27, lineno=131)
         340	BINARY_SUBSCR(arg=None, lineno=131)
         342	LOAD_FAST(arg=21, lineno=131)
         344	BINARY_MULTIPLY(arg=None, lineno=131)
         346	BINARY_TRUE_DIVIDE(arg=None, lineno=131)
         348	LOAD_FAST(arg=4, lineno=131)
         350	BINARY_TRUE_DIVIDE(arg=None, lineno=131)
         352	STORE_FAST(arg=42, lineno=131)
>        354	LOAD_FAST(arg=32, lineno=134)
         356	LOAD_CONST(arg=4, lineno=134)
         358	COMPARE_OP(arg=4, lineno=134)
         360	POP_JUMP_IF_FALSE(arg=414, lineno=134)
         364	LOAD_CONST(arg=5, lineno=135)
         366	LOAD_FAST(arg=6, lineno=135)
         368	BINARY_MULTIPLY(arg=None, lineno=135)
         370	LOAD_FAST(arg=7, lineno=135)
         372	BINARY_MULTIPLY(arg=None, lineno=135)
         374	LOAD_GLOBAL(arg=4, lineno=135)
         376	LOAD_FAST(arg=32, lineno=135)
         378	LOAD_FAST(arg=7, lineno=135)
         380	LOAD_CONST(arg=2, lineno=135)
         382	BINARY_SUBTRACT(arg=None, lineno=135)
         384	CALL_FUNCTION(arg=2, lineno=135)
         386	BINARY_MULTIPLY(arg=None, lineno=135)
         388	STORE_FAST(arg=43, lineno=135)
         390	LOAD_FAST(arg=43, lineno=136)
         392	LOAD_FAST(arg=6, lineno=136)
         394	LOAD_GLOBAL(arg=4, lineno=136)
         396	LOAD_FAST(arg=32, lineno=136)
         398	LOAD_FAST(arg=7, lineno=136)
         400	CALL_FUNCTION(arg=2, lineno=136)
         402	BINARY_MULTIPLY(arg=None, lineno=136)
         404	LOAD_CONST(arg=2, lineno=136)
         406	BINARY_ADD(arg=None, lineno=136)
         408	INPLACE_TRUE_DIVIDE(arg=None, lineno=136)
         410	STORE_FAST(arg=43, lineno=136)
         412	JUMP_FORWARD(arg=4, lineno=136)
>        414	LOAD_CONST(arg=4, lineno=138)
         416	STORE_FAST(arg=43, lineno=138)
>        418	SETUP_LOOP(arg=128, lineno=140)
         420	LOAD_GLOBAL(arg=7, lineno=140)
         422	LOAD_FAST(arg=10, lineno=140)
         424	CALL_FUNCTION(arg=1, lineno=140)
         426	GET_ITER(arg=None, lineno=140)
>        428	FOR_ITER(arg=116, lineno=140)
         430	STORE_FAST(arg=44, lineno=140)
         432	LOAD_GLOBAL(arg=8, lineno=141)
         434	LOAD_FAST(arg=43, lineno=141)
         436	LOAD_FAST(arg=30, lineno=141)
         438	LOAD_FAST(arg=44, lineno=141)
         440	BINARY_SUBSCR(arg=None, lineno=141)
         442	LOAD_FAST(arg=31, lineno=141)
         444	LOAD_FAST(arg=44, lineno=141)
         446	BINARY_SUBSCR(arg=None, lineno=141)
         448	BINARY_SUBTRACT(arg=None, lineno=141)
         450	BINARY_MULTIPLY(arg=None, lineno=141)
         452	CALL_FUNCTION(arg=1, lineno=141)
         454	STORE_FAST(arg=45, lineno=141)
         456	LOAD_FAST(arg=17, lineno=143)
         458	POP_JUMP_IF_FALSE(arg=494, lineno=143)
         462	LOAD_FAST(arg=45, lineno=146)
         464	LOAD_GLOBAL(arg=8, lineno=146)
         466	LOAD_CONST(arg=6, lineno=146)
         468	LOAD_FAST(arg=42, lineno=146)
         470	BINARY_MULTIPLY(arg=None, lineno=146)
         472	LOAD_FAST(arg=30, lineno=146)
         474	LOAD_FAST(arg=44, lineno=146)
         476	BINARY_SUBSCR(arg=None, lineno=146)
         478	LOAD_FAST(arg=31, lineno=146)
         480	LOAD_FAST(arg=44, lineno=146)
         482	BINARY_SUBSCR(arg=None, lineno=146)
         484	BINARY_SUBTRACT(arg=None, lineno=146)
         486	BINARY_MULTIPLY(arg=None, lineno=146)
         488	CALL_FUNCTION(arg=1, lineno=146)
         490	INPLACE_ADD(arg=None, lineno=146)
         492	STORE_FAST(arg=45, lineno=146)
>        494	LOAD_FAST(arg=30, lineno=148)
         496	LOAD_FAST(arg=44, lineno=148)
         498	DUP_TOP_TWO(arg=None, lineno=148)
         500	BINARY_SUBSCR(arg=None, lineno=148)
         502	LOAD_FAST(arg=45, lineno=148)
         504	LOAD_FAST(arg=12, lineno=148)
         506	BINARY_MULTIPLY(arg=None, lineno=148)
         508	INPLACE_ADD(arg=None, lineno=148)
         510	ROT_THREE(arg=None, lineno=148)
         512	STORE_SUBSCR(arg=None, lineno=148)
         514	LOAD_FAST(arg=11, lineno=149)
         516	POP_JUMP_IF_FALSE(arg=428, lineno=149)
         520	LOAD_FAST(arg=31, lineno=150)
         522	LOAD_FAST(arg=44, lineno=150)
         524	DUP_TOP_TWO(arg=None, lineno=150)
         526	BINARY_SUBSCR(arg=None, lineno=150)
         528	LOAD_FAST(arg=45, lineno=150)
         530	UNARY_NEGATIVE(arg=None, lineno=150)
         532	LOAD_FAST(arg=12, lineno=150)
         534	BINARY_MULTIPLY(arg=None, lineno=150)
         536	INPLACE_ADD(arg=None, lineno=150)
         538	ROT_THREE(arg=None, lineno=150)
         540	STORE_SUBSCR(arg=None, lineno=150)
         542	JUMP_ABSOLUTE(arg=428, lineno=150)
>        546	POP_BLOCK(arg=None, lineno=150)
>        548	LOAD_FAST(arg=15, lineno=152)
         550	LOAD_FAST(arg=27, lineno=152)
         552	DUP_TOP_TWO(arg=None, lineno=152)
         554	BINARY_SUBSCR(arg=None, lineno=152)
         556	LOAD_FAST(arg=5, lineno=152)
         558	LOAD_FAST(arg=27, lineno=152)
         560	BINARY_SUBSCR(arg=None, lineno=152)
         562	INPLACE_ADD(arg=None, lineno=152)
         564	ROT_THREE(arg=None, lineno=152)
         566	STORE_SUBSCR(arg=None, lineno=152)
         568	LOAD_GLOBAL(arg=9, lineno=154)
         570	LOAD_FAST(arg=16, lineno=155)
         572	LOAD_FAST(arg=14, lineno=155)
         574	LOAD_FAST(arg=27, lineno=155)
         576	BINARY_SUBSCR(arg=None, lineno=155)
         578	BINARY_SUBTRACT(arg=None, lineno=155)
         580	LOAD_FAST(arg=13, lineno=155)
         582	LOAD_FAST(arg=27, lineno=155)
         584	BINARY_SUBSCR(arg=None, lineno=155)
         586	BINARY_TRUE_DIVIDE(arg=None, lineno=155)
         588	CALL_FUNCTION(arg=1, lineno=155)
         590	STORE_FAST(arg=46, lineno=155)
         592	SETUP_LOOP(arg=202, lineno=158)
         594	LOAD_GLOBAL(arg=7, lineno=158)
         596	LOAD_FAST(arg=46, lineno=158)
         598	CALL_FUNCTION(arg=1, lineno=158)
         600	GET_ITER(arg=None, lineno=158)
>        602	FOR_ITER(arg=190, lineno=158)
         604	STORE_FAST(arg=47, lineno=158)
         606	LOAD_GLOBAL(arg=10, lineno=159)
         608	LOAD_FAST(arg=8, lineno=159)
         610	CALL_FUNCTION(arg=1, lineno=159)
         612	LOAD_FAST(arg=4, lineno=159)
         614	BINARY_MODULO(arg=None, lineno=159)
         616	STORE_FAST(arg=29, lineno=159)
         618	LOAD_FAST(arg=1, lineno=161)
         620	LOAD_FAST(arg=29, lineno=161)
         622	BINARY_SUBSCR(arg=None, lineno=161)
         624	STORE_FAST(arg=31, lineno=161)
         626	LOAD_GLOBAL(arg=3, lineno=163)
         628	LOAD_FAST(arg=30, lineno=163)
         630	LOAD_FAST(arg=31, lineno=163)
         632	CALL_FUNCTION(arg=2, lineno=163)
         634	STORE_FAST(arg=32, lineno=163)
         636	LOAD_FAST(arg=32, lineno=165)
         638	LOAD_CONST(arg=4, lineno=165)
         640	COMPARE_OP(arg=4, lineno=165)
         642	POP_JUMP_IF_FALSE(arg=690, lineno=165)
         646	LOAD_CONST(arg=7, lineno=166)
         648	LOAD_FAST(arg=9, lineno=166)
         650	BINARY_MULTIPLY(arg=None, lineno=166)
         652	LOAD_FAST(arg=7, lineno=166)
         654	BINARY_MULTIPLY(arg=None, lineno=166)
         656	STORE_FAST(arg=43, lineno=166)
         658	LOAD_FAST(arg=43, lineno=167)
         660	LOAD_CONST(arg=8, lineno=167)
         662	LOAD_FAST(arg=32, lineno=167)
         664	BINARY_ADD(arg=None, lineno=167)
         666	LOAD_FAST(arg=6, lineno=168)
         668	LOAD_GLOBAL(arg=4, lineno=168)
         670	LOAD_FAST(arg=32, lineno=168)
         672	LOAD_FAST(arg=7, lineno=168)
         674	CALL_FUNCTION(arg=2, lineno=168)
         676	BINARY_MULTIPLY(arg=None, lineno=168)
         678	LOAD_CONST(arg=3, lineno=168)
         680	BINARY_ADD(arg=None, lineno=168)
         682	BINARY_MULTIPLY(arg=None, lineno=168)
         684	INPLACE_TRUE_DIVIDE(arg=None, lineno=168)
         686	STORE_FAST(arg=43, lineno=168)
         688	JUMP_FORWARD(arg=20, lineno=168)
>        690	LOAD_FAST(arg=28, lineno=170)
         692	LOAD_FAST(arg=29, lineno=170)
         694	COMPARE_OP(arg=2, lineno=170)
         696	POP_JUMP_IF_FALSE(arg=706, lineno=170)
         700	JUMP_ABSOLUTE(arg=602, lineno=171)
         704	JUMP_FORWARD(arg=4, lineno=171)
>        706	LOAD_CONST(arg=4, lineno=173)
         708	STORE_FAST(arg=43, lineno=173)
>        710	SETUP_LOOP(arg=78, lineno=175)
         712	LOAD_GLOBAL(arg=7, lineno=175)
         714	LOAD_FAST(arg=10, lineno=175)
         716	CALL_FUNCTION(arg=1, lineno=175)
         718	GET_ITER(arg=None, lineno=175)
>        720	FOR_ITER(arg=66, lineno=175)
         722	STORE_FAST(arg=44, lineno=175)
         724	LOAD_FAST(arg=43, lineno=176)
         726	LOAD_CONST(arg=4, lineno=176)
         728	COMPARE_OP(arg=4, lineno=176)
         730	POP_JUMP_IF_FALSE(arg=760, lineno=176)
         734	LOAD_GLOBAL(arg=8, lineno=177)
         736	LOAD_FAST(arg=43, lineno=177)
         738	LOAD_FAST(arg=30, lineno=177)
         740	LOAD_FAST(arg=44, lineno=177)
         742	BINARY_SUBSCR(arg=None, lineno=177)
         744	LOAD_FAST(arg=31, lineno=177)
         746	LOAD_FAST(arg=44, lineno=177)
         748	BINARY_SUBSCR(arg=None, lineno=177)
         750	BINARY_SUBTRACT(arg=None, lineno=177)
         752	BINARY_MULTIPLY(arg=None, lineno=177)
         754	CALL_FUNCTION(arg=1, lineno=177)
         756	STORE_FAST(arg=45, lineno=177)
         758	JUMP_FORWARD(arg=4, lineno=177)
>        760	LOAD_CONST(arg=9, lineno=179)
         762	STORE_FAST(arg=45, lineno=179)
>        764	LOAD_FAST(arg=30, lineno=180)
         766	LOAD_FAST(arg=44, lineno=180)
         768	DUP_TOP_TWO(arg=None, lineno=180)
         770	BINARY_SUBSCR(arg=None, lineno=180)
         772	LOAD_FAST(arg=45, lineno=180)
         774	LOAD_FAST(arg=12, lineno=180)
         776	BINARY_MULTIPLY(arg=None, lineno=180)
         778	INPLACE_ADD(arg=None, lineno=180)
         780	ROT_THREE(arg=None, lineno=180)
         782	STORE_SUBSCR(arg=None, lineno=180)
         784	JUMP_ABSOLUTE(arg=720, lineno=180)
>        788	POP_BLOCK(arg=None, lineno=180)
>        790	JUMP_ABSOLUTE(arg=602, lineno=180)
>        794	POP_BLOCK(arg=None, lineno=180)
>        796	LOAD_FAST(arg=14, lineno=182)
         798	LOAD_FAST(arg=27, lineno=182)
         800	DUP_TOP_TWO(arg=None, lineno=182)
         802	BINARY_SUBSCR(arg=None, lineno=182)
         804	LOAD_FAST(arg=46, lineno=183)
         806	LOAD_FAST(arg=13, lineno=183)
         808	LOAD_FAST(arg=27, lineno=183)
         810	BINARY_SUBSCR(arg=None, lineno=183)
         812	BINARY_MULTIPLY(arg=None, lineno=183)
         814	INPLACE_ADD(arg=None, lineno=183)
         816	ROT_THREE(arg=None, lineno=183)
         818	STORE_SUBSCR(arg=None, lineno=183)
         820	JUMP_ABSOLUTE(arg=22, lineno=183)
>        822	POP_BLOCK(arg=None, lineno=183)
>        824	LOAD_CONST(arg=0, lineno=183)
         826	RETURN_VALUE(arg=None, lineno=183)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=90)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=2, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=2 nstack_initial=0)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=2, inst=SETUP_LOOP(arg=818, lineno=90)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=6, inst=LOAD_GLOBAL(arg=0, lineno=90)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=8, inst=LOAD_METHOD(arg=1, lineno=90)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$6load_global.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=10, inst=LOAD_FAST(arg=5, lineno=90)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$8load_method.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=90)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$8load_method.1', '$epochs_per_sample10.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=90)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$8load_method.1', '$12load_attr.3']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=16, inst=BINARY_SUBSCR(arg=None, lineno=90)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$8load_method.1', '$12load_attr.3', '$const14.4']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=18, inst=CALL_METHOD(arg=1, lineno=90)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$8load_method.1', '$16binary_subscr.5']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=20, inst=GET_ITER(arg=None, lineno=90)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$18call_method.6']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=22, stack=('$20get_iter.7',), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=22 nstack_initial=1)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: ['$phi22.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=22, inst=FOR_ITER(arg=796, lineno=90)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi22.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=822, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=26, stack=('$phi22.0', '$22for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=822 nstack_initial=0), State(pc_initial=26 nstack_initial=2)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=822, inst=POP_BLOCK(arg=None, lineno=183)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=824, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=26 nstack_initial=2), State(pc_initial=824 nstack_initial=0)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: ['$phi26.0', '$phi26.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=26, inst=STORE_FAST(arg=27, lineno=90)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi26.0', '$phi26.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=28, inst=LOAD_FAST(arg=15, lineno=91)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi26.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=30, inst=LOAD_FAST(arg=27, lineno=91)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi26.0', '$epoch_of_next_sample28.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=32, inst=BINARY_SUBSCR(arg=None, lineno=91)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi26.0', '$epoch_of_next_sample28.2', '$i30.3']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=34, inst=LOAD_FAST(arg=16, lineno=91)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi26.0', '$32binary_subscr.4']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=36, inst=COMPARE_OP(arg=1, lineno=91)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi26.0', '$32binary_subscr.4', '$n34.5']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=38, inst=POP_JUMP_IF_FALSE(arg=22, lineno=91)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi26.0', '$36compare_op.6']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=40, stack=('$phi26.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi26.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=824 nstack_initial=0), State(pc_initial=40 nstack_initial=1), State(pc_initial=22 nstack_initial=1)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=824, inst=LOAD_CONST(arg=0, lineno=183)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=826, inst=RETURN_VALUE(arg=None, lineno=183)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$const824.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=40 nstack_initial=1), State(pc_initial=22 nstack_initial=1)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: ['$phi40.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=40, inst=LOAD_FAST(arg=2, lineno=92)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi40.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=42, inst=LOAD_FAST(arg=27, lineno=92)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi40.0', '$head40.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=92)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi40.0', '$head40.1', '$i42.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=46, inst=STORE_FAST(arg=28, lineno=92)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi40.0', '$44binary_subscr.3']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=48, inst=LOAD_FAST(arg=3, lineno=93)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi40.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=50, inst=LOAD_FAST(arg=27, lineno=93)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi40.0', '$tail48.4']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=52, inst=BINARY_SUBSCR(arg=None, lineno=93)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi40.0', '$tail48.4', '$i50.5']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=54, inst=STORE_FAST(arg=29, lineno=93)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi40.0', '$52binary_subscr.6']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=56, inst=LOAD_FAST(arg=0, lineno=95)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi40.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=58, inst=LOAD_FAST(arg=28, lineno=95)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi40.0', '$head_embedding56.7']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=60, inst=BINARY_SUBSCR(arg=None, lineno=95)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi40.0', '$head_embedding56.7', '$j58.8']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=62, inst=STORE_FAST(arg=30, lineno=95)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi40.0', '$60binary_subscr.9']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=64, inst=LOAD_FAST(arg=1, lineno=96)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi40.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=66, inst=LOAD_FAST(arg=29, lineno=96)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi40.0', '$tail_embedding64.10']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=68, inst=BINARY_SUBSCR(arg=None, lineno=96)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi40.0', '$tail_embedding64.10', '$k66.11']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=70, inst=STORE_FAST(arg=31, lineno=96)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi40.0', '$68binary_subscr.12']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=72, inst=LOAD_GLOBAL(arg=3, lineno=98)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi40.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=74, inst=LOAD_FAST(arg=30, lineno=98)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi40.0', '$72load_global.13']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=76, inst=LOAD_FAST(arg=31, lineno=98)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi40.0', '$72load_global.13', '$current74.14']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=78, inst=CALL_FUNCTION(arg=2, lineno=98)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi40.0', '$72load_global.13', '$current74.14', '$other76.15']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=80, inst=STORE_FAST(arg=32, lineno=98)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi40.0', '$78call_function.16']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=82, inst=LOAD_FAST(arg=17, lineno=100)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi40.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=84, inst=POP_JUMP_IF_FALSE(arg=354, lineno=100)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi40.0', '$densmap_flag82.17']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=88, stack=('$phi40.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=354, stack=('$phi40.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=22 nstack_initial=1), State(pc_initial=88 nstack_initial=1), State(pc_initial=354 nstack_initial=1)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=88 nstack_initial=1), State(pc_initial=354 nstack_initial=1)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: ['$phi88.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=88, inst=LOAD_CONST(arg=2, lineno=101)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=101)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$const88.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=92, inst=LOAD_FAST(arg=6, lineno=101)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$const88.1', '$const90.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=94, inst=LOAD_GLOBAL(arg=4, lineno=101)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$const88.1', '$const90.2', '$a92.3']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=96, inst=LOAD_FAST(arg=32, lineno=101)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$const88.1', '$const90.2', '$a92.3', '$94load_global.4']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=98, inst=LOAD_FAST(arg=7, lineno=101)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$const88.1', '$const90.2', '$a92.3', '$94load_global.4', '$dist_squared96.5']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=100, inst=CALL_FUNCTION(arg=2, lineno=101)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$const88.1', '$const90.2', '$a92.3', '$94load_global.4', '$dist_squared96.5', '$b98.6']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=102, inst=BINARY_MULTIPLY(arg=None, lineno=101)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$const88.1', '$const90.2', '$a92.3', '$100call_function.7']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=104, inst=BINARY_ADD(arg=None, lineno=101)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$const88.1', '$const90.2', '$102binary_multiply.8']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=106, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=101)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$const88.1', '$104binary_add.9']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=108, inst=STORE_FAST(arg=33, lineno=101)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$106binary_true_divide.10']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=110, inst=LOAD_FAST(arg=6, lineno=103)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=112, inst=LOAD_FAST(arg=7, lineno=103)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$a110.11']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=114, inst=BINARY_MULTIPLY(arg=None, lineno=103)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$a110.11', '$b112.12']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=116, inst=LOAD_GLOBAL(arg=4, lineno=103)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$114binary_multiply.13']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=118, inst=LOAD_FAST(arg=32, lineno=103)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$114binary_multiply.13', '$116load_global.14']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=120, inst=LOAD_FAST(arg=7, lineno=103)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$114binary_multiply.13', '$116load_global.14', '$dist_squared118.15']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=122, inst=LOAD_CONST(arg=3, lineno=103)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$114binary_multiply.13', '$116load_global.14', '$dist_squared118.15', '$b120.16']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=124, inst=BINARY_SUBTRACT(arg=None, lineno=103)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$114binary_multiply.13', '$116load_global.14', '$dist_squared118.15', '$b120.16', '$const122.17']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=126, inst=CALL_FUNCTION(arg=2, lineno=103)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$114binary_multiply.13', '$116load_global.14', '$dist_squared118.15', '$124binary_subtract.18']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=128, inst=BINARY_MULTIPLY(arg=None, lineno=103)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$114binary_multiply.13', '$126call_function.19']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=130, inst=LOAD_CONST(arg=2, lineno=103)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$128binary_multiply.20']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=132, inst=LOAD_FAST(arg=6, lineno=103)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$128binary_multiply.20', '$const130.21']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=134, inst=LOAD_GLOBAL(arg=4, lineno=103)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$128binary_multiply.20', '$const130.21', '$a132.22']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=136, inst=LOAD_FAST(arg=32, lineno=103)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$128binary_multiply.20', '$const130.21', '$a132.22', '$134load_global.23']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=138, inst=LOAD_FAST(arg=7, lineno=103)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$128binary_multiply.20', '$const130.21', '$a132.22', '$134load_global.23', '$dist_squared136.24']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=140, inst=CALL_FUNCTION(arg=2, lineno=103)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$128binary_multiply.20', '$const130.21', '$a132.22', '$134load_global.23', '$dist_squared136.24', '$b138.25']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=142, inst=BINARY_MULTIPLY(arg=None, lineno=103)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$128binary_multiply.20', '$const130.21', '$a132.22', '$140call_function.26']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=144, inst=BINARY_ADD(arg=None, lineno=103)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$128binary_multiply.20', '$const130.21', '$142binary_multiply.27']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=146, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=103)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$128binary_multiply.20', '$144binary_add.28']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=148, inst=STORE_FAST(arg=34, lineno=103)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$146binary_true_divide.29']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=150, inst=LOAD_FAST(arg=33, lineno=106)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=152, inst=LOAD_FAST(arg=18, lineno=106)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$phi150.30']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=154, inst=LOAD_FAST(arg=29, lineno=106)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$phi150.30', '$dens_phi_sum152.31']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=156, inst=BINARY_SUBSCR(arg=None, lineno=106)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$phi150.30', '$dens_phi_sum152.31', '$k154.32']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=158, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=106)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$phi150.30', '$156binary_subscr.33']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=160, inst=STORE_FAST(arg=35, lineno=106)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$158binary_true_divide.34']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=162, inst=LOAD_FAST(arg=33, lineno=107)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=164, inst=LOAD_FAST(arg=18, lineno=107)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$phi162.35']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=166, inst=LOAD_FAST(arg=28, lineno=107)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$phi162.35', '$dens_phi_sum164.36']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=168, inst=BINARY_SUBSCR(arg=None, lineno=107)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$phi162.35', '$dens_phi_sum164.36', '$j166.37']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=170, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=107)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$phi162.35', '$168binary_subscr.38']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=172, inst=STORE_FAST(arg=36, lineno=107)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$170binary_true_divide.39']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=174, inst=LOAD_FAST(arg=35, lineno=109)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=176, inst=LOAD_CONST(arg=2, lineno=110)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$q_jk174.40']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=178, inst=LOAD_FAST(arg=7, lineno=110)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$q_jk174.40', '$const176.41']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=180, inst=LOAD_CONST(arg=3, lineno=110)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$q_jk174.40', '$const176.41', '$b178.42']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=182, inst=LOAD_FAST(arg=33, lineno=110)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$q_jk174.40', '$const176.41', '$b178.42', '$const180.43']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=184, inst=BINARY_SUBTRACT(arg=None, lineno=110)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$q_jk174.40', '$const176.41', '$b178.42', '$const180.43', '$phi182.44']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=186, inst=BINARY_MULTIPLY(arg=None, lineno=110)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$q_jk174.40', '$const176.41', '$b178.42', '$184binary_subtract.45']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=188, inst=BINARY_SUBTRACT(arg=None, lineno=110)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$q_jk174.40', '$const176.41', '$186binary_multiply.46']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=190, inst=LOAD_GLOBAL(arg=5, lineno=110)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$q_jk174.40', '$188binary_subtract.47']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=192, inst=LOAD_METHOD(arg=6, lineno=110)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$q_jk174.40', '$188binary_subtract.47', '$190load_global.48']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=194, inst=LOAD_FAST(arg=19, lineno=110)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$q_jk174.40', '$188binary_subtract.47', '$192load_method.49']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=196, inst=LOAD_FAST(arg=29, lineno=110)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$q_jk174.40', '$188binary_subtract.47', '$192load_method.49', '$dens_re_sum194.50']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=198, inst=BINARY_SUBSCR(arg=None, lineno=110)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$q_jk174.40', '$188binary_subtract.47', '$192load_method.49', '$dens_re_sum194.50', '$k196.51']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=200, inst=CALL_METHOD(arg=1, lineno=110)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$q_jk174.40', '$188binary_subtract.47', '$192load_method.49', '$198binary_subscr.52']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=202, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=110)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$q_jk174.40', '$188binary_subtract.47', '$200call_method.53']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=204, inst=LOAD_FAST(arg=34, lineno=110)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$q_jk174.40', '$202binary_true_divide.54']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=206, inst=BINARY_ADD(arg=None, lineno=110)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$q_jk174.40', '$202binary_true_divide.54', '$dphi_term204.55']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=208, inst=BINARY_MULTIPLY(arg=None, lineno=110)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$q_jk174.40', '$206binary_add.56']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=210, inst=STORE_FAST(arg=37, lineno=110)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$208binary_multiply.57']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=212, inst=LOAD_FAST(arg=36, lineno=112)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=214, inst=LOAD_CONST(arg=2, lineno=113)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$q_kj212.58']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=216, inst=LOAD_FAST(arg=7, lineno=113)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$q_kj212.58', '$const214.59']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=218, inst=LOAD_CONST(arg=3, lineno=113)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$q_kj212.58', '$const214.59', '$b216.60']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=220, inst=LOAD_FAST(arg=33, lineno=113)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$q_kj212.58', '$const214.59', '$b216.60', '$const218.61']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=222, inst=BINARY_SUBTRACT(arg=None, lineno=113)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$q_kj212.58', '$const214.59', '$b216.60', '$const218.61', '$phi220.62']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=224, inst=BINARY_MULTIPLY(arg=None, lineno=113)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$q_kj212.58', '$const214.59', '$b216.60', '$222binary_subtract.63']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=226, inst=BINARY_SUBTRACT(arg=None, lineno=113)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$q_kj212.58', '$const214.59', '$224binary_multiply.64']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=228, inst=LOAD_GLOBAL(arg=5, lineno=113)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$q_kj212.58', '$226binary_subtract.65']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=230, inst=LOAD_METHOD(arg=6, lineno=113)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$q_kj212.58', '$226binary_subtract.65', '$228load_global.66']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=232, inst=LOAD_FAST(arg=19, lineno=113)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$q_kj212.58', '$226binary_subtract.65', '$230load_method.67']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=234, inst=LOAD_FAST(arg=28, lineno=113)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$q_kj212.58', '$226binary_subtract.65', '$230load_method.67', '$dens_re_sum232.68']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=236, inst=BINARY_SUBSCR(arg=None, lineno=113)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$q_kj212.58', '$226binary_subtract.65', '$230load_method.67', '$dens_re_sum232.68', '$j234.69']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=238, inst=CALL_METHOD(arg=1, lineno=113)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$q_kj212.58', '$226binary_subtract.65', '$230load_method.67', '$236binary_subscr.70']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=240, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=113)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$q_kj212.58', '$226binary_subtract.65', '$238call_method.71']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=242, inst=LOAD_FAST(arg=34, lineno=113)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$q_kj212.58', '$240binary_true_divide.72']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=244, inst=BINARY_ADD(arg=None, lineno=113)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$q_kj212.58', '$240binary_true_divide.72', '$dphi_term242.73']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=246, inst=BINARY_MULTIPLY(arg=None, lineno=113)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$q_kj212.58', '$244binary_add.74']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=248, inst=STORE_FAST(arg=38, lineno=113)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$246binary_multiply.75']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=250, inst=LOAD_FAST(arg=21, lineno=116)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=252, inst=LOAD_FAST(arg=21, lineno=116)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$dens_re_std250.76']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=254, inst=BINARY_MULTIPLY(arg=None, lineno=116)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$dens_re_std250.76', '$dens_re_std252.77']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=256, inst=STORE_FAST(arg=39, lineno=116)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$254binary_multiply.78']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=258, inst=LOAD_FAST(arg=24, lineno=118)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=260, inst=LOAD_FAST(arg=29, lineno=118)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$dens_R258.79']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=262, inst=BINARY_SUBSCR(arg=None, lineno=118)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$dens_R258.79', '$k260.80']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=264, inst=LOAD_FAST(arg=20, lineno=119)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$262binary_subscr.81']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=266, inst=LOAD_FAST(arg=19, lineno=119)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$262binary_subscr.81', '$dens_re_cov264.82']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=268, inst=LOAD_FAST(arg=29, lineno=119)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$262binary_subscr.81', '$dens_re_cov264.82', '$dens_re_sum266.83']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=270, inst=BINARY_SUBSCR(arg=None, lineno=119)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$262binary_subscr.81', '$dens_re_cov264.82', '$dens_re_sum266.83', '$k268.84']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=272, inst=LOAD_FAST(arg=22, lineno=119)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$262binary_subscr.81', '$dens_re_cov264.82', '$270binary_subscr.85']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=274, inst=BINARY_SUBTRACT(arg=None, lineno=119)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$262binary_subscr.81', '$dens_re_cov264.82', '$270binary_subscr.85', '$dens_re_mean272.86']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=276, inst=BINARY_MULTIPLY(arg=None, lineno=119)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$262binary_subscr.81', '$dens_re_cov264.82', '$274binary_subtract.87']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=278, inst=LOAD_FAST(arg=39, lineno=119)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$262binary_subscr.81', '$276binary_multiply.88']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=280, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=119)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$262binary_subscr.81', '$276binary_multiply.88', '$re_std_sq278.89']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=282, inst=BINARY_SUBTRACT(arg=None, lineno=119)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$262binary_subscr.81', '$280binary_true_divide.90']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=284, inst=STORE_FAST(arg=40, lineno=119)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$282binary_subtract.91']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=286, inst=LOAD_FAST(arg=24, lineno=122)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=288, inst=LOAD_FAST(arg=28, lineno=122)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$dens_R286.92']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=290, inst=BINARY_SUBSCR(arg=None, lineno=122)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$dens_R286.92', '$j288.93']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=292, inst=LOAD_FAST(arg=20, lineno=123)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$290binary_subscr.94']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=294, inst=LOAD_FAST(arg=19, lineno=123)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$290binary_subscr.94', '$dens_re_cov292.95']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=296, inst=LOAD_FAST(arg=28, lineno=123)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$290binary_subscr.94', '$dens_re_cov292.95', '$dens_re_sum294.96']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=298, inst=BINARY_SUBSCR(arg=None, lineno=123)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$290binary_subscr.94', '$dens_re_cov292.95', '$dens_re_sum294.96', '$j296.97']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=300, inst=LOAD_FAST(arg=22, lineno=123)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$290binary_subscr.94', '$dens_re_cov292.95', '$298binary_subscr.98']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=302, inst=BINARY_SUBTRACT(arg=None, lineno=123)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$290binary_subscr.94', '$dens_re_cov292.95', '$298binary_subscr.98', '$dens_re_mean300.99']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=304, inst=BINARY_MULTIPLY(arg=None, lineno=123)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$290binary_subscr.94', '$dens_re_cov292.95', '$302binary_subtract.100']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=306, inst=LOAD_FAST(arg=39, lineno=123)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$290binary_subscr.94', '$304binary_multiply.101']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=308, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=123)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$290binary_subscr.94', '$304binary_multiply.101', '$re_std_sq306.102']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=310, inst=BINARY_SUBTRACT(arg=None, lineno=123)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$290binary_subscr.94', '$308binary_true_divide.103']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=312, inst=STORE_FAST(arg=41, lineno=123)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$310binary_subtract.104']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=314, inst=LOAD_FAST(arg=23, lineno=131)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=316, inst=LOAD_FAST(arg=26, lineno=131)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$dens_lambda314.105']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=318, inst=BINARY_MULTIPLY(arg=None, lineno=131)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$dens_lambda314.105', '$dens_mu_tot316.106']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=320, inst=LOAD_FAST(arg=40, lineno=131)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$318binary_multiply.107']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=322, inst=LOAD_FAST(arg=37, lineno=131)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$318binary_multiply.107', '$weight_k320.108']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=324, inst=BINARY_MULTIPLY(arg=None, lineno=131)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$318binary_multiply.107', '$weight_k320.108', '$drk322.109']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=326, inst=LOAD_FAST(arg=41, lineno=131)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$318binary_multiply.107', '$324binary_multiply.110']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=328, inst=LOAD_FAST(arg=38, lineno=131)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$318binary_multiply.107', '$324binary_multiply.110', '$weight_j326.111']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=330, inst=BINARY_MULTIPLY(arg=None, lineno=131)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$318binary_multiply.107', '$324binary_multiply.110', '$weight_j326.111', '$drj328.112']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=332, inst=BINARY_ADD(arg=None, lineno=131)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$318binary_multiply.107', '$324binary_multiply.110', '$330binary_multiply.113']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=334, inst=BINARY_MULTIPLY(arg=None, lineno=131)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$318binary_multiply.107', '$332binary_add.114']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=336, inst=LOAD_FAST(arg=25, lineno=131)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$334binary_multiply.115']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=338, inst=LOAD_FAST(arg=27, lineno=131)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$334binary_multiply.115', '$dens_mu336.116']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=340, inst=BINARY_SUBSCR(arg=None, lineno=131)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$334binary_multiply.115', '$dens_mu336.116', '$i338.117']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=342, inst=LOAD_FAST(arg=21, lineno=131)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$334binary_multiply.115', '$340binary_subscr.118']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=344, inst=BINARY_MULTIPLY(arg=None, lineno=131)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$334binary_multiply.115', '$340binary_subscr.118', '$dens_re_std342.119']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=346, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=131)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$334binary_multiply.115', '$344binary_multiply.120']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=348, inst=LOAD_FAST(arg=4, lineno=131)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$346binary_true_divide.121']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=350, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=131)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$346binary_true_divide.121', '$n_vertices348.122']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=352, inst=STORE_FAST(arg=42, lineno=131)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi88.0', '$350binary_true_divide.123']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=354, stack=('$phi88.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=354 nstack_initial=1), State(pc_initial=354 nstack_initial=1)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: ['$phi354.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=354, inst=LOAD_FAST(arg=32, lineno=134)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi354.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=356, inst=LOAD_CONST(arg=4, lineno=134)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi354.0', '$dist_squared354.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=358, inst=COMPARE_OP(arg=4, lineno=134)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi354.0', '$dist_squared354.1', '$const356.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=360, inst=POP_JUMP_IF_FALSE(arg=414, lineno=134)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi354.0', '$358compare_op.3']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=364, stack=('$phi354.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=414, stack=('$phi354.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=354 nstack_initial=1), State(pc_initial=364 nstack_initial=1), State(pc_initial=414 nstack_initial=1)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=364 nstack_initial=1), State(pc_initial=414 nstack_initial=1)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: ['$phi364.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=364, inst=LOAD_CONST(arg=5, lineno=135)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi364.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=366, inst=LOAD_FAST(arg=6, lineno=135)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi364.0', '$const364.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=368, inst=BINARY_MULTIPLY(arg=None, lineno=135)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi364.0', '$const364.1', '$a366.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=370, inst=LOAD_FAST(arg=7, lineno=135)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi364.0', '$368binary_multiply.3']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=372, inst=BINARY_MULTIPLY(arg=None, lineno=135)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi364.0', '$368binary_multiply.3', '$b370.4']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=374, inst=LOAD_GLOBAL(arg=4, lineno=135)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi364.0', '$372binary_multiply.5']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=376, inst=LOAD_FAST(arg=32, lineno=135)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi364.0', '$372binary_multiply.5', '$374load_global.6']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=378, inst=LOAD_FAST(arg=7, lineno=135)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi364.0', '$372binary_multiply.5', '$374load_global.6', '$dist_squared376.7']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=380, inst=LOAD_CONST(arg=2, lineno=135)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi364.0', '$372binary_multiply.5', '$374load_global.6', '$dist_squared376.7', '$b378.8']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=382, inst=BINARY_SUBTRACT(arg=None, lineno=135)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi364.0', '$372binary_multiply.5', '$374load_global.6', '$dist_squared376.7', '$b378.8', '$const380.9']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=384, inst=CALL_FUNCTION(arg=2, lineno=135)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi364.0', '$372binary_multiply.5', '$374load_global.6', '$dist_squared376.7', '$382binary_subtract.10']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=386, inst=BINARY_MULTIPLY(arg=None, lineno=135)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi364.0', '$372binary_multiply.5', '$384call_function.11']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=388, inst=STORE_FAST(arg=43, lineno=135)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi364.0', '$386binary_multiply.12']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=390, inst=LOAD_FAST(arg=43, lineno=136)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi364.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=392, inst=LOAD_FAST(arg=6, lineno=136)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi364.0', '$grad_coeff390.13']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=394, inst=LOAD_GLOBAL(arg=4, lineno=136)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi364.0', '$grad_coeff390.13', '$a392.14']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=396, inst=LOAD_FAST(arg=32, lineno=136)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi364.0', '$grad_coeff390.13', '$a392.14', '$394load_global.15']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=398, inst=LOAD_FAST(arg=7, lineno=136)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi364.0', '$grad_coeff390.13', '$a392.14', '$394load_global.15', '$dist_squared396.16']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=400, inst=CALL_FUNCTION(arg=2, lineno=136)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi364.0', '$grad_coeff390.13', '$a392.14', '$394load_global.15', '$dist_squared396.16', '$b398.17']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=402, inst=BINARY_MULTIPLY(arg=None, lineno=136)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi364.0', '$grad_coeff390.13', '$a392.14', '$400call_function.18']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=404, inst=LOAD_CONST(arg=2, lineno=136)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi364.0', '$grad_coeff390.13', '$402binary_multiply.19']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=406, inst=BINARY_ADD(arg=None, lineno=136)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi364.0', '$grad_coeff390.13', '$402binary_multiply.19', '$const404.20']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=408, inst=INPLACE_TRUE_DIVIDE(arg=None, lineno=136)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi364.0', '$grad_coeff390.13', '$406binary_add.21']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=410, inst=STORE_FAST(arg=43, lineno=136)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi364.0', '$408inplace_true_divide.22']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=412, inst=JUMP_FORWARD(arg=4, lineno=136)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi364.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=418, stack=('$phi364.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=414 nstack_initial=1), State(pc_initial=418 nstack_initial=1)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: ['$phi414.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=414, inst=LOAD_CONST(arg=4, lineno=138)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi414.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=416, inst=STORE_FAST(arg=43, lineno=138)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi414.0', '$const414.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=418, stack=('$phi414.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=418 nstack_initial=1), State(pc_initial=418 nstack_initial=1)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: ['$phi418.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=418, inst=SETUP_LOOP(arg=128, lineno=140)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi418.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=420, inst=LOAD_GLOBAL(arg=7, lineno=140)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi418.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=422, inst=LOAD_FAST(arg=10, lineno=140)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi418.0', '$420load_global.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=424, inst=CALL_FUNCTION(arg=1, lineno=140)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi418.0', '$420load_global.1', '$dim422.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=426, inst=GET_ITER(arg=None, lineno=140)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi418.0', '$424call_function.3']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=428, stack=('$phi418.0', '$426get_iter.4'), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 548, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=418 nstack_initial=1), State(pc_initial=428 nstack_initial=2)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=428 nstack_initial=2)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: ['$phi428.0', '$phi428.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=428, inst=FOR_ITER(arg=116, lineno=140)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi428.0', '$phi428.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=546, stack=('$phi428.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 548, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0), Edge(pc=430, stack=('$phi428.0', '$phi428.1', '$428for_iter.3'), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 548, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=546 nstack_initial=1), State(pc_initial=430 nstack_initial=3)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: ['$phi546.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=546, inst=POP_BLOCK(arg=None, lineno=150)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi546.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=548, stack=('$phi546.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=430 nstack_initial=3), State(pc_initial=548 nstack_initial=1)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: ['$phi430.0', '$phi430.1', '$phi430.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=430, inst=STORE_FAST(arg=44, lineno=140)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi430.0', '$phi430.1', '$phi430.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=432, inst=LOAD_GLOBAL(arg=8, lineno=141)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi430.0', '$phi430.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=434, inst=LOAD_FAST(arg=43, lineno=141)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi430.0', '$phi430.1', '$432load_global.3']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=436, inst=LOAD_FAST(arg=30, lineno=141)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi430.0', '$phi430.1', '$432load_global.3', '$grad_coeff434.4']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=438, inst=LOAD_FAST(arg=44, lineno=141)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi430.0', '$phi430.1', '$432load_global.3', '$grad_coeff434.4', '$current436.5']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=440, inst=BINARY_SUBSCR(arg=None, lineno=141)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi430.0', '$phi430.1', '$432load_global.3', '$grad_coeff434.4', '$current436.5', '$d438.6']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=442, inst=LOAD_FAST(arg=31, lineno=141)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi430.0', '$phi430.1', '$432load_global.3', '$grad_coeff434.4', '$440binary_subscr.7']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=444, inst=LOAD_FAST(arg=44, lineno=141)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi430.0', '$phi430.1', '$432load_global.3', '$grad_coeff434.4', '$440binary_subscr.7', '$other442.8']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=446, inst=BINARY_SUBSCR(arg=None, lineno=141)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi430.0', '$phi430.1', '$432load_global.3', '$grad_coeff434.4', '$440binary_subscr.7', '$other442.8', '$d444.9']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=448, inst=BINARY_SUBTRACT(arg=None, lineno=141)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi430.0', '$phi430.1', '$432load_global.3', '$grad_coeff434.4', '$440binary_subscr.7', '$446binary_subscr.10']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=450, inst=BINARY_MULTIPLY(arg=None, lineno=141)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi430.0', '$phi430.1', '$432load_global.3', '$grad_coeff434.4', '$448binary_subtract.11']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=452, inst=CALL_FUNCTION(arg=1, lineno=141)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi430.0', '$phi430.1', '$432load_global.3', '$450binary_multiply.12']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=454, inst=STORE_FAST(arg=45, lineno=141)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi430.0', '$phi430.1', '$452call_function.13']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=456, inst=LOAD_FAST(arg=17, lineno=143)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi430.0', '$phi430.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=458, inst=POP_JUMP_IF_FALSE(arg=494, lineno=143)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi430.0', '$phi430.1', '$densmap_flag456.14']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=462, stack=('$phi430.0', '$phi430.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 548, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0), Edge(pc=494, stack=('$phi430.0', '$phi430.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 548, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=548 nstack_initial=1), State(pc_initial=462 nstack_initial=2), State(pc_initial=494 nstack_initial=2)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: ['$phi548.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=548, inst=LOAD_FAST(arg=15, lineno=152)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi548.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=550, inst=LOAD_FAST(arg=27, lineno=152)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi548.0', '$epoch_of_next_sample548.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=552, inst=DUP_TOP_TWO(arg=None, lineno=152)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi548.0', '$epoch_of_next_sample548.1', '$i550.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=554, inst=BINARY_SUBSCR(arg=None, lineno=152)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi548.0', '$epoch_of_next_sample548.1', '$i550.2', '$552dup_top_two.3', '$552dup_top_two.4']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=556, inst=LOAD_FAST(arg=5, lineno=152)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi548.0', '$epoch_of_next_sample548.1', '$i550.2', '$554binary_subscr.5']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=558, inst=LOAD_FAST(arg=27, lineno=152)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi548.0', '$epoch_of_next_sample548.1', '$i550.2', '$554binary_subscr.5', '$epochs_per_sample556.6']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=560, inst=BINARY_SUBSCR(arg=None, lineno=152)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi548.0', '$epoch_of_next_sample548.1', '$i550.2', '$554binary_subscr.5', '$epochs_per_sample556.6', '$i558.7']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=562, inst=INPLACE_ADD(arg=None, lineno=152)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi548.0', '$epoch_of_next_sample548.1', '$i550.2', '$554binary_subscr.5', '$560binary_subscr.8']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=564, inst=ROT_THREE(arg=None, lineno=152)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi548.0', '$epoch_of_next_sample548.1', '$i550.2', '$562inplace_add.9']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=566, inst=STORE_SUBSCR(arg=None, lineno=152)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi548.0', '$562inplace_add.9', '$epoch_of_next_sample548.1', '$i550.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=568, inst=LOAD_GLOBAL(arg=9, lineno=154)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi548.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=570, inst=LOAD_FAST(arg=16, lineno=155)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi548.0', '$568load_global.10']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=572, inst=LOAD_FAST(arg=14, lineno=155)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi548.0', '$568load_global.10', '$n570.11']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=574, inst=LOAD_FAST(arg=27, lineno=155)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi548.0', '$568load_global.10', '$n570.11', '$epoch_of_next_negative_sample572.12']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=576, inst=BINARY_SUBSCR(arg=None, lineno=155)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi548.0', '$568load_global.10', '$n570.11', '$epoch_of_next_negative_sample572.12', '$i574.13']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=578, inst=BINARY_SUBTRACT(arg=None, lineno=155)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi548.0', '$568load_global.10', '$n570.11', '$576binary_subscr.14']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=580, inst=LOAD_FAST(arg=13, lineno=155)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi548.0', '$568load_global.10', '$578binary_subtract.15']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=582, inst=LOAD_FAST(arg=27, lineno=155)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi548.0', '$568load_global.10', '$578binary_subtract.15', '$epochs_per_negative_sample580.16']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=584, inst=BINARY_SUBSCR(arg=None, lineno=155)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi548.0', '$568load_global.10', '$578binary_subtract.15', '$epochs_per_negative_sample580.16', '$i582.17']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=586, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=155)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi548.0', '$568load_global.10', '$578binary_subtract.15', '$584binary_subscr.18']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=588, inst=CALL_FUNCTION(arg=1, lineno=155)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi548.0', '$568load_global.10', '$586binary_true_divide.19']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=590, inst=STORE_FAST(arg=46, lineno=155)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi548.0', '$588call_function.20']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=592, stack=('$phi548.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=462 nstack_initial=2), State(pc_initial=494 nstack_initial=2), State(pc_initial=592 nstack_initial=1)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: ['$phi462.0', '$phi462.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=462, inst=LOAD_FAST(arg=45, lineno=146)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi462.0', '$phi462.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=464, inst=LOAD_GLOBAL(arg=8, lineno=146)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi462.0', '$phi462.1', '$grad_d462.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=466, inst=LOAD_CONST(arg=6, lineno=146)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi462.0', '$phi462.1', '$grad_d462.2', '$464load_global.3']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=468, inst=LOAD_FAST(arg=42, lineno=146)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi462.0', '$phi462.1', '$grad_d462.2', '$464load_global.3', '$const466.4']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=470, inst=BINARY_MULTIPLY(arg=None, lineno=146)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi462.0', '$phi462.1', '$grad_d462.2', '$464load_global.3', '$const466.4', '$grad_cor_coeff468.5']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=472, inst=LOAD_FAST(arg=30, lineno=146)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi462.0', '$phi462.1', '$grad_d462.2', '$464load_global.3', '$470binary_multiply.6']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=474, inst=LOAD_FAST(arg=44, lineno=146)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi462.0', '$phi462.1', '$grad_d462.2', '$464load_global.3', '$470binary_multiply.6', '$current472.7']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=476, inst=BINARY_SUBSCR(arg=None, lineno=146)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi462.0', '$phi462.1', '$grad_d462.2', '$464load_global.3', '$470binary_multiply.6', '$current472.7', '$d474.8']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=478, inst=LOAD_FAST(arg=31, lineno=146)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi462.0', '$phi462.1', '$grad_d462.2', '$464load_global.3', '$470binary_multiply.6', '$476binary_subscr.9']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=480, inst=LOAD_FAST(arg=44, lineno=146)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi462.0', '$phi462.1', '$grad_d462.2', '$464load_global.3', '$470binary_multiply.6', '$476binary_subscr.9', '$other478.10']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=482, inst=BINARY_SUBSCR(arg=None, lineno=146)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi462.0', '$phi462.1', '$grad_d462.2', '$464load_global.3', '$470binary_multiply.6', '$476binary_subscr.9', '$other478.10', '$d480.11']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=484, inst=BINARY_SUBTRACT(arg=None, lineno=146)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi462.0', '$phi462.1', '$grad_d462.2', '$464load_global.3', '$470binary_multiply.6', '$476binary_subscr.9', '$482binary_subscr.12']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=486, inst=BINARY_MULTIPLY(arg=None, lineno=146)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi462.0', '$phi462.1', '$grad_d462.2', '$464load_global.3', '$470binary_multiply.6', '$484binary_subtract.13']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=488, inst=CALL_FUNCTION(arg=1, lineno=146)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi462.0', '$phi462.1', '$grad_d462.2', '$464load_global.3', '$486binary_multiply.14']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=490, inst=INPLACE_ADD(arg=None, lineno=146)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi462.0', '$phi462.1', '$grad_d462.2', '$488call_function.15']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=492, inst=STORE_FAST(arg=45, lineno=146)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi462.0', '$phi462.1', '$490inplace_add.16']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=494, stack=('$phi462.0', '$phi462.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 548, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=494 nstack_initial=2), State(pc_initial=592 nstack_initial=1), State(pc_initial=494 nstack_initial=2)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: ['$phi494.0', '$phi494.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=494, inst=LOAD_FAST(arg=30, lineno=148)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi494.0', '$phi494.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=496, inst=LOAD_FAST(arg=44, lineno=148)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi494.0', '$phi494.1', '$current494.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=498, inst=DUP_TOP_TWO(arg=None, lineno=148)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi494.0', '$phi494.1', '$current494.2', '$d496.3']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=500, inst=BINARY_SUBSCR(arg=None, lineno=148)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi494.0', '$phi494.1', '$current494.2', '$d496.3', '$498dup_top_two.4', '$498dup_top_two.5']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=502, inst=LOAD_FAST(arg=45, lineno=148)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi494.0', '$phi494.1', '$current494.2', '$d496.3', '$500binary_subscr.6']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=504, inst=LOAD_FAST(arg=12, lineno=148)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi494.0', '$phi494.1', '$current494.2', '$d496.3', '$500binary_subscr.6', '$grad_d502.7']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=506, inst=BINARY_MULTIPLY(arg=None, lineno=148)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi494.0', '$phi494.1', '$current494.2', '$d496.3', '$500binary_subscr.6', '$grad_d502.7', '$alpha504.8']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=508, inst=INPLACE_ADD(arg=None, lineno=148)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi494.0', '$phi494.1', '$current494.2', '$d496.3', '$500binary_subscr.6', '$506binary_multiply.9']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=510, inst=ROT_THREE(arg=None, lineno=148)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi494.0', '$phi494.1', '$current494.2', '$d496.3', '$508inplace_add.10']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=512, inst=STORE_SUBSCR(arg=None, lineno=148)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi494.0', '$phi494.1', '$508inplace_add.10', '$current494.2', '$d496.3']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=514, inst=LOAD_FAST(arg=11, lineno=149)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi494.0', '$phi494.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=516, inst=POP_JUMP_IF_FALSE(arg=428, lineno=149)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi494.0', '$phi494.1', '$move_other514.11']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=520, stack=('$phi494.0', '$phi494.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 548, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0), Edge(pc=428, stack=('$phi494.0', '$phi494.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 548, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=592 nstack_initial=1), State(pc_initial=494 nstack_initial=2), State(pc_initial=520 nstack_initial=2), State(pc_initial=428 nstack_initial=2)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: ['$phi592.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=592, inst=SETUP_LOOP(arg=202, lineno=158)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi592.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=594, inst=LOAD_GLOBAL(arg=7, lineno=158)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi592.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=596, inst=LOAD_FAST(arg=46, lineno=158)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi592.0', '$594load_global.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=598, inst=CALL_FUNCTION(arg=1, lineno=158)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi592.0', '$594load_global.1', '$n_neg_samples596.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=600, inst=GET_ITER(arg=None, lineno=158)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi592.0', '$598call_function.3']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=602, stack=('$phi592.0', '$600get_iter.4'), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 796, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=494 nstack_initial=2), State(pc_initial=520 nstack_initial=2), State(pc_initial=428 nstack_initial=2), State(pc_initial=602 nstack_initial=2)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=520 nstack_initial=2), State(pc_initial=428 nstack_initial=2), State(pc_initial=602 nstack_initial=2)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: ['$phi520.0', '$phi520.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=520, inst=LOAD_FAST(arg=31, lineno=150)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi520.0', '$phi520.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=522, inst=LOAD_FAST(arg=44, lineno=150)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi520.0', '$phi520.1', '$other520.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=524, inst=DUP_TOP_TWO(arg=None, lineno=150)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi520.0', '$phi520.1', '$other520.2', '$d522.3']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=526, inst=BINARY_SUBSCR(arg=None, lineno=150)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi520.0', '$phi520.1', '$other520.2', '$d522.3', '$524dup_top_two.4', '$524dup_top_two.5']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=528, inst=LOAD_FAST(arg=45, lineno=150)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi520.0', '$phi520.1', '$other520.2', '$d522.3', '$526binary_subscr.6']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=530, inst=UNARY_NEGATIVE(arg=None, lineno=150)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi520.0', '$phi520.1', '$other520.2', '$d522.3', '$526binary_subscr.6', '$grad_d528.7']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=532, inst=LOAD_FAST(arg=12, lineno=150)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi520.0', '$phi520.1', '$other520.2', '$d522.3', '$526binary_subscr.6', '$530unary_negative.8']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=534, inst=BINARY_MULTIPLY(arg=None, lineno=150)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi520.0', '$phi520.1', '$other520.2', '$d522.3', '$526binary_subscr.6', '$530unary_negative.8', '$alpha532.9']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=536, inst=INPLACE_ADD(arg=None, lineno=150)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi520.0', '$phi520.1', '$other520.2', '$d522.3', '$526binary_subscr.6', '$534binary_multiply.10']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=538, inst=ROT_THREE(arg=None, lineno=150)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi520.0', '$phi520.1', '$other520.2', '$d522.3', '$536inplace_add.11']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=540, inst=STORE_SUBSCR(arg=None, lineno=150)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi520.0', '$phi520.1', '$536inplace_add.11', '$other520.2', '$d522.3']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=542, inst=JUMP_ABSOLUTE(arg=428, lineno=150)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi520.0', '$phi520.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=428, stack=('$phi520.0', '$phi520.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 548, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=428 nstack_initial=2), State(pc_initial=602 nstack_initial=2), State(pc_initial=428 nstack_initial=2)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=602 nstack_initial=2), State(pc_initial=428 nstack_initial=2)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: ['$phi602.0', '$phi602.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=602, inst=FOR_ITER(arg=190, lineno=158)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi602.0', '$phi602.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=794, stack=('$phi602.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 796, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0), Edge(pc=604, stack=('$phi602.0', '$phi602.1', '$602for_iter.3'), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 796, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=428 nstack_initial=2), State(pc_initial=794 nstack_initial=1), State(pc_initial=604 nstack_initial=3)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=794 nstack_initial=1), State(pc_initial=604 nstack_initial=3)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: ['$phi794.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=794, inst=POP_BLOCK(arg=None, lineno=180)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi794.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=796, stack=('$phi794.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=604 nstack_initial=3), State(pc_initial=796 nstack_initial=1)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: ['$phi604.0', '$phi604.1', '$phi604.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=604, inst=STORE_FAST(arg=47, lineno=158)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi604.0', '$phi604.1', '$phi604.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=606, inst=LOAD_GLOBAL(arg=10, lineno=159)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi604.0', '$phi604.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=608, inst=LOAD_FAST(arg=8, lineno=159)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi604.0', '$phi604.1', '$606load_global.3']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=610, inst=CALL_FUNCTION(arg=1, lineno=159)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi604.0', '$phi604.1', '$606load_global.3', '$rng_state608.4']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=612, inst=LOAD_FAST(arg=4, lineno=159)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi604.0', '$phi604.1', '$610call_function.5']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=614, inst=BINARY_MODULO(arg=None, lineno=159)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi604.0', '$phi604.1', '$610call_function.5', '$n_vertices612.6']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=616, inst=STORE_FAST(arg=29, lineno=159)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi604.0', '$phi604.1', '$614binary_modulo.7']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=618, inst=LOAD_FAST(arg=1, lineno=161)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi604.0', '$phi604.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=620, inst=LOAD_FAST(arg=29, lineno=161)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi604.0', '$phi604.1', '$tail_embedding618.8']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=622, inst=BINARY_SUBSCR(arg=None, lineno=161)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi604.0', '$phi604.1', '$tail_embedding618.8', '$k620.9']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=624, inst=STORE_FAST(arg=31, lineno=161)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi604.0', '$phi604.1', '$622binary_subscr.10']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=626, inst=LOAD_GLOBAL(arg=3, lineno=163)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi604.0', '$phi604.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=628, inst=LOAD_FAST(arg=30, lineno=163)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi604.0', '$phi604.1', '$626load_global.11']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=630, inst=LOAD_FAST(arg=31, lineno=163)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi604.0', '$phi604.1', '$626load_global.11', '$current628.12']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=632, inst=CALL_FUNCTION(arg=2, lineno=163)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi604.0', '$phi604.1', '$626load_global.11', '$current628.12', '$other630.13']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=634, inst=STORE_FAST(arg=32, lineno=163)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi604.0', '$phi604.1', '$632call_function.14']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=636, inst=LOAD_FAST(arg=32, lineno=165)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi604.0', '$phi604.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=638, inst=LOAD_CONST(arg=4, lineno=165)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi604.0', '$phi604.1', '$dist_squared636.15']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=640, inst=COMPARE_OP(arg=4, lineno=165)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi604.0', '$phi604.1', '$dist_squared636.15', '$const638.16']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=642, inst=POP_JUMP_IF_FALSE(arg=690, lineno=165)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi604.0', '$phi604.1', '$640compare_op.17']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=646, stack=('$phi604.0', '$phi604.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 796, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0), Edge(pc=690, stack=('$phi604.0', '$phi604.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 796, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=796 nstack_initial=1), State(pc_initial=646 nstack_initial=2), State(pc_initial=690 nstack_initial=2)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: ['$phi796.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=796, inst=LOAD_FAST(arg=14, lineno=182)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi796.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=798, inst=LOAD_FAST(arg=27, lineno=182)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi796.0', '$epoch_of_next_negative_sample796.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=800, inst=DUP_TOP_TWO(arg=None, lineno=182)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi796.0', '$epoch_of_next_negative_sample796.1', '$i798.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=802, inst=BINARY_SUBSCR(arg=None, lineno=182)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi796.0', '$epoch_of_next_negative_sample796.1', '$i798.2', '$800dup_top_two.3', '$800dup_top_two.4']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=804, inst=LOAD_FAST(arg=46, lineno=183)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi796.0', '$epoch_of_next_negative_sample796.1', '$i798.2', '$802binary_subscr.5']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=806, inst=LOAD_FAST(arg=13, lineno=183)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi796.0', '$epoch_of_next_negative_sample796.1', '$i798.2', '$802binary_subscr.5', '$n_neg_samples804.6']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=808, inst=LOAD_FAST(arg=27, lineno=183)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi796.0', '$epoch_of_next_negative_sample796.1', '$i798.2', '$802binary_subscr.5', '$n_neg_samples804.6', '$epochs_per_negative_sample806.7']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=810, inst=BINARY_SUBSCR(arg=None, lineno=183)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi796.0', '$epoch_of_next_negative_sample796.1', '$i798.2', '$802binary_subscr.5', '$n_neg_samples804.6', '$epochs_per_negative_sample806.7', '$i808.8']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=812, inst=BINARY_MULTIPLY(arg=None, lineno=183)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi796.0', '$epoch_of_next_negative_sample796.1', '$i798.2', '$802binary_subscr.5', '$n_neg_samples804.6', '$810binary_subscr.9']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=814, inst=INPLACE_ADD(arg=None, lineno=183)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi796.0', '$epoch_of_next_negative_sample796.1', '$i798.2', '$802binary_subscr.5', '$812binary_multiply.10']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=816, inst=ROT_THREE(arg=None, lineno=183)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi796.0', '$epoch_of_next_negative_sample796.1', '$i798.2', '$814inplace_add.11']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=818, inst=STORE_SUBSCR(arg=None, lineno=183)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi796.0', '$814inplace_add.11', '$epoch_of_next_negative_sample796.1', '$i798.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=820, inst=JUMP_ABSOLUTE(arg=22, lineno=183)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi796.0']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=22, stack=('$phi796.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=646 nstack_initial=2), State(pc_initial=690 nstack_initial=2), State(pc_initial=22 nstack_initial=1)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: ['$phi646.0', '$phi646.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=646, inst=LOAD_CONST(arg=7, lineno=166)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi646.0', '$phi646.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=648, inst=LOAD_FAST(arg=9, lineno=166)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi646.0', '$phi646.1', '$const646.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=650, inst=BINARY_MULTIPLY(arg=None, lineno=166)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi646.0', '$phi646.1', '$const646.2', '$gamma648.3']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=652, inst=LOAD_FAST(arg=7, lineno=166)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi646.0', '$phi646.1', '$650binary_multiply.4']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=654, inst=BINARY_MULTIPLY(arg=None, lineno=166)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi646.0', '$phi646.1', '$650binary_multiply.4', '$b652.5']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=656, inst=STORE_FAST(arg=43, lineno=166)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi646.0', '$phi646.1', '$654binary_multiply.6']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=658, inst=LOAD_FAST(arg=43, lineno=167)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi646.0', '$phi646.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=660, inst=LOAD_CONST(arg=8, lineno=167)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi646.0', '$phi646.1', '$grad_coeff658.7']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=662, inst=LOAD_FAST(arg=32, lineno=167)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi646.0', '$phi646.1', '$grad_coeff658.7', '$const660.8']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=664, inst=BINARY_ADD(arg=None, lineno=167)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi646.0', '$phi646.1', '$grad_coeff658.7', '$const660.8', '$dist_squared662.9']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=666, inst=LOAD_FAST(arg=6, lineno=168)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi646.0', '$phi646.1', '$grad_coeff658.7', '$664binary_add.10']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=668, inst=LOAD_GLOBAL(arg=4, lineno=168)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi646.0', '$phi646.1', '$grad_coeff658.7', '$664binary_add.10', '$a666.11']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=670, inst=LOAD_FAST(arg=32, lineno=168)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi646.0', '$phi646.1', '$grad_coeff658.7', '$664binary_add.10', '$a666.11', '$668load_global.12']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=672, inst=LOAD_FAST(arg=7, lineno=168)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi646.0', '$phi646.1', '$grad_coeff658.7', '$664binary_add.10', '$a666.11', '$668load_global.12', '$dist_squared670.13']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=674, inst=CALL_FUNCTION(arg=2, lineno=168)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi646.0', '$phi646.1', '$grad_coeff658.7', '$664binary_add.10', '$a666.11', '$668load_global.12', '$dist_squared670.13', '$b672.14']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=676, inst=BINARY_MULTIPLY(arg=None, lineno=168)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi646.0', '$phi646.1', '$grad_coeff658.7', '$664binary_add.10', '$a666.11', '$674call_function.15']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=678, inst=LOAD_CONST(arg=3, lineno=168)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi646.0', '$phi646.1', '$grad_coeff658.7', '$664binary_add.10', '$676binary_multiply.16']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=680, inst=BINARY_ADD(arg=None, lineno=168)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi646.0', '$phi646.1', '$grad_coeff658.7', '$664binary_add.10', '$676binary_multiply.16', '$const678.17']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=682, inst=BINARY_MULTIPLY(arg=None, lineno=168)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi646.0', '$phi646.1', '$grad_coeff658.7', '$664binary_add.10', '$680binary_add.18']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=684, inst=INPLACE_TRUE_DIVIDE(arg=None, lineno=168)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi646.0', '$phi646.1', '$grad_coeff658.7', '$682binary_multiply.19']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=686, inst=STORE_FAST(arg=43, lineno=168)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi646.0', '$phi646.1', '$684inplace_true_divide.20']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=688, inst=JUMP_FORWARD(arg=20, lineno=168)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi646.0', '$phi646.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=710, stack=('$phi646.0', '$phi646.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 796, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=690 nstack_initial=2), State(pc_initial=22 nstack_initial=1), State(pc_initial=710 nstack_initial=2)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: ['$phi690.0', '$phi690.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=690, inst=LOAD_FAST(arg=28, lineno=170)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi690.0', '$phi690.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=692, inst=LOAD_FAST(arg=29, lineno=170)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi690.0', '$phi690.1', '$j690.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=694, inst=COMPARE_OP(arg=2, lineno=170)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi690.0', '$phi690.1', '$j690.2', '$k692.3']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=696, inst=POP_JUMP_IF_FALSE(arg=706, lineno=170)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi690.0', '$phi690.1', '$694compare_op.4']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=700, stack=('$phi690.0', '$phi690.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 796, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0), Edge(pc=706, stack=('$phi690.0', '$phi690.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 796, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=22 nstack_initial=1), State(pc_initial=710 nstack_initial=2), State(pc_initial=700 nstack_initial=2), State(pc_initial=706 nstack_initial=2)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=710 nstack_initial=2), State(pc_initial=700 nstack_initial=2), State(pc_initial=706 nstack_initial=2)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: ['$phi710.0', '$phi710.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=710, inst=SETUP_LOOP(arg=78, lineno=175)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi710.0', '$phi710.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=712, inst=LOAD_GLOBAL(arg=7, lineno=175)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi710.0', '$phi710.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=714, inst=LOAD_FAST(arg=10, lineno=175)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi710.0', '$phi710.1', '$712load_global.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=716, inst=CALL_FUNCTION(arg=1, lineno=175)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi710.0', '$phi710.1', '$712load_global.2', '$dim714.3']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=718, inst=GET_ITER(arg=None, lineno=175)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi710.0', '$phi710.1', '$716call_function.4']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=720, stack=('$phi710.0', '$phi710.1', '$718get_iter.5'), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 796, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 790, 'entry_stack': 2, 'stack_depth': 2, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=700 nstack_initial=2), State(pc_initial=706 nstack_initial=2), State(pc_initial=720 nstack_initial=3)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: ['$phi700.0', '$phi700.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=700, inst=JUMP_ABSOLUTE(arg=602, lineno=171)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi700.0', '$phi700.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=602, stack=('$phi700.0', '$phi700.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 796, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=706 nstack_initial=2), State(pc_initial=720 nstack_initial=3), State(pc_initial=602 nstack_initial=2)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: ['$phi706.0', '$phi706.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=706, inst=LOAD_CONST(arg=4, lineno=173)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi706.0', '$phi706.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=708, inst=STORE_FAST(arg=43, lineno=173)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi706.0', '$phi706.1', '$const706.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=710, stack=('$phi706.0', '$phi706.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 796, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=720 nstack_initial=3), State(pc_initial=602 nstack_initial=2), State(pc_initial=710 nstack_initial=2)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: ['$phi720.0', '$phi720.1', '$phi720.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=720, inst=FOR_ITER(arg=66, lineno=175)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi720.0', '$phi720.1', '$phi720.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=788, stack=('$phi720.0', '$phi720.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 796, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 790, 'entry_stack': 2, 'stack_depth': 2, 'handler': None}), npush=0), Edge(pc=722, stack=('$phi720.0', '$phi720.1', '$phi720.2', '$720for_iter.4'), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 796, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 790, 'entry_stack': 2, 'stack_depth': 2, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=602 nstack_initial=2), State(pc_initial=710 nstack_initial=2), State(pc_initial=788 nstack_initial=2), State(pc_initial=722 nstack_initial=4)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=710 nstack_initial=2), State(pc_initial=788 nstack_initial=2), State(pc_initial=722 nstack_initial=4)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=788 nstack_initial=2), State(pc_initial=722 nstack_initial=4)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: ['$phi788.0', '$phi788.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=788, inst=POP_BLOCK(arg=None, lineno=180)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi788.0', '$phi788.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=790, stack=('$phi788.0', '$phi788.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 796, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=722 nstack_initial=4), State(pc_initial=790 nstack_initial=2)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: ['$phi722.0', '$phi722.1', '$phi722.2', '$phi722.3']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=722, inst=STORE_FAST(arg=44, lineno=175)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi722.0', '$phi722.1', '$phi722.2', '$phi722.3']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=724, inst=LOAD_FAST(arg=43, lineno=176)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi722.0', '$phi722.1', '$phi722.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=726, inst=LOAD_CONST(arg=4, lineno=176)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi722.0', '$phi722.1', '$phi722.2', '$grad_coeff724.4']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=728, inst=COMPARE_OP(arg=4, lineno=176)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi722.0', '$phi722.1', '$phi722.2', '$grad_coeff724.4', '$const726.5']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=730, inst=POP_JUMP_IF_FALSE(arg=760, lineno=176)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi722.0', '$phi722.1', '$phi722.2', '$728compare_op.6']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=734, stack=('$phi722.0', '$phi722.1', '$phi722.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 796, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 790, 'entry_stack': 2, 'stack_depth': 2, 'handler': None}), npush=0), Edge(pc=760, stack=('$phi722.0', '$phi722.1', '$phi722.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 796, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 790, 'entry_stack': 2, 'stack_depth': 2, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=790 nstack_initial=2), State(pc_initial=734 nstack_initial=3), State(pc_initial=760 nstack_initial=3)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: ['$phi790.0', '$phi790.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=790, inst=JUMP_ABSOLUTE(arg=602, lineno=180)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi790.0', '$phi790.1']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=602, stack=('$phi790.0', '$phi790.1'), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 796, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=734 nstack_initial=3), State(pc_initial=760 nstack_initial=3), State(pc_initial=602 nstack_initial=2)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: ['$phi734.0', '$phi734.1', '$phi734.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=734, inst=LOAD_GLOBAL(arg=8, lineno=177)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi734.0', '$phi734.1', '$phi734.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=736, inst=LOAD_FAST(arg=43, lineno=177)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi734.0', '$phi734.1', '$phi734.2', '$734load_global.3']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=738, inst=LOAD_FAST(arg=30, lineno=177)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi734.0', '$phi734.1', '$phi734.2', '$734load_global.3', '$grad_coeff736.4']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=740, inst=LOAD_FAST(arg=44, lineno=177)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi734.0', '$phi734.1', '$phi734.2', '$734load_global.3', '$grad_coeff736.4', '$current738.5']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=742, inst=BINARY_SUBSCR(arg=None, lineno=177)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi734.0', '$phi734.1', '$phi734.2', '$734load_global.3', '$grad_coeff736.4', '$current738.5', '$d740.6']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=744, inst=LOAD_FAST(arg=31, lineno=177)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi734.0', '$phi734.1', '$phi734.2', '$734load_global.3', '$grad_coeff736.4', '$742binary_subscr.7']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=746, inst=LOAD_FAST(arg=44, lineno=177)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi734.0', '$phi734.1', '$phi734.2', '$734load_global.3', '$grad_coeff736.4', '$742binary_subscr.7', '$other744.8']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=748, inst=BINARY_SUBSCR(arg=None, lineno=177)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi734.0', '$phi734.1', '$phi734.2', '$734load_global.3', '$grad_coeff736.4', '$742binary_subscr.7', '$other744.8', '$d746.9']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=750, inst=BINARY_SUBTRACT(arg=None, lineno=177)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi734.0', '$phi734.1', '$phi734.2', '$734load_global.3', '$grad_coeff736.4', '$742binary_subscr.7', '$748binary_subscr.10']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=752, inst=BINARY_MULTIPLY(arg=None, lineno=177)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi734.0', '$phi734.1', '$phi734.2', '$734load_global.3', '$grad_coeff736.4', '$750binary_subtract.11']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=754, inst=CALL_FUNCTION(arg=1, lineno=177)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi734.0', '$phi734.1', '$phi734.2', '$734load_global.3', '$752binary_multiply.12']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=756, inst=STORE_FAST(arg=45, lineno=177)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi734.0', '$phi734.1', '$phi734.2', '$754call_function.13']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=758, inst=JUMP_FORWARD(arg=4, lineno=177)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi734.0', '$phi734.1', '$phi734.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=764, stack=('$phi734.0', '$phi734.1', '$phi734.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 796, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 790, 'entry_stack': 2, 'stack_depth': 2, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=760 nstack_initial=3), State(pc_initial=602 nstack_initial=2), State(pc_initial=764 nstack_initial=3)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: ['$phi760.0', '$phi760.1', '$phi760.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=760, inst=LOAD_CONST(arg=9, lineno=179)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi760.0', '$phi760.1', '$phi760.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=762, inst=STORE_FAST(arg=45, lineno=179)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi760.0', '$phi760.1', '$phi760.2', '$const760.3']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=764, stack=('$phi760.0', '$phi760.1', '$phi760.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 796, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 790, 'entry_stack': 2, 'stack_depth': 2, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=602 nstack_initial=2), State(pc_initial=764 nstack_initial=3), State(pc_initial=764 nstack_initial=3)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=764 nstack_initial=3), State(pc_initial=764 nstack_initial=3)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack: ['$phi764.0', '$phi764.1', '$phi764.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=764, inst=LOAD_FAST(arg=30, lineno=180)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi764.0', '$phi764.1', '$phi764.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=766, inst=LOAD_FAST(arg=44, lineno=180)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi764.0', '$phi764.1', '$phi764.2', '$current764.3']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=768, inst=DUP_TOP_TWO(arg=None, lineno=180)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi764.0', '$phi764.1', '$phi764.2', '$current764.3', '$d766.4']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=770, inst=BINARY_SUBSCR(arg=None, lineno=180)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi764.0', '$phi764.1', '$phi764.2', '$current764.3', '$d766.4', '$768dup_top_two.5', '$768dup_top_two.6']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=772, inst=LOAD_FAST(arg=45, lineno=180)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi764.0', '$phi764.1', '$phi764.2', '$current764.3', '$d766.4', '$770binary_subscr.7']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=774, inst=LOAD_FAST(arg=12, lineno=180)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi764.0', '$phi764.1', '$phi764.2', '$current764.3', '$d766.4', '$770binary_subscr.7', '$grad_d772.8']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=776, inst=BINARY_MULTIPLY(arg=None, lineno=180)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi764.0', '$phi764.1', '$phi764.2', '$current764.3', '$d766.4', '$770binary_subscr.7', '$grad_d772.8', '$alpha774.9']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=778, inst=INPLACE_ADD(arg=None, lineno=180)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi764.0', '$phi764.1', '$phi764.2', '$current764.3', '$d766.4', '$770binary_subscr.7', '$776binary_multiply.10']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=780, inst=ROT_THREE(arg=None, lineno=180)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi764.0', '$phi764.1', '$phi764.2', '$current764.3', '$d766.4', '$778inplace_add.11']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=782, inst=STORE_SUBSCR(arg=None, lineno=180)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi764.0', '$phi764.1', '$phi764.2', '$778inplace_add.11', '$current764.3', '$d766.4']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG dispatch pc=784, inst=JUMP_ABSOLUTE(arg=720, lineno=180)
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG stack ['$phi764.0', '$phi764.1', '$phi764.2']
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG end state. edges=[Edge(pc=720, stack=('$phi764.0', '$phi764.1', '$phi764.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 796, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 790, 'entry_stack': 2, 'stack_depth': 2, 'handler': None}), npush=0)]
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=764 nstack_initial=3), State(pc_initial=720 nstack_initial=3)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG pending: deque([State(pc_initial=720 nstack_initial=3)])
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG -------------------------Prune PHIs-------------------------
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=2 nstack_initial=0): set(),
             State(pc_initial=22 nstack_initial=1): {'$phi22.0'},
             State(pc_initial=26 nstack_initial=2): {'$phi26.1'},
             State(pc_initial=40 nstack_initial=1): set(),
             State(pc_initial=88 nstack_initial=1): set(),
             State(pc_initial=354 nstack_initial=1): set(),
             State(pc_initial=364 nstack_initial=1): set(),
             State(pc_initial=414 nstack_initial=1): set(),
             State(pc_initial=418 nstack_initial=1): set(),
             State(pc_initial=428 nstack_initial=2): {'$phi428.1'},
             State(pc_initial=430 nstack_initial=3): {'$phi430.2'},
             State(pc_initial=462 nstack_initial=2): set(),
             State(pc_initial=494 nstack_initial=2): set(),
             State(pc_initial=520 nstack_initial=2): set(),
             State(pc_initial=546 nstack_initial=1): set(),
             State(pc_initial=548 nstack_initial=1): set(),
             State(pc_initial=592 nstack_initial=1): set(),
             State(pc_initial=602 nstack_initial=2): {'$phi602.1'},
             State(pc_initial=604 nstack_initial=3): {'$phi604.2'},
             State(pc_initial=646 nstack_initial=2): set(),
             State(pc_initial=690 nstack_initial=2): set(),
             State(pc_initial=700 nstack_initial=2): set(),
             State(pc_initial=706 nstack_initial=2): set(),
             State(pc_initial=710 nstack_initial=2): set(),
             State(pc_initial=720 nstack_initial=3): {'$phi720.2'},
             State(pc_initial=722 nstack_initial=4): {'$phi722.3'},
             State(pc_initial=734 nstack_initial=3): set(),
             State(pc_initial=760 nstack_initial=3): set(),
             State(pc_initial=764 nstack_initial=3): set(),
             State(pc_initial=788 nstack_initial=2): set(),
             State(pc_initial=790 nstack_initial=2): set(),
             State(pc_initial=794 nstack_initial=1): set(),
             State(pc_initial=796 nstack_initial=1): set(),
             State(pc_initial=822 nstack_initial=0): set(),
             State(pc_initial=824 nstack_initial=0): set()})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG defmap: {'$phi22.0': State(pc_initial=2 nstack_initial=0),
 '$phi26.1': State(pc_initial=22 nstack_initial=1),
 '$phi428.1': State(pc_initial=418 nstack_initial=1),
 '$phi430.2': State(pc_initial=428 nstack_initial=2),
 '$phi602.1': State(pc_initial=592 nstack_initial=1),
 '$phi604.2': State(pc_initial=602 nstack_initial=2),
 '$phi720.2': State(pc_initial=710 nstack_initial=2),
 '$phi722.3': State(pc_initial=720 nstack_initial=3)}
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG phismap: defaultdict(<class 'set'>,
            {'$phi22.0': {('$20get_iter.7',
                           State(pc_initial=2 nstack_initial=0)),
                          ('$phi26.0', State(pc_initial=26 nstack_initial=2)),
                          ('$phi796.0',
                           State(pc_initial=796 nstack_initial=1))},
             '$phi26.0': {('$phi22.0', State(pc_initial=22 nstack_initial=1))},
             '$phi26.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))},
             '$phi354.0': {('$phi40.0', State(pc_initial=40 nstack_initial=1)),
                           ('$phi88.0', State(pc_initial=88 nstack_initial=1))},
             '$phi364.0': {('$phi354.0',
                            State(pc_initial=354 nstack_initial=1))},
             '$phi40.0': {('$phi26.0', State(pc_initial=26 nstack_initial=2))},
             '$phi414.0': {('$phi354.0',
                            State(pc_initial=354 nstack_initial=1))},
             '$phi418.0': {('$phi364.0',
                            State(pc_initial=364 nstack_initial=1)),
                           ('$phi414.0',
                            State(pc_initial=414 nstack_initial=1))},
             '$phi428.0': {('$phi418.0',
                            State(pc_initial=418 nstack_initial=1)),
                           ('$phi494.0',
                            State(pc_initial=494 nstack_initial=2)),
                           ('$phi520.0',
                            State(pc_initial=520 nstack_initial=2))},
             '$phi428.1': {('$426get_iter.4',
                            State(pc_initial=418 nstack_initial=1)),
                           ('$phi494.1',
                            State(pc_initial=494 nstack_initial=2)),
                           ('$phi520.1',
                            State(pc_initial=520 nstack_initial=2))},
             '$phi430.0': {('$phi428.0',
                            State(pc_initial=428 nstack_initial=2))},
             '$phi430.1': {('$phi428.1',
                            State(pc_initial=428 nstack_initial=2))},
             '$phi430.2': {('$428for_iter.3',
                            State(pc_initial=428 nstack_initial=2))},
             '$phi462.0': {('$phi430.0',
                            State(pc_initial=430 nstack_initial=3))},
             '$phi462.1': {('$phi430.1',
                            State(pc_initial=430 nstack_initial=3))},
             '$phi494.0': {('$phi430.0',
                            State(pc_initial=430 nstack_initial=3)),
                           ('$phi462.0',
                            State(pc_initial=462 nstack_initial=2))},
             '$phi494.1': {('$phi430.1',
                            State(pc_initial=430 nstack_initial=3)),
                           ('$phi462.1',
                            State(pc_initial=462 nstack_initial=2))},
             '$phi520.0': {('$phi494.0',
                            State(pc_initial=494 nstack_initial=2))},
             '$phi520.1': {('$phi494.1',
                            State(pc_initial=494 nstack_initial=2))},
             '$phi546.0': {('$phi428.0',
                            State(pc_initial=428 nstack_initial=2))},
             '$phi548.0': {('$phi546.0',
                            State(pc_initial=546 nstack_initial=1))},
             '$phi592.0': {('$phi548.0',
                            State(pc_initial=548 nstack_initial=1))},
             '$phi602.0': {('$phi592.0',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi700.0',
                            State(pc_initial=700 nstack_initial=2)),
                           ('$phi790.0',
                            State(pc_initial=790 nstack_initial=2))},
             '$phi602.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi700.1',
                            State(pc_initial=700 nstack_initial=2)),
                           ('$phi790.1',
                            State(pc_initial=790 nstack_initial=2))},
             '$phi604.0': {('$phi602.0',
                            State(pc_initial=602 nstack_initial=2))},
             '$phi604.1': {('$phi602.1',
                            State(pc_initial=602 nstack_initial=2))},
             '$phi604.2': {('$602for_iter.3',
                            State(pc_initial=602 nstack_initial=2))},
             '$phi646.0': {('$phi604.0',
                            State(pc_initial=604 nstack_initial=3))},
             '$phi646.1': {('$phi604.1',
                            State(pc_initial=604 nstack_initial=3))},
             '$phi690.0': {('$phi604.0',
                            State(pc_initial=604 nstack_initial=3))},
             '$phi690.1': {('$phi604.1',
                            State(pc_initial=604 nstack_initial=3))},
             '$phi700.0': {('$phi690.0',
                            State(pc_initial=690 nstack_initial=2))},
             '$phi700.1': {('$phi690.1',
                            State(pc_initial=690 nstack_initial=2))},
             '$phi706.0': {('$phi690.0',
                            State(pc_initial=690 nstack_initial=2))},
             '$phi706.1': {('$phi690.1',
                            State(pc_initial=690 nstack_initial=2))},
             '$phi710.0': {('$phi646.0',
                            State(pc_initial=646 nstack_initial=2)),
                           ('$phi706.0',
                            State(pc_initial=706 nstack_initial=2))},
             '$phi710.1': {('$phi646.1',
                            State(pc_initial=646 nstack_initial=2)),
                           ('$phi706.1',
                            State(pc_initial=706 nstack_initial=2))},
             '$phi720.0': {('$phi710.0',
                            State(pc_initial=710 nstack_initial=2)),
                           ('$phi764.0',
                            State(pc_initial=764 nstack_initial=3))},
             '$phi720.1': {('$phi710.1',
                            State(pc_initial=710 nstack_initial=2)),
                           ('$phi764.1',
                            State(pc_initial=764 nstack_initial=3))},
             '$phi720.2': {('$718get_iter.5',
                            State(pc_initial=710 nstack_initial=2)),
                           ('$phi764.2',
                            State(pc_initial=764 nstack_initial=3))},
             '$phi722.0': {('$phi720.0',
                            State(pc_initial=720 nstack_initial=3))},
             '$phi722.1': {('$phi720.1',
                            State(pc_initial=720 nstack_initial=3))},
             '$phi722.2': {('$phi720.2',
                            State(pc_initial=720 nstack_initial=3))},
             '$phi722.3': {('$720for_iter.4',
                            State(pc_initial=720 nstack_initial=3))},
             '$phi734.0': {('$phi722.0',
                            State(pc_initial=722 nstack_initial=4))},
             '$phi734.1': {('$phi722.1',
                            State(pc_initial=722 nstack_initial=4))},
             '$phi734.2': {('$phi722.2',
                            State(pc_initial=722 nstack_initial=4))},
             '$phi760.0': {('$phi722.0',
                            State(pc_initial=722 nstack_initial=4))},
             '$phi760.1': {('$phi722.1',
                            State(pc_initial=722 nstack_initial=4))},
             '$phi760.2': {('$phi722.2',
                            State(pc_initial=722 nstack_initial=4))},
             '$phi764.0': {('$phi734.0',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.0',
                            State(pc_initial=760 nstack_initial=3))},
             '$phi764.1': {('$phi734.1',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.1',
                            State(pc_initial=760 nstack_initial=3))},
             '$phi764.2': {('$phi734.2',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.2',
                            State(pc_initial=760 nstack_initial=3))},
             '$phi788.0': {('$phi720.0',
                            State(pc_initial=720 nstack_initial=3))},
             '$phi788.1': {('$phi720.1',
                            State(pc_initial=720 nstack_initial=3))},
             '$phi790.0': {('$phi788.0',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi790.1': {('$phi788.1',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi794.0': {('$phi602.0',
                            State(pc_initial=602 nstack_initial=2))},
             '$phi796.0': {('$phi794.0',
                            State(pc_initial=794 nstack_initial=1))},
             '$phi88.0': {('$phi40.0', State(pc_initial=40 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi22.0': {('$20get_iter.7',
                           State(pc_initial=2 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=1)),
                          ('$phi794.0',
                           State(pc_initial=794 nstack_initial=1))},
             '$phi26.0': {('$20get_iter.7',
                           State(pc_initial=2 nstack_initial=0)),
                          ('$phi794.0',
                           State(pc_initial=794 nstack_initial=1))},
             '$phi26.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))},
             '$phi354.0': {('$phi26.0', State(pc_initial=26 nstack_initial=2))},
             '$phi364.0': {('$phi26.0', State(pc_initial=26 nstack_initial=2))},
             '$phi40.0': {('$20get_iter.7',
                           State(pc_initial=2 nstack_initial=0)),
                          ('$phi794.0',
                           State(pc_initial=794 nstack_initial=1))},
             '$phi414.0': {('$phi26.0', State(pc_initial=26 nstack_initial=2))},
             '$phi418.0': {('$phi26.0', State(pc_initial=26 nstack_initial=2))},
             '$phi428.0': {('$phi26.0', State(pc_initial=26 nstack_initial=2)),
                           ('$phi430.0',
                            State(pc_initial=430 nstack_initial=3)),
                           ('$phi462.0',
                            State(pc_initial=462 nstack_initial=2))},
             '$phi428.1': {('$426get_iter.4',
                            State(pc_initial=418 nstack_initial=1)),
                           ('$phi430.1',
                            State(pc_initial=430 nstack_initial=3)),
                           ('$phi462.1',
                            State(pc_initial=462 nstack_initial=2))},
             '$phi430.0': {('$phi26.0', State(pc_initial=26 nstack_initial=2)),
                           ('$phi430.0',
                            State(pc_initial=430 nstack_initial=3)),
                           ('$phi462.0',
                            State(pc_initial=462 nstack_initial=2))},
             '$phi430.1': {('$426get_iter.4',
                            State(pc_initial=418 nstack_initial=1)),
                           ('$phi430.1',
                            State(pc_initial=430 nstack_initial=3)),
                           ('$phi462.1',
                            State(pc_initial=462 nstack_initial=2))},
             '$phi430.2': {('$428for_iter.3',
                            State(pc_initial=428 nstack_initial=2))},
             '$phi462.0': {('$phi26.0', State(pc_initial=26 nstack_initial=2)),
                           ('$phi462.0',
                            State(pc_initial=462 nstack_initial=2))},
             '$phi462.1': {('$426get_iter.4',
                            State(pc_initial=418 nstack_initial=1)),
                           ('$phi462.1',
                            State(pc_initial=462 nstack_initial=2))},
             '$phi494.0': {('$phi26.0', State(pc_initial=26 nstack_initial=2))},
             '$phi494.1': {('$426get_iter.4',
                            State(pc_initial=418 nstack_initial=1))},
             '$phi520.0': {('$phi26.0', State(pc_initial=26 nstack_initial=2))},
             '$phi520.1': {('$426get_iter.4',
                            State(pc_initial=418 nstack_initial=1))},
             '$phi546.0': {('$phi26.0', State(pc_initial=26 nstack_initial=2)),
                           ('$phi430.0',
                            State(pc_initial=430 nstack_initial=3)),
                           ('$phi462.0',
                            State(pc_initial=462 nstack_initial=2))},
             '$phi548.0': {('$phi26.0', State(pc_initial=26 nstack_initial=2)),
                           ('$phi430.0',
                            State(pc_initial=430 nstack_initial=3)),
                           ('$phi462.0',
                            State(pc_initial=462 nstack_initial=2))},
             '$phi592.0': {('$phi26.0', State(pc_initial=26 nstack_initial=2)),
                           ('$phi430.0',
                            State(pc_initial=430 nstack_initial=3)),
                           ('$phi462.0',
                            State(pc_initial=462 nstack_initial=2))},
             '$phi602.0': {('$phi26.0', State(pc_initial=26 nstack_initial=2)),
                           ('$phi430.0',
                            State(pc_initial=430 nstack_initial=3)),
                           ('$phi462.0',
                            State(pc_initial=462 nstack_initial=2)),
                           ('$phi690.0',
                            State(pc_initial=690 nstack_initial=2)),
                           ('$phi788.0',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi602.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi690.1',
                            State(pc_initial=690 nstack_initial=2)),
                           ('$phi788.1',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi604.0': {('$phi26.0', State(pc_initial=26 nstack_initial=2)),
                           ('$phi430.0',
                            State(pc_initial=430 nstack_initial=3)),
                           ('$phi462.0',
                            State(pc_initial=462 nstack_initial=2)),
                           ('$phi690.0',
                            State(pc_initial=690 nstack_initial=2)),
                           ('$phi788.0',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi604.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi690.1',
                            State(pc_initial=690 nstack_initial=2)),
                           ('$phi788.1',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi604.2': {('$602for_iter.3',
                            State(pc_initial=602 nstack_initial=2))},
             '$phi646.0': {('$phi26.0', State(pc_initial=26 nstack_initial=2)),
                           ('$phi430.0',
                            State(pc_initial=430 nstack_initial=3)),
                           ('$phi462.0',
                            State(pc_initial=462 nstack_initial=2)),
                           ('$phi690.0',
                            State(pc_initial=690 nstack_initial=2)),
                           ('$phi788.0',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi646.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi690.1',
                            State(pc_initial=690 nstack_initial=2)),
                           ('$phi788.1',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi690.0': {('$phi26.0', State(pc_initial=26 nstack_initial=2)),
                           ('$phi430.0',
                            State(pc_initial=430 nstack_initial=3)),
                           ('$phi462.0',
                            State(pc_initial=462 nstack_initial=2)),
                           ('$phi690.0',
                            State(pc_initial=690 nstack_initial=2)),
                           ('$phi788.0',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi690.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi690.1',
                            State(pc_initial=690 nstack_initial=2)),
                           ('$phi788.1',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi700.0': {('$phi26.0', State(pc_initial=26 nstack_initial=2)),
                           ('$phi430.0',
                            State(pc_initial=430 nstack_initial=3)),
                           ('$phi462.0',
                            State(pc_initial=462 nstack_initial=2)),
                           ('$phi788.0',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi700.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi788.1',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi706.0': {('$phi26.0', State(pc_initial=26 nstack_initial=2)),
                           ('$phi430.0',
                            State(pc_initial=430 nstack_initial=3)),
                           ('$phi462.0',
                            State(pc_initial=462 nstack_initial=2)),
                           ('$phi788.0',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi706.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi788.1',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi710.0': {('$phi26.0', State(pc_initial=26 nstack_initial=2)),
                           ('$phi430.0',
                            State(pc_initial=430 nstack_initial=3)),
                           ('$phi462.0',
                            State(pc_initial=462 nstack_initial=2)),
                           ('$phi690.0',
                            State(pc_initial=690 nstack_initial=2)),
                           ('$phi788.0',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi710.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi690.1',
                            State(pc_initial=690 nstack_initial=2)),
                           ('$phi788.1',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi720.0': {('$phi26.0', State(pc_initial=26 nstack_initial=2)),
                           ('$phi430.0',
                            State(pc_initial=430 nstack_initial=3)),
                           ('$phi462.0',
                            State(pc_initial=462 nstack_initial=2)),
                           ('$phi690.0',
                            State(pc_initial=690 nstack_initial=2)),
                           ('$phi734.0',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.0',
                            State(pc_initial=760 nstack_initial=3)),
                           ('$phi788.0',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi720.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi690.1',
                            State(pc_initial=690 nstack_initial=2)),
                           ('$phi734.1',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.1',
                            State(pc_initial=760 nstack_initial=3)),
                           ('$phi788.1',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi720.2': {('$718get_iter.5',
                            State(pc_initial=710 nstack_initial=2)),
                           ('$phi734.2',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.2',
                            State(pc_initial=760 nstack_initial=3))},
             '$phi722.0': {('$phi26.0', State(pc_initial=26 nstack_initial=2)),
                           ('$phi430.0',
                            State(pc_initial=430 nstack_initial=3)),
                           ('$phi462.0',
                            State(pc_initial=462 nstack_initial=2)),
                           ('$phi690.0',
                            State(pc_initial=690 nstack_initial=2)),
                           ('$phi734.0',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.0',
                            State(pc_initial=760 nstack_initial=3)),
                           ('$phi788.0',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi722.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi690.1',
                            State(pc_initial=690 nstack_initial=2)),
                           ('$phi734.1',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.1',
                            State(pc_initial=760 nstack_initial=3)),
                           ('$phi788.1',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi722.2': {('$718get_iter.5',
                            State(pc_initial=710 nstack_initial=2)),
                           ('$phi734.2',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.2',
                            State(pc_initial=760 nstack_initial=3))},
             '$phi722.3': {('$720for_iter.4',
                            State(pc_initial=720 nstack_initial=3))},
             '$phi734.0': {('$phi26.0', State(pc_initial=26 nstack_initial=2)),
                           ('$phi430.0',
                            State(pc_initial=430 nstack_initial=3)),
                           ('$phi462.0',
                            State(pc_initial=462 nstack_initial=2)),
                           ('$phi690.0',
                            State(pc_initial=690 nstack_initial=2)),
                           ('$phi734.0',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.0',
                            State(pc_initial=760 nstack_initial=3)),
                           ('$phi788.0',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi734.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi690.1',
                            State(pc_initial=690 nstack_initial=2)),
                           ('$phi734.1',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.1',
                            State(pc_initial=760 nstack_initial=3)),
                           ('$phi788.1',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi734.2': {('$718get_iter.5',
                            State(pc_initial=710 nstack_initial=2)),
                           ('$phi734.2',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.2',
                            State(pc_initial=760 nstack_initial=3))},
             '$phi760.0': {('$phi26.0', State(pc_initial=26 nstack_initial=2)),
                           ('$phi430.0',
                            State(pc_initial=430 nstack_initial=3)),
                           ('$phi462.0',
                            State(pc_initial=462 nstack_initial=2)),
                           ('$phi690.0',
                            State(pc_initial=690 nstack_initial=2)),
                           ('$phi734.0',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.0',
                            State(pc_initial=760 nstack_initial=3)),
                           ('$phi788.0',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi760.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi690.1',
                            State(pc_initial=690 nstack_initial=2)),
                           ('$phi734.1',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.1',
                            State(pc_initial=760 nstack_initial=3)),
                           ('$phi788.1',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi760.2': {('$718get_iter.5',
                            State(pc_initial=710 nstack_initial=2)),
                           ('$phi734.2',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.2',
                            State(pc_initial=760 nstack_initial=3))},
             '$phi764.0': {('$phi26.0', State(pc_initial=26 nstack_initial=2)),
                           ('$phi430.0',
                            State(pc_initial=430 nstack_initial=3)),
                           ('$phi462.0',
                            State(pc_initial=462 nstack_initial=2)),
                           ('$phi690.0',
                            State(pc_initial=690 nstack_initial=2)),
                           ('$phi788.0',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi764.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi690.1',
                            State(pc_initial=690 nstack_initial=2)),
                           ('$phi788.1',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi764.2': {('$718get_iter.5',
                            State(pc_initial=710 nstack_initial=2))},
             '$phi788.0': {('$phi26.0', State(pc_initial=26 nstack_initial=2)),
                           ('$phi430.0',
                            State(pc_initial=430 nstack_initial=3)),
                           ('$phi462.0',
                            State(pc_initial=462 nstack_initial=2)),
                           ('$phi690.0',
                            State(pc_initial=690 nstack_initial=2)),
                           ('$phi734.0',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.0',
                            State(pc_initial=760 nstack_initial=3)),
                           ('$phi788.0',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi788.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi690.1',
                            State(pc_initial=690 nstack_initial=2)),
                           ('$phi734.1',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.1',
                            State(pc_initial=760 nstack_initial=3)),
                           ('$phi788.1',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi790.0': {('$phi26.0', State(pc_initial=26 nstack_initial=2)),
                           ('$phi430.0',
                            State(pc_initial=430 nstack_initial=3)),
                           ('$phi462.0',
                            State(pc_initial=462 nstack_initial=2)),
                           ('$phi690.0',
                            State(pc_initial=690 nstack_initial=2)),
                           ('$phi734.0',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.0',
                            State(pc_initial=760 nstack_initial=3))},
             '$phi790.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi690.1',
                            State(pc_initial=690 nstack_initial=2)),
                           ('$phi734.1',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.1',
                            State(pc_initial=760 nstack_initial=3))},
             '$phi794.0': {('$phi26.0', State(pc_initial=26 nstack_initial=2)),
                           ('$phi430.0',
                            State(pc_initial=430 nstack_initial=3)),
                           ('$phi462.0',
                            State(pc_initial=462 nstack_initial=2)),
                           ('$phi690.0',
                            State(pc_initial=690 nstack_initial=2)),
                           ('$phi788.0',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi796.0': {('$phi26.0', State(pc_initial=26 nstack_initial=2)),
                           ('$phi430.0',
                            State(pc_initial=430 nstack_initial=3)),
                           ('$phi462.0',
                            State(pc_initial=462 nstack_initial=2)),
                           ('$phi690.0',
                            State(pc_initial=690 nstack_initial=2)),
                           ('$phi788.0',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi88.0': {('$20get_iter.7',
                           State(pc_initial=2 nstack_initial=0)),
                          ('$phi794.0',
                           State(pc_initial=794 nstack_initial=1))}})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi22.0': {('$20get_iter.7',
                           State(pc_initial=2 nstack_initial=0)),
                          ('$phi430.0', State(pc_initial=430 nstack_initial=3)),
                          ('$phi462.0', State(pc_initial=462 nstack_initial=2)),
                          ('$phi690.0', State(pc_initial=690 nstack_initial=2)),
                          ('$phi788.0',
                           State(pc_initial=788 nstack_initial=2))},
             '$phi26.0': {('$20get_iter.7',
                           State(pc_initial=2 nstack_initial=0)),
                          ('$phi26.0', State(pc_initial=26 nstack_initial=2)),
                          ('$phi430.0', State(pc_initial=430 nstack_initial=3)),
                          ('$phi462.0', State(pc_initial=462 nstack_initial=2)),
                          ('$phi690.0', State(pc_initial=690 nstack_initial=2)),
                          ('$phi788.0',
                           State(pc_initial=788 nstack_initial=2))},
             '$phi26.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))},
             '$phi354.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0)),
                           ('$phi430.0',
                            State(pc_initial=430 nstack_initial=3)),
                           ('$phi462.0',
                            State(pc_initial=462 nstack_initial=2)),
                           ('$phi690.0',
                            State(pc_initial=690 nstack_initial=2)),
                           ('$phi788.0',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi364.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0)),
                           ('$phi430.0',
                            State(pc_initial=430 nstack_initial=3)),
                           ('$phi462.0',
                            State(pc_initial=462 nstack_initial=2)),
                           ('$phi690.0',
                            State(pc_initial=690 nstack_initial=2)),
                           ('$phi788.0',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi40.0': {('$20get_iter.7',
                           State(pc_initial=2 nstack_initial=0)),
                          ('$phi430.0', State(pc_initial=430 nstack_initial=3)),
                          ('$phi462.0', State(pc_initial=462 nstack_initial=2)),
                          ('$phi690.0', State(pc_initial=690 nstack_initial=2)),
                          ('$phi788.0',
                           State(pc_initial=788 nstack_initial=2))},
             '$phi414.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0)),
                           ('$phi430.0',
                            State(pc_initial=430 nstack_initial=3)),
                           ('$phi462.0',
                            State(pc_initial=462 nstack_initial=2)),
                           ('$phi690.0',
                            State(pc_initial=690 nstack_initial=2)),
                           ('$phi788.0',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi418.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0)),
                           ('$phi430.0',
                            State(pc_initial=430 nstack_initial=3)),
                           ('$phi462.0',
                            State(pc_initial=462 nstack_initial=2)),
                           ('$phi690.0',
                            State(pc_initial=690 nstack_initial=2)),
                           ('$phi788.0',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi428.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0)),
                           ('$phi690.0',
                            State(pc_initial=690 nstack_initial=2)),
                           ('$phi788.0',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi428.1': {('$426get_iter.4',
                            State(pc_initial=418 nstack_initial=1))},
             '$phi430.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0)),
                           ('$phi690.0',
                            State(pc_initial=690 nstack_initial=2)),
                           ('$phi788.0',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi430.1': {('$426get_iter.4',
                            State(pc_initial=418 nstack_initial=1))},
             '$phi430.2': {('$428for_iter.3',
                            State(pc_initial=428 nstack_initial=2))},
             '$phi462.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0)),
                           ('$phi690.0',
                            State(pc_initial=690 nstack_initial=2)),
                           ('$phi788.0',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi462.1': {('$426get_iter.4',
                            State(pc_initial=418 nstack_initial=1))},
             '$phi494.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0)),
                           ('$phi690.0',
                            State(pc_initial=690 nstack_initial=2)),
                           ('$phi788.0',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi494.1': {('$426get_iter.4',
                            State(pc_initial=418 nstack_initial=1))},
             '$phi520.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0)),
                           ('$phi430.0',
                            State(pc_initial=430 nstack_initial=3)),
                           ('$phi462.0',
                            State(pc_initial=462 nstack_initial=2)),
                           ('$phi690.0',
                            State(pc_initial=690 nstack_initial=2)),
                           ('$phi788.0',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi520.1': {('$426get_iter.4',
                            State(pc_initial=418 nstack_initial=1))},
             '$phi546.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0)),
                           ('$phi690.0',
                            State(pc_initial=690 nstack_initial=2)),
                           ('$phi788.0',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi548.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0)),
                           ('$phi690.0',
                            State(pc_initial=690 nstack_initial=2)),
                           ('$phi788.0',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi592.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0)),
                           ('$phi690.0',
                            State(pc_initial=690 nstack_initial=2)),
                           ('$phi788.0',
                            State(pc_initial=788 nstack_initial=2))},
             '$phi602.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0)),
                           ('$phi734.0',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.0',
                            State(pc_initial=760 nstack_initial=3))},
             '$phi602.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi734.1',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.1',
                            State(pc_initial=760 nstack_initial=3))},
             '$phi604.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0)),
                           ('$phi734.0',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.0',
                            State(pc_initial=760 nstack_initial=3))},
             '$phi604.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi734.1',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.1',
                            State(pc_initial=760 nstack_initial=3))},
             '$phi604.2': {('$602for_iter.3',
                            State(pc_initial=602 nstack_initial=2))},
             '$phi646.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0)),
                           ('$phi734.0',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.0',
                            State(pc_initial=760 nstack_initial=3))},
             '$phi646.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi734.1',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.1',
                            State(pc_initial=760 nstack_initial=3))},
             '$phi690.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0)),
                           ('$phi734.0',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.0',
                            State(pc_initial=760 nstack_initial=3))},
             '$phi690.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi734.1',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.1',
                            State(pc_initial=760 nstack_initial=3))},
             '$phi700.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0)),
                           ('$phi734.0',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.0',
                            State(pc_initial=760 nstack_initial=3))},
             '$phi700.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi734.1',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.1',
                            State(pc_initial=760 nstack_initial=3))},
             '$phi706.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0)),
                           ('$phi734.0',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.0',
                            State(pc_initial=760 nstack_initial=3))},
             '$phi706.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi734.1',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.1',
                            State(pc_initial=760 nstack_initial=3))},
             '$phi710.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0)),
                           ('$phi734.0',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.0',
                            State(pc_initial=760 nstack_initial=3))},
             '$phi710.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1)),
                           ('$phi734.1',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.1',
                            State(pc_initial=760 nstack_initial=3))},
             '$phi720.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi720.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi720.2': {('$718get_iter.5',
                            State(pc_initial=710 nstack_initial=2))},
             '$phi722.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi722.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi722.2': {('$718get_iter.5',
                            State(pc_initial=710 nstack_initial=2))},
             '$phi722.3': {('$720for_iter.4',
                            State(pc_initial=720 nstack_initial=3))},
             '$phi734.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi734.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi734.2': {('$718get_iter.5',
                            State(pc_initial=710 nstack_initial=2))},
             '$phi760.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi760.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi760.2': {('$718get_iter.5',
                            State(pc_initial=710 nstack_initial=2))},
             '$phi764.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi764.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi764.2': {('$718get_iter.5',
                            State(pc_initial=710 nstack_initial=2))},
             '$phi788.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi788.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi790.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi790.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi794.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0)),
                           ('$phi734.0',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.0',
                            State(pc_initial=760 nstack_initial=3))},
             '$phi796.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0)),
                           ('$phi734.0',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.0',
                            State(pc_initial=760 nstack_initial=3))},
             '$phi88.0': {('$20get_iter.7',
                           State(pc_initial=2 nstack_initial=0)),
                          ('$phi734.0', State(pc_initial=734 nstack_initial=3)),
                          ('$phi760.0',
                           State(pc_initial=760 nstack_initial=3))}})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi22.0': {('$20get_iter.7',
                           State(pc_initial=2 nstack_initial=0)),
                          ('$phi734.0', State(pc_initial=734 nstack_initial=3)),
                          ('$phi760.0',
                           State(pc_initial=760 nstack_initial=3))},
             '$phi26.0': {('$20get_iter.7',
                           State(pc_initial=2 nstack_initial=0)),
                          ('$phi734.0', State(pc_initial=734 nstack_initial=3)),
                          ('$phi760.0',
                           State(pc_initial=760 nstack_initial=3))},
             '$phi26.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))},
             '$phi354.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0)),
                           ('$phi734.0',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.0',
                            State(pc_initial=760 nstack_initial=3))},
             '$phi364.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0)),
                           ('$phi734.0',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.0',
                            State(pc_initial=760 nstack_initial=3))},
             '$phi40.0': {('$20get_iter.7',
                           State(pc_initial=2 nstack_initial=0)),
                          ('$phi734.0', State(pc_initial=734 nstack_initial=3)),
                          ('$phi760.0',
                           State(pc_initial=760 nstack_initial=3))},
             '$phi414.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0)),
                           ('$phi734.0',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.0',
                            State(pc_initial=760 nstack_initial=3))},
             '$phi418.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0)),
                           ('$phi734.0',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.0',
                            State(pc_initial=760 nstack_initial=3))},
             '$phi428.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0)),
                           ('$phi734.0',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.0',
                            State(pc_initial=760 nstack_initial=3))},
             '$phi428.1': {('$426get_iter.4',
                            State(pc_initial=418 nstack_initial=1))},
             '$phi430.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0)),
                           ('$phi734.0',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.0',
                            State(pc_initial=760 nstack_initial=3))},
             '$phi430.1': {('$426get_iter.4',
                            State(pc_initial=418 nstack_initial=1))},
             '$phi430.2': {('$428for_iter.3',
                            State(pc_initial=428 nstack_initial=2))},
             '$phi462.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0)),
                           ('$phi734.0',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.0',
                            State(pc_initial=760 nstack_initial=3))},
             '$phi462.1': {('$426get_iter.4',
                            State(pc_initial=418 nstack_initial=1))},
             '$phi494.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0)),
                           ('$phi734.0',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.0',
                            State(pc_initial=760 nstack_initial=3))},
             '$phi494.1': {('$426get_iter.4',
                            State(pc_initial=418 nstack_initial=1))},
             '$phi520.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0)),
                           ('$phi734.0',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.0',
                            State(pc_initial=760 nstack_initial=3))},
             '$phi520.1': {('$426get_iter.4',
                            State(pc_initial=418 nstack_initial=1))},
             '$phi546.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0)),
                           ('$phi734.0',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.0',
                            State(pc_initial=760 nstack_initial=3))},
             '$phi548.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0)),
                           ('$phi734.0',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.0',
                            State(pc_initial=760 nstack_initial=3))},
             '$phi592.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0)),
                           ('$phi734.0',
                            State(pc_initial=734 nstack_initial=3)),
                           ('$phi760.0',
                            State(pc_initial=760 nstack_initial=3))},
             '$phi602.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi602.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi604.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi604.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi604.2': {('$602for_iter.3',
                            State(pc_initial=602 nstack_initial=2))},
             '$phi646.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi646.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi690.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi690.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi700.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi700.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi706.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi706.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi710.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi710.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi720.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi720.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi720.2': {('$718get_iter.5',
                            State(pc_initial=710 nstack_initial=2))},
             '$phi722.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi722.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi722.2': {('$718get_iter.5',
                            State(pc_initial=710 nstack_initial=2))},
             '$phi722.3': {('$720for_iter.4',
                            State(pc_initial=720 nstack_initial=3))},
             '$phi734.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi734.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi734.2': {('$718get_iter.5',
                            State(pc_initial=710 nstack_initial=2))},
             '$phi760.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi760.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi760.2': {('$718get_iter.5',
                            State(pc_initial=710 nstack_initial=2))},
             '$phi764.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi764.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi764.2': {('$718get_iter.5',
                            State(pc_initial=710 nstack_initial=2))},
             '$phi788.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi788.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi790.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi790.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi794.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi796.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi88.0': {('$20get_iter.7',
                           State(pc_initial=2 nstack_initial=0))}})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi22.0': {('$20get_iter.7',
                           State(pc_initial=2 nstack_initial=0))},
             '$phi26.0': {('$20get_iter.7',
                           State(pc_initial=2 nstack_initial=0))},
             '$phi26.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))},
             '$phi354.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi364.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi40.0': {('$20get_iter.7',
                           State(pc_initial=2 nstack_initial=0))},
             '$phi414.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi418.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi428.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi428.1': {('$426get_iter.4',
                            State(pc_initial=418 nstack_initial=1))},
             '$phi430.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi430.1': {('$426get_iter.4',
                            State(pc_initial=418 nstack_initial=1))},
             '$phi430.2': {('$428for_iter.3',
                            State(pc_initial=428 nstack_initial=2))},
             '$phi462.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi462.1': {('$426get_iter.4',
                            State(pc_initial=418 nstack_initial=1))},
             '$phi494.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi494.1': {('$426get_iter.4',
                            State(pc_initial=418 nstack_initial=1))},
             '$phi520.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi520.1': {('$426get_iter.4',
                            State(pc_initial=418 nstack_initial=1))},
             '$phi546.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi548.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi592.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi602.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi602.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi604.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi604.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi604.2': {('$602for_iter.3',
                            State(pc_initial=602 nstack_initial=2))},
             '$phi646.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi646.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi690.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi690.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi700.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi700.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi706.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi706.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi710.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi710.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi720.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi720.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi720.2': {('$718get_iter.5',
                            State(pc_initial=710 nstack_initial=2))},
             '$phi722.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi722.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi722.2': {('$718get_iter.5',
                            State(pc_initial=710 nstack_initial=2))},
             '$phi722.3': {('$720for_iter.4',
                            State(pc_initial=720 nstack_initial=3))},
             '$phi734.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi734.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi734.2': {('$718get_iter.5',
                            State(pc_initial=710 nstack_initial=2))},
             '$phi760.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi760.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi760.2': {('$718get_iter.5',
                            State(pc_initial=710 nstack_initial=2))},
             '$phi764.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi764.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi764.2': {('$718get_iter.5',
                            State(pc_initial=710 nstack_initial=2))},
             '$phi788.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi788.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi790.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi790.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi794.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi796.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi88.0': {('$20get_iter.7',
                           State(pc_initial=2 nstack_initial=0))}})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>,
            {'$phi22.0': {('$20get_iter.7',
                           State(pc_initial=2 nstack_initial=0))},
             '$phi26.0': {('$20get_iter.7',
                           State(pc_initial=2 nstack_initial=0))},
             '$phi26.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))},
             '$phi354.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi364.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi40.0': {('$20get_iter.7',
                           State(pc_initial=2 nstack_initial=0))},
             '$phi414.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi418.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi428.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi428.1': {('$426get_iter.4',
                            State(pc_initial=418 nstack_initial=1))},
             '$phi430.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi430.1': {('$426get_iter.4',
                            State(pc_initial=418 nstack_initial=1))},
             '$phi430.2': {('$428for_iter.3',
                            State(pc_initial=428 nstack_initial=2))},
             '$phi462.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi462.1': {('$426get_iter.4',
                            State(pc_initial=418 nstack_initial=1))},
             '$phi494.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi494.1': {('$426get_iter.4',
                            State(pc_initial=418 nstack_initial=1))},
             '$phi520.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi520.1': {('$426get_iter.4',
                            State(pc_initial=418 nstack_initial=1))},
             '$phi546.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi548.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi592.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi602.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi602.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi604.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi604.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi604.2': {('$602for_iter.3',
                            State(pc_initial=602 nstack_initial=2))},
             '$phi646.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi646.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi690.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi690.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi700.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi700.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi706.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi706.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi710.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi710.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi720.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi720.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi720.2': {('$718get_iter.5',
                            State(pc_initial=710 nstack_initial=2))},
             '$phi722.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi722.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi722.2': {('$718get_iter.5',
                            State(pc_initial=710 nstack_initial=2))},
             '$phi722.3': {('$720for_iter.4',
                            State(pc_initial=720 nstack_initial=3))},
             '$phi734.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi734.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi734.2': {('$718get_iter.5',
                            State(pc_initial=710 nstack_initial=2))},
             '$phi760.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi760.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi760.2': {('$718get_iter.5',
                            State(pc_initial=710 nstack_initial=2))},
             '$phi764.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi764.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi764.2': {('$718get_iter.5',
                            State(pc_initial=710 nstack_initial=2))},
             '$phi788.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi788.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi790.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi790.1': {('$600get_iter.4',
                            State(pc_initial=592 nstack_initial=1))},
             '$phi794.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi796.0': {('$20get_iter.7',
                            State(pc_initial=2 nstack_initial=0))},
             '$phi88.0': {('$20get_iter.7',
                           State(pc_initial=2 nstack_initial=0))}})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG keep phismap: {'$phi22.0': {('$20get_iter.7', State(pc_initial=2 nstack_initial=0))},
 '$phi26.1': {('$22for_iter.2', State(pc_initial=22 nstack_initial=1))},
 '$phi428.1': {('$426get_iter.4', State(pc_initial=418 nstack_initial=1))},
 '$phi430.2': {('$428for_iter.3', State(pc_initial=428 nstack_initial=2))},
 '$phi602.1': {('$600get_iter.4', State(pc_initial=592 nstack_initial=1))},
 '$phi604.2': {('$602for_iter.3', State(pc_initial=602 nstack_initial=2))},
 '$phi720.2': {('$718get_iter.5', State(pc_initial=710 nstack_initial=2))},
 '$phi722.3': {('$720for_iter.4', State(pc_initial=720 nstack_initial=3))}}
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=2 nstack_initial=0): {'$phi22.0': '$20get_iter.7'},
             State(pc_initial=22 nstack_initial=1): {'$phi26.1': '$22for_iter.2'},
             State(pc_initial=418 nstack_initial=1): {'$phi428.1': '$426get_iter.4'},
             State(pc_initial=428 nstack_initial=2): {'$phi430.2': '$428for_iter.3'},
             State(pc_initial=592 nstack_initial=1): {'$phi602.1': '$600get_iter.4'},
             State(pc_initial=602 nstack_initial=2): {'$phi604.2': '$602for_iter.3'},
             State(pc_initial=710 nstack_initial=2): {'$phi720.2': '$718get_iter.5'},
             State(pc_initial=720 nstack_initial=3): {'$phi722.3': '$720for_iter.4'}})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG ----------------------DONE Prune PHIs-----------------------
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={2: ()})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=2 nstack_initial=0):
AdaptBlockInfo(insts=((6, {'res': '$6load_global.0'}), (8, {'item': '$6load_global.0', 'res': '$8load_method.1'}), (10, {'res': '$epochs_per_sample10.2'}), (12, {'item': '$epochs_per_sample10.2', 'res': '$12load_attr.3'}), (14, {'res': '$const14.4'}), (16, {'index': '$const14.4', 'target': '$12load_attr.3', 'res': '$16binary_subscr.5'}), (18, {'func': '$8load_method.1', 'args': ['$16binary_subscr.5'], 'res': '$18call_method.6'}), (20, {'value': '$18call_method.6', 'res': '$20get_iter.7'})), outgoing_phis={'$phi22.0': '$20get_iter.7'}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: ('$20get_iter.7',)})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=22 nstack_initial=1):
AdaptBlockInfo(insts=((22, {'iterator': '$phi22.0', 'pair': '$22for_iter.1', 'indval': '$22for_iter.2', 'pred': '$22for_iter.3'}),), outgoing_phis={'$phi26.1': '$22for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={822: (), 26: ('$phi22.0', '$22for_iter.2')})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=26 nstack_initial=2):
AdaptBlockInfo(insts=((26, {'value': '$phi26.1'}), (28, {'res': '$epoch_of_next_sample28.2'}), (30, {'res': '$i30.3'}), (32, {'index': '$i30.3', 'target': '$epoch_of_next_sample28.2', 'res': '$32binary_subscr.4'}), (34, {'res': '$n34.5'}), (36, {'lhs': '$32binary_subscr.4', 'rhs': '$n34.5', 'res': '$36compare_op.6'}), (38, {'pred': '$36compare_op.6'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={40: ('$phi26.0',), 22: ('$phi26.0',)})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=40 nstack_initial=1):
AdaptBlockInfo(insts=((40, {'res': '$head40.1'}), (42, {'res': '$i42.2'}), (44, {'index': '$i42.2', 'target': '$head40.1', 'res': '$44binary_subscr.3'}), (46, {'value': '$44binary_subscr.3'}), (48, {'res': '$tail48.4'}), (50, {'res': '$i50.5'}), (52, {'index': '$i50.5', 'target': '$tail48.4', 'res': '$52binary_subscr.6'}), (54, {'value': '$52binary_subscr.6'}), (56, {'res': '$head_embedding56.7'}), (58, {'res': '$j58.8'}), (60, {'index': '$j58.8', 'target': '$head_embedding56.7', 'res': '$60binary_subscr.9'}), (62, {'value': '$60binary_subscr.9'}), (64, {'res': '$tail_embedding64.10'}), (66, {'res': '$k66.11'}), (68, {'index': '$k66.11', 'target': '$tail_embedding64.10', 'res': '$68binary_subscr.12'}), (70, {'value': '$68binary_subscr.12'}), (72, {'res': '$72load_global.13'}), (74, {'res': '$current74.14'}), (76, {'res': '$other76.15'}), (78, {'func': '$72load_global.13', 'args': ['$current74.14', '$other76.15'], 'res': '$78call_function.16'}), (80, {'value': '$78call_function.16'}), (82, {'res': '$densmap_flag82.17'}), (84, {'pred': '$densmap_flag82.17'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={88: ('$phi40.0',), 354: ('$phi40.0',)})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=88 nstack_initial=1):
AdaptBlockInfo(insts=((88, {'res': '$const88.1'}), (90, {'res': '$const90.2'}), (92, {'res': '$a92.3'}), (94, {'res': '$94load_global.4'}), (96, {'res': '$dist_squared96.5'}), (98, {'res': '$b98.6'}), (100, {'func': '$94load_global.4', 'args': ['$dist_squared96.5', '$b98.6'], 'res': '$100call_function.7'}), (102, {'lhs': '$a92.3', 'rhs': '$100call_function.7', 'res': '$102binary_multiply.8'}), (104, {'lhs': '$const90.2', 'rhs': '$102binary_multiply.8', 'res': '$104binary_add.9'}), (106, {'lhs': '$const88.1', 'rhs': '$104binary_add.9', 'res': '$106binary_true_divide.10'}), (108, {'value': '$106binary_true_divide.10'}), (110, {'res': '$a110.11'}), (112, {'res': '$b112.12'}), (114, {'lhs': '$a110.11', 'rhs': '$b112.12', 'res': '$114binary_multiply.13'}), (116, {'res': '$116load_global.14'}), (118, {'res': '$dist_squared118.15'}), (120, {'res': '$b120.16'}), (122, {'res': '$const122.17'}), (124, {'lhs': '$b120.16', 'rhs': '$const122.17', 'res': '$124binary_subtract.18'}), (126, {'func': '$116load_global.14', 'args': ['$dist_squared118.15', '$124binary_subtract.18'], 'res': '$126call_function.19'}), (128, {'lhs': '$114binary_multiply.13', 'rhs': '$126call_function.19', 'res': '$128binary_multiply.20'}), (130, {'res': '$const130.21'}), (132, {'res': '$a132.22'}), (134, {'res': '$134load_global.23'}), (136, {'res': '$dist_squared136.24'}), (138, {'res': '$b138.25'}), (140, {'func': '$134load_global.23', 'args': ['$dist_squared136.24', '$b138.25'], 'res': '$140call_function.26'}), (142, {'lhs': '$a132.22', 'rhs': '$140call_function.26', 'res': '$142binary_multiply.27'}), (144, {'lhs': '$const130.21', 'rhs': '$142binary_multiply.27', 'res': '$144binary_add.28'}), (146, {'lhs': '$128binary_multiply.20', 'rhs': '$144binary_add.28', 'res': '$146binary_true_divide.29'}), (148, {'value': '$146binary_true_divide.29'}), (150, {'res': '$phi150.30'}), (152, {'res': '$dens_phi_sum152.31'}), (154, {'res': '$k154.32'}), (156, {'index': '$k154.32', 'target': '$dens_phi_sum152.31', 'res': '$156binary_subscr.33'}), (158, {'lhs': '$phi150.30', 'rhs': '$156binary_subscr.33', 'res': '$158binary_true_divide.34'}), (160, {'value': '$158binary_true_divide.34'}), (162, {'res': '$phi162.35'}), (164, {'res': '$dens_phi_sum164.36'}), (166, {'res': '$j166.37'}), (168, {'index': '$j166.37', 'target': '$dens_phi_sum164.36', 'res': '$168binary_subscr.38'}), (170, {'lhs': '$phi162.35', 'rhs': '$168binary_subscr.38', 'res': '$170binary_true_divide.39'}), (172, {'value': '$170binary_true_divide.39'}), (174, {'res': '$q_jk174.40'}), (176, {'res': '$const176.41'}), (178, {'res': '$b178.42'}), (180, {'res': '$const180.43'}), (182, {'res': '$phi182.44'}), (184, {'lhs': '$const180.43', 'rhs': '$phi182.44', 'res': '$184binary_subtract.45'}), (186, {'lhs': '$b178.42', 'rhs': '$184binary_subtract.45', 'res': '$186binary_multiply.46'}), (188, {'lhs': '$const176.41', 'rhs': '$186binary_multiply.46', 'res': '$188binary_subtract.47'}), (190, {'res': '$190load_global.48'}), (192, {'item': '$190load_global.48', 'res': '$192load_method.49'}), (194, {'res': '$dens_re_sum194.50'}), (196, {'res': '$k196.51'}), (198, {'index': '$k196.51', 'target': '$dens_re_sum194.50', 'res': '$198binary_subscr.52'}), (200, {'func': '$192load_method.49', 'args': ['$198binary_subscr.52'], 'res': '$200call_method.53'}), (202, {'lhs': '$188binary_subtract.47', 'rhs': '$200call_method.53', 'res': '$202binary_true_divide.54'}), (204, {'res': '$dphi_term204.55'}), (206, {'lhs': '$202binary_true_divide.54', 'rhs': '$dphi_term204.55', 'res': '$206binary_add.56'}), (208, {'lhs': '$q_jk174.40', 'rhs': '$206binary_add.56', 'res': '$208binary_multiply.57'}), (210, {'value': '$208binary_multiply.57'}), (212, {'res': '$q_kj212.58'}), (214, {'res': '$const214.59'}), (216, {'res': '$b216.60'}), (218, {'res': '$const218.61'}), (220, {'res': '$phi220.62'}), (222, {'lhs': '$const218.61', 'rhs': '$phi220.62', 'res': '$222binary_subtract.63'}), (224, {'lhs': '$b216.60', 'rhs': '$222binary_subtract.63', 'res': '$224binary_multiply.64'}), (226, {'lhs': '$const214.59', 'rhs': '$224binary_multiply.64', 'res': '$226binary_subtract.65'}), (228, {'res': '$228load_global.66'}), (230, {'item': '$228load_global.66', 'res': '$230load_method.67'}), (232, {'res': '$dens_re_sum232.68'}), (234, {'res': '$j234.69'}), (236, {'index': '$j234.69', 'target': '$dens_re_sum232.68', 'res': '$236binary_subscr.70'}), (238, {'func': '$230load_method.67', 'args': ['$236binary_subscr.70'], 'res': '$238call_method.71'}), (240, {'lhs': '$226binary_subtract.65', 'rhs': '$238call_method.71', 'res': '$240binary_true_divide.72'}), (242, {'res': '$dphi_term242.73'}), (244, {'lhs': '$240binary_true_divide.72', 'rhs': '$dphi_term242.73', 'res': '$244binary_add.74'}), (246, {'lhs': '$q_kj212.58', 'rhs': '$244binary_add.74', 'res': '$246binary_multiply.75'}), (248, {'value': '$246binary_multiply.75'}), (250, {'res': '$dens_re_std250.76'}), (252, {'res': '$dens_re_std252.77'}), (254, {'lhs': '$dens_re_std250.76', 'rhs': '$dens_re_std252.77', 'res': '$254binary_multiply.78'}), (256, {'value': '$254binary_multiply.78'}), (258, {'res': '$dens_R258.79'}), (260, {'res': '$k260.80'}), (262, {'index': '$k260.80', 'target': '$dens_R258.79', 'res': '$262binary_subscr.81'}), (264, {'res': '$dens_re_cov264.82'}), (266, {'res': '$dens_re_sum266.83'}), (268, {'res': '$k268.84'}), (270, {'index': '$k268.84', 'target': '$dens_re_sum266.83', 'res': '$270binary_subscr.85'}), (272, {'res': '$dens_re_mean272.86'}), (274, {'lhs': '$270binary_subscr.85', 'rhs': '$dens_re_mean272.86', 'res': '$274binary_subtract.87'}), (276, {'lhs': '$dens_re_cov264.82', 'rhs': '$274binary_subtract.87', 'res': '$276binary_multiply.88'}), (278, {'res': '$re_std_sq278.89'}), (280, {'lhs': '$276binary_multiply.88', 'rhs': '$re_std_sq278.89', 'res': '$280binary_true_divide.90'}), (282, {'lhs': '$262binary_subscr.81', 'rhs': '$280binary_true_divide.90', 'res': '$282binary_subtract.91'}), (284, {'value': '$282binary_subtract.91'}), (286, {'res': '$dens_R286.92'}), (288, {'res': '$j288.93'}), (290, {'index': '$j288.93', 'target': '$dens_R286.92', 'res': '$290binary_subscr.94'}), (292, {'res': '$dens_re_cov292.95'}), (294, {'res': '$dens_re_sum294.96'}), (296, {'res': '$j296.97'}), (298, {'index': '$j296.97', 'target': '$dens_re_sum294.96', 'res': '$298binary_subscr.98'}), (300, {'res': '$dens_re_mean300.99'}), (302, {'lhs': '$298binary_subscr.98', 'rhs': '$dens_re_mean300.99', 'res': '$302binary_subtract.100'}), (304, {'lhs': '$dens_re_cov292.95', 'rhs': '$302binary_subtract.100', 'res': '$304binary_multiply.101'}), (306, {'res': '$re_std_sq306.102'}), (308, {'lhs': '$304binary_multiply.101', 'rhs': '$re_std_sq306.102', 'res': '$308binary_true_divide.103'}), (310, {'lhs': '$290binary_subscr.94', 'rhs': '$308binary_true_divide.103', 'res': '$310binary_subtract.104'}), (312, {'value': '$310binary_subtract.104'}), (314, {'res': '$dens_lambda314.105'}), (316, {'res': '$dens_mu_tot316.106'}), (318, {'lhs': '$dens_lambda314.105', 'rhs': '$dens_mu_tot316.106', 'res': '$318binary_multiply.107'}), (320, {'res': '$weight_k320.108'}), (322, {'res': '$drk322.109'}), (324, {'lhs': '$weight_k320.108', 'rhs': '$drk322.109', 'res': '$324binary_multiply.110'}), (326, {'res': '$weight_j326.111'}), (328, {'res': '$drj328.112'}), (330, {'lhs': '$weight_j326.111', 'rhs': '$drj328.112', 'res': '$330binary_multiply.113'}), (332, {'lhs': '$324binary_multiply.110', 'rhs': '$330binary_multiply.113', 'res': '$332binary_add.114'}), (334, {'lhs': '$318binary_multiply.107', 'rhs': '$332binary_add.114', 'res': '$334binary_multiply.115'}), (336, {'res': '$dens_mu336.116'}), (338, {'res': '$i338.117'}), (340, {'index': '$i338.117', 'target': '$dens_mu336.116', 'res': '$340binary_subscr.118'}), (342, {'res': '$dens_re_std342.119'}), (344, {'lhs': '$340binary_subscr.118', 'rhs': '$dens_re_std342.119', 'res': '$344binary_multiply.120'}), (346, {'lhs': '$334binary_multiply.115', 'rhs': '$344binary_multiply.120', 'res': '$346binary_true_divide.121'}), (348, {'res': '$n_vertices348.122'}), (350, {'lhs': '$346binary_true_divide.121', 'rhs': '$n_vertices348.122', 'res': '$350binary_true_divide.123'}), (352, {'value': '$350binary_true_divide.123'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={354: ('$phi88.0',)})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=354 nstack_initial=1):
AdaptBlockInfo(insts=((354, {'res': '$dist_squared354.1'}), (356, {'res': '$const356.2'}), (358, {'lhs': '$dist_squared354.1', 'rhs': '$const356.2', 'res': '$358compare_op.3'}), (360, {'pred': '$358compare_op.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={364: ('$phi354.0',), 414: ('$phi354.0',)})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=364 nstack_initial=1):
AdaptBlockInfo(insts=((364, {'res': '$const364.1'}), (366, {'res': '$a366.2'}), (368, {'lhs': '$const364.1', 'rhs': '$a366.2', 'res': '$368binary_multiply.3'}), (370, {'res': '$b370.4'}), (372, {'lhs': '$368binary_multiply.3', 'rhs': '$b370.4', 'res': '$372binary_multiply.5'}), (374, {'res': '$374load_global.6'}), (376, {'res': '$dist_squared376.7'}), (378, {'res': '$b378.8'}), (380, {'res': '$const380.9'}), (382, {'lhs': '$b378.8', 'rhs': '$const380.9', 'res': '$382binary_subtract.10'}), (384, {'func': '$374load_global.6', 'args': ['$dist_squared376.7', '$382binary_subtract.10'], 'res': '$384call_function.11'}), (386, {'lhs': '$372binary_multiply.5', 'rhs': '$384call_function.11', 'res': '$386binary_multiply.12'}), (388, {'value': '$386binary_multiply.12'}), (390, {'res': '$grad_coeff390.13'}), (392, {'res': '$a392.14'}), (394, {'res': '$394load_global.15'}), (396, {'res': '$dist_squared396.16'}), (398, {'res': '$b398.17'}), (400, {'func': '$394load_global.15', 'args': ['$dist_squared396.16', '$b398.17'], 'res': '$400call_function.18'}), (402, {'lhs': '$a392.14', 'rhs': '$400call_function.18', 'res': '$402binary_multiply.19'}), (404, {'res': '$const404.20'}), (406, {'lhs': '$402binary_multiply.19', 'rhs': '$const404.20', 'res': '$406binary_add.21'}), (408, {'lhs': '$grad_coeff390.13', 'rhs': '$406binary_add.21', 'res': '$408inplace_true_divide.22'}), (410, {'value': '$408inplace_true_divide.22'}), (412, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={418: ('$phi364.0',)})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=414 nstack_initial=1):
AdaptBlockInfo(insts=((414, {'res': '$const414.1'}), (416, {'value': '$const414.1'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={418: ('$phi414.0',)})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=418 nstack_initial=1):
AdaptBlockInfo(insts=((420, {'res': '$420load_global.1'}), (422, {'res': '$dim422.2'}), (424, {'func': '$420load_global.1', 'args': ['$dim422.2'], 'res': '$424call_function.3'}), (426, {'value': '$424call_function.3', 'res': '$426get_iter.4'})), outgoing_phis={'$phi428.1': '$426get_iter.4'}, blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={428: ('$phi418.0', '$426get_iter.4')})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=428 nstack_initial=2):
AdaptBlockInfo(insts=((428, {'iterator': '$phi428.1', 'pair': '$428for_iter.2', 'indval': '$428for_iter.3', 'pred': '$428for_iter.4'}),), outgoing_phis={'$phi430.2': '$428for_iter.3'}, blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 548, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={546: ('$phi428.0',), 430: ('$phi428.0', '$phi428.1', '$428for_iter.3')})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=430 nstack_initial=3):
AdaptBlockInfo(insts=((430, {'value': '$phi430.2'}), (432, {'res': '$432load_global.3'}), (434, {'res': '$grad_coeff434.4'}), (436, {'res': '$current436.5'}), (438, {'res': '$d438.6'}), (440, {'index': '$d438.6', 'target': '$current436.5', 'res': '$440binary_subscr.7'}), (442, {'res': '$other442.8'}), (444, {'res': '$d444.9'}), (446, {'index': '$d444.9', 'target': '$other442.8', 'res': '$446binary_subscr.10'}), (448, {'lhs': '$440binary_subscr.7', 'rhs': '$446binary_subscr.10', 'res': '$448binary_subtract.11'}), (450, {'lhs': '$grad_coeff434.4', 'rhs': '$448binary_subtract.11', 'res': '$450binary_multiply.12'}), (452, {'func': '$432load_global.3', 'args': ['$450binary_multiply.12'], 'res': '$452call_function.13'}), (454, {'value': '$452call_function.13'}), (456, {'res': '$densmap_flag456.14'}), (458, {'pred': '$densmap_flag456.14'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 548, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={462: ('$phi430.0', '$phi430.1'), 494: ('$phi430.0', '$phi430.1')})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=462 nstack_initial=2):
AdaptBlockInfo(insts=((462, {'res': '$grad_d462.2'}), (464, {'res': '$464load_global.3'}), (466, {'res': '$const466.4'}), (468, {'res': '$grad_cor_coeff468.5'}), (470, {'lhs': '$const466.4', 'rhs': '$grad_cor_coeff468.5', 'res': '$470binary_multiply.6'}), (472, {'res': '$current472.7'}), (474, {'res': '$d474.8'}), (476, {'index': '$d474.8', 'target': '$current472.7', 'res': '$476binary_subscr.9'}), (478, {'res': '$other478.10'}), (480, {'res': '$d480.11'}), (482, {'index': '$d480.11', 'target': '$other478.10', 'res': '$482binary_subscr.12'}), (484, {'lhs': '$476binary_subscr.9', 'rhs': '$482binary_subscr.12', 'res': '$484binary_subtract.13'}), (486, {'lhs': '$470binary_multiply.6', 'rhs': '$484binary_subtract.13', 'res': '$486binary_multiply.14'}), (488, {'func': '$464load_global.3', 'args': ['$486binary_multiply.14'], 'res': '$488call_function.15'}), (490, {'lhs': '$grad_d462.2', 'rhs': '$488call_function.15', 'res': '$490inplace_add.16'}), (492, {'value': '$490inplace_add.16'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 548, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={494: ('$phi462.0', '$phi462.1')})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=494 nstack_initial=2):
AdaptBlockInfo(insts=((494, {'res': '$current494.2'}), (496, {'res': '$d496.3'}), (498, {'orig': ['$current494.2', '$d496.3'], 'duped': ['$498dup_top_two.4', '$498dup_top_two.5']}), (500, {'index': '$498dup_top_two.5', 'target': '$498dup_top_two.4', 'res': '$500binary_subscr.6'}), (502, {'res': '$grad_d502.7'}), (504, {'res': '$alpha504.8'}), (506, {'lhs': '$grad_d502.7', 'rhs': '$alpha504.8', 'res': '$506binary_multiply.9'}), (508, {'lhs': '$500binary_subscr.6', 'rhs': '$506binary_multiply.9', 'res': '$508inplace_add.10'}), (512, {'target': '$current494.2', 'index': '$d496.3', 'value': '$508inplace_add.10'}), (514, {'res': '$move_other514.11'}), (516, {'pred': '$move_other514.11'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 548, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={520: ('$phi494.0', '$phi494.1'), 428: ('$phi494.0', '$phi494.1')})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=520 nstack_initial=2):
AdaptBlockInfo(insts=((520, {'res': '$other520.2'}), (522, {'res': '$d522.3'}), (524, {'orig': ['$other520.2', '$d522.3'], 'duped': ['$524dup_top_two.4', '$524dup_top_two.5']}), (526, {'index': '$524dup_top_two.5', 'target': '$524dup_top_two.4', 'res': '$526binary_subscr.6'}), (528, {'res': '$grad_d528.7'}), (530, {'value': '$grad_d528.7', 'res': '$530unary_negative.8'}), (532, {'res': '$alpha532.9'}), (534, {'lhs': '$530unary_negative.8', 'rhs': '$alpha532.9', 'res': '$534binary_multiply.10'}), (536, {'lhs': '$526binary_subscr.6', 'rhs': '$534binary_multiply.10', 'res': '$536inplace_add.11'}), (540, {'target': '$other520.2', 'index': '$d522.3', 'value': '$536inplace_add.11'}), (542, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 548, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={428: ('$phi520.0', '$phi520.1')})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=546 nstack_initial=1):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 548, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={548: ('$phi546.0',)})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=548 nstack_initial=1):
AdaptBlockInfo(insts=((548, {'res': '$epoch_of_next_sample548.1'}), (550, {'res': '$i550.2'}), (552, {'orig': ['$epoch_of_next_sample548.1', '$i550.2'], 'duped': ['$552dup_top_two.3', '$552dup_top_two.4']}), (554, {'index': '$552dup_top_two.4', 'target': '$552dup_top_two.3', 'res': '$554binary_subscr.5'}), (556, {'res': '$epochs_per_sample556.6'}), (558, {'res': '$i558.7'}), (560, {'index': '$i558.7', 'target': '$epochs_per_sample556.6', 'res': '$560binary_subscr.8'}), (562, {'lhs': '$554binary_subscr.5', 'rhs': '$560binary_subscr.8', 'res': '$562inplace_add.9'}), (566, {'target': '$epoch_of_next_sample548.1', 'index': '$i550.2', 'value': '$562inplace_add.9'}), (568, {'res': '$568load_global.10'}), (570, {'res': '$n570.11'}), (572, {'res': '$epoch_of_next_negative_sample572.12'}), (574, {'res': '$i574.13'}), (576, {'index': '$i574.13', 'target': '$epoch_of_next_negative_sample572.12', 'res': '$576binary_subscr.14'}), (578, {'lhs': '$n570.11', 'rhs': '$576binary_subscr.14', 'res': '$578binary_subtract.15'}), (580, {'res': '$epochs_per_negative_sample580.16'}), (582, {'res': '$i582.17'}), (584, {'index': '$i582.17', 'target': '$epochs_per_negative_sample580.16', 'res': '$584binary_subscr.18'}), (586, {'lhs': '$578binary_subtract.15', 'rhs': '$584binary_subscr.18', 'res': '$586binary_true_divide.19'}), (588, {'func': '$568load_global.10', 'args': ['$586binary_true_divide.19'], 'res': '$588call_function.20'}), (590, {'value': '$588call_function.20'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={592: ('$phi548.0',)})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=592 nstack_initial=1):
AdaptBlockInfo(insts=((594, {'res': '$594load_global.1'}), (596, {'res': '$n_neg_samples596.2'}), (598, {'func': '$594load_global.1', 'args': ['$n_neg_samples596.2'], 'res': '$598call_function.3'}), (600, {'value': '$598call_function.3', 'res': '$600get_iter.4'})), outgoing_phis={'$phi602.1': '$600get_iter.4'}, blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={602: ('$phi592.0', '$600get_iter.4')})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=602 nstack_initial=2):
AdaptBlockInfo(insts=((602, {'iterator': '$phi602.1', 'pair': '$602for_iter.2', 'indval': '$602for_iter.3', 'pred': '$602for_iter.4'}),), outgoing_phis={'$phi604.2': '$602for_iter.3'}, blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 796, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={794: ('$phi602.0',), 604: ('$phi602.0', '$phi602.1', '$602for_iter.3')})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=604 nstack_initial=3):
AdaptBlockInfo(insts=((604, {'value': '$phi604.2'}), (606, {'res': '$606load_global.3'}), (608, {'res': '$rng_state608.4'}), (610, {'func': '$606load_global.3', 'args': ['$rng_state608.4'], 'res': '$610call_function.5'}), (612, {'res': '$n_vertices612.6'}), (614, {'lhs': '$610call_function.5', 'rhs': '$n_vertices612.6', 'res': '$614binary_modulo.7'}), (616, {'value': '$614binary_modulo.7'}), (618, {'res': '$tail_embedding618.8'}), (620, {'res': '$k620.9'}), (622, {'index': '$k620.9', 'target': '$tail_embedding618.8', 'res': '$622binary_subscr.10'}), (624, {'value': '$622binary_subscr.10'}), (626, {'res': '$626load_global.11'}), (628, {'res': '$current628.12'}), (630, {'res': '$other630.13'}), (632, {'func': '$626load_global.11', 'args': ['$current628.12', '$other630.13'], 'res': '$632call_function.14'}), (634, {'value': '$632call_function.14'}), (636, {'res': '$dist_squared636.15'}), (638, {'res': '$const638.16'}), (640, {'lhs': '$dist_squared636.15', 'rhs': '$const638.16', 'res': '$640compare_op.17'}), (642, {'pred': '$640compare_op.17'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 796, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={646: ('$phi604.0', '$phi604.1'), 690: ('$phi604.0', '$phi604.1')})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=646 nstack_initial=2):
AdaptBlockInfo(insts=((646, {'res': '$const646.2'}), (648, {'res': '$gamma648.3'}), (650, {'lhs': '$const646.2', 'rhs': '$gamma648.3', 'res': '$650binary_multiply.4'}), (652, {'res': '$b652.5'}), (654, {'lhs': '$650binary_multiply.4', 'rhs': '$b652.5', 'res': '$654binary_multiply.6'}), (656, {'value': '$654binary_multiply.6'}), (658, {'res': '$grad_coeff658.7'}), (660, {'res': '$const660.8'}), (662, {'res': '$dist_squared662.9'}), (664, {'lhs': '$const660.8', 'rhs': '$dist_squared662.9', 'res': '$664binary_add.10'}), (666, {'res': '$a666.11'}), (668, {'res': '$668load_global.12'}), (670, {'res': '$dist_squared670.13'}), (672, {'res': '$b672.14'}), (674, {'func': '$668load_global.12', 'args': ['$dist_squared670.13', '$b672.14'], 'res': '$674call_function.15'}), (676, {'lhs': '$a666.11', 'rhs': '$674call_function.15', 'res': '$676binary_multiply.16'}), (678, {'res': '$const678.17'}), (680, {'lhs': '$676binary_multiply.16', 'rhs': '$const678.17', 'res': '$680binary_add.18'}), (682, {'lhs': '$664binary_add.10', 'rhs': '$680binary_add.18', 'res': '$682binary_multiply.19'}), (684, {'lhs': '$grad_coeff658.7', 'rhs': '$682binary_multiply.19', 'res': '$684inplace_true_divide.20'}), (686, {'value': '$684inplace_true_divide.20'}), (688, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 796, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={710: ('$phi646.0', '$phi646.1')})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=690 nstack_initial=2):
AdaptBlockInfo(insts=((690, {'res': '$j690.2'}), (692, {'res': '$k692.3'}), (694, {'lhs': '$j690.2', 'rhs': '$k692.3', 'res': '$694compare_op.4'}), (696, {'pred': '$694compare_op.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 796, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={700: ('$phi690.0', '$phi690.1'), 706: ('$phi690.0', '$phi690.1')})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=700 nstack_initial=2):
AdaptBlockInfo(insts=((700, {}),), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 796, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={602: ('$phi700.0', '$phi700.1')})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=706 nstack_initial=2):
AdaptBlockInfo(insts=((706, {'res': '$const706.2'}), (708, {'value': '$const706.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 796, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={710: ('$phi706.0', '$phi706.1')})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=710 nstack_initial=2):
AdaptBlockInfo(insts=((712, {'res': '$712load_global.2'}), (714, {'res': '$dim714.3'}), (716, {'func': '$712load_global.2', 'args': ['$dim714.3'], 'res': '$716call_function.4'}), (718, {'value': '$716call_function.4', 'res': '$718get_iter.5'})), outgoing_phis={'$phi720.2': '$718get_iter.5'}, blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 796, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={720: ('$phi710.0', '$phi710.1', '$718get_iter.5')})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=720 nstack_initial=3):
AdaptBlockInfo(insts=((720, {'iterator': '$phi720.2', 'pair': '$720for_iter.3', 'indval': '$720for_iter.4', 'pred': '$720for_iter.5'}),), outgoing_phis={'$phi722.3': '$720for_iter.4'}, blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 796, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 790, 'entry_stack': 2, 'stack_depth': 2, 'handler': None}), active_try_block=None, outgoing_edgepushed={788: ('$phi720.0', '$phi720.1'), 722: ('$phi720.0', '$phi720.1', '$phi720.2', '$720for_iter.4')})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=722 nstack_initial=4):
AdaptBlockInfo(insts=((722, {'value': '$phi722.3'}), (724, {'res': '$grad_coeff724.4'}), (726, {'res': '$const726.5'}), (728, {'lhs': '$grad_coeff724.4', 'rhs': '$const726.5', 'res': '$728compare_op.6'}), (730, {'pred': '$728compare_op.6'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 796, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 790, 'entry_stack': 2, 'stack_depth': 2, 'handler': None}), active_try_block=None, outgoing_edgepushed={734: ('$phi722.0', '$phi722.1', '$phi722.2'), 760: ('$phi722.0', '$phi722.1', '$phi722.2')})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=734 nstack_initial=3):
AdaptBlockInfo(insts=((734, {'res': '$734load_global.3'}), (736, {'res': '$grad_coeff736.4'}), (738, {'res': '$current738.5'}), (740, {'res': '$d740.6'}), (742, {'index': '$d740.6', 'target': '$current738.5', 'res': '$742binary_subscr.7'}), (744, {'res': '$other744.8'}), (746, {'res': '$d746.9'}), (748, {'index': '$d746.9', 'target': '$other744.8', 'res': '$748binary_subscr.10'}), (750, {'lhs': '$742binary_subscr.7', 'rhs': '$748binary_subscr.10', 'res': '$750binary_subtract.11'}), (752, {'lhs': '$grad_coeff736.4', 'rhs': '$750binary_subtract.11', 'res': '$752binary_multiply.12'}), (754, {'func': '$734load_global.3', 'args': ['$752binary_multiply.12'], 'res': '$754call_function.13'}), (756, {'value': '$754call_function.13'}), (758, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 796, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 790, 'entry_stack': 2, 'stack_depth': 2, 'handler': None}), active_try_block=None, outgoing_edgepushed={764: ('$phi734.0', '$phi734.1', '$phi734.2')})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=760 nstack_initial=3):
AdaptBlockInfo(insts=((760, {'res': '$const760.3'}), (762, {'value': '$const760.3'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 796, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 790, 'entry_stack': 2, 'stack_depth': 2, 'handler': None}), active_try_block=None, outgoing_edgepushed={764: ('$phi760.0', '$phi760.1', '$phi760.2')})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=764 nstack_initial=3):
AdaptBlockInfo(insts=((764, {'res': '$current764.3'}), (766, {'res': '$d766.4'}), (768, {'orig': ['$current764.3', '$d766.4'], 'duped': ['$768dup_top_two.5', '$768dup_top_two.6']}), (770, {'index': '$768dup_top_two.6', 'target': '$768dup_top_two.5', 'res': '$770binary_subscr.7'}), (772, {'res': '$grad_d772.8'}), (774, {'res': '$alpha774.9'}), (776, {'lhs': '$grad_d772.8', 'rhs': '$alpha774.9', 'res': '$776binary_multiply.10'}), (778, {'lhs': '$770binary_subscr.7', 'rhs': '$776binary_multiply.10', 'res': '$778inplace_add.11'}), (782, {'target': '$current764.3', 'index': '$d766.4', 'value': '$778inplace_add.11'}), (784, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 796, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 790, 'entry_stack': 2, 'stack_depth': 2, 'handler': None}), active_try_block=None, outgoing_edgepushed={720: ('$phi764.0', '$phi764.1', '$phi764.2')})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=788 nstack_initial=2):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 796, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 790, 'entry_stack': 2, 'stack_depth': 2, 'handler': None}), active_try_block=None, outgoing_edgepushed={790: ('$phi788.0', '$phi788.1')})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=790 nstack_initial=2):
AdaptBlockInfo(insts=((790, {}),), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 796, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={602: ('$phi790.0', '$phi790.1')})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=794 nstack_initial=1):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None}, {'kind': BlockKind(LOOP), 'end': 796, 'entry_stack': 1, 'stack_depth': 1, 'handler': None}), active_try_block=None, outgoing_edgepushed={796: ('$phi794.0',)})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=796 nstack_initial=1):
AdaptBlockInfo(insts=((796, {'res': '$epoch_of_next_negative_sample796.1'}), (798, {'res': '$i798.2'}), (800, {'orig': ['$epoch_of_next_negative_sample796.1', '$i798.2'], 'duped': ['$800dup_top_two.3', '$800dup_top_two.4']}), (802, {'index': '$800dup_top_two.4', 'target': '$800dup_top_two.3', 'res': '$802binary_subscr.5'}), (804, {'res': '$n_neg_samples804.6'}), (806, {'res': '$epochs_per_negative_sample806.7'}), (808, {'res': '$i808.8'}), (810, {'index': '$i808.8', 'target': '$epochs_per_negative_sample806.7', 'res': '$810binary_subscr.9'}), (812, {'lhs': '$n_neg_samples804.6', 'rhs': '$810binary_subscr.9', 'res': '$812binary_multiply.10'}), (814, {'lhs': '$802binary_subscr.5', 'rhs': '$812binary_multiply.10', 'res': '$814inplace_add.11'}), (818, {'target': '$epoch_of_next_negative_sample796.1', 'index': '$i798.2', 'value': '$814inplace_add.11'}), (820, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={22: ('$phi796.0',)})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=822 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 824, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={824: ()})
Sat 01 Jul 2023 19:39:44 byteflow.py DEBUG block_infos State(pc_initial=824 nstack_initial=0):
AdaptBlockInfo(insts=((824, {'res': '$const824.0'}), (826, {'retval': '$const824.0', 'castval': '$826return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:44 interpreter.py DEBUG label 0:
    head_embedding = arg(0, name=head_embedding) ['head_embedding']
    tail_embedding = arg(1, name=tail_embedding) ['tail_embedding']
    head = arg(2, name=head)                 ['head']
    tail = arg(3, name=tail)                 ['tail']
    n_vertices = arg(4, name=n_vertices)     ['n_vertices']
    epochs_per_sample = arg(5, name=epochs_per_sample) ['epochs_per_sample']
    a = arg(6, name=a)                       ['a']
    b = arg(7, name=b)                       ['b']
    rng_state = arg(8, name=rng_state)       ['rng_state']
    gamma = arg(9, name=gamma)               ['gamma']
    dim = arg(10, name=dim)                  ['dim']
    move_other = arg(11, name=move_other)    ['move_other']
    alpha = arg(12, name=alpha)              ['alpha']
    epochs_per_negative_sample = arg(13, name=epochs_per_negative_sample) ['epochs_per_negative_sample']
    epoch_of_next_negative_sample = arg(14, name=epoch_of_next_negative_sample) ['epoch_of_next_negative_sample']
    epoch_of_next_sample = arg(15, name=epoch_of_next_sample) ['epoch_of_next_sample']
    n = arg(16, name=n)                      ['n']
    densmap_flag = arg(17, name=densmap_flag) ['densmap_flag']
    dens_phi_sum = arg(18, name=dens_phi_sum) ['dens_phi_sum']
    dens_re_sum = arg(19, name=dens_re_sum)  ['dens_re_sum']
    dens_re_cov = arg(20, name=dens_re_cov)  ['dens_re_cov']
    dens_re_std = arg(21, name=dens_re_std)  ['dens_re_std']
    dens_re_mean = arg(22, name=dens_re_mean) ['dens_re_mean']
    dens_lambda = arg(23, name=dens_lambda)  ['dens_lambda']
    dens_R = arg(24, name=dens_R)            ['dens_R']
    dens_mu = arg(25, name=dens_mu)          ['dens_mu']
    dens_mu_tot = arg(26, name=dens_mu_tot)  ['dens_mu_tot']
    jump 2                                   []
label 2:
    $6load_global.0 = global(numba: <module 'numba' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numba\\__init__.py'>) ['$6load_global.0']
    $8load_method.1 = getattr(value=$6load_global.0, attr=prange) ['$6load_global.0', '$8load_method.1']
    $12load_attr.3 = getattr(value=epochs_per_sample, attr=shape) ['$12load_attr.3', 'epochs_per_sample']
    $const14.4 = const(int, 0)               ['$const14.4']
    $16binary_subscr.5 = getitem(value=$12load_attr.3, index=$const14.4, fn=<built-in function getitem>) ['$12load_attr.3', '$16binary_subscr.5', '$const14.4']
    $18call_method.6 = call $8load_method.1($16binary_subscr.5, func=$8load_method.1, args=[Var($16binary_subscr.5, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None) ['$16binary_subscr.5', '$18call_method.6', '$8load_method.1']
    $20get_iter.7 = getiter(value=$18call_method.6) ['$18call_method.6', '$20get_iter.7']
    $phi22.0 = $20get_iter.7                 ['$20get_iter.7', '$phi22.0']
    jump 22                                  []
label 22:
    $22for_iter.1 = iternext(value=$phi22.0) ['$22for_iter.1', '$phi22.0']
    $22for_iter.2 = pair_first(value=$22for_iter.1) ['$22for_iter.1', '$22for_iter.2']
    $22for_iter.3 = pair_second(value=$22for_iter.1) ['$22for_iter.1', '$22for_iter.3']
    $phi26.1 = $22for_iter.2                 ['$22for_iter.2', '$phi26.1']
    branch $22for_iter.3, 26, 822            ['$22for_iter.3']
label 26:
    i = $phi26.1                             ['$phi26.1', 'i']
    $32binary_subscr.4 = getitem(value=epoch_of_next_sample, index=i, fn=<built-in function getitem>) ['$32binary_subscr.4', 'epoch_of_next_sample', 'i']
    $36compare_op.6 = $32binary_subscr.4 <= n ['$32binary_subscr.4', '$36compare_op.6', 'n']
    bool38 = global(bool: <class 'bool'>)    ['bool38']
    $38pred = call bool38($36compare_op.6, func=bool38, args=(Var($36compare_op.6, layouts.py:91),), kws=(), vararg=None, varkwarg=None, target=None) ['$36compare_op.6', '$38pred', 'bool38']
    branch $38pred, 40, 22                   ['$38pred']
label 40:
    j = getitem(value=head, index=i, fn=<built-in function getitem>) ['head', 'i', 'j']
    k = getitem(value=tail, index=i, fn=<built-in function getitem>) ['i', 'k', 'tail']
    current = getitem(value=head_embedding, index=j, fn=<built-in function getitem>) ['current', 'head_embedding', 'j']
    other = getitem(value=tail_embedding, index=k, fn=<built-in function getitem>) ['k', 'other', 'tail_embedding']
    $72load_global.13 = global(rdist: CPUDispatcher(<function rdist at 0x0000015A711E8AF8>)) ['$72load_global.13']
    dist_squared = call $72load_global.13(current, other, func=$72load_global.13, args=[Var(current, layouts.py:95), Var(other, layouts.py:96)], kws=(), vararg=None, varkwarg=None, target=None) ['$72load_global.13', 'current', 'dist_squared', 'other']
    bool84 = global(bool: <class 'bool'>)    ['bool84']
    $84pred = call bool84(densmap_flag, func=bool84, args=(Var(densmap_flag, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None) ['$84pred', 'bool84', 'densmap_flag']
    branch $84pred, 88, 354                  ['$84pred']
label 88:
    $const88.1 = const(float, 1.0)           ['$const88.1']
    $const90.2 = const(float, 1.0)           ['$const90.2']
    $94load_global.4 = global(pow: <built-in function pow>) ['$94load_global.4']
    $100call_function.7 = call $94load_global.4(dist_squared, b, func=$94load_global.4, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None) ['$100call_function.7', '$94load_global.4', 'b', 'dist_squared']
    $102binary_multiply.8 = a * $100call_function.7 ['$100call_function.7', '$102binary_multiply.8', 'a']
    $104binary_add.9 = $const90.2 + $102binary_multiply.8 ['$102binary_multiply.8', '$104binary_add.9', '$const90.2']
    phi = $const88.1 / $104binary_add.9      ['$104binary_add.9', '$const88.1', 'phi']
    $114binary_multiply.13 = a * b           ['$114binary_multiply.13', 'a', 'b']
    $116load_global.14 = global(pow: <built-in function pow>) ['$116load_global.14']
    $const122.17 = const(int, 1)             ['$const122.17']
    $124binary_subtract.18 = b - $const122.17 ['$124binary_subtract.18', '$const122.17', 'b']
    $126call_function.19 = call $116load_global.14(dist_squared, $124binary_subtract.18, func=$116load_global.14, args=[Var(dist_squared, layouts.py:98), Var($124binary_subtract.18, layouts.py:103)], kws=(), vararg=None, varkwarg=None, target=None) ['$116load_global.14', '$124binary_subtract.18', '$126call_function.19', 'dist_squared']
    $128binary_multiply.20 = $114binary_multiply.13 * $126call_function.19 ['$114binary_multiply.13', '$126call_function.19', '$128binary_multiply.20']
    $const130.21 = const(float, 1.0)         ['$const130.21']
    $134load_global.23 = global(pow: <built-in function pow>) ['$134load_global.23']
    $140call_function.26 = call $134load_global.23(dist_squared, b, func=$134load_global.23, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None) ['$134load_global.23', '$140call_function.26', 'b', 'dist_squared']
    $142binary_multiply.27 = a * $140call_function.26 ['$140call_function.26', '$142binary_multiply.27', 'a']
    $144binary_add.28 = $const130.21 + $142binary_multiply.27 ['$142binary_multiply.27', '$144binary_add.28', '$const130.21']
    dphi_term = $128binary_multiply.20 / $144binary_add.28 ['$128binary_multiply.20', '$144binary_add.28', 'dphi_term']
    $156binary_subscr.33 = getitem(value=dens_phi_sum, index=k, fn=<built-in function getitem>) ['$156binary_subscr.33', 'dens_phi_sum', 'k']
    q_jk = phi / $156binary_subscr.33        ['$156binary_subscr.33', 'phi', 'q_jk']
    $168binary_subscr.38 = getitem(value=dens_phi_sum, index=j, fn=<built-in function getitem>) ['$168binary_subscr.38', 'dens_phi_sum', 'j']
    q_kj = phi / $168binary_subscr.38        ['$168binary_subscr.38', 'phi', 'q_kj']
    $const176.41 = const(float, 1.0)         ['$const176.41']
    $const180.43 = const(int, 1)             ['$const180.43']
    $184binary_subtract.45 = $const180.43 - phi ['$184binary_subtract.45', '$const180.43', 'phi']
    $186binary_multiply.46 = b * $184binary_subtract.45 ['$184binary_subtract.45', '$186binary_multiply.46', 'b']
    $188binary_subtract.47 = $const176.41 - $186binary_multiply.46 ['$186binary_multiply.46', '$188binary_subtract.47', '$const176.41']
    $190load_global.48 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>) ['$190load_global.48']
    $192load_method.49 = getattr(value=$190load_global.48, attr=exp) ['$190load_global.48', '$192load_method.49']
    $198binary_subscr.52 = getitem(value=dens_re_sum, index=k, fn=<built-in function getitem>) ['$198binary_subscr.52', 'dens_re_sum', 'k']
    $200call_method.53 = call $192load_method.49($198binary_subscr.52, func=$192load_method.49, args=[Var($198binary_subscr.52, layouts.py:110)], kws=(), vararg=None, varkwarg=None, target=None) ['$192load_method.49', '$198binary_subscr.52', '$200call_method.53']
    $202binary_true_divide.54 = $188binary_subtract.47 / $200call_method.53 ['$188binary_subtract.47', '$200call_method.53', '$202binary_true_divide.54']
    $206binary_add.56 = $202binary_true_divide.54 + dphi_term ['$202binary_true_divide.54', '$206binary_add.56', 'dphi_term']
    drk = q_jk * $206binary_add.56           ['$206binary_add.56', 'drk', 'q_jk']
    $const214.59 = const(float, 1.0)         ['$const214.59']
    $const218.61 = const(int, 1)             ['$const218.61']
    $222binary_subtract.63 = $const218.61 - phi ['$222binary_subtract.63', '$const218.61', 'phi']
    $224binary_multiply.64 = b * $222binary_subtract.63 ['$222binary_subtract.63', '$224binary_multiply.64', 'b']
    $226binary_subtract.65 = $const214.59 - $224binary_multiply.64 ['$224binary_multiply.64', '$226binary_subtract.65', '$const214.59']
    $228load_global.66 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>) ['$228load_global.66']
    $230load_method.67 = getattr(value=$228load_global.66, attr=exp) ['$228load_global.66', '$230load_method.67']
    $236binary_subscr.70 = getitem(value=dens_re_sum, index=j, fn=<built-in function getitem>) ['$236binary_subscr.70', 'dens_re_sum', 'j']
    $238call_method.71 = call $230load_method.67($236binary_subscr.70, func=$230load_method.67, args=[Var($236binary_subscr.70, layouts.py:113)], kws=(), vararg=None, varkwarg=None, target=None) ['$230load_method.67', '$236binary_subscr.70', '$238call_method.71']
    $240binary_true_divide.72 = $226binary_subtract.65 / $238call_method.71 ['$226binary_subtract.65', '$238call_method.71', '$240binary_true_divide.72']
    $244binary_add.74 = $240binary_true_divide.72 + dphi_term ['$240binary_true_divide.72', '$244binary_add.74', 'dphi_term']
    drj = q_kj * $244binary_add.74           ['$244binary_add.74', 'drj', 'q_kj']
    re_std_sq = dens_re_std * dens_re_std    ['dens_re_std', 'dens_re_std', 're_std_sq']
    $262binary_subscr.81 = getitem(value=dens_R, index=k, fn=<built-in function getitem>) ['$262binary_subscr.81', 'dens_R', 'k']
    $270binary_subscr.85 = getitem(value=dens_re_sum, index=k, fn=<built-in function getitem>) ['$270binary_subscr.85', 'dens_re_sum', 'k']
    $274binary_subtract.87 = $270binary_subscr.85 - dens_re_mean ['$270binary_subscr.85', '$274binary_subtract.87', 'dens_re_mean']
    $276binary_multiply.88 = dens_re_cov * $274binary_subtract.87 ['$274binary_subtract.87', '$276binary_multiply.88', 'dens_re_cov']
    $280binary_true_divide.90 = $276binary_multiply.88 / re_std_sq ['$276binary_multiply.88', '$280binary_true_divide.90', 're_std_sq']
    weight_k = $262binary_subscr.81 - $280binary_true_divide.90 ['$262binary_subscr.81', '$280binary_true_divide.90', 'weight_k']
    $290binary_subscr.94 = getitem(value=dens_R, index=j, fn=<built-in function getitem>) ['$290binary_subscr.94', 'dens_R', 'j']
    $298binary_subscr.98 = getitem(value=dens_re_sum, index=j, fn=<built-in function getitem>) ['$298binary_subscr.98', 'dens_re_sum', 'j']
    $302binary_subtract.100 = $298binary_subscr.98 - dens_re_mean ['$298binary_subscr.98', '$302binary_subtract.100', 'dens_re_mean']
    $304binary_multiply.101 = dens_re_cov * $302binary_subtract.100 ['$302binary_subtract.100', '$304binary_multiply.101', 'dens_re_cov']
    $308binary_true_divide.103 = $304binary_multiply.101 / re_std_sq ['$304binary_multiply.101', '$308binary_true_divide.103', 're_std_sq']
    weight_j = $290binary_subscr.94 - $308binary_true_divide.103 ['$290binary_subscr.94', '$308binary_true_divide.103', 'weight_j']
    $318binary_multiply.107 = dens_lambda * dens_mu_tot ['$318binary_multiply.107', 'dens_lambda', 'dens_mu_tot']
    $324binary_multiply.110 = weight_k * drk ['$324binary_multiply.110', 'drk', 'weight_k']
    $330binary_multiply.113 = weight_j * drj ['$330binary_multiply.113', 'drj', 'weight_j']
    $332binary_add.114 = $324binary_multiply.110 + $330binary_multiply.113 ['$324binary_multiply.110', '$330binary_multiply.113', '$332binary_add.114']
    $334binary_multiply.115 = $318binary_multiply.107 * $332binary_add.114 ['$318binary_multiply.107', '$332binary_add.114', '$334binary_multiply.115']
    $340binary_subscr.118 = getitem(value=dens_mu, index=i, fn=<built-in function getitem>) ['$340binary_subscr.118', 'dens_mu', 'i']
    $344binary_multiply.120 = $340binary_subscr.118 * dens_re_std ['$340binary_subscr.118', '$344binary_multiply.120', 'dens_re_std']
    $346binary_true_divide.121 = $334binary_multiply.115 / $344binary_multiply.120 ['$334binary_multiply.115', '$344binary_multiply.120', '$346binary_true_divide.121']
    grad_cor_coeff = $346binary_true_divide.121 / n_vertices ['$346binary_true_divide.121', 'grad_cor_coeff', 'n_vertices']
    jump 354                                 []
label 354:
    $const356.2 = const(float, 0.0)          ['$const356.2']
    $358compare_op.3 = dist_squared > $const356.2 ['$358compare_op.3', '$const356.2', 'dist_squared']
    bool360 = global(bool: <class 'bool'>)   ['bool360']
    $360pred = call bool360($358compare_op.3, func=bool360, args=(Var($358compare_op.3, layouts.py:134),), kws=(), vararg=None, varkwarg=None, target=None) ['$358compare_op.3', '$360pred', 'bool360']
    branch $360pred, 364, 414                ['$360pred']
label 364:
    $const364.1 = const(float, -2.0)         ['$const364.1']
    $368binary_multiply.3 = $const364.1 * a  ['$368binary_multiply.3', '$const364.1', 'a']
    $372binary_multiply.5 = $368binary_multiply.3 * b ['$368binary_multiply.3', '$372binary_multiply.5', 'b']
    $374load_global.6 = global(pow: <built-in function pow>) ['$374load_global.6']
    $const380.9 = const(float, 1.0)          ['$const380.9']
    $382binary_subtract.10 = b - $const380.9 ['$382binary_subtract.10', '$const380.9', 'b']
    $384call_function.11 = call $374load_global.6(dist_squared, $382binary_subtract.10, func=$374load_global.6, args=[Var(dist_squared, layouts.py:98), Var($382binary_subtract.10, layouts.py:135)], kws=(), vararg=None, varkwarg=None, target=None) ['$374load_global.6', '$382binary_subtract.10', '$384call_function.11', 'dist_squared']
    grad_coeff = $372binary_multiply.5 * $384call_function.11 ['$372binary_multiply.5', '$384call_function.11', 'grad_coeff']
    $394load_global.15 = global(pow: <built-in function pow>) ['$394load_global.15']
    $400call_function.18 = call $394load_global.15(dist_squared, b, func=$394load_global.15, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None) ['$394load_global.15', '$400call_function.18', 'b', 'dist_squared']
    $402binary_multiply.19 = a * $400call_function.18 ['$400call_function.18', '$402binary_multiply.19', 'a']
    $const404.20 = const(float, 1.0)         ['$const404.20']
    $406binary_add.21 = $402binary_multiply.19 + $const404.20 ['$402binary_multiply.19', '$406binary_add.21', '$const404.20']
    $408inplace_true_divide.22 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=grad_coeff, rhs=$406binary_add.21, static_lhs=Undefined, static_rhs=Undefined) ['$406binary_add.21', '$408inplace_true_divide.22', 'grad_coeff']
    grad_coeff = $408inplace_true_divide.22  ['$408inplace_true_divide.22', 'grad_coeff']
    jump 418                                 []
label 414:
    grad_coeff = const(float, 0.0)           ['grad_coeff']
    jump 418                                 []
label 418:
    $420load_global.1 = global(range: <class 'range'>) ['$420load_global.1']
    $424call_function.3 = call $420load_global.1(dim, func=$420load_global.1, args=[Var(dim, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None) ['$420load_global.1', '$424call_function.3', 'dim']
    $426get_iter.4 = getiter(value=$424call_function.3) ['$424call_function.3', '$426get_iter.4']
    $phi428.1 = $426get_iter.4               ['$426get_iter.4', '$phi428.1']
    jump 428                                 []
label 428:
    $428for_iter.2 = iternext(value=$phi428.1) ['$428for_iter.2', '$phi428.1']
    $428for_iter.3 = pair_first(value=$428for_iter.2) ['$428for_iter.2', '$428for_iter.3']
    $428for_iter.4 = pair_second(value=$428for_iter.2) ['$428for_iter.2', '$428for_iter.4']
    $phi430.2 = $428for_iter.3               ['$428for_iter.3', '$phi430.2']
    branch $428for_iter.4, 430, 546          ['$428for_iter.4']
label 430:
    d = $phi430.2                            ['$phi430.2', 'd']
    $432load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>)) ['$432load_global.3']
    $440binary_subscr.7 = getitem(value=current, index=d, fn=<built-in function getitem>) ['$440binary_subscr.7', 'current', 'd']
    $446binary_subscr.10 = getitem(value=other, index=d, fn=<built-in function getitem>) ['$446binary_subscr.10', 'd', 'other']
    $448binary_subtract.11 = $440binary_subscr.7 - $446binary_subscr.10 ['$440binary_subscr.7', '$446binary_subscr.10', '$448binary_subtract.11']
    $450binary_multiply.12 = grad_coeff * $448binary_subtract.11 ['$448binary_subtract.11', '$450binary_multiply.12', 'grad_coeff']
    grad_d = call $432load_global.3($450binary_multiply.12, func=$432load_global.3, args=[Var($450binary_multiply.12, layouts.py:141)], kws=(), vararg=None, varkwarg=None, target=None) ['$432load_global.3', '$450binary_multiply.12', 'grad_d']
    bool458 = global(bool: <class 'bool'>)   ['bool458']
    $458pred = call bool458(densmap_flag, func=bool458, args=(Var(densmap_flag, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None) ['$458pred', 'bool458', 'densmap_flag']
    branch $458pred, 462, 494                ['$458pred']
label 462:
    $464load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>)) ['$464load_global.3']
    $const466.4 = const(int, 2)              ['$const466.4']
    $470binary_multiply.6 = $const466.4 * grad_cor_coeff ['$470binary_multiply.6', '$const466.4', 'grad_cor_coeff']
    $476binary_subscr.9 = getitem(value=current, index=d, fn=<built-in function getitem>) ['$476binary_subscr.9', 'current', 'd']
    $482binary_subscr.12 = getitem(value=other, index=d, fn=<built-in function getitem>) ['$482binary_subscr.12', 'd', 'other']
    $484binary_subtract.13 = $476binary_subscr.9 - $482binary_subscr.12 ['$476binary_subscr.9', '$482binary_subscr.12', '$484binary_subtract.13']
    $486binary_multiply.14 = $470binary_multiply.6 * $484binary_subtract.13 ['$470binary_multiply.6', '$484binary_subtract.13', '$486binary_multiply.14']
    $488call_function.15 = call $464load_global.3($486binary_multiply.14, func=$464load_global.3, args=[Var($486binary_multiply.14, layouts.py:146)], kws=(), vararg=None, varkwarg=None, target=None) ['$464load_global.3', '$486binary_multiply.14', '$488call_function.15']
    $490inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=grad_d, rhs=$488call_function.15, static_lhs=Undefined, static_rhs=Undefined) ['$488call_function.15', '$490inplace_add.16', 'grad_d']
    grad_d = $490inplace_add.16              ['$490inplace_add.16', 'grad_d']
    jump 494                                 []
label 494:
    $500binary_subscr.6 = getitem(value=current, index=d, fn=<built-in function getitem>) ['$500binary_subscr.6', 'current', 'd']
    $506binary_multiply.9 = grad_d * alpha   ['$506binary_multiply.9', 'alpha', 'grad_d']
    $508inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$500binary_subscr.6, rhs=$506binary_multiply.9, static_lhs=Undefined, static_rhs=Undefined) ['$500binary_subscr.6', '$506binary_multiply.9', '$508inplace_add.10']
    current[d] = $508inplace_add.10          ['$508inplace_add.10', 'current', 'd']
    bool516 = global(bool: <class 'bool'>)   ['bool516']
    $516pred = call bool516(move_other, func=bool516, args=(Var(move_other, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None) ['$516pred', 'bool516', 'move_other']
    branch $516pred, 520, 428                ['$516pred']
label 520:
    $526binary_subscr.6 = getitem(value=other, index=d, fn=<built-in function getitem>) ['$526binary_subscr.6', 'd', 'other']
    $530unary_negative.8 = unary(fn=<built-in function neg>, value=grad_d) ['$530unary_negative.8', 'grad_d']
    $534binary_multiply.10 = $530unary_negative.8 * alpha ['$530unary_negative.8', '$534binary_multiply.10', 'alpha']
    $536inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$526binary_subscr.6, rhs=$534binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined) ['$526binary_subscr.6', '$534binary_multiply.10', '$536inplace_add.11']
    other[d] = $536inplace_add.11            ['$536inplace_add.11', 'd', 'other']
    jump 428                                 []
label 546:
    jump 548                                 []
label 548:
    $554binary_subscr.5 = getitem(value=epoch_of_next_sample, index=i, fn=<built-in function getitem>) ['$554binary_subscr.5', 'epoch_of_next_sample', 'i']
    $560binary_subscr.8 = getitem(value=epochs_per_sample, index=i, fn=<built-in function getitem>) ['$560binary_subscr.8', 'epochs_per_sample', 'i']
    $562inplace_add.9 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$554binary_subscr.5, rhs=$560binary_subscr.8, static_lhs=Undefined, static_rhs=Undefined) ['$554binary_subscr.5', '$560binary_subscr.8', '$562inplace_add.9']
    epoch_of_next_sample[i] = $562inplace_add.9 ['$562inplace_add.9', 'epoch_of_next_sample', 'i']
    $568load_global.10 = global(int: <class 'int'>) ['$568load_global.10']
    $576binary_subscr.14 = getitem(value=epoch_of_next_negative_sample, index=i, fn=<built-in function getitem>) ['$576binary_subscr.14', 'epoch_of_next_negative_sample', 'i']
    $578binary_subtract.15 = n - $576binary_subscr.14 ['$576binary_subscr.14', '$578binary_subtract.15', 'n']
    $584binary_subscr.18 = getitem(value=epochs_per_negative_sample, index=i, fn=<built-in function getitem>) ['$584binary_subscr.18', 'epochs_per_negative_sample', 'i']
    $586binary_true_divide.19 = $578binary_subtract.15 / $584binary_subscr.18 ['$578binary_subtract.15', '$584binary_subscr.18', '$586binary_true_divide.19']
    n_neg_samples = call $568load_global.10($586binary_true_divide.19, func=$568load_global.10, args=[Var($586binary_true_divide.19, layouts.py:155)], kws=(), vararg=None, varkwarg=None, target=None) ['$568load_global.10', '$586binary_true_divide.19', 'n_neg_samples']
    jump 592                                 []
label 592:
    $594load_global.1 = global(range: <class 'range'>) ['$594load_global.1']
    $598call_function.3 = call $594load_global.1(n_neg_samples, func=$594load_global.1, args=[Var(n_neg_samples, layouts.py:155)], kws=(), vararg=None, varkwarg=None, target=None) ['$594load_global.1', '$598call_function.3', 'n_neg_samples']
    $600get_iter.4 = getiter(value=$598call_function.3) ['$598call_function.3', '$600get_iter.4']
    $phi602.1 = $600get_iter.4               ['$600get_iter.4', '$phi602.1']
    jump 602                                 []
label 602:
    $602for_iter.2 = iternext(value=$phi602.1) ['$602for_iter.2', '$phi602.1']
    $602for_iter.3 = pair_first(value=$602for_iter.2) ['$602for_iter.2', '$602for_iter.3']
    $602for_iter.4 = pair_second(value=$602for_iter.2) ['$602for_iter.2', '$602for_iter.4']
    $phi604.2 = $602for_iter.3               ['$602for_iter.3', '$phi604.2']
    branch $602for_iter.4, 604, 794          ['$602for_iter.4']
label 604:
    p = $phi604.2                            ['$phi604.2', 'p']
    $606load_global.3 = global(tau_rand_int: CPUDispatcher(<function tau_rand_int at 0x0000015A705D4A68>)) ['$606load_global.3']
    $610call_function.5 = call $606load_global.3(rng_state, func=$606load_global.3, args=[Var(rng_state, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None) ['$606load_global.3', '$610call_function.5', 'rng_state']
    k = $610call_function.5 % n_vertices     ['$610call_function.5', 'k', 'n_vertices']
    other = getitem(value=tail_embedding, index=k, fn=<built-in function getitem>) ['k', 'other', 'tail_embedding']
    $626load_global.11 = global(rdist: CPUDispatcher(<function rdist at 0x0000015A711E8AF8>)) ['$626load_global.11']
    dist_squared = call $626load_global.11(current, other, func=$626load_global.11, args=[Var(current, layouts.py:95), Var(other, layouts.py:96)], kws=(), vararg=None, varkwarg=None, target=None) ['$626load_global.11', 'current', 'dist_squared', 'other']
    $const638.16 = const(float, 0.0)         ['$const638.16']
    $640compare_op.17 = dist_squared > $const638.16 ['$640compare_op.17', '$const638.16', 'dist_squared']
    bool642 = global(bool: <class 'bool'>)   ['bool642']
    $642pred = call bool642($640compare_op.17, func=bool642, args=(Var($640compare_op.17, layouts.py:165),), kws=(), vararg=None, varkwarg=None, target=None) ['$640compare_op.17', '$642pred', 'bool642']
    branch $642pred, 646, 690                ['$642pred']
label 646:
    $const646.2 = const(float, 2.0)          ['$const646.2']
    $650binary_multiply.4 = $const646.2 * gamma ['$650binary_multiply.4', '$const646.2', 'gamma']
    grad_coeff = $650binary_multiply.4 * b   ['$650binary_multiply.4', 'b', 'grad_coeff']
    $const660.8 = const(float, 0.001)        ['$const660.8']
    $664binary_add.10 = $const660.8 + dist_squared ['$664binary_add.10', '$const660.8', 'dist_squared']
    $668load_global.12 = global(pow: <built-in function pow>) ['$668load_global.12']
    $674call_function.15 = call $668load_global.12(dist_squared, b, func=$668load_global.12, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None) ['$668load_global.12', '$674call_function.15', 'b', 'dist_squared']
    $676binary_multiply.16 = a * $674call_function.15 ['$674call_function.15', '$676binary_multiply.16', 'a']
    $const678.17 = const(int, 1)             ['$const678.17']
    $680binary_add.18 = $676binary_multiply.16 + $const678.17 ['$676binary_multiply.16', '$680binary_add.18', '$const678.17']
    $682binary_multiply.19 = $664binary_add.10 * $680binary_add.18 ['$664binary_add.10', '$680binary_add.18', '$682binary_multiply.19']
    $684inplace_true_divide.20 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=grad_coeff, rhs=$682binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined) ['$682binary_multiply.19', '$684inplace_true_divide.20', 'grad_coeff']
    grad_coeff = $684inplace_true_divide.20  ['$684inplace_true_divide.20', 'grad_coeff']
    jump 710                                 []
label 690:
    $694compare_op.4 = j == k                ['$694compare_op.4', 'j', 'k']
    bool696 = global(bool: <class 'bool'>)   ['bool696']
    $696pred = call bool696($694compare_op.4, func=bool696, args=(Var($694compare_op.4, layouts.py:170),), kws=(), vararg=None, varkwarg=None, target=None) ['$694compare_op.4', '$696pred', 'bool696']
    branch $696pred, 700, 706                ['$696pred']
label 700:
    jump 602                                 []
label 706:
    grad_coeff = const(float, 0.0)           ['grad_coeff']
    jump 710                                 []
label 710:
    $712load_global.2 = global(range: <class 'range'>) ['$712load_global.2']
    $716call_function.4 = call $712load_global.2(dim, func=$712load_global.2, args=[Var(dim, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None) ['$712load_global.2', '$716call_function.4', 'dim']
    $718get_iter.5 = getiter(value=$716call_function.4) ['$716call_function.4', '$718get_iter.5']
    $phi720.2 = $718get_iter.5               ['$718get_iter.5', '$phi720.2']
    jump 720                                 []
label 720:
    $720for_iter.3 = iternext(value=$phi720.2) ['$720for_iter.3', '$phi720.2']
    $720for_iter.4 = pair_first(value=$720for_iter.3) ['$720for_iter.3', '$720for_iter.4']
    $720for_iter.5 = pair_second(value=$720for_iter.3) ['$720for_iter.3', '$720for_iter.5']
    $phi722.3 = $720for_iter.4               ['$720for_iter.4', '$phi722.3']
    branch $720for_iter.5, 722, 788          ['$720for_iter.5']
label 722:
    d = $phi722.3                            ['$phi722.3', 'd']
    $const726.5 = const(float, 0.0)          ['$const726.5']
    $728compare_op.6 = grad_coeff > $const726.5 ['$728compare_op.6', '$const726.5', 'grad_coeff']
    bool730 = global(bool: <class 'bool'>)   ['bool730']
    $730pred = call bool730($728compare_op.6, func=bool730, args=(Var($728compare_op.6, layouts.py:176),), kws=(), vararg=None, varkwarg=None, target=None) ['$728compare_op.6', '$730pred', 'bool730']
    branch $730pred, 734, 760                ['$730pred']
label 734:
    $734load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>)) ['$734load_global.3']
    $742binary_subscr.7 = getitem(value=current, index=d, fn=<built-in function getitem>) ['$742binary_subscr.7', 'current', 'd']
    $748binary_subscr.10 = getitem(value=other, index=d, fn=<built-in function getitem>) ['$748binary_subscr.10', 'd', 'other']
    $750binary_subtract.11 = $742binary_subscr.7 - $748binary_subscr.10 ['$742binary_subscr.7', '$748binary_subscr.10', '$750binary_subtract.11']
    $752binary_multiply.12 = grad_coeff * $750binary_subtract.11 ['$750binary_subtract.11', '$752binary_multiply.12', 'grad_coeff']
    grad_d = call $734load_global.3($752binary_multiply.12, func=$734load_global.3, args=[Var($752binary_multiply.12, layouts.py:177)], kws=(), vararg=None, varkwarg=None, target=None) ['$734load_global.3', '$752binary_multiply.12', 'grad_d']
    jump 764                                 []
label 760:
    grad_d = const(float, 4.0)               ['grad_d']
    jump 764                                 []
label 764:
    $770binary_subscr.7 = getitem(value=current, index=d, fn=<built-in function getitem>) ['$770binary_subscr.7', 'current', 'd']
    $776binary_multiply.10 = grad_d * alpha  ['$776binary_multiply.10', 'alpha', 'grad_d']
    $778inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$770binary_subscr.7, rhs=$776binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined) ['$770binary_subscr.7', '$776binary_multiply.10', '$778inplace_add.11']
    current[d] = $778inplace_add.11          ['$778inplace_add.11', 'current', 'd']
    jump 720                                 []
label 788:
    jump 790                                 []
label 790:
    jump 602                                 []
label 794:
    jump 796                                 []
label 796:
    $802binary_subscr.5 = getitem(value=epoch_of_next_negative_sample, index=i, fn=<built-in function getitem>) ['$802binary_subscr.5', 'epoch_of_next_negative_sample', 'i']
    $810binary_subscr.9 = getitem(value=epochs_per_negative_sample, index=i, fn=<built-in function getitem>) ['$810binary_subscr.9', 'epochs_per_negative_sample', 'i']
    $812binary_multiply.10 = n_neg_samples * $810binary_subscr.9 ['$810binary_subscr.9', '$812binary_multiply.10', 'n_neg_samples']
    $814inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$802binary_subscr.5, rhs=$812binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined) ['$802binary_subscr.5', '$812binary_multiply.10', '$814inplace_add.11']
    epoch_of_next_negative_sample[i] = $814inplace_add.11 ['$814inplace_add.11', 'epoch_of_next_negative_sample', 'i']
    jump 22                                  []
label 822:
    jump 824                                 []
label 824:
    $const824.0 = const(NoneType, None)      ['$const824.0']
    $826return_value.1 = cast(value=$const824.0) ['$826return_value.1', '$const824.0']
    return $826return_value.1                ['$826return_value.1']

Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 0
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7517A0C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: head_embedding = arg(0, name=head_embedding)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: tail_embedding = arg(1, name=tail_embedding)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: head = arg(2, name=head)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: tail = arg(3, name=tail)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: n_vertices = arg(4, name=n_vertices)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epochs_per_sample = arg(5, name=epochs_per_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: a = arg(6, name=a)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: b = arg(7, name=b)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: rng_state = arg(8, name=rng_state)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: gamma = arg(9, name=gamma)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dim = arg(10, name=dim)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: move_other = arg(11, name=move_other)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: alpha = arg(12, name=alpha)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epochs_per_negative_sample = arg(13, name=epochs_per_negative_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_negative_sample = arg(14, name=epoch_of_next_negative_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_sample = arg(15, name=epoch_of_next_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: n = arg(16, name=n)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: densmap_flag = arg(17, name=densmap_flag)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_phi_sum = arg(18, name=dens_phi_sum)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_sum = arg(19, name=dens_re_sum)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_cov = arg(20, name=dens_re_cov)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_std = arg(21, name=dens_re_std)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_mean = arg(22, name=dens_re_mean)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_lambda = arg(23, name=dens_lambda)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_R = arg(24, name=dens_R)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_mu = arg(25, name=dens_mu)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_mu_tot = arg(26, name=dens_mu_tot)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7517A0C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $6load_global.0 = global(numba: <module 'numba' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numba\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $8load_method.1 = getattr(value=$6load_global.0, attr=prange)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $12load_attr.3 = getattr(value=epochs_per_sample, attr=shape)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const14.4 = const(int, 0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $16binary_subscr.5 = static_getitem(value=$12load_attr.3, index=0, index_var=$const14.4, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $18call_method.6 = call $8load_method.1($16binary_subscr.5, func=$8load_method.1, args=[Var($16binary_subscr.5, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $20get_iter.7 = getiter(value=$18call_method.6)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi22.0 = $20get_iter.7
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7517A0C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $22for_iter.1 = iternext(value=$phi22.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi26.1 = $22for_iter.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $22for_iter.3, 26, 822
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 26
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7517A0C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: i = $phi26.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $32binary_subscr.4 = getitem(value=epoch_of_next_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $36compare_op.6 = $32binary_subscr.4 <= n
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool38 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $38pred = call bool38($36compare_op.6, func=bool38, args=(Var($36compare_op.6, layouts.py:91),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $38pred, 40, 827
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 40
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7517A0C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: j = getitem(value=head, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: k = getitem(value=tail, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: current = getitem(value=head_embedding, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: other = getitem(value=tail_embedding, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $72load_global.13 = global(rdist: CPUDispatcher(<function rdist at 0x0000015A711E8AF8>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dist_squared = call $72load_global.13(current, other, func=$72load_global.13, args=[Var(current, layouts.py:95), Var(other, layouts.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool84 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $84pred = call bool84(densmap_flag, func=bool84, args=(Var(densmap_flag, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $84pred, 88, 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 88
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7517A0C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const88.1 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const90.2 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $94load_global.4 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $100call_function.7 = call $94load_global.4(dist_squared, b, func=$94load_global.4, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $102binary_multiply.8 = a * $100call_function.7
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $104binary_add.9 = $const90.2 + $102binary_multiply.8
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: phi = $const88.1 / $104binary_add.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $114binary_multiply.13 = a * b
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $116load_global.14 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const122.17 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $124binary_subtract.18 = b - $const122.17
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $126call_function.19 = call $116load_global.14(dist_squared, $124binary_subtract.18, func=$116load_global.14, args=[Var(dist_squared, layouts.py:98), Var($124binary_subtract.18, layouts.py:103)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $128binary_multiply.20 = $114binary_multiply.13 * $126call_function.19
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const130.21 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $134load_global.23 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $140call_function.26 = call $134load_global.23(dist_squared, b, func=$134load_global.23, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $142binary_multiply.27 = a * $140call_function.26
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $144binary_add.28 = $const130.21 + $142binary_multiply.27
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dphi_term = $128binary_multiply.20 / $144binary_add.28
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $156binary_subscr.33 = getitem(value=dens_phi_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: q_jk = phi / $156binary_subscr.33
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $168binary_subscr.38 = getitem(value=dens_phi_sum, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: q_kj = phi / $168binary_subscr.38
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const176.41 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const180.43 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $184binary_subtract.45 = $const180.43 - phi
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $186binary_multiply.46 = b * $184binary_subtract.45
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $188binary_subtract.47 = $const176.41 - $186binary_multiply.46
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $190load_global.48 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $192load_method.49 = getattr(value=$190load_global.48, attr=exp)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $198binary_subscr.52 = getitem(value=dens_re_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $200call_method.53 = call $192load_method.49($198binary_subscr.52, func=$192load_method.49, args=[Var($198binary_subscr.52, layouts.py:110)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $202binary_true_divide.54 = $188binary_subtract.47 / $200call_method.53
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $206binary_add.56 = $202binary_true_divide.54 + dphi_term
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: drk = q_jk * $206binary_add.56
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const214.59 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const218.61 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $222binary_subtract.63 = $const218.61 - phi
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $224binary_multiply.64 = b * $222binary_subtract.63
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $226binary_subtract.65 = $const214.59 - $224binary_multiply.64
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $228load_global.66 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $230load_method.67 = getattr(value=$228load_global.66, attr=exp)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $236binary_subscr.70 = getitem(value=dens_re_sum, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $238call_method.71 = call $230load_method.67($236binary_subscr.70, func=$230load_method.67, args=[Var($236binary_subscr.70, layouts.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $240binary_true_divide.72 = $226binary_subtract.65 / $238call_method.71
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $244binary_add.74 = $240binary_true_divide.72 + dphi_term
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: drj = q_kj * $244binary_add.74
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: re_std_sq = dens_re_std * dens_re_std
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $262binary_subscr.81 = getitem(value=dens_R, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $270binary_subscr.85 = getitem(value=dens_re_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $274binary_subtract.87 = $270binary_subscr.85 - dens_re_mean
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $276binary_multiply.88 = dens_re_cov * $274binary_subtract.87
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $280binary_true_divide.90 = $276binary_multiply.88 / re_std_sq
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: weight_k = $262binary_subscr.81 - $280binary_true_divide.90
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $290binary_subscr.94 = getitem(value=dens_R, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $298binary_subscr.98 = getitem(value=dens_re_sum, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $302binary_subtract.100 = $298binary_subscr.98 - dens_re_mean
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $304binary_multiply.101 = dens_re_cov * $302binary_subtract.100
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $308binary_true_divide.103 = $304binary_multiply.101 / re_std_sq
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: weight_j = $290binary_subscr.94 - $308binary_true_divide.103
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $318binary_multiply.107 = dens_lambda * dens_mu_tot
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $324binary_multiply.110 = weight_k * drk
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $330binary_multiply.113 = weight_j * drj
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $332binary_add.114 = $324binary_multiply.110 + $330binary_multiply.113
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $334binary_multiply.115 = $318binary_multiply.107 * $332binary_add.114
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $340binary_subscr.118 = getitem(value=dens_mu, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $344binary_multiply.120 = $340binary_subscr.118 * dens_re_std
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $346binary_true_divide.121 = $334binary_multiply.115 / $344binary_multiply.120
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_cor_coeff = $346binary_true_divide.121 / n_vertices
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7517A0C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const356.2 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $358compare_op.3 = dist_squared > $const356.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool360 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $360pred = call bool360($358compare_op.3, func=bool360, args=(Var($358compare_op.3, layouts.py:134),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $360pred, 364, 414
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 364
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7517A0C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const364.1 = const(float, -2.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $368binary_multiply.3 = $const364.1 * a
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $372binary_multiply.5 = $368binary_multiply.3 * b
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $374load_global.6 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const380.9 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $382binary_subtract.10 = b - $const380.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $384call_function.11 = call $374load_global.6(dist_squared, $382binary_subtract.10, func=$374load_global.6, args=[Var(dist_squared, layouts.py:98), Var($382binary_subtract.10, layouts.py:135)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $372binary_multiply.5 * $384call_function.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $394load_global.15 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $400call_function.18 = call $394load_global.15(dist_squared, b, func=$394load_global.15, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $402binary_multiply.19 = a * $400call_function.18
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const404.20 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $406binary_add.21 = $402binary_multiply.19 + $const404.20
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $408inplace_true_divide.22 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=grad_coeff, rhs=$406binary_add.21, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $408inplace_true_divide.22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 414
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7517A0C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7517A0C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $420load_global.1 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $424call_function.3 = call $420load_global.1(dim, func=$420load_global.1, args=[Var(dim, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $426get_iter.4 = getiter(value=$424call_function.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi428.1 = $426get_iter.4
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7517A0C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $428for_iter.2 = iternext(value=$phi428.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $428for_iter.3 = pair_first(value=$428for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $428for_iter.4 = pair_second(value=$428for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi430.2 = $428for_iter.3
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $428for_iter.4, 430, 546
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 430
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7517A0C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: d = $phi430.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $432load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $440binary_subscr.7 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $446binary_subscr.10 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $448binary_subtract.11 = $440binary_subscr.7 - $446binary_subscr.10
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $450binary_multiply.12 = grad_coeff * $448binary_subtract.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d = call $432load_global.3($450binary_multiply.12, func=$432load_global.3, args=[Var($450binary_multiply.12, layouts.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool458 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $458pred = call bool458(densmap_flag, func=bool458, args=(Var(densmap_flag, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $458pred, 462, 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 462
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7517A0C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $464load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const466.4 = const(int, 2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $470binary_multiply.6 = $const466.4 * grad_cor_coeff
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $476binary_subscr.9 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $482binary_subscr.12 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $484binary_subtract.13 = $476binary_subscr.9 - $482binary_subscr.12
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $486binary_multiply.14 = $470binary_multiply.6 * $484binary_subtract.13
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $488call_function.15 = call $464load_global.3($486binary_multiply.14, func=$464load_global.3, args=[Var($486binary_multiply.14, layouts.py:146)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $490inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=grad_d, rhs=$488call_function.15, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d = $490inplace_add.16
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7517A0C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $500binary_subscr.6 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $506binary_multiply.9 = grad_d * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $508inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$500binary_subscr.6, rhs=$506binary_multiply.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: current[d] = $508inplace_add.10
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool516 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $516pred = call bool516(move_other, func=bool516, args=(Var(move_other, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $516pred, 520, 825
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 520
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7517A0C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $526binary_subscr.6 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $530unary_negative.8 = unary(fn=<built-in function neg>, value=grad_d)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $534binary_multiply.10 = $530unary_negative.8 * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $536inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$526binary_subscr.6, rhs=$534binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: other[d] = $536inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 825
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 546
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7517A0C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 548
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 548
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7517A0C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $554binary_subscr.5 = getitem(value=epoch_of_next_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $560binary_subscr.8 = getitem(value=epochs_per_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $562inplace_add.9 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$554binary_subscr.5, rhs=$560binary_subscr.8, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_sample[i] = $562inplace_add.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $568load_global.10 = global(int: <class 'int'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $576binary_subscr.14 = getitem(value=epoch_of_next_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $578binary_subtract.15 = n - $576binary_subscr.14
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $584binary_subscr.18 = getitem(value=epochs_per_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $586binary_true_divide.19 = $578binary_subtract.15 / $584binary_subscr.18
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: n_neg_samples = call $568load_global.10($586binary_true_divide.19, func=$568load_global.10, args=[Var($586binary_true_divide.19, layouts.py:155)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 592
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 592
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7517A0C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $594load_global.1 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $598call_function.3 = call $594load_global.1(n_neg_samples, func=$594load_global.1, args=[Var(n_neg_samples, layouts.py:155)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $600get_iter.4 = getiter(value=$598call_function.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi602.1 = $600get_iter.4
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 602
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 602
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7517A0C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $602for_iter.2 = iternext(value=$phi602.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $602for_iter.3 = pair_first(value=$602for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $602for_iter.4 = pair_second(value=$602for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi604.2 = $602for_iter.3
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $602for_iter.4, 604, 794
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 604
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7517A0C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: p = $phi604.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $606load_global.3 = global(tau_rand_int: CPUDispatcher(<function tau_rand_int at 0x0000015A705D4A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $610call_function.5 = call $606load_global.3(rng_state, func=$606load_global.3, args=[Var(rng_state, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: k = $610call_function.5 % n_vertices
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: other = getitem(value=tail_embedding, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $626load_global.11 = global(rdist: CPUDispatcher(<function rdist at 0x0000015A711E8AF8>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dist_squared = call $626load_global.11(current, other, func=$626load_global.11, args=[Var(current, layouts.py:95), Var(other, layouts.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const638.16 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $640compare_op.17 = dist_squared > $const638.16
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool642 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $642pred = call bool642($640compare_op.17, func=bool642, args=(Var($640compare_op.17, layouts.py:165),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $642pred, 646, 690
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 646
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7517A0C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const646.2 = const(float, 2.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $650binary_multiply.4 = $const646.2 * gamma
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $650binary_multiply.4 * b
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const660.8 = const(float, 0.001)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $664binary_add.10 = $const660.8 + dist_squared
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $668load_global.12 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $674call_function.15 = call $668load_global.12(dist_squared, b, func=$668load_global.12, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $676binary_multiply.16 = a * $674call_function.15
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const678.17 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $680binary_add.18 = $676binary_multiply.16 + $const678.17
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $682binary_multiply.19 = $664binary_add.10 * $680binary_add.18
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $684inplace_true_divide.20 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=grad_coeff, rhs=$682binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $684inplace_true_divide.20
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 690
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7517A0C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $694compare_op.4 = j == k
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool696 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $696pred = call bool696($694compare_op.4, func=bool696, args=(Var($694compare_op.4, layouts.py:170),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $696pred, 700, 706
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 700
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7517A0C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 826
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 706
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7517A0C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7517A0C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $712load_global.2 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $716call_function.4 = call $712load_global.2(dim, func=$712load_global.2, args=[Var(dim, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $718get_iter.5 = getiter(value=$716call_function.4)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi720.2 = $718get_iter.5
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7517A0C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $720for_iter.3 = iternext(value=$phi720.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $720for_iter.4 = pair_first(value=$720for_iter.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $720for_iter.5 = pair_second(value=$720for_iter.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi722.3 = $720for_iter.4
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $720for_iter.5, 722, 788
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 722
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7517A0C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: d = $phi722.3
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const726.5 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $728compare_op.6 = grad_coeff > $const726.5
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool730 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $730pred = call bool730($728compare_op.6, func=bool730, args=(Var($728compare_op.6, layouts.py:176),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $730pred, 734, 760
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 734
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7517A0C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $734load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $742binary_subscr.7 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $748binary_subscr.10 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $750binary_subtract.11 = $742binary_subscr.7 - $748binary_subscr.10
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $752binary_multiply.12 = grad_coeff * $750binary_subtract.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d = call $734load_global.3($752binary_multiply.12, func=$734load_global.3, args=[Var($752binary_multiply.12, layouts.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 760
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7517A0C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d = const(float, 4.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7517A0C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $770binary_subscr.7 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $776binary_multiply.10 = grad_d * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $778inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$770binary_subscr.7, rhs=$776binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: current[d] = $778inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 788
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7517A0C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 790
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 790
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7517A0C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 826
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 794
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7517A0C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 796
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 796
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7517A0C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $802binary_subscr.5 = getitem(value=epoch_of_next_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $810binary_subscr.9 = getitem(value=epochs_per_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $812binary_multiply.10 = n_neg_samples * $810binary_subscr.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $814inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$802binary_subscr.5, rhs=$812binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_negative_sample[i] = $814inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 827
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 822
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7517A0C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 824
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 824
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7517A0C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const824.0 = const(NoneType, None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $826return_value.1 = cast(value=$const824.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: return $826return_value.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 825
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7517A0C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 826
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7517A0C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 602
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block analysis pass on 827
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A7517A0C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG defs defaultdict(<class 'list'>,
            {'$100call_function.7': [<numba.core.ir.Assign object at 0x0000015A8A980448>],
             '$102binary_multiply.8': [<numba.core.ir.Assign object at 0x0000015A8A980588>],
             '$104binary_add.9': [<numba.core.ir.Assign object at 0x0000015A8A980708>],
             '$114binary_multiply.13': [<numba.core.ir.Assign object at 0x0000015A8A980C48>],
             '$116load_global.14': [<numba.core.ir.Assign object at 0x0000015A8A980D88>],
             '$124binary_subtract.18': [<numba.core.ir.Assign object at 0x0000015A8A96D248>],
             '$126call_function.19': [<numba.core.ir.Assign object at 0x0000015A8A96D388>],
             '$128binary_multiply.20': [<numba.core.ir.Assign object at 0x0000015A8A96D4C8>],
             '$12load_attr.3': [<numba.core.ir.Assign object at 0x0000015A4E4C3248>],
             '$134load_global.23': [<numba.core.ir.Assign object at 0x0000015A8A96D848>],
             '$140call_function.26': [<numba.core.ir.Assign object at 0x0000015A8A96DB88>],
             '$142binary_multiply.27': [<numba.core.ir.Assign object at 0x0000015A8A96DCC8>],
             '$144binary_add.28': [<numba.core.ir.Assign object at 0x0000015A8A96DE08>],
             '$156binary_subscr.33': [<numba.core.ir.Assign object at 0x0000015A8A98D588>],
             '$168binary_subscr.38': [<numba.core.ir.Assign object at 0x0000015A8A98DC48>],
             '$16binary_subscr.5': [<numba.core.ir.Assign object at 0x0000015A7517ADC8>],
             '$184binary_subtract.45': [<numba.core.ir.Assign object at 0x0000015A8A98C608>],
             '$186binary_multiply.46': [<numba.core.ir.Assign object at 0x0000015A8A98C748>],
             '$188binary_subtract.47': [<numba.core.ir.Assign object at 0x0000015A8A98C888>],
             '$18call_method.6': [<numba.core.ir.Assign object at 0x0000015A4E4E8EC8>],
             '$190load_global.48': [<numba.core.ir.Assign object at 0x0000015A8A98C9C8>],
             '$192load_method.49': [<numba.core.ir.Assign object at 0x0000015A8A98CAC8>],
             '$198binary_subscr.52': [<numba.core.ir.Assign object at 0x0000015A8A98CE48>],
             '$200call_method.53': [<numba.core.ir.Assign object at 0x0000015A8A98CF88>],
             '$202binary_true_divide.54': [<numba.core.ir.Assign object at 0x0000015A8A987108>],
             '$206binary_add.56': [<numba.core.ir.Assign object at 0x0000015A8A987388>],
             '$20get_iter.7': [<numba.core.ir.Assign object at 0x0000015A4E4E8A88>],
             '$222binary_subtract.63': [<numba.core.ir.Assign object at 0x0000015A8A987CC8>],
             '$224binary_multiply.64': [<numba.core.ir.Assign object at 0x0000015A8A987E08>],
             '$226binary_subtract.65': [<numba.core.ir.Assign object at 0x0000015A8A987F48>],
             '$228load_global.66': [<numba.core.ir.Assign object at 0x0000015A8A986A48>],
             '$22for_iter.1': [<numba.core.ir.Assign object at 0x0000015A4E4E8D88>],
             '$22for_iter.2': [<numba.core.ir.Assign object at 0x0000015A4E4D8188>],
             '$22for_iter.3': [<numba.core.ir.Assign object at 0x0000015A4E4D8788>],
             '$230load_method.67': [<numba.core.ir.Assign object at 0x0000015A8A986A88>],
             '$236binary_subscr.70': [<numba.core.ir.Assign object at 0x0000015A8A986508>],
             '$238call_method.71': [<numba.core.ir.Assign object at 0x0000015A8A986248>],
             '$240binary_true_divide.72': [<numba.core.ir.Assign object at 0x0000015A8A986408>],
             '$244binary_add.74': [<numba.core.ir.Assign object at 0x0000015A8A9863C8>],
             '$262binary_subscr.81': [<numba.core.ir.Assign object at 0x0000015A8A988488>],
             '$270binary_subscr.85': [<numba.core.ir.Assign object at 0x0000015A8A988908>],
             '$274binary_subtract.87': [<numba.core.ir.Assign object at 0x0000015A8A988B88>],
             '$276binary_multiply.88': [<numba.core.ir.Assign object at 0x0000015A8A988CC8>],
             '$280binary_true_divide.90': [<numba.core.ir.Assign object at 0x0000015A8A988F48>],
             '$290binary_subscr.94': [<numba.core.ir.Assign object at 0x0000015A8A97FE88>],
             '$298binary_subscr.98': [<numba.core.ir.Assign object at 0x0000015A8A97F988>],
             '$302binary_subtract.100': [<numba.core.ir.Assign object at 0x0000015A8A97F608>],
             '$304binary_multiply.101': [<numba.core.ir.Assign object at 0x0000015A8A97F508>],
             '$308binary_true_divide.103': [<numba.core.ir.Assign object at 0x0000015A8A97F108>],
             '$318binary_multiply.107': [<numba.core.ir.Assign object at 0x0000015A8A97CB48>],
             '$324binary_multiply.110': [<numba.core.ir.Assign object at 0x0000015A8A97C408>],
             '$32binary_subscr.4': [<numba.core.ir.Assign object at 0x0000015A4E4D8148>],
             '$330binary_multiply.113': [<numba.core.ir.Assign object at 0x0000015A8A97C488>],
             '$332binary_add.114': [<numba.core.ir.Assign object at 0x0000015A8A97C2C8>],
             '$334binary_multiply.115': [<numba.core.ir.Assign object at 0x0000015A8A97C208>],
             '$340binary_subscr.118': [<numba.core.ir.Assign object at 0x0000015A8A96B348>],
             '$344binary_multiply.120': [<numba.core.ir.Assign object at 0x0000015A8A96B588>],
             '$346binary_true_divide.121': [<numba.core.ir.Assign object at 0x0000015A8A96B6C8>],
             '$358compare_op.3': [<numba.core.ir.Assign object at 0x0000015A8A98DE88>],
             '$360pred': [<numba.core.ir.Assign object at 0x0000015A8A987948>],
             '$368binary_multiply.3': [<numba.core.ir.Assign object at 0x0000015A8A97FFC8>],
             '$36compare_op.6': [<numba.core.ir.Assign object at 0x0000015A8A96C908>],
             '$372binary_multiply.5': [<numba.core.ir.Assign object at 0x0000015A8A97C948>],
             '$374load_global.6': [<numba.core.ir.Assign object at 0x0000015A8A96BA48>],
             '$382binary_subtract.10': [<numba.core.ir.Assign object at 0x0000015A8A96BDC8>],
             '$384call_function.11': [<numba.core.ir.Assign object at 0x0000015A8A96BF08>],
             '$38pred': [<numba.core.ir.Assign object at 0x0000015A8A994148>],
             '$394load_global.15': [<numba.core.ir.Assign object at 0x0000015A8A968508>],
             '$400call_function.18': [<numba.core.ir.Assign object at 0x0000015A8A968848>],
             '$402binary_multiply.19': [<numba.core.ir.Assign object at 0x0000015A8A968988>],
             '$406binary_add.21': [<numba.core.ir.Assign object at 0x0000015A8A968C08>],
             '$408inplace_true_divide.22': [<numba.core.ir.Assign object at 0x0000015A8A968D48>],
             '$420load_global.1': [<numba.core.ir.Assign object at 0x0000015A8A968F08>],
             '$424call_function.3': [<numba.core.ir.Assign object at 0x0000015A8A975208>],
             '$426get_iter.4': [<numba.core.ir.Assign object at 0x0000015A8A975348>],
             '$428for_iter.2': [<numba.core.ir.Assign object at 0x0000015A8A9755C8>],
             '$428for_iter.3': [<numba.core.ir.Assign object at 0x0000015A8A9756C8>],
             '$428for_iter.4': [<numba.core.ir.Assign object at 0x0000015A8A9757C8>],
             '$432load_global.3': [<numba.core.ir.Assign object at 0x0000015A8A975BC8>],
             '$440binary_subscr.7': [<numba.core.ir.Assign object at 0x0000015A8A960188>],
             '$446binary_subscr.10': [<numba.core.ir.Assign object at 0x0000015A8A960508>],
             '$448binary_subtract.11': [<numba.core.ir.Assign object at 0x0000015A8A960608>],
             '$450binary_multiply.12': [<numba.core.ir.Assign object at 0x0000015A8A960748>],
             '$458pred': [<numba.core.ir.Assign object at 0x0000015A8A960D88>],
             '$464load_global.3': [<numba.core.ir.Assign object at 0x0000015A8A960EC8>],
             '$470binary_multiply.6': [<numba.core.ir.Assign object at 0x0000015A8A9722C8>],
             '$476binary_subscr.9': [<numba.core.ir.Assign object at 0x0000015A8A9726C8>],
             '$482binary_subscr.12': [<numba.core.ir.Assign object at 0x0000015A8A972A08>],
             '$484binary_subtract.13': [<numba.core.ir.Assign object at 0x0000015A8A972B48>],
             '$486binary_multiply.14': [<numba.core.ir.Assign object at 0x0000015A8A972C88>],
             '$488call_function.15': [<numba.core.ir.Assign object at 0x0000015A8A972DC8>],
             '$490inplace_add.16': [<numba.core.ir.Assign object at 0x0000015A8A972F08>],
             '$500binary_subscr.6': [<numba.core.ir.Assign object at 0x0000015A8A99C508>],
             '$506binary_multiply.9': [<numba.core.ir.Assign object at 0x0000015A8A99C248>],
             '$508inplace_add.10': [<numba.core.ir.Assign object at 0x0000015A8A99CB08>],
             '$516pred': [<numba.core.ir.Assign object at 0x0000015A8A99CE88>],
             '$526binary_subscr.6': [<numba.core.ir.Assign object at 0x0000015A8A99F1C8>],
             '$530unary_negative.8': [<numba.core.ir.Assign object at 0x0000015A8A99F488>],
             '$534binary_multiply.10': [<numba.core.ir.Assign object at 0x0000015A8A99F708>],
             '$536inplace_add.11': [<numba.core.ir.Assign object at 0x0000015A8A99F808>],
             '$554binary_subscr.5': [<numba.core.ir.Assign object at 0x0000015A8A99FDC8>],
             '$560binary_subscr.8': [<numba.core.ir.Assign object at 0x0000015A7514F748>],
             '$562inplace_add.9': [<numba.core.ir.Assign object at 0x0000015A7514FE48>],
             '$568load_global.10': [<numba.core.ir.Assign object at 0x0000015A7514FDC8>],
             '$576binary_subscr.14': [<numba.core.ir.Assign object at 0x0000015A7514F7C8>],
             '$578binary_subtract.15': [<numba.core.ir.Assign object at 0x0000015A7514F488>],
             '$584binary_subscr.18': [<numba.core.ir.Assign object at 0x0000015A7514F5C8>],
             '$586binary_true_divide.19': [<numba.core.ir.Assign object at 0x0000015A7514F648>],
             '$594load_global.1': [<numba.core.ir.Assign object at 0x0000015A7514F9C8>],
             '$598call_function.3': [<numba.core.ir.Assign object at 0x0000015A75178208>],
             '$600get_iter.4': [<numba.core.ir.Assign object at 0x0000015A75178388>],
             '$602for_iter.2': [<numba.core.ir.Assign object at 0x0000015A75178608>],
             '$602for_iter.3': [<numba.core.ir.Assign object at 0x0000015A75178708>],
             '$602for_iter.4': [<numba.core.ir.Assign object at 0x0000015A75178808>],
             '$606load_global.3': [<numba.core.ir.Assign object at 0x0000015A75178C08>],
             '$610call_function.5': [<numba.core.ir.Assign object at 0x0000015A87E85D48>],
             '$626load_global.11': [<numba.core.ir.Assign object at 0x0000015A75176748>],
             '$640compare_op.17': [<numba.core.ir.Assign object at 0x0000015A75176508>],
             '$642pred': [<numba.core.ir.Assign object at 0x0000015A75166208>],
             '$650binary_multiply.4': [<numba.core.ir.Assign object at 0x0000015A75178F88>],
             '$664binary_add.10': [<numba.core.ir.Assign object at 0x0000015A75166A08>],
             '$668load_global.12': [<numba.core.ir.Assign object at 0x0000015A75166C88>],
             '$674call_function.15': [<numba.core.ir.Assign object at 0x0000015A75166FC8>],
             '$676binary_multiply.16': [<numba.core.ir.Assign object at 0x0000015A7516CB88>],
             '$680binary_add.18': [<numba.core.ir.Assign object at 0x0000015A7516CE48>],
             '$682binary_multiply.19': [<numba.core.ir.Assign object at 0x0000015A7516CF88>],
             '$684inplace_true_divide.20': [<numba.core.ir.Assign object at 0x0000015A7516C988>],
             '$694compare_op.4': [<numba.core.ir.Assign object at 0x0000015A7516C148>],
             '$696pred': [<numba.core.ir.Assign object at 0x0000015A7516C548>],
             '$6load_global.0': [<numba.core.ir.Assign object at 0x0000015A4E4C3EC8>],
             '$712load_global.2': [<numba.core.ir.Assign object at 0x0000015A7516C848>],
             '$716call_function.4': [<numba.core.ir.Assign object at 0x0000015A75175248>],
             '$718get_iter.5': [<numba.core.ir.Assign object at 0x0000015A75175388>],
             '$720for_iter.3': [<numba.core.ir.Assign object at 0x0000015A75175608>],
             '$720for_iter.4': [<numba.core.ir.Assign object at 0x0000015A75175708>],
             '$720for_iter.5': [<numba.core.ir.Assign object at 0x0000015A75175808>],
             '$728compare_op.6': [<numba.core.ir.Assign object at 0x0000015A75175E48>],
             '$72load_global.13': [<numba.core.ir.Assign object at 0x0000015A8A989588>],
             '$730pred': [<numba.core.ir.Assign object at 0x0000015A7515A188>],
             '$734load_global.3': [<numba.core.ir.Assign object at 0x0000015A7515A308>],
             '$742binary_subscr.7': [<numba.core.ir.Assign object at 0x0000015A7515A848>],
             '$748binary_subscr.10': [<numba.core.ir.Assign object at 0x0000015A7515AC08>],
             '$750binary_subtract.11': [<numba.core.ir.Assign object at 0x0000015A7515AD48>],
             '$752binary_multiply.12': [<numba.core.ir.Assign object at 0x0000015A7515AE48>],
             '$770binary_subscr.7': [<numba.core.ir.Assign object at 0x0000015A7515E708>],
             '$776binary_multiply.10': [<numba.core.ir.Assign object at 0x0000015A7515EB08>],
             '$778inplace_add.11': [<numba.core.ir.Assign object at 0x0000015A7515EC48>],
             '$802binary_subscr.5': [<numba.core.ir.Assign object at 0x0000015A75164408>],
             '$810binary_subscr.9': [<numba.core.ir.Assign object at 0x0000015A75164908>],
             '$812binary_multiply.10': [<numba.core.ir.Assign object at 0x0000015A75164A08>],
             '$814inplace_add.11': [<numba.core.ir.Assign object at 0x0000015A75164B48>],
             '$826return_value.1': [<numba.core.ir.Assign object at 0x0000015A75164E88>],
             '$84pred': [<numba.core.ir.Assign object at 0x0000015A8A989E48>],
             '$8load_method.1': [<numba.core.ir.Assign object at 0x0000015A4E4C3708>],
             '$94load_global.4': [<numba.core.ir.Assign object at 0x0000015A8A980048>],
             '$const122.17': [<numba.core.ir.Assign object at 0x0000015A8A96D108>],
             '$const130.21': [<numba.core.ir.Assign object at 0x0000015A8A96D608>],
             '$const14.4': [<numba.core.ir.Assign object at 0x0000015A4E4C3B48>],
             '$const176.41': [<numba.core.ir.Assign object at 0x0000015A8A98C148>],
             '$const180.43': [<numba.core.ir.Assign object at 0x0000015A8A98C3C8>],
             '$const214.59': [<numba.core.ir.Assign object at 0x0000015A8A987848>],
             '$const218.61': [<numba.core.ir.Assign object at 0x0000015A8A987A88>],
             '$const356.2': [<numba.core.ir.Assign object at 0x0000015A8A98D448>],
             '$const364.1': [<numba.core.ir.Assign object at 0x0000015A8A986C08>],
             '$const380.9': [<numba.core.ir.Assign object at 0x0000015A8A96BCC8>],
             '$const404.20': [<numba.core.ir.Assign object at 0x0000015A8A968AC8>],
             '$const466.4': [<numba.core.ir.Assign object at 0x0000015A8A972048>],
             '$const638.16': [<numba.core.ir.Assign object at 0x0000015A75176048>],
             '$const646.2': [<numba.core.ir.Assign object at 0x0000015A75176C88>],
             '$const660.8': [<numba.core.ir.Assign object at 0x0000015A751667C8>],
             '$const678.17': [<numba.core.ir.Assign object at 0x0000015A7516CBC8>],
             '$const726.5': [<numba.core.ir.Assign object at 0x0000015A75175D08>],
             '$const824.0': [<numba.core.ir.Assign object at 0x0000015A75164D08>],
             '$const88.1': [<numba.core.ir.Assign object at 0x0000015A8A994C08>],
             '$const90.2': [<numba.core.ir.Assign object at 0x0000015A8A9890C8>],
             '$phi22.0': [<numba.core.ir.Assign object at 0x0000015A4E4C3648>],
             '$phi26.1': [<numba.core.ir.Assign object at 0x0000015A4E4D8B88>],
             '$phi428.1': [<numba.core.ir.Assign object at 0x0000015A8A96B788>],
             '$phi430.2': [<numba.core.ir.Assign object at 0x0000015A8A975888>],
             '$phi602.1': [<numba.core.ir.Assign object at 0x0000015A7514F108>],
             '$phi604.2': [<numba.core.ir.Assign object at 0x0000015A751788C8>],
             '$phi720.2': [<numba.core.ir.Assign object at 0x0000015A75175108>],
             '$phi722.3': [<numba.core.ir.Assign object at 0x0000015A751758C8>],
             'a': [<numba.core.ir.Assign object at 0x0000015A4E4FD948>],
             'alpha': [<numba.core.ir.Assign object at 0x0000015A4E4FD488>],
             'b': [<numba.core.ir.Assign object at 0x0000015A4E4FD648>],
             'bool360': [<numba.core.ir.Assign object at 0x0000015A8A98CD08>],
             'bool38': [<numba.core.ir.Assign object at 0x0000015A8A98F288>],
             'bool458': [<numba.core.ir.Assign object at 0x0000015A8A960C48>],
             'bool516': [<numba.core.ir.Assign object at 0x0000015A8A99CE48>],
             'bool642': [<numba.core.ir.Assign object at 0x0000015A751660C8>],
             'bool696': [<numba.core.ir.Assign object at 0x0000015A7516C4C8>],
             'bool730': [<numba.core.ir.Assign object at 0x0000015A75175FC8>],
             'bool84': [<numba.core.ir.Assign object at 0x0000015A8A989D08>],
             'current': [<numba.core.ir.Assign object at 0x0000015A8A994E48>],
             'd': [<numba.core.ir.Assign object at 0x0000015A8A975A88>,
                   <numba.core.ir.Assign object at 0x0000015A7516C788>],
             'dens_R': [<numba.core.ir.Assign object at 0x0000015A4E4C7A08>],
             'dens_lambda': [<numba.core.ir.Assign object at 0x0000015A4E4C71C8>],
             'dens_mu': [<numba.core.ir.Assign object at 0x0000015A4E4C7F88>],
             'dens_mu_tot': [<numba.core.ir.Assign object at 0x0000015A4E4C3C88>],
             'dens_phi_sum': [<numba.core.ir.Assign object at 0x0000015A4E4E0BC8>],
             'dens_re_cov': [<numba.core.ir.Assign object at 0x0000015A4E4C77C8>],
             'dens_re_mean': [<numba.core.ir.Assign object at 0x0000015A4E4C7388>],
             'dens_re_std': [<numba.core.ir.Assign object at 0x0000015A4E4C7588>],
             'dens_re_sum': [<numba.core.ir.Assign object at 0x0000015A4E4C7DC8>],
             'densmap_flag': [<numba.core.ir.Assign object at 0x0000015A4E4E07C8>],
             'dim': [<numba.core.ir.Assign object at 0x0000015A4E4FDC48>],
             'dist_squared': [<numba.core.ir.Assign object at 0x0000015A8A989948>,
                              <numba.core.ir.Assign object at 0x0000015A75176388>],
             'dphi_term': [<numba.core.ir.Assign object at 0x0000015A8A96DF48>],
             'drj': [<numba.core.ir.Assign object at 0x0000015A8A9861C8>],
             'drk': [<numba.core.ir.Assign object at 0x0000015A8A9874C8>],
             'epoch_of_next_negative_sample': [<numba.core.ir.Assign object at 0x0000015A4E4FDDC8>],
             'epoch_of_next_sample': [<numba.core.ir.Assign object at 0x0000015A4E4E0D08>],
             'epochs_per_negative_sample': [<numba.core.ir.Assign object at 0x0000015A4E4FD0C8>],
             'epochs_per_sample': [<numba.core.ir.Assign object at 0x0000015A4E4CD188>],
             'gamma': [<numba.core.ir.Assign object at 0x0000015A4E4FD708>],
             'grad_coeff': [<numba.core.ir.Assign object at 0x0000015A8A968088>,
                            <numba.core.ir.Assign object at 0x0000015A8A968148>,
                            <numba.core.ir.Assign object at 0x0000015A8A968A48>,
                            <numba.core.ir.Assign object at 0x0000015A75166488>,
                            <numba.core.ir.Assign object at 0x0000015A75166588>,
                            <numba.core.ir.Assign object at 0x0000015A7516C648>],
             'grad_cor_coeff': [<numba.core.ir.Assign object at 0x0000015A8A96B948>],
             'grad_d': [<numba.core.ir.Assign object at 0x0000015A8A960888>,
                        <numba.core.ir.Assign object at 0x0000015A8A960948>,
                        <numba.core.ir.Assign object at 0x0000015A7515AF88>,
                        <numba.core.ir.Assign object at 0x0000015A75175A88>],
             'head': [<numba.core.ir.Assign object at 0x0000015A4E4CDBC8>],
             'head_embedding': [<numba.core.ir.Assign object at 0x0000015A4E4CD308>],
             'i': [<numba.core.ir.Assign object at 0x0000015A4E4D8C48>],
             'j': [<numba.core.ir.Assign object at 0x0000015A8A994508>],
             'k': [<numba.core.ir.Assign object at 0x0000015A8A9949C8>,
                   <numba.core.ir.Assign object at 0x0000015A751769C8>],
             'move_other': [<numba.core.ir.Assign object at 0x0000015A4E4FD888>],
             'n': [<numba.core.ir.Assign object at 0x0000015A4E4E01C8>],
             'n_neg_samples': [<numba.core.ir.Assign object at 0x0000015A75178108>],
             'n_vertices': [<numba.core.ir.Assign object at 0x0000015A4E4CD808>],
             'other': [<numba.core.ir.Assign object at 0x0000015A8A989348>,
                       <numba.core.ir.Assign object at 0x0000015A75176908>],
             'p': [<numba.core.ir.Assign object at 0x0000015A75178AC8>],
             'phi': [<numba.core.ir.Assign object at 0x0000015A8A980808>],
             'q_jk': [<numba.core.ir.Assign object at 0x0000015A8A98D6C8>],
             'q_kj': [<numba.core.ir.Assign object at 0x0000015A8A98DD88>],
             're_std_sq': [<numba.core.ir.Assign object at 0x0000015A8A986108>],
             'rng_state': [<numba.core.ir.Assign object at 0x0000015A4E4FDB08>],
             'tail': [<numba.core.ir.Assign object at 0x0000015A4E4CD888>],
             'tail_embedding': [<numba.core.ir.Assign object at 0x0000015A4E4CDE08>],
             'weight_j': [<numba.core.ir.Assign object at 0x0000015A8A97CF88>],
             'weight_k': [<numba.core.ir.Assign object at 0x0000015A8A97F708>]})
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG SSA violators {'grad_d', 'k', 'dist_squared', 'd', 'other', 'grad_coeff'}
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Fix SSA violator on var grad_d
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: head_embedding = arg(0, name=head_embedding)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: tail_embedding = arg(1, name=tail_embedding)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: head = arg(2, name=head)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: tail = arg(3, name=tail)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: n_vertices = arg(4, name=n_vertices)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epochs_per_sample = arg(5, name=epochs_per_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: a = arg(6, name=a)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: b = arg(7, name=b)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: rng_state = arg(8, name=rng_state)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: gamma = arg(9, name=gamma)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dim = arg(10, name=dim)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: move_other = arg(11, name=move_other)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: alpha = arg(12, name=alpha)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epochs_per_negative_sample = arg(13, name=epochs_per_negative_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_negative_sample = arg(14, name=epoch_of_next_negative_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_sample = arg(15, name=epoch_of_next_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: n = arg(16, name=n)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: densmap_flag = arg(17, name=densmap_flag)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_phi_sum = arg(18, name=dens_phi_sum)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_sum = arg(19, name=dens_re_sum)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_cov = arg(20, name=dens_re_cov)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_std = arg(21, name=dens_re_std)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_mean = arg(22, name=dens_re_mean)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_lambda = arg(23, name=dens_lambda)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_R = arg(24, name=dens_R)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_mu = arg(25, name=dens_mu)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_mu_tot = arg(26, name=dens_mu_tot)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $6load_global.0 = global(numba: <module 'numba' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numba\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $8load_method.1 = getattr(value=$6load_global.0, attr=prange)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $12load_attr.3 = getattr(value=epochs_per_sample, attr=shape)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const14.4 = const(int, 0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $16binary_subscr.5 = static_getitem(value=$12load_attr.3, index=0, index_var=$const14.4, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $18call_method.6 = call $8load_method.1($16binary_subscr.5, func=$8load_method.1, args=[Var($16binary_subscr.5, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $20get_iter.7 = getiter(value=$18call_method.6)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi22.0 = $20get_iter.7
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $22for_iter.1 = iternext(value=$phi22.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi26.1 = $22for_iter.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $22for_iter.3, 26, 822
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 26
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: i = $phi26.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $32binary_subscr.4 = getitem(value=epoch_of_next_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $36compare_op.6 = $32binary_subscr.4 <= n
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool38 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $38pred = call bool38($36compare_op.6, func=bool38, args=(Var($36compare_op.6, layouts.py:91),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $38pred, 40, 827
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 40
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: j = getitem(value=head, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: k = getitem(value=tail, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: current = getitem(value=head_embedding, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: other = getitem(value=tail_embedding, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $72load_global.13 = global(rdist: CPUDispatcher(<function rdist at 0x0000015A711E8AF8>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dist_squared = call $72load_global.13(current, other, func=$72load_global.13, args=[Var(current, layouts.py:95), Var(other, layouts.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool84 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $84pred = call bool84(densmap_flag, func=bool84, args=(Var(densmap_flag, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $84pred, 88, 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 88
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const88.1 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const90.2 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $94load_global.4 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $100call_function.7 = call $94load_global.4(dist_squared, b, func=$94load_global.4, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $102binary_multiply.8 = a * $100call_function.7
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $104binary_add.9 = $const90.2 + $102binary_multiply.8
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: phi = $const88.1 / $104binary_add.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $114binary_multiply.13 = a * b
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $116load_global.14 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const122.17 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $124binary_subtract.18 = b - $const122.17
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $126call_function.19 = call $116load_global.14(dist_squared, $124binary_subtract.18, func=$116load_global.14, args=[Var(dist_squared, layouts.py:98), Var($124binary_subtract.18, layouts.py:103)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $128binary_multiply.20 = $114binary_multiply.13 * $126call_function.19
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const130.21 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $134load_global.23 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $140call_function.26 = call $134load_global.23(dist_squared, b, func=$134load_global.23, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $142binary_multiply.27 = a * $140call_function.26
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $144binary_add.28 = $const130.21 + $142binary_multiply.27
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dphi_term = $128binary_multiply.20 / $144binary_add.28
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $156binary_subscr.33 = getitem(value=dens_phi_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: q_jk = phi / $156binary_subscr.33
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $168binary_subscr.38 = getitem(value=dens_phi_sum, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: q_kj = phi / $168binary_subscr.38
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const176.41 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const180.43 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $184binary_subtract.45 = $const180.43 - phi
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $186binary_multiply.46 = b * $184binary_subtract.45
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $188binary_subtract.47 = $const176.41 - $186binary_multiply.46
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $190load_global.48 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $192load_method.49 = getattr(value=$190load_global.48, attr=exp)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $198binary_subscr.52 = getitem(value=dens_re_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $200call_method.53 = call $192load_method.49($198binary_subscr.52, func=$192load_method.49, args=[Var($198binary_subscr.52, layouts.py:110)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $202binary_true_divide.54 = $188binary_subtract.47 / $200call_method.53
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $206binary_add.56 = $202binary_true_divide.54 + dphi_term
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: drk = q_jk * $206binary_add.56
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const214.59 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const218.61 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $222binary_subtract.63 = $const218.61 - phi
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $224binary_multiply.64 = b * $222binary_subtract.63
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $226binary_subtract.65 = $const214.59 - $224binary_multiply.64
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $228load_global.66 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $230load_method.67 = getattr(value=$228load_global.66, attr=exp)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $236binary_subscr.70 = getitem(value=dens_re_sum, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $238call_method.71 = call $230load_method.67($236binary_subscr.70, func=$230load_method.67, args=[Var($236binary_subscr.70, layouts.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $240binary_true_divide.72 = $226binary_subtract.65 / $238call_method.71
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $244binary_add.74 = $240binary_true_divide.72 + dphi_term
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: drj = q_kj * $244binary_add.74
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: re_std_sq = dens_re_std * dens_re_std
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $262binary_subscr.81 = getitem(value=dens_R, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $270binary_subscr.85 = getitem(value=dens_re_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $274binary_subtract.87 = $270binary_subscr.85 - dens_re_mean
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $276binary_multiply.88 = dens_re_cov * $274binary_subtract.87
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $280binary_true_divide.90 = $276binary_multiply.88 / re_std_sq
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: weight_k = $262binary_subscr.81 - $280binary_true_divide.90
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $290binary_subscr.94 = getitem(value=dens_R, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $298binary_subscr.98 = getitem(value=dens_re_sum, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $302binary_subtract.100 = $298binary_subscr.98 - dens_re_mean
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $304binary_multiply.101 = dens_re_cov * $302binary_subtract.100
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $308binary_true_divide.103 = $304binary_multiply.101 / re_std_sq
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: weight_j = $290binary_subscr.94 - $308binary_true_divide.103
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $318binary_multiply.107 = dens_lambda * dens_mu_tot
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $324binary_multiply.110 = weight_k * drk
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $330binary_multiply.113 = weight_j * drj
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $332binary_add.114 = $324binary_multiply.110 + $330binary_multiply.113
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $334binary_multiply.115 = $318binary_multiply.107 * $332binary_add.114
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $340binary_subscr.118 = getitem(value=dens_mu, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $344binary_multiply.120 = $340binary_subscr.118 * dens_re_std
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $346binary_true_divide.121 = $334binary_multiply.115 / $344binary_multiply.120
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_cor_coeff = $346binary_true_divide.121 / n_vertices
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const356.2 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $358compare_op.3 = dist_squared > $const356.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool360 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $360pred = call bool360($358compare_op.3, func=bool360, args=(Var($358compare_op.3, layouts.py:134),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $360pred, 364, 414
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 364
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const364.1 = const(float, -2.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $368binary_multiply.3 = $const364.1 * a
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $372binary_multiply.5 = $368binary_multiply.3 * b
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $374load_global.6 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const380.9 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $382binary_subtract.10 = b - $const380.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $384call_function.11 = call $374load_global.6(dist_squared, $382binary_subtract.10, func=$374load_global.6, args=[Var(dist_squared, layouts.py:98), Var($382binary_subtract.10, layouts.py:135)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $372binary_multiply.5 * $384call_function.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $394load_global.15 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $400call_function.18 = call $394load_global.15(dist_squared, b, func=$394load_global.15, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $402binary_multiply.19 = a * $400call_function.18
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const404.20 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $406binary_add.21 = $402binary_multiply.19 + $const404.20
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $408inplace_true_divide.22 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=grad_coeff, rhs=$406binary_add.21, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $408inplace_true_divide.22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 414
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $420load_global.1 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $424call_function.3 = call $420load_global.1(dim, func=$420load_global.1, args=[Var(dim, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $426get_iter.4 = getiter(value=$424call_function.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi428.1 = $426get_iter.4
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $428for_iter.2 = iternext(value=$phi428.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $428for_iter.3 = pair_first(value=$428for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $428for_iter.4 = pair_second(value=$428for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi430.2 = $428for_iter.3
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $428for_iter.4, 430, 546
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 430
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: d = $phi430.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $432load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $440binary_subscr.7 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $446binary_subscr.10 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $448binary_subtract.11 = $440binary_subscr.7 - $446binary_subscr.10
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $450binary_multiply.12 = grad_coeff * $448binary_subtract.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d = call $432load_global.3($450binary_multiply.12, func=$432load_global.3, args=[Var($450binary_multiply.12, layouts.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG first assign: grad_d
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG replaced with: grad_d = call $432load_global.3($450binary_multiply.12, func=$432load_global.3, args=[Var($450binary_multiply.12, layouts.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool458 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $458pred = call bool458(densmap_flag, func=bool458, args=(Var(densmap_flag, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $458pred, 462, 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 462
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $464load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const466.4 = const(int, 2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $470binary_multiply.6 = $const466.4 * grad_cor_coeff
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $476binary_subscr.9 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $482binary_subscr.12 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $484binary_subtract.13 = $476binary_subscr.9 - $482binary_subscr.12
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $486binary_multiply.14 = $470binary_multiply.6 * $484binary_subtract.13
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $488call_function.15 = call $464load_global.3($486binary_multiply.14, func=$464load_global.3, args=[Var($486binary_multiply.14, layouts.py:146)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $490inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=grad_d, rhs=$488call_function.15, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d = $490inplace_add.16
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG replaced with: grad_d.1 = $490inplace_add.16
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $500binary_subscr.6 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $506binary_multiply.9 = grad_d * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $508inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$500binary_subscr.6, rhs=$506binary_multiply.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: current[d] = $508inplace_add.10
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool516 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $516pred = call bool516(move_other, func=bool516, args=(Var(move_other, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $516pred, 520, 825
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 520
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $526binary_subscr.6 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $530unary_negative.8 = unary(fn=<built-in function neg>, value=grad_d)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $534binary_multiply.10 = $530unary_negative.8 * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $536inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$526binary_subscr.6, rhs=$534binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: other[d] = $536inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 825
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 546
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 548
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 548
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $554binary_subscr.5 = getitem(value=epoch_of_next_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $560binary_subscr.8 = getitem(value=epochs_per_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $562inplace_add.9 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$554binary_subscr.5, rhs=$560binary_subscr.8, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_sample[i] = $562inplace_add.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $568load_global.10 = global(int: <class 'int'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $576binary_subscr.14 = getitem(value=epoch_of_next_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $578binary_subtract.15 = n - $576binary_subscr.14
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $584binary_subscr.18 = getitem(value=epochs_per_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $586binary_true_divide.19 = $578binary_subtract.15 / $584binary_subscr.18
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: n_neg_samples = call $568load_global.10($586binary_true_divide.19, func=$568load_global.10, args=[Var($586binary_true_divide.19, layouts.py:155)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 592
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 592
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $594load_global.1 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $598call_function.3 = call $594load_global.1(n_neg_samples, func=$594load_global.1, args=[Var(n_neg_samples, layouts.py:155)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $600get_iter.4 = getiter(value=$598call_function.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi602.1 = $600get_iter.4
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 602
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 602
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $602for_iter.2 = iternext(value=$phi602.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $602for_iter.3 = pair_first(value=$602for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $602for_iter.4 = pair_second(value=$602for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi604.2 = $602for_iter.3
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $602for_iter.4, 604, 794
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 604
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: p = $phi604.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $606load_global.3 = global(tau_rand_int: CPUDispatcher(<function tau_rand_int at 0x0000015A705D4A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $610call_function.5 = call $606load_global.3(rng_state, func=$606load_global.3, args=[Var(rng_state, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: k = $610call_function.5 % n_vertices
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: other = getitem(value=tail_embedding, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $626load_global.11 = global(rdist: CPUDispatcher(<function rdist at 0x0000015A711E8AF8>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dist_squared = call $626load_global.11(current, other, func=$626load_global.11, args=[Var(current, layouts.py:95), Var(other, layouts.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const638.16 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $640compare_op.17 = dist_squared > $const638.16
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool642 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $642pred = call bool642($640compare_op.17, func=bool642, args=(Var($640compare_op.17, layouts.py:165),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $642pred, 646, 690
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 646
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const646.2 = const(float, 2.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $650binary_multiply.4 = $const646.2 * gamma
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $650binary_multiply.4 * b
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const660.8 = const(float, 0.001)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $664binary_add.10 = $const660.8 + dist_squared
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $668load_global.12 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $674call_function.15 = call $668load_global.12(dist_squared, b, func=$668load_global.12, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $676binary_multiply.16 = a * $674call_function.15
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const678.17 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $680binary_add.18 = $676binary_multiply.16 + $const678.17
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $682binary_multiply.19 = $664binary_add.10 * $680binary_add.18
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $684inplace_true_divide.20 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=grad_coeff, rhs=$682binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $684inplace_true_divide.20
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 690
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $694compare_op.4 = j == k
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool696 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $696pred = call bool696($694compare_op.4, func=bool696, args=(Var($694compare_op.4, layouts.py:170),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $696pred, 700, 706
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 700
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 826
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 706
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $712load_global.2 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $716call_function.4 = call $712load_global.2(dim, func=$712load_global.2, args=[Var(dim, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $718get_iter.5 = getiter(value=$716call_function.4)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi720.2 = $718get_iter.5
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $720for_iter.3 = iternext(value=$phi720.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $720for_iter.4 = pair_first(value=$720for_iter.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $720for_iter.5 = pair_second(value=$720for_iter.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi722.3 = $720for_iter.4
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $720for_iter.5, 722, 788
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 722
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: d = $phi722.3
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const726.5 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $728compare_op.6 = grad_coeff > $const726.5
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool730 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $730pred = call bool730($728compare_op.6, func=bool730, args=(Var($728compare_op.6, layouts.py:176),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $730pred, 734, 760
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 734
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $734load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $742binary_subscr.7 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $748binary_subscr.10 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $750binary_subtract.11 = $742binary_subscr.7 - $748binary_subscr.10
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $752binary_multiply.12 = grad_coeff * $750binary_subtract.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d = call $734load_global.3($752binary_multiply.12, func=$734load_global.3, args=[Var($752binary_multiply.12, layouts.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG replaced with: grad_d.2 = call $734load_global.3($752binary_multiply.12, func=$734load_global.3, args=[Var($752binary_multiply.12, layouts.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 760
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d = const(float, 4.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG replaced with: grad_d.3 = const(float, 4.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $770binary_subscr.7 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $776binary_multiply.10 = grad_d * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $778inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$770binary_subscr.7, rhs=$776binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: current[d] = $778inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 788
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 790
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 790
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 826
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 794
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 796
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 796
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $802binary_subscr.5 = getitem(value=epoch_of_next_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $810binary_subscr.9 = getitem(value=epochs_per_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $812binary_multiply.10 = n_neg_samples * $810binary_subscr.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $814inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$802binary_subscr.5, rhs=$812binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_negative_sample[i] = $814inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 827
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 822
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 824
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 824
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const824.0 = const(NoneType, None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $826return_value.1 = cast(value=$const824.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: return $826return_value.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 825
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 826
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 602
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 827
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {430: [<numba.core.ir.Assign object at 0x0000015A75167F48>],
             462: [<numba.core.ir.Assign object at 0x0000015A75167C48>],
             734: [<numba.core.ir.Assign object at 0x0000015A75167608>],
             760: [<numba.core.ir.Assign object at 0x0000015A75167388>]})
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: head_embedding = arg(0, name=head_embedding)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: tail_embedding = arg(1, name=tail_embedding)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: head = arg(2, name=head)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: tail = arg(3, name=tail)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: n_vertices = arg(4, name=n_vertices)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epochs_per_sample = arg(5, name=epochs_per_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: a = arg(6, name=a)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: b = arg(7, name=b)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: rng_state = arg(8, name=rng_state)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: gamma = arg(9, name=gamma)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dim = arg(10, name=dim)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: move_other = arg(11, name=move_other)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: alpha = arg(12, name=alpha)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epochs_per_negative_sample = arg(13, name=epochs_per_negative_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_negative_sample = arg(14, name=epoch_of_next_negative_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_sample = arg(15, name=epoch_of_next_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: n = arg(16, name=n)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: densmap_flag = arg(17, name=densmap_flag)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_phi_sum = arg(18, name=dens_phi_sum)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_sum = arg(19, name=dens_re_sum)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_cov = arg(20, name=dens_re_cov)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_std = arg(21, name=dens_re_std)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_mean = arg(22, name=dens_re_mean)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_lambda = arg(23, name=dens_lambda)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_R = arg(24, name=dens_R)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_mu = arg(25, name=dens_mu)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_mu_tot = arg(26, name=dens_mu_tot)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $6load_global.0 = global(numba: <module 'numba' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numba\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $8load_method.1 = getattr(value=$6load_global.0, attr=prange)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $12load_attr.3 = getattr(value=epochs_per_sample, attr=shape)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const14.4 = const(int, 0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $16binary_subscr.5 = static_getitem(value=$12load_attr.3, index=0, index_var=$const14.4, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $18call_method.6 = call $8load_method.1($16binary_subscr.5, func=$8load_method.1, args=[Var($16binary_subscr.5, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $20get_iter.7 = getiter(value=$18call_method.6)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi22.0 = $20get_iter.7
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $22for_iter.1 = iternext(value=$phi22.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi26.1 = $22for_iter.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $22for_iter.3, 26, 822
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 26
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: i = $phi26.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $32binary_subscr.4 = getitem(value=epoch_of_next_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $36compare_op.6 = $32binary_subscr.4 <= n
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool38 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $38pred = call bool38($36compare_op.6, func=bool38, args=(Var($36compare_op.6, layouts.py:91),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $38pred, 40, 827
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 40
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: j = getitem(value=head, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: k = getitem(value=tail, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: current = getitem(value=head_embedding, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: other = getitem(value=tail_embedding, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $72load_global.13 = global(rdist: CPUDispatcher(<function rdist at 0x0000015A711E8AF8>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dist_squared = call $72load_global.13(current, other, func=$72load_global.13, args=[Var(current, layouts.py:95), Var(other, layouts.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool84 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $84pred = call bool84(densmap_flag, func=bool84, args=(Var(densmap_flag, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $84pred, 88, 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 88
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const88.1 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const90.2 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $94load_global.4 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $100call_function.7 = call $94load_global.4(dist_squared, b, func=$94load_global.4, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $102binary_multiply.8 = a * $100call_function.7
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $104binary_add.9 = $const90.2 + $102binary_multiply.8
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: phi = $const88.1 / $104binary_add.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $114binary_multiply.13 = a * b
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $116load_global.14 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const122.17 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $124binary_subtract.18 = b - $const122.17
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $126call_function.19 = call $116load_global.14(dist_squared, $124binary_subtract.18, func=$116load_global.14, args=[Var(dist_squared, layouts.py:98), Var($124binary_subtract.18, layouts.py:103)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $128binary_multiply.20 = $114binary_multiply.13 * $126call_function.19
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const130.21 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $134load_global.23 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $140call_function.26 = call $134load_global.23(dist_squared, b, func=$134load_global.23, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $142binary_multiply.27 = a * $140call_function.26
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $144binary_add.28 = $const130.21 + $142binary_multiply.27
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dphi_term = $128binary_multiply.20 / $144binary_add.28
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $156binary_subscr.33 = getitem(value=dens_phi_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: q_jk = phi / $156binary_subscr.33
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $168binary_subscr.38 = getitem(value=dens_phi_sum, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: q_kj = phi / $168binary_subscr.38
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const176.41 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const180.43 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $184binary_subtract.45 = $const180.43 - phi
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $186binary_multiply.46 = b * $184binary_subtract.45
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $188binary_subtract.47 = $const176.41 - $186binary_multiply.46
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $190load_global.48 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $192load_method.49 = getattr(value=$190load_global.48, attr=exp)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $198binary_subscr.52 = getitem(value=dens_re_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $200call_method.53 = call $192load_method.49($198binary_subscr.52, func=$192load_method.49, args=[Var($198binary_subscr.52, layouts.py:110)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $202binary_true_divide.54 = $188binary_subtract.47 / $200call_method.53
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $206binary_add.56 = $202binary_true_divide.54 + dphi_term
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: drk = q_jk * $206binary_add.56
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const214.59 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const218.61 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $222binary_subtract.63 = $const218.61 - phi
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $224binary_multiply.64 = b * $222binary_subtract.63
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $226binary_subtract.65 = $const214.59 - $224binary_multiply.64
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $228load_global.66 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $230load_method.67 = getattr(value=$228load_global.66, attr=exp)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $236binary_subscr.70 = getitem(value=dens_re_sum, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $238call_method.71 = call $230load_method.67($236binary_subscr.70, func=$230load_method.67, args=[Var($236binary_subscr.70, layouts.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $240binary_true_divide.72 = $226binary_subtract.65 / $238call_method.71
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $244binary_add.74 = $240binary_true_divide.72 + dphi_term
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: drj = q_kj * $244binary_add.74
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: re_std_sq = dens_re_std * dens_re_std
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $262binary_subscr.81 = getitem(value=dens_R, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $270binary_subscr.85 = getitem(value=dens_re_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $274binary_subtract.87 = $270binary_subscr.85 - dens_re_mean
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $276binary_multiply.88 = dens_re_cov * $274binary_subtract.87
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $280binary_true_divide.90 = $276binary_multiply.88 / re_std_sq
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: weight_k = $262binary_subscr.81 - $280binary_true_divide.90
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $290binary_subscr.94 = getitem(value=dens_R, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $298binary_subscr.98 = getitem(value=dens_re_sum, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $302binary_subtract.100 = $298binary_subscr.98 - dens_re_mean
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $304binary_multiply.101 = dens_re_cov * $302binary_subtract.100
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $308binary_true_divide.103 = $304binary_multiply.101 / re_std_sq
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: weight_j = $290binary_subscr.94 - $308binary_true_divide.103
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $318binary_multiply.107 = dens_lambda * dens_mu_tot
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $324binary_multiply.110 = weight_k * drk
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $330binary_multiply.113 = weight_j * drj
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $332binary_add.114 = $324binary_multiply.110 + $330binary_multiply.113
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $334binary_multiply.115 = $318binary_multiply.107 * $332binary_add.114
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $340binary_subscr.118 = getitem(value=dens_mu, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $344binary_multiply.120 = $340binary_subscr.118 * dens_re_std
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $346binary_true_divide.121 = $334binary_multiply.115 / $344binary_multiply.120
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_cor_coeff = $346binary_true_divide.121 / n_vertices
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const356.2 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $358compare_op.3 = dist_squared > $const356.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool360 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $360pred = call bool360($358compare_op.3, func=bool360, args=(Var($358compare_op.3, layouts.py:134),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $360pred, 364, 414
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 364
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const364.1 = const(float, -2.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $368binary_multiply.3 = $const364.1 * a
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $372binary_multiply.5 = $368binary_multiply.3 * b
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $374load_global.6 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const380.9 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $382binary_subtract.10 = b - $const380.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $384call_function.11 = call $374load_global.6(dist_squared, $382binary_subtract.10, func=$374load_global.6, args=[Var(dist_squared, layouts.py:98), Var($382binary_subtract.10, layouts.py:135)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $372binary_multiply.5 * $384call_function.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $394load_global.15 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $400call_function.18 = call $394load_global.15(dist_squared, b, func=$394load_global.15, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $402binary_multiply.19 = a * $400call_function.18
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const404.20 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $406binary_add.21 = $402binary_multiply.19 + $const404.20
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $408inplace_true_divide.22 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=grad_coeff, rhs=$406binary_add.21, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $408inplace_true_divide.22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 414
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $420load_global.1 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $424call_function.3 = call $420load_global.1(dim, func=$420load_global.1, args=[Var(dim, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $426get_iter.4 = getiter(value=$424call_function.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi428.1 = $426get_iter.4
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $428for_iter.2 = iternext(value=$phi428.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $428for_iter.3 = pair_first(value=$428for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $428for_iter.4 = pair_second(value=$428for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi430.2 = $428for_iter.3
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $428for_iter.4, 430, 546
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 430
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: d = $phi430.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $432load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $440binary_subscr.7 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $446binary_subscr.10 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $448binary_subtract.11 = $440binary_subscr.7 - $446binary_subscr.10
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $450binary_multiply.12 = grad_coeff * $448binary_subtract.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d = call $432load_global.3($450binary_multiply.12, func=$432load_global.3, args=[Var($450binary_multiply.12, layouts.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool458 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $458pred = call bool458(densmap_flag, func=bool458, args=(Var(densmap_flag, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $458pred, 462, 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 462
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $464load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const466.4 = const(int, 2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $470binary_multiply.6 = $const466.4 * grad_cor_coeff
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $476binary_subscr.9 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $482binary_subscr.12 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $484binary_subtract.13 = $476binary_subscr.9 - $482binary_subscr.12
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $486binary_multiply.14 = $470binary_multiply.6 * $484binary_subtract.13
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $488call_function.15 = call $464load_global.3($486binary_multiply.14, func=$464load_global.3, args=[Var($486binary_multiply.14, layouts.py:146)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $490inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=grad_d, rhs=$488call_function.15, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='grad_d' stmt=$490inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=grad_d, rhs=$488call_function.15, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 462
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 430 from label 462
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 430
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.1 = $490inplace_add.16
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $500binary_subscr.6 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $506binary_multiply.9 = grad_d * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='grad_d' stmt=$506binary_multiply.9 = grad_d * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG insert phi node grad_d.4 = phi(incoming_values=[], incoming_blocks=[]) at 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 462
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG incoming_def grad_d.1 = $490inplace_add.16
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 430
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG incoming_def grad_d = call $432load_global.3($450binary_multiply.12, func=$432load_global.3, args=[Var($450binary_multiply.12, layouts.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG replaced with: $506binary_multiply.9 = grad_d.4 * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $508inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$500binary_subscr.6, rhs=$506binary_multiply.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: current[d] = $508inplace_add.10
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool516 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $516pred = call bool516(move_other, func=bool516, args=(Var(move_other, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $516pred, 520, 825
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 520
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $526binary_subscr.6 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $530unary_negative.8 = unary(fn=<built-in function neg>, value=grad_d)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='grad_d' stmt=$530unary_negative.8 = unary(fn=<built-in function neg>, value=grad_d)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 520
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 494 from label 520
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG replaced with: $530unary_negative.8 = unary(fn=<built-in function neg>, value=grad_d.4)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $534binary_multiply.10 = $530unary_negative.8 * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $536inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$526binary_subscr.6, rhs=$534binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: other[d] = $536inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 825
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 546
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 548
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 548
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $554binary_subscr.5 = getitem(value=epoch_of_next_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $560binary_subscr.8 = getitem(value=epochs_per_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $562inplace_add.9 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$554binary_subscr.5, rhs=$560binary_subscr.8, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_sample[i] = $562inplace_add.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $568load_global.10 = global(int: <class 'int'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $576binary_subscr.14 = getitem(value=epoch_of_next_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $578binary_subtract.15 = n - $576binary_subscr.14
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $584binary_subscr.18 = getitem(value=epochs_per_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $586binary_true_divide.19 = $578binary_subtract.15 / $584binary_subscr.18
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: n_neg_samples = call $568load_global.10($586binary_true_divide.19, func=$568load_global.10, args=[Var($586binary_true_divide.19, layouts.py:155)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 592
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 592
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $594load_global.1 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $598call_function.3 = call $594load_global.1(n_neg_samples, func=$594load_global.1, args=[Var(n_neg_samples, layouts.py:155)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $600get_iter.4 = getiter(value=$598call_function.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi602.1 = $600get_iter.4
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 602
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 602
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $602for_iter.2 = iternext(value=$phi602.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $602for_iter.3 = pair_first(value=$602for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $602for_iter.4 = pair_second(value=$602for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi604.2 = $602for_iter.3
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $602for_iter.4, 604, 794
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 604
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: p = $phi604.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $606load_global.3 = global(tau_rand_int: CPUDispatcher(<function tau_rand_int at 0x0000015A705D4A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $610call_function.5 = call $606load_global.3(rng_state, func=$606load_global.3, args=[Var(rng_state, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: k = $610call_function.5 % n_vertices
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: other = getitem(value=tail_embedding, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $626load_global.11 = global(rdist: CPUDispatcher(<function rdist at 0x0000015A711E8AF8>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dist_squared = call $626load_global.11(current, other, func=$626load_global.11, args=[Var(current, layouts.py:95), Var(other, layouts.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const638.16 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $640compare_op.17 = dist_squared > $const638.16
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool642 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $642pred = call bool642($640compare_op.17, func=bool642, args=(Var($640compare_op.17, layouts.py:165),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $642pred, 646, 690
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 646
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const646.2 = const(float, 2.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $650binary_multiply.4 = $const646.2 * gamma
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $650binary_multiply.4 * b
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const660.8 = const(float, 0.001)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $664binary_add.10 = $const660.8 + dist_squared
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $668load_global.12 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $674call_function.15 = call $668load_global.12(dist_squared, b, func=$668load_global.12, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $676binary_multiply.16 = a * $674call_function.15
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const678.17 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $680binary_add.18 = $676binary_multiply.16 + $const678.17
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $682binary_multiply.19 = $664binary_add.10 * $680binary_add.18
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $684inplace_true_divide.20 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=grad_coeff, rhs=$682binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $684inplace_true_divide.20
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 690
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $694compare_op.4 = j == k
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool696 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $696pred = call bool696($694compare_op.4, func=bool696, args=(Var($694compare_op.4, layouts.py:170),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $696pred, 700, 706
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 700
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 826
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 706
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $712load_global.2 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $716call_function.4 = call $712load_global.2(dim, func=$712load_global.2, args=[Var(dim, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $718get_iter.5 = getiter(value=$716call_function.4)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi720.2 = $718get_iter.5
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $720for_iter.3 = iternext(value=$phi720.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $720for_iter.4 = pair_first(value=$720for_iter.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $720for_iter.5 = pair_second(value=$720for_iter.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi722.3 = $720for_iter.4
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $720for_iter.5, 722, 788
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 722
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: d = $phi722.3
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const726.5 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $728compare_op.6 = grad_coeff > $const726.5
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool730 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $730pred = call bool730($728compare_op.6, func=bool730, args=(Var($728compare_op.6, layouts.py:176),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $730pred, 734, 760
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 734
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $734load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $742binary_subscr.7 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $748binary_subscr.10 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $750binary_subtract.11 = $742binary_subscr.7 - $748binary_subscr.10
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $752binary_multiply.12 = grad_coeff * $750binary_subtract.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.2 = call $734load_global.3($752binary_multiply.12, func=$734load_global.3, args=[Var($752binary_multiply.12, layouts.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 760
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.3 = const(float, 4.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $770binary_subscr.7 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $776binary_multiply.10 = grad_d * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='grad_d' stmt=$776binary_multiply.10 = grad_d * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG insert phi node grad_d.5 = phi(incoming_values=[], incoming_blocks=[]) at 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 760
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG incoming_def grad_d.3 = const(float, 4.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 734
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG incoming_def grad_d.2 = call $734load_global.3($752binary_multiply.12, func=$734load_global.3, args=[Var($752binary_multiply.12, layouts.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG replaced with: $776binary_multiply.10 = grad_d.5 * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $778inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$770binary_subscr.7, rhs=$776binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: current[d] = $778inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 788
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 790
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 790
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 826
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 794
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 796
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 796
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $802binary_subscr.5 = getitem(value=epoch_of_next_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $810binary_subscr.9 = getitem(value=epochs_per_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $812binary_multiply.10 = n_neg_samples * $810binary_subscr.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $814inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$802binary_subscr.5, rhs=$812binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_negative_sample[i] = $814inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 827
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 822
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 824
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 824
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const824.0 = const(NoneType, None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $826return_value.1 = cast(value=$const824.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: return $826return_value.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 825
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 826
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 602
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 827
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A8A993048>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Fix SSA violator on var k
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A4E4CDF88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: head_embedding = arg(0, name=head_embedding)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: tail_embedding = arg(1, name=tail_embedding)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: head = arg(2, name=head)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: tail = arg(3, name=tail)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: n_vertices = arg(4, name=n_vertices)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epochs_per_sample = arg(5, name=epochs_per_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: a = arg(6, name=a)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: b = arg(7, name=b)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: rng_state = arg(8, name=rng_state)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: gamma = arg(9, name=gamma)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dim = arg(10, name=dim)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: move_other = arg(11, name=move_other)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: alpha = arg(12, name=alpha)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epochs_per_negative_sample = arg(13, name=epochs_per_negative_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_negative_sample = arg(14, name=epoch_of_next_negative_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_sample = arg(15, name=epoch_of_next_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: n = arg(16, name=n)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: densmap_flag = arg(17, name=densmap_flag)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_phi_sum = arg(18, name=dens_phi_sum)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_sum = arg(19, name=dens_re_sum)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_cov = arg(20, name=dens_re_cov)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_std = arg(21, name=dens_re_std)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_mean = arg(22, name=dens_re_mean)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_lambda = arg(23, name=dens_lambda)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_R = arg(24, name=dens_R)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_mu = arg(25, name=dens_mu)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_mu_tot = arg(26, name=dens_mu_tot)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A4E4CDF88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $6load_global.0 = global(numba: <module 'numba' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numba\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $8load_method.1 = getattr(value=$6load_global.0, attr=prange)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $12load_attr.3 = getattr(value=epochs_per_sample, attr=shape)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const14.4 = const(int, 0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $16binary_subscr.5 = static_getitem(value=$12load_attr.3, index=0, index_var=$const14.4, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $18call_method.6 = call $8load_method.1($16binary_subscr.5, func=$8load_method.1, args=[Var($16binary_subscr.5, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $20get_iter.7 = getiter(value=$18call_method.6)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi22.0 = $20get_iter.7
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A4E4CDF88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $22for_iter.1 = iternext(value=$phi22.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi26.1 = $22for_iter.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $22for_iter.3, 26, 822
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 26
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A4E4CDF88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: i = $phi26.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $32binary_subscr.4 = getitem(value=epoch_of_next_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $36compare_op.6 = $32binary_subscr.4 <= n
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool38 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $38pred = call bool38($36compare_op.6, func=bool38, args=(Var($36compare_op.6, layouts.py:91),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $38pred, 40, 827
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 40
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A4E4CDF88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: j = getitem(value=head, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: k = getitem(value=tail, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG first assign: k
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG replaced with: k = getitem(value=tail, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: current = getitem(value=head_embedding, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: other = getitem(value=tail_embedding, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $72load_global.13 = global(rdist: CPUDispatcher(<function rdist at 0x0000015A711E8AF8>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dist_squared = call $72load_global.13(current, other, func=$72load_global.13, args=[Var(current, layouts.py:95), Var(other, layouts.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool84 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $84pred = call bool84(densmap_flag, func=bool84, args=(Var(densmap_flag, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $84pred, 88, 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 88
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A4E4CDF88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const88.1 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const90.2 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $94load_global.4 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $100call_function.7 = call $94load_global.4(dist_squared, b, func=$94load_global.4, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $102binary_multiply.8 = a * $100call_function.7
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $104binary_add.9 = $const90.2 + $102binary_multiply.8
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: phi = $const88.1 / $104binary_add.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $114binary_multiply.13 = a * b
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $116load_global.14 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const122.17 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $124binary_subtract.18 = b - $const122.17
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $126call_function.19 = call $116load_global.14(dist_squared, $124binary_subtract.18, func=$116load_global.14, args=[Var(dist_squared, layouts.py:98), Var($124binary_subtract.18, layouts.py:103)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $128binary_multiply.20 = $114binary_multiply.13 * $126call_function.19
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const130.21 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $134load_global.23 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $140call_function.26 = call $134load_global.23(dist_squared, b, func=$134load_global.23, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $142binary_multiply.27 = a * $140call_function.26
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $144binary_add.28 = $const130.21 + $142binary_multiply.27
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dphi_term = $128binary_multiply.20 / $144binary_add.28
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $156binary_subscr.33 = getitem(value=dens_phi_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: q_jk = phi / $156binary_subscr.33
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $168binary_subscr.38 = getitem(value=dens_phi_sum, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: q_kj = phi / $168binary_subscr.38
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const176.41 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const180.43 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $184binary_subtract.45 = $const180.43 - phi
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $186binary_multiply.46 = b * $184binary_subtract.45
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $188binary_subtract.47 = $const176.41 - $186binary_multiply.46
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $190load_global.48 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $192load_method.49 = getattr(value=$190load_global.48, attr=exp)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $198binary_subscr.52 = getitem(value=dens_re_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $200call_method.53 = call $192load_method.49($198binary_subscr.52, func=$192load_method.49, args=[Var($198binary_subscr.52, layouts.py:110)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $202binary_true_divide.54 = $188binary_subtract.47 / $200call_method.53
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $206binary_add.56 = $202binary_true_divide.54 + dphi_term
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: drk = q_jk * $206binary_add.56
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const214.59 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const218.61 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $222binary_subtract.63 = $const218.61 - phi
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $224binary_multiply.64 = b * $222binary_subtract.63
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $226binary_subtract.65 = $const214.59 - $224binary_multiply.64
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $228load_global.66 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $230load_method.67 = getattr(value=$228load_global.66, attr=exp)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $236binary_subscr.70 = getitem(value=dens_re_sum, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $238call_method.71 = call $230load_method.67($236binary_subscr.70, func=$230load_method.67, args=[Var($236binary_subscr.70, layouts.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $240binary_true_divide.72 = $226binary_subtract.65 / $238call_method.71
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $244binary_add.74 = $240binary_true_divide.72 + dphi_term
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: drj = q_kj * $244binary_add.74
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: re_std_sq = dens_re_std * dens_re_std
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $262binary_subscr.81 = getitem(value=dens_R, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $270binary_subscr.85 = getitem(value=dens_re_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $274binary_subtract.87 = $270binary_subscr.85 - dens_re_mean
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $276binary_multiply.88 = dens_re_cov * $274binary_subtract.87
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $280binary_true_divide.90 = $276binary_multiply.88 / re_std_sq
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: weight_k = $262binary_subscr.81 - $280binary_true_divide.90
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $290binary_subscr.94 = getitem(value=dens_R, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $298binary_subscr.98 = getitem(value=dens_re_sum, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $302binary_subtract.100 = $298binary_subscr.98 - dens_re_mean
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $304binary_multiply.101 = dens_re_cov * $302binary_subtract.100
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $308binary_true_divide.103 = $304binary_multiply.101 / re_std_sq
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: weight_j = $290binary_subscr.94 - $308binary_true_divide.103
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $318binary_multiply.107 = dens_lambda * dens_mu_tot
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $324binary_multiply.110 = weight_k * drk
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $330binary_multiply.113 = weight_j * drj
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $332binary_add.114 = $324binary_multiply.110 + $330binary_multiply.113
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $334binary_multiply.115 = $318binary_multiply.107 * $332binary_add.114
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $340binary_subscr.118 = getitem(value=dens_mu, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $344binary_multiply.120 = $340binary_subscr.118 * dens_re_std
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $346binary_true_divide.121 = $334binary_multiply.115 / $344binary_multiply.120
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_cor_coeff = $346binary_true_divide.121 / n_vertices
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A4E4CDF88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const356.2 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $358compare_op.3 = dist_squared > $const356.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool360 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $360pred = call bool360($358compare_op.3, func=bool360, args=(Var($358compare_op.3, layouts.py:134),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $360pred, 364, 414
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 364
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A4E4CDF88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const364.1 = const(float, -2.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $368binary_multiply.3 = $const364.1 * a
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $372binary_multiply.5 = $368binary_multiply.3 * b
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $374load_global.6 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const380.9 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $382binary_subtract.10 = b - $const380.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $384call_function.11 = call $374load_global.6(dist_squared, $382binary_subtract.10, func=$374load_global.6, args=[Var(dist_squared, layouts.py:98), Var($382binary_subtract.10, layouts.py:135)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $372binary_multiply.5 * $384call_function.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $394load_global.15 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $400call_function.18 = call $394load_global.15(dist_squared, b, func=$394load_global.15, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $402binary_multiply.19 = a * $400call_function.18
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const404.20 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $406binary_add.21 = $402binary_multiply.19 + $const404.20
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $408inplace_true_divide.22 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=grad_coeff, rhs=$406binary_add.21, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $408inplace_true_divide.22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 414
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A4E4CDF88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A4E4CDF88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $420load_global.1 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $424call_function.3 = call $420load_global.1(dim, func=$420load_global.1, args=[Var(dim, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $426get_iter.4 = getiter(value=$424call_function.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi428.1 = $426get_iter.4
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A4E4CDF88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $428for_iter.2 = iternext(value=$phi428.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $428for_iter.3 = pair_first(value=$428for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $428for_iter.4 = pair_second(value=$428for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi430.2 = $428for_iter.3
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $428for_iter.4, 430, 546
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 430
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A4E4CDF88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: d = $phi430.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $432load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $440binary_subscr.7 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $446binary_subscr.10 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $448binary_subtract.11 = $440binary_subscr.7 - $446binary_subscr.10
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $450binary_multiply.12 = grad_coeff * $448binary_subtract.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d = call $432load_global.3($450binary_multiply.12, func=$432load_global.3, args=[Var($450binary_multiply.12, layouts.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool458 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $458pred = call bool458(densmap_flag, func=bool458, args=(Var(densmap_flag, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $458pred, 462, 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 462
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A4E4CDF88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $464load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const466.4 = const(int, 2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $470binary_multiply.6 = $const466.4 * grad_cor_coeff
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $476binary_subscr.9 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $482binary_subscr.12 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $484binary_subtract.13 = $476binary_subscr.9 - $482binary_subscr.12
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $486binary_multiply.14 = $470binary_multiply.6 * $484binary_subtract.13
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $488call_function.15 = call $464load_global.3($486binary_multiply.14, func=$464load_global.3, args=[Var($486binary_multiply.14, layouts.py:146)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $490inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=grad_d, rhs=$488call_function.15, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.1 = $490inplace_add.16
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A4E4CDF88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.4 = phi(incoming_values=[Var(grad_d.1, layouts.py:146), Var(grad_d, layouts.py:141)], incoming_blocks=[462, 430])
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $500binary_subscr.6 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $506binary_multiply.9 = grad_d.4 * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $508inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$500binary_subscr.6, rhs=$506binary_multiply.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: current[d] = $508inplace_add.10
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool516 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $516pred = call bool516(move_other, func=bool516, args=(Var(move_other, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $516pred, 520, 825
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 520
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A4E4CDF88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $526binary_subscr.6 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $530unary_negative.8 = unary(fn=<built-in function neg>, value=grad_d.4)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $534binary_multiply.10 = $530unary_negative.8 * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $536inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$526binary_subscr.6, rhs=$534binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: other[d] = $536inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 825
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 546
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A4E4CDF88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 548
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 548
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A4E4CDF88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $554binary_subscr.5 = getitem(value=epoch_of_next_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $560binary_subscr.8 = getitem(value=epochs_per_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $562inplace_add.9 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$554binary_subscr.5, rhs=$560binary_subscr.8, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_sample[i] = $562inplace_add.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $568load_global.10 = global(int: <class 'int'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $576binary_subscr.14 = getitem(value=epoch_of_next_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $578binary_subtract.15 = n - $576binary_subscr.14
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $584binary_subscr.18 = getitem(value=epochs_per_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $586binary_true_divide.19 = $578binary_subtract.15 / $584binary_subscr.18
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: n_neg_samples = call $568load_global.10($586binary_true_divide.19, func=$568load_global.10, args=[Var($586binary_true_divide.19, layouts.py:155)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 592
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 592
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A4E4CDF88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $594load_global.1 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $598call_function.3 = call $594load_global.1(n_neg_samples, func=$594load_global.1, args=[Var(n_neg_samples, layouts.py:155)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $600get_iter.4 = getiter(value=$598call_function.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi602.1 = $600get_iter.4
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 602
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 602
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A4E4CDF88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $602for_iter.2 = iternext(value=$phi602.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $602for_iter.3 = pair_first(value=$602for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $602for_iter.4 = pair_second(value=$602for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi604.2 = $602for_iter.3
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $602for_iter.4, 604, 794
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 604
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A4E4CDF88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: p = $phi604.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $606load_global.3 = global(tau_rand_int: CPUDispatcher(<function tau_rand_int at 0x0000015A705D4A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $610call_function.5 = call $606load_global.3(rng_state, func=$606load_global.3, args=[Var(rng_state, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: k = $610call_function.5 % n_vertices
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG replaced with: k.1 = $610call_function.5 % n_vertices
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: other = getitem(value=tail_embedding, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $626load_global.11 = global(rdist: CPUDispatcher(<function rdist at 0x0000015A711E8AF8>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dist_squared = call $626load_global.11(current, other, func=$626load_global.11, args=[Var(current, layouts.py:95), Var(other, layouts.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const638.16 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $640compare_op.17 = dist_squared > $const638.16
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool642 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $642pred = call bool642($640compare_op.17, func=bool642, args=(Var($640compare_op.17, layouts.py:165),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $642pred, 646, 690
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 646
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A4E4CDF88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const646.2 = const(float, 2.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $650binary_multiply.4 = $const646.2 * gamma
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $650binary_multiply.4 * b
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const660.8 = const(float, 0.001)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $664binary_add.10 = $const660.8 + dist_squared
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $668load_global.12 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $674call_function.15 = call $668load_global.12(dist_squared, b, func=$668load_global.12, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $676binary_multiply.16 = a * $674call_function.15
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const678.17 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $680binary_add.18 = $676binary_multiply.16 + $const678.17
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $682binary_multiply.19 = $664binary_add.10 * $680binary_add.18
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $684inplace_true_divide.20 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=grad_coeff, rhs=$682binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $684inplace_true_divide.20
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 690
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A4E4CDF88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $694compare_op.4 = j == k
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool696 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $696pred = call bool696($694compare_op.4, func=bool696, args=(Var($694compare_op.4, layouts.py:170),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $696pred, 700, 706
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 700
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A4E4CDF88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 826
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 706
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A4E4CDF88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A4E4CDF88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $712load_global.2 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $716call_function.4 = call $712load_global.2(dim, func=$712load_global.2, args=[Var(dim, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $718get_iter.5 = getiter(value=$716call_function.4)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi720.2 = $718get_iter.5
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A4E4CDF88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $720for_iter.3 = iternext(value=$phi720.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $720for_iter.4 = pair_first(value=$720for_iter.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $720for_iter.5 = pair_second(value=$720for_iter.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi722.3 = $720for_iter.4
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $720for_iter.5, 722, 788
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 722
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A4E4CDF88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: d = $phi722.3
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const726.5 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $728compare_op.6 = grad_coeff > $const726.5
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool730 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $730pred = call bool730($728compare_op.6, func=bool730, args=(Var($728compare_op.6, layouts.py:176),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $730pred, 734, 760
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 734
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A4E4CDF88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $734load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $742binary_subscr.7 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $748binary_subscr.10 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $750binary_subtract.11 = $742binary_subscr.7 - $748binary_subscr.10
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $752binary_multiply.12 = grad_coeff * $750binary_subtract.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.2 = call $734load_global.3($752binary_multiply.12, func=$734load_global.3, args=[Var($752binary_multiply.12, layouts.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 760
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A4E4CDF88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.3 = const(float, 4.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A4E4CDF88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.5 = phi(incoming_values=[Var(grad_d.3, layouts.py:179), Var(grad_d.2, layouts.py:177)], incoming_blocks=[760, 734])
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $770binary_subscr.7 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $776binary_multiply.10 = grad_d.5 * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $778inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$770binary_subscr.7, rhs=$776binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: current[d] = $778inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 788
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A4E4CDF88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 790
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 790
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A4E4CDF88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 826
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 794
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A4E4CDF88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 796
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 796
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A4E4CDF88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $802binary_subscr.5 = getitem(value=epoch_of_next_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $810binary_subscr.9 = getitem(value=epochs_per_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $812binary_multiply.10 = n_neg_samples * $810binary_subscr.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $814inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$802binary_subscr.5, rhs=$812binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_negative_sample[i] = $814inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 827
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 822
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A4E4CDF88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 824
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 824
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A4E4CDF88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const824.0 = const(NoneType, None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $826return_value.1 = cast(value=$const824.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: return $826return_value.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 825
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A4E4CDF88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 826
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A4E4CDF88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 602
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 827
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A4E4CDF88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {40: [<numba.core.ir.Assign object at 0x0000015A75167288>],
             604: [<numba.core.ir.Assign object at 0x0000015A75167A88>]})
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42171EC8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: head_embedding = arg(0, name=head_embedding)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: tail_embedding = arg(1, name=tail_embedding)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: head = arg(2, name=head)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: tail = arg(3, name=tail)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: n_vertices = arg(4, name=n_vertices)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epochs_per_sample = arg(5, name=epochs_per_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: a = arg(6, name=a)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: b = arg(7, name=b)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: rng_state = arg(8, name=rng_state)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: gamma = arg(9, name=gamma)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dim = arg(10, name=dim)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: move_other = arg(11, name=move_other)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: alpha = arg(12, name=alpha)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epochs_per_negative_sample = arg(13, name=epochs_per_negative_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_negative_sample = arg(14, name=epoch_of_next_negative_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_sample = arg(15, name=epoch_of_next_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: n = arg(16, name=n)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: densmap_flag = arg(17, name=densmap_flag)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_phi_sum = arg(18, name=dens_phi_sum)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_sum = arg(19, name=dens_re_sum)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_cov = arg(20, name=dens_re_cov)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_std = arg(21, name=dens_re_std)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_mean = arg(22, name=dens_re_mean)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_lambda = arg(23, name=dens_lambda)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_R = arg(24, name=dens_R)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_mu = arg(25, name=dens_mu)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_mu_tot = arg(26, name=dens_mu_tot)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42171EC8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $6load_global.0 = global(numba: <module 'numba' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numba\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $8load_method.1 = getattr(value=$6load_global.0, attr=prange)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $12load_attr.3 = getattr(value=epochs_per_sample, attr=shape)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const14.4 = const(int, 0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $16binary_subscr.5 = static_getitem(value=$12load_attr.3, index=0, index_var=$const14.4, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $18call_method.6 = call $8load_method.1($16binary_subscr.5, func=$8load_method.1, args=[Var($16binary_subscr.5, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $20get_iter.7 = getiter(value=$18call_method.6)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi22.0 = $20get_iter.7
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42171EC8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $22for_iter.1 = iternext(value=$phi22.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi26.1 = $22for_iter.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $22for_iter.3, 26, 822
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 26
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42171EC8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: i = $phi26.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $32binary_subscr.4 = getitem(value=epoch_of_next_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $36compare_op.6 = $32binary_subscr.4 <= n
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool38 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $38pred = call bool38($36compare_op.6, func=bool38, args=(Var($36compare_op.6, layouts.py:91),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $38pred, 40, 827
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 40
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42171EC8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: j = getitem(value=head, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: k = getitem(value=tail, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: current = getitem(value=head_embedding, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: other = getitem(value=tail_embedding, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='k' stmt=other = getitem(value=tail_embedding, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $72load_global.13 = global(rdist: CPUDispatcher(<function rdist at 0x0000015A711E8AF8>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dist_squared = call $72load_global.13(current, other, func=$72load_global.13, args=[Var(current, layouts.py:95), Var(other, layouts.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool84 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $84pred = call bool84(densmap_flag, func=bool84, args=(Var(densmap_flag, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $84pred, 88, 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 88
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42171EC8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const88.1 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const90.2 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $94load_global.4 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $100call_function.7 = call $94load_global.4(dist_squared, b, func=$94load_global.4, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $102binary_multiply.8 = a * $100call_function.7
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $104binary_add.9 = $const90.2 + $102binary_multiply.8
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: phi = $const88.1 / $104binary_add.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $114binary_multiply.13 = a * b
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $116load_global.14 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const122.17 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $124binary_subtract.18 = b - $const122.17
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $126call_function.19 = call $116load_global.14(dist_squared, $124binary_subtract.18, func=$116load_global.14, args=[Var(dist_squared, layouts.py:98), Var($124binary_subtract.18, layouts.py:103)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $128binary_multiply.20 = $114binary_multiply.13 * $126call_function.19
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const130.21 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $134load_global.23 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $140call_function.26 = call $134load_global.23(dist_squared, b, func=$134load_global.23, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $142binary_multiply.27 = a * $140call_function.26
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $144binary_add.28 = $const130.21 + $142binary_multiply.27
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dphi_term = $128binary_multiply.20 / $144binary_add.28
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $156binary_subscr.33 = getitem(value=dens_phi_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='k' stmt=$156binary_subscr.33 = getitem(value=dens_phi_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 88
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 40 from label 88
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 40
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: q_jk = phi / $156binary_subscr.33
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $168binary_subscr.38 = getitem(value=dens_phi_sum, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: q_kj = phi / $168binary_subscr.38
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const176.41 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const180.43 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $184binary_subtract.45 = $const180.43 - phi
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $186binary_multiply.46 = b * $184binary_subtract.45
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $188binary_subtract.47 = $const176.41 - $186binary_multiply.46
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $190load_global.48 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $192load_method.49 = getattr(value=$190load_global.48, attr=exp)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $198binary_subscr.52 = getitem(value=dens_re_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='k' stmt=$198binary_subscr.52 = getitem(value=dens_re_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 88
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 40 from label 88
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 40
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $200call_method.53 = call $192load_method.49($198binary_subscr.52, func=$192load_method.49, args=[Var($198binary_subscr.52, layouts.py:110)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $202binary_true_divide.54 = $188binary_subtract.47 / $200call_method.53
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $206binary_add.56 = $202binary_true_divide.54 + dphi_term
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: drk = q_jk * $206binary_add.56
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const214.59 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const218.61 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $222binary_subtract.63 = $const218.61 - phi
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $224binary_multiply.64 = b * $222binary_subtract.63
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $226binary_subtract.65 = $const214.59 - $224binary_multiply.64
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $228load_global.66 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $230load_method.67 = getattr(value=$228load_global.66, attr=exp)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $236binary_subscr.70 = getitem(value=dens_re_sum, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $238call_method.71 = call $230load_method.67($236binary_subscr.70, func=$230load_method.67, args=[Var($236binary_subscr.70, layouts.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $240binary_true_divide.72 = $226binary_subtract.65 / $238call_method.71
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $244binary_add.74 = $240binary_true_divide.72 + dphi_term
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: drj = q_kj * $244binary_add.74
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: re_std_sq = dens_re_std * dens_re_std
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $262binary_subscr.81 = getitem(value=dens_R, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='k' stmt=$262binary_subscr.81 = getitem(value=dens_R, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 88
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 40 from label 88
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 40
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $270binary_subscr.85 = getitem(value=dens_re_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='k' stmt=$270binary_subscr.85 = getitem(value=dens_re_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 88
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 40 from label 88
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 40
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $274binary_subtract.87 = $270binary_subscr.85 - dens_re_mean
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $276binary_multiply.88 = dens_re_cov * $274binary_subtract.87
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $280binary_true_divide.90 = $276binary_multiply.88 / re_std_sq
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: weight_k = $262binary_subscr.81 - $280binary_true_divide.90
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $290binary_subscr.94 = getitem(value=dens_R, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $298binary_subscr.98 = getitem(value=dens_re_sum, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $302binary_subtract.100 = $298binary_subscr.98 - dens_re_mean
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $304binary_multiply.101 = dens_re_cov * $302binary_subtract.100
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $308binary_true_divide.103 = $304binary_multiply.101 / re_std_sq
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: weight_j = $290binary_subscr.94 - $308binary_true_divide.103
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $318binary_multiply.107 = dens_lambda * dens_mu_tot
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $324binary_multiply.110 = weight_k * drk
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $330binary_multiply.113 = weight_j * drj
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $332binary_add.114 = $324binary_multiply.110 + $330binary_multiply.113
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $334binary_multiply.115 = $318binary_multiply.107 * $332binary_add.114
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $340binary_subscr.118 = getitem(value=dens_mu, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $344binary_multiply.120 = $340binary_subscr.118 * dens_re_std
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $346binary_true_divide.121 = $334binary_multiply.115 / $344binary_multiply.120
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_cor_coeff = $346binary_true_divide.121 / n_vertices
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42171EC8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const356.2 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $358compare_op.3 = dist_squared > $const356.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool360 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $360pred = call bool360($358compare_op.3, func=bool360, args=(Var($358compare_op.3, layouts.py:134),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $360pred, 364, 414
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 364
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42171EC8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const364.1 = const(float, -2.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $368binary_multiply.3 = $const364.1 * a
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $372binary_multiply.5 = $368binary_multiply.3 * b
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $374load_global.6 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const380.9 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $382binary_subtract.10 = b - $const380.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $384call_function.11 = call $374load_global.6(dist_squared, $382binary_subtract.10, func=$374load_global.6, args=[Var(dist_squared, layouts.py:98), Var($382binary_subtract.10, layouts.py:135)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $372binary_multiply.5 * $384call_function.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $394load_global.15 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $400call_function.18 = call $394load_global.15(dist_squared, b, func=$394load_global.15, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $402binary_multiply.19 = a * $400call_function.18
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const404.20 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $406binary_add.21 = $402binary_multiply.19 + $const404.20
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $408inplace_true_divide.22 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=grad_coeff, rhs=$406binary_add.21, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $408inplace_true_divide.22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 414
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42171EC8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42171EC8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $420load_global.1 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $424call_function.3 = call $420load_global.1(dim, func=$420load_global.1, args=[Var(dim, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $426get_iter.4 = getiter(value=$424call_function.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi428.1 = $426get_iter.4
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42171EC8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $428for_iter.2 = iternext(value=$phi428.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $428for_iter.3 = pair_first(value=$428for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $428for_iter.4 = pair_second(value=$428for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi430.2 = $428for_iter.3
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $428for_iter.4, 430, 546
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 430
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42171EC8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: d = $phi430.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $432load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $440binary_subscr.7 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $446binary_subscr.10 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $448binary_subtract.11 = $440binary_subscr.7 - $446binary_subscr.10
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $450binary_multiply.12 = grad_coeff * $448binary_subtract.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d = call $432load_global.3($450binary_multiply.12, func=$432load_global.3, args=[Var($450binary_multiply.12, layouts.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool458 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $458pred = call bool458(densmap_flag, func=bool458, args=(Var(densmap_flag, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $458pred, 462, 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 462
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42171EC8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $464load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const466.4 = const(int, 2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $470binary_multiply.6 = $const466.4 * grad_cor_coeff
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $476binary_subscr.9 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $482binary_subscr.12 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $484binary_subtract.13 = $476binary_subscr.9 - $482binary_subscr.12
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $486binary_multiply.14 = $470binary_multiply.6 * $484binary_subtract.13
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $488call_function.15 = call $464load_global.3($486binary_multiply.14, func=$464load_global.3, args=[Var($486binary_multiply.14, layouts.py:146)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $490inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=grad_d, rhs=$488call_function.15, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.1 = $490inplace_add.16
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42171EC8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.4 = phi(incoming_values=[Var(grad_d.1, layouts.py:146), Var(grad_d, layouts.py:141)], incoming_blocks=[462, 430])
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $500binary_subscr.6 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $506binary_multiply.9 = grad_d.4 * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $508inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$500binary_subscr.6, rhs=$506binary_multiply.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: current[d] = $508inplace_add.10
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool516 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $516pred = call bool516(move_other, func=bool516, args=(Var(move_other, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $516pred, 520, 825
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 520
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42171EC8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $526binary_subscr.6 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $530unary_negative.8 = unary(fn=<built-in function neg>, value=grad_d.4)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $534binary_multiply.10 = $530unary_negative.8 * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $536inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$526binary_subscr.6, rhs=$534binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: other[d] = $536inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 825
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 546
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42171EC8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 548
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 548
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42171EC8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $554binary_subscr.5 = getitem(value=epoch_of_next_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $560binary_subscr.8 = getitem(value=epochs_per_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $562inplace_add.9 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$554binary_subscr.5, rhs=$560binary_subscr.8, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_sample[i] = $562inplace_add.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $568load_global.10 = global(int: <class 'int'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $576binary_subscr.14 = getitem(value=epoch_of_next_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $578binary_subtract.15 = n - $576binary_subscr.14
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $584binary_subscr.18 = getitem(value=epochs_per_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $586binary_true_divide.19 = $578binary_subtract.15 / $584binary_subscr.18
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: n_neg_samples = call $568load_global.10($586binary_true_divide.19, func=$568load_global.10, args=[Var($586binary_true_divide.19, layouts.py:155)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 592
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 592
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42171EC8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $594load_global.1 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $598call_function.3 = call $594load_global.1(n_neg_samples, func=$594load_global.1, args=[Var(n_neg_samples, layouts.py:155)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $600get_iter.4 = getiter(value=$598call_function.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi602.1 = $600get_iter.4
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 602
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 602
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42171EC8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $602for_iter.2 = iternext(value=$phi602.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $602for_iter.3 = pair_first(value=$602for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $602for_iter.4 = pair_second(value=$602for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi604.2 = $602for_iter.3
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $602for_iter.4, 604, 794
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 604
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42171EC8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: p = $phi604.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $606load_global.3 = global(tau_rand_int: CPUDispatcher(<function tau_rand_int at 0x0000015A705D4A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $610call_function.5 = call $606load_global.3(rng_state, func=$606load_global.3, args=[Var(rng_state, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: k.1 = $610call_function.5 % n_vertices
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: other = getitem(value=tail_embedding, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='k' stmt=other = getitem(value=tail_embedding, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG replaced with: other = getitem(value=tail_embedding, index=k.1, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $626load_global.11 = global(rdist: CPUDispatcher(<function rdist at 0x0000015A711E8AF8>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dist_squared = call $626load_global.11(current, other, func=$626load_global.11, args=[Var(current, layouts.py:95), Var(other, layouts.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const638.16 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $640compare_op.17 = dist_squared > $const638.16
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool642 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $642pred = call bool642($640compare_op.17, func=bool642, args=(Var($640compare_op.17, layouts.py:165),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $642pred, 646, 690
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 646
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42171EC8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const646.2 = const(float, 2.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $650binary_multiply.4 = $const646.2 * gamma
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $650binary_multiply.4 * b
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const660.8 = const(float, 0.001)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $664binary_add.10 = $const660.8 + dist_squared
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $668load_global.12 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $674call_function.15 = call $668load_global.12(dist_squared, b, func=$668load_global.12, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $676binary_multiply.16 = a * $674call_function.15
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const678.17 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $680binary_add.18 = $676binary_multiply.16 + $const678.17
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $682binary_multiply.19 = $664binary_add.10 * $680binary_add.18
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $684inplace_true_divide.20 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=grad_coeff, rhs=$682binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $684inplace_true_divide.20
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 690
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42171EC8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $694compare_op.4 = j == k
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='k' stmt=$694compare_op.4 = j == k
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 690
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 604 from label 690
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 604
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG replaced with: $694compare_op.4 = j == k.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool696 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $696pred = call bool696($694compare_op.4, func=bool696, args=(Var($694compare_op.4, layouts.py:170),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $696pred, 700, 706
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 700
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42171EC8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 826
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 706
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42171EC8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42171EC8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $712load_global.2 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $716call_function.4 = call $712load_global.2(dim, func=$712load_global.2, args=[Var(dim, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $718get_iter.5 = getiter(value=$716call_function.4)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi720.2 = $718get_iter.5
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42171EC8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $720for_iter.3 = iternext(value=$phi720.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $720for_iter.4 = pair_first(value=$720for_iter.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $720for_iter.5 = pair_second(value=$720for_iter.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi722.3 = $720for_iter.4
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $720for_iter.5, 722, 788
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 722
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42171EC8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: d = $phi722.3
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const726.5 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $728compare_op.6 = grad_coeff > $const726.5
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool730 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $730pred = call bool730($728compare_op.6, func=bool730, args=(Var($728compare_op.6, layouts.py:176),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $730pred, 734, 760
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 734
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42171EC8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $734load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $742binary_subscr.7 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $748binary_subscr.10 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $750binary_subtract.11 = $742binary_subscr.7 - $748binary_subscr.10
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $752binary_multiply.12 = grad_coeff * $750binary_subtract.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.2 = call $734load_global.3($752binary_multiply.12, func=$734load_global.3, args=[Var($752binary_multiply.12, layouts.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 760
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42171EC8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.3 = const(float, 4.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42171EC8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.5 = phi(incoming_values=[Var(grad_d.3, layouts.py:179), Var(grad_d.2, layouts.py:177)], incoming_blocks=[760, 734])
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $770binary_subscr.7 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $776binary_multiply.10 = grad_d.5 * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $778inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$770binary_subscr.7, rhs=$776binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: current[d] = $778inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 788
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42171EC8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 790
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 790
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42171EC8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 826
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 794
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42171EC8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 796
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 796
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42171EC8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $802binary_subscr.5 = getitem(value=epoch_of_next_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $810binary_subscr.9 = getitem(value=epochs_per_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $812binary_multiply.10 = n_neg_samples * $810binary_subscr.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $814inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$802binary_subscr.5, rhs=$812binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_negative_sample[i] = $814inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 827
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 822
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42171EC8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 824
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 824
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42171EC8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const824.0 = const(NoneType, None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $826return_value.1 = cast(value=$const824.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: return $826return_value.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 825
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42171EC8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 826
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42171EC8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 602
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 827
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A42171EC8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Fix SSA violator on var dist_squared
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75140508>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: head_embedding = arg(0, name=head_embedding)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: tail_embedding = arg(1, name=tail_embedding)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: head = arg(2, name=head)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: tail = arg(3, name=tail)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: n_vertices = arg(4, name=n_vertices)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epochs_per_sample = arg(5, name=epochs_per_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: a = arg(6, name=a)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: b = arg(7, name=b)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: rng_state = arg(8, name=rng_state)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: gamma = arg(9, name=gamma)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dim = arg(10, name=dim)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: move_other = arg(11, name=move_other)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: alpha = arg(12, name=alpha)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epochs_per_negative_sample = arg(13, name=epochs_per_negative_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_negative_sample = arg(14, name=epoch_of_next_negative_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_sample = arg(15, name=epoch_of_next_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: n = arg(16, name=n)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: densmap_flag = arg(17, name=densmap_flag)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_phi_sum = arg(18, name=dens_phi_sum)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_sum = arg(19, name=dens_re_sum)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_cov = arg(20, name=dens_re_cov)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_std = arg(21, name=dens_re_std)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_mean = arg(22, name=dens_re_mean)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_lambda = arg(23, name=dens_lambda)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_R = arg(24, name=dens_R)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_mu = arg(25, name=dens_mu)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_mu_tot = arg(26, name=dens_mu_tot)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75140508>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $6load_global.0 = global(numba: <module 'numba' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numba\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $8load_method.1 = getattr(value=$6load_global.0, attr=prange)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $12load_attr.3 = getattr(value=epochs_per_sample, attr=shape)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const14.4 = const(int, 0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $16binary_subscr.5 = static_getitem(value=$12load_attr.3, index=0, index_var=$const14.4, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $18call_method.6 = call $8load_method.1($16binary_subscr.5, func=$8load_method.1, args=[Var($16binary_subscr.5, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $20get_iter.7 = getiter(value=$18call_method.6)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi22.0 = $20get_iter.7
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75140508>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $22for_iter.1 = iternext(value=$phi22.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi26.1 = $22for_iter.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $22for_iter.3, 26, 822
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 26
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75140508>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: i = $phi26.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $32binary_subscr.4 = getitem(value=epoch_of_next_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $36compare_op.6 = $32binary_subscr.4 <= n
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool38 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $38pred = call bool38($36compare_op.6, func=bool38, args=(Var($36compare_op.6, layouts.py:91),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $38pred, 40, 827
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 40
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75140508>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: j = getitem(value=head, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: k = getitem(value=tail, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: current = getitem(value=head_embedding, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: other = getitem(value=tail_embedding, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $72load_global.13 = global(rdist: CPUDispatcher(<function rdist at 0x0000015A711E8AF8>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dist_squared = call $72load_global.13(current, other, func=$72load_global.13, args=[Var(current, layouts.py:95), Var(other, layouts.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG first assign: dist_squared
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG replaced with: dist_squared = call $72load_global.13(current, other, func=$72load_global.13, args=[Var(current, layouts.py:95), Var(other, layouts.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool84 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $84pred = call bool84(densmap_flag, func=bool84, args=(Var(densmap_flag, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $84pred, 88, 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 88
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75140508>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const88.1 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const90.2 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $94load_global.4 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $100call_function.7 = call $94load_global.4(dist_squared, b, func=$94load_global.4, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $102binary_multiply.8 = a * $100call_function.7
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $104binary_add.9 = $const90.2 + $102binary_multiply.8
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: phi = $const88.1 / $104binary_add.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $114binary_multiply.13 = a * b
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $116load_global.14 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const122.17 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $124binary_subtract.18 = b - $const122.17
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $126call_function.19 = call $116load_global.14(dist_squared, $124binary_subtract.18, func=$116load_global.14, args=[Var(dist_squared, layouts.py:98), Var($124binary_subtract.18, layouts.py:103)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $128binary_multiply.20 = $114binary_multiply.13 * $126call_function.19
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const130.21 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $134load_global.23 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $140call_function.26 = call $134load_global.23(dist_squared, b, func=$134load_global.23, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $142binary_multiply.27 = a * $140call_function.26
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $144binary_add.28 = $const130.21 + $142binary_multiply.27
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dphi_term = $128binary_multiply.20 / $144binary_add.28
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $156binary_subscr.33 = getitem(value=dens_phi_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: q_jk = phi / $156binary_subscr.33
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $168binary_subscr.38 = getitem(value=dens_phi_sum, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: q_kj = phi / $168binary_subscr.38
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const176.41 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const180.43 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $184binary_subtract.45 = $const180.43 - phi
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $186binary_multiply.46 = b * $184binary_subtract.45
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $188binary_subtract.47 = $const176.41 - $186binary_multiply.46
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $190load_global.48 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $192load_method.49 = getattr(value=$190load_global.48, attr=exp)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $198binary_subscr.52 = getitem(value=dens_re_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $200call_method.53 = call $192load_method.49($198binary_subscr.52, func=$192load_method.49, args=[Var($198binary_subscr.52, layouts.py:110)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $202binary_true_divide.54 = $188binary_subtract.47 / $200call_method.53
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $206binary_add.56 = $202binary_true_divide.54 + dphi_term
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: drk = q_jk * $206binary_add.56
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const214.59 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const218.61 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $222binary_subtract.63 = $const218.61 - phi
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $224binary_multiply.64 = b * $222binary_subtract.63
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $226binary_subtract.65 = $const214.59 - $224binary_multiply.64
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $228load_global.66 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $230load_method.67 = getattr(value=$228load_global.66, attr=exp)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $236binary_subscr.70 = getitem(value=dens_re_sum, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $238call_method.71 = call $230load_method.67($236binary_subscr.70, func=$230load_method.67, args=[Var($236binary_subscr.70, layouts.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $240binary_true_divide.72 = $226binary_subtract.65 / $238call_method.71
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $244binary_add.74 = $240binary_true_divide.72 + dphi_term
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: drj = q_kj * $244binary_add.74
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: re_std_sq = dens_re_std * dens_re_std
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $262binary_subscr.81 = getitem(value=dens_R, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $270binary_subscr.85 = getitem(value=dens_re_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $274binary_subtract.87 = $270binary_subscr.85 - dens_re_mean
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $276binary_multiply.88 = dens_re_cov * $274binary_subtract.87
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $280binary_true_divide.90 = $276binary_multiply.88 / re_std_sq
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: weight_k = $262binary_subscr.81 - $280binary_true_divide.90
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $290binary_subscr.94 = getitem(value=dens_R, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $298binary_subscr.98 = getitem(value=dens_re_sum, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $302binary_subtract.100 = $298binary_subscr.98 - dens_re_mean
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $304binary_multiply.101 = dens_re_cov * $302binary_subtract.100
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $308binary_true_divide.103 = $304binary_multiply.101 / re_std_sq
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: weight_j = $290binary_subscr.94 - $308binary_true_divide.103
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $318binary_multiply.107 = dens_lambda * dens_mu_tot
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $324binary_multiply.110 = weight_k * drk
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $330binary_multiply.113 = weight_j * drj
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $332binary_add.114 = $324binary_multiply.110 + $330binary_multiply.113
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $334binary_multiply.115 = $318binary_multiply.107 * $332binary_add.114
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $340binary_subscr.118 = getitem(value=dens_mu, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $344binary_multiply.120 = $340binary_subscr.118 * dens_re_std
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $346binary_true_divide.121 = $334binary_multiply.115 / $344binary_multiply.120
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_cor_coeff = $346binary_true_divide.121 / n_vertices
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75140508>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const356.2 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $358compare_op.3 = dist_squared > $const356.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool360 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $360pred = call bool360($358compare_op.3, func=bool360, args=(Var($358compare_op.3, layouts.py:134),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $360pred, 364, 414
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 364
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75140508>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const364.1 = const(float, -2.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $368binary_multiply.3 = $const364.1 * a
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $372binary_multiply.5 = $368binary_multiply.3 * b
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $374load_global.6 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const380.9 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $382binary_subtract.10 = b - $const380.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $384call_function.11 = call $374load_global.6(dist_squared, $382binary_subtract.10, func=$374load_global.6, args=[Var(dist_squared, layouts.py:98), Var($382binary_subtract.10, layouts.py:135)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $372binary_multiply.5 * $384call_function.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $394load_global.15 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $400call_function.18 = call $394load_global.15(dist_squared, b, func=$394load_global.15, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $402binary_multiply.19 = a * $400call_function.18
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const404.20 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $406binary_add.21 = $402binary_multiply.19 + $const404.20
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $408inplace_true_divide.22 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=grad_coeff, rhs=$406binary_add.21, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $408inplace_true_divide.22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 414
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75140508>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75140508>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $420load_global.1 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $424call_function.3 = call $420load_global.1(dim, func=$420load_global.1, args=[Var(dim, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $426get_iter.4 = getiter(value=$424call_function.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi428.1 = $426get_iter.4
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75140508>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $428for_iter.2 = iternext(value=$phi428.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $428for_iter.3 = pair_first(value=$428for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $428for_iter.4 = pair_second(value=$428for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi430.2 = $428for_iter.3
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $428for_iter.4, 430, 546
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 430
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75140508>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: d = $phi430.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $432load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $440binary_subscr.7 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $446binary_subscr.10 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $448binary_subtract.11 = $440binary_subscr.7 - $446binary_subscr.10
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $450binary_multiply.12 = grad_coeff * $448binary_subtract.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d = call $432load_global.3($450binary_multiply.12, func=$432load_global.3, args=[Var($450binary_multiply.12, layouts.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool458 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $458pred = call bool458(densmap_flag, func=bool458, args=(Var(densmap_flag, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $458pred, 462, 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 462
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75140508>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $464load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const466.4 = const(int, 2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $470binary_multiply.6 = $const466.4 * grad_cor_coeff
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $476binary_subscr.9 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $482binary_subscr.12 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $484binary_subtract.13 = $476binary_subscr.9 - $482binary_subscr.12
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $486binary_multiply.14 = $470binary_multiply.6 * $484binary_subtract.13
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $488call_function.15 = call $464load_global.3($486binary_multiply.14, func=$464load_global.3, args=[Var($486binary_multiply.14, layouts.py:146)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $490inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=grad_d, rhs=$488call_function.15, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.1 = $490inplace_add.16
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75140508>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.4 = phi(incoming_values=[Var(grad_d.1, layouts.py:146), Var(grad_d, layouts.py:141)], incoming_blocks=[462, 430])
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $500binary_subscr.6 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $506binary_multiply.9 = grad_d.4 * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $508inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$500binary_subscr.6, rhs=$506binary_multiply.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: current[d] = $508inplace_add.10
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool516 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $516pred = call bool516(move_other, func=bool516, args=(Var(move_other, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $516pred, 520, 825
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 520
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75140508>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $526binary_subscr.6 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $530unary_negative.8 = unary(fn=<built-in function neg>, value=grad_d.4)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $534binary_multiply.10 = $530unary_negative.8 * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $536inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$526binary_subscr.6, rhs=$534binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: other[d] = $536inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 825
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 546
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75140508>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 548
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 548
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75140508>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $554binary_subscr.5 = getitem(value=epoch_of_next_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $560binary_subscr.8 = getitem(value=epochs_per_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $562inplace_add.9 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$554binary_subscr.5, rhs=$560binary_subscr.8, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_sample[i] = $562inplace_add.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $568load_global.10 = global(int: <class 'int'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $576binary_subscr.14 = getitem(value=epoch_of_next_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $578binary_subtract.15 = n - $576binary_subscr.14
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $584binary_subscr.18 = getitem(value=epochs_per_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $586binary_true_divide.19 = $578binary_subtract.15 / $584binary_subscr.18
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: n_neg_samples = call $568load_global.10($586binary_true_divide.19, func=$568load_global.10, args=[Var($586binary_true_divide.19, layouts.py:155)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 592
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 592
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75140508>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $594load_global.1 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $598call_function.3 = call $594load_global.1(n_neg_samples, func=$594load_global.1, args=[Var(n_neg_samples, layouts.py:155)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $600get_iter.4 = getiter(value=$598call_function.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi602.1 = $600get_iter.4
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 602
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 602
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75140508>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $602for_iter.2 = iternext(value=$phi602.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $602for_iter.3 = pair_first(value=$602for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $602for_iter.4 = pair_second(value=$602for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi604.2 = $602for_iter.3
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $602for_iter.4, 604, 794
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 604
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75140508>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: p = $phi604.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $606load_global.3 = global(tau_rand_int: CPUDispatcher(<function tau_rand_int at 0x0000015A705D4A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $610call_function.5 = call $606load_global.3(rng_state, func=$606load_global.3, args=[Var(rng_state, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: k.1 = $610call_function.5 % n_vertices
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: other = getitem(value=tail_embedding, index=k.1, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $626load_global.11 = global(rdist: CPUDispatcher(<function rdist at 0x0000015A711E8AF8>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dist_squared = call $626load_global.11(current, other, func=$626load_global.11, args=[Var(current, layouts.py:95), Var(other, layouts.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG replaced with: dist_squared.1 = call $626load_global.11(current, other, func=$626load_global.11, args=[Var(current, layouts.py:95), Var(other, layouts.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const638.16 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $640compare_op.17 = dist_squared > $const638.16
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool642 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $642pred = call bool642($640compare_op.17, func=bool642, args=(Var($640compare_op.17, layouts.py:165),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $642pred, 646, 690
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 646
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75140508>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const646.2 = const(float, 2.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $650binary_multiply.4 = $const646.2 * gamma
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $650binary_multiply.4 * b
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const660.8 = const(float, 0.001)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $664binary_add.10 = $const660.8 + dist_squared
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $668load_global.12 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $674call_function.15 = call $668load_global.12(dist_squared, b, func=$668load_global.12, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $676binary_multiply.16 = a * $674call_function.15
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const678.17 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $680binary_add.18 = $676binary_multiply.16 + $const678.17
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $682binary_multiply.19 = $664binary_add.10 * $680binary_add.18
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $684inplace_true_divide.20 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=grad_coeff, rhs=$682binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $684inplace_true_divide.20
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 690
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75140508>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $694compare_op.4 = j == k.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool696 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $696pred = call bool696($694compare_op.4, func=bool696, args=(Var($694compare_op.4, layouts.py:170),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $696pred, 700, 706
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 700
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75140508>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 826
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 706
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75140508>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75140508>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $712load_global.2 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $716call_function.4 = call $712load_global.2(dim, func=$712load_global.2, args=[Var(dim, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $718get_iter.5 = getiter(value=$716call_function.4)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi720.2 = $718get_iter.5
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75140508>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $720for_iter.3 = iternext(value=$phi720.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $720for_iter.4 = pair_first(value=$720for_iter.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $720for_iter.5 = pair_second(value=$720for_iter.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi722.3 = $720for_iter.4
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $720for_iter.5, 722, 788
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 722
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75140508>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: d = $phi722.3
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const726.5 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $728compare_op.6 = grad_coeff > $const726.5
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool730 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $730pred = call bool730($728compare_op.6, func=bool730, args=(Var($728compare_op.6, layouts.py:176),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $730pred, 734, 760
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 734
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75140508>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $734load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $742binary_subscr.7 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $748binary_subscr.10 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $750binary_subtract.11 = $742binary_subscr.7 - $748binary_subscr.10
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $752binary_multiply.12 = grad_coeff * $750binary_subtract.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.2 = call $734load_global.3($752binary_multiply.12, func=$734load_global.3, args=[Var($752binary_multiply.12, layouts.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 760
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75140508>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.3 = const(float, 4.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75140508>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.5 = phi(incoming_values=[Var(grad_d.3, layouts.py:179), Var(grad_d.2, layouts.py:177)], incoming_blocks=[760, 734])
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $770binary_subscr.7 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $776binary_multiply.10 = grad_d.5 * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $778inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$770binary_subscr.7, rhs=$776binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: current[d] = $778inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 788
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75140508>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 790
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 790
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75140508>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 826
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 794
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75140508>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 796
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 796
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75140508>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $802binary_subscr.5 = getitem(value=epoch_of_next_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $810binary_subscr.9 = getitem(value=epochs_per_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $812binary_multiply.10 = n_neg_samples * $810binary_subscr.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $814inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$802binary_subscr.5, rhs=$812binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_negative_sample[i] = $814inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 827
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 822
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75140508>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 824
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 824
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75140508>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const824.0 = const(NoneType, None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $826return_value.1 = cast(value=$const824.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: return $826return_value.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 825
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75140508>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 826
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75140508>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 602
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 827
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75140508>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {40: [<numba.core.ir.Assign object at 0x0000015A75167488>],
             604: [<numba.core.ir.Assign object at 0x0000015A751677C8>]})
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A421A9148>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: head_embedding = arg(0, name=head_embedding)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: tail_embedding = arg(1, name=tail_embedding)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: head = arg(2, name=head)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: tail = arg(3, name=tail)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: n_vertices = arg(4, name=n_vertices)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epochs_per_sample = arg(5, name=epochs_per_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: a = arg(6, name=a)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: b = arg(7, name=b)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: rng_state = arg(8, name=rng_state)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: gamma = arg(9, name=gamma)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dim = arg(10, name=dim)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: move_other = arg(11, name=move_other)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: alpha = arg(12, name=alpha)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epochs_per_negative_sample = arg(13, name=epochs_per_negative_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_negative_sample = arg(14, name=epoch_of_next_negative_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_sample = arg(15, name=epoch_of_next_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: n = arg(16, name=n)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: densmap_flag = arg(17, name=densmap_flag)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_phi_sum = arg(18, name=dens_phi_sum)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_sum = arg(19, name=dens_re_sum)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_cov = arg(20, name=dens_re_cov)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_std = arg(21, name=dens_re_std)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_mean = arg(22, name=dens_re_mean)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_lambda = arg(23, name=dens_lambda)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_R = arg(24, name=dens_R)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_mu = arg(25, name=dens_mu)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_mu_tot = arg(26, name=dens_mu_tot)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A421A9148>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $6load_global.0 = global(numba: <module 'numba' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numba\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $8load_method.1 = getattr(value=$6load_global.0, attr=prange)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $12load_attr.3 = getattr(value=epochs_per_sample, attr=shape)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const14.4 = const(int, 0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $16binary_subscr.5 = static_getitem(value=$12load_attr.3, index=0, index_var=$const14.4, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $18call_method.6 = call $8load_method.1($16binary_subscr.5, func=$8load_method.1, args=[Var($16binary_subscr.5, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $20get_iter.7 = getiter(value=$18call_method.6)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi22.0 = $20get_iter.7
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A421A9148>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $22for_iter.1 = iternext(value=$phi22.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi26.1 = $22for_iter.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $22for_iter.3, 26, 822
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 26
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A421A9148>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: i = $phi26.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $32binary_subscr.4 = getitem(value=epoch_of_next_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $36compare_op.6 = $32binary_subscr.4 <= n
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool38 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $38pred = call bool38($36compare_op.6, func=bool38, args=(Var($36compare_op.6, layouts.py:91),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $38pred, 40, 827
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 40
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A421A9148>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: j = getitem(value=head, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: k = getitem(value=tail, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: current = getitem(value=head_embedding, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: other = getitem(value=tail_embedding, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $72load_global.13 = global(rdist: CPUDispatcher(<function rdist at 0x0000015A711E8AF8>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dist_squared = call $72load_global.13(current, other, func=$72load_global.13, args=[Var(current, layouts.py:95), Var(other, layouts.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool84 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $84pred = call bool84(densmap_flag, func=bool84, args=(Var(densmap_flag, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $84pred, 88, 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 88
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A421A9148>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const88.1 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const90.2 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $94load_global.4 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $100call_function.7 = call $94load_global.4(dist_squared, b, func=$94load_global.4, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='dist_squared' stmt=$100call_function.7 = call $94load_global.4(dist_squared, b, func=$94load_global.4, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 88
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 40 from label 88
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 40
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $102binary_multiply.8 = a * $100call_function.7
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $104binary_add.9 = $const90.2 + $102binary_multiply.8
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: phi = $const88.1 / $104binary_add.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $114binary_multiply.13 = a * b
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $116load_global.14 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const122.17 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $124binary_subtract.18 = b - $const122.17
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $126call_function.19 = call $116load_global.14(dist_squared, $124binary_subtract.18, func=$116load_global.14, args=[Var(dist_squared, layouts.py:98), Var($124binary_subtract.18, layouts.py:103)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='dist_squared' stmt=$126call_function.19 = call $116load_global.14(dist_squared, $124binary_subtract.18, func=$116load_global.14, args=[Var(dist_squared, layouts.py:98), Var($124binary_subtract.18, layouts.py:103)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 88
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 40 from label 88
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 40
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $128binary_multiply.20 = $114binary_multiply.13 * $126call_function.19
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const130.21 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $134load_global.23 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $140call_function.26 = call $134load_global.23(dist_squared, b, func=$134load_global.23, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='dist_squared' stmt=$140call_function.26 = call $134load_global.23(dist_squared, b, func=$134load_global.23, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 88
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 40 from label 88
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 40
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $142binary_multiply.27 = a * $140call_function.26
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $144binary_add.28 = $const130.21 + $142binary_multiply.27
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dphi_term = $128binary_multiply.20 / $144binary_add.28
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $156binary_subscr.33 = getitem(value=dens_phi_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: q_jk = phi / $156binary_subscr.33
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $168binary_subscr.38 = getitem(value=dens_phi_sum, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: q_kj = phi / $168binary_subscr.38
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const176.41 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const180.43 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $184binary_subtract.45 = $const180.43 - phi
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $186binary_multiply.46 = b * $184binary_subtract.45
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $188binary_subtract.47 = $const176.41 - $186binary_multiply.46
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $190load_global.48 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $192load_method.49 = getattr(value=$190load_global.48, attr=exp)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $198binary_subscr.52 = getitem(value=dens_re_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $200call_method.53 = call $192load_method.49($198binary_subscr.52, func=$192load_method.49, args=[Var($198binary_subscr.52, layouts.py:110)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $202binary_true_divide.54 = $188binary_subtract.47 / $200call_method.53
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $206binary_add.56 = $202binary_true_divide.54 + dphi_term
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: drk = q_jk * $206binary_add.56
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const214.59 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const218.61 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $222binary_subtract.63 = $const218.61 - phi
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $224binary_multiply.64 = b * $222binary_subtract.63
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $226binary_subtract.65 = $const214.59 - $224binary_multiply.64
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $228load_global.66 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $230load_method.67 = getattr(value=$228load_global.66, attr=exp)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $236binary_subscr.70 = getitem(value=dens_re_sum, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $238call_method.71 = call $230load_method.67($236binary_subscr.70, func=$230load_method.67, args=[Var($236binary_subscr.70, layouts.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $240binary_true_divide.72 = $226binary_subtract.65 / $238call_method.71
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $244binary_add.74 = $240binary_true_divide.72 + dphi_term
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: drj = q_kj * $244binary_add.74
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: re_std_sq = dens_re_std * dens_re_std
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $262binary_subscr.81 = getitem(value=dens_R, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $270binary_subscr.85 = getitem(value=dens_re_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $274binary_subtract.87 = $270binary_subscr.85 - dens_re_mean
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $276binary_multiply.88 = dens_re_cov * $274binary_subtract.87
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $280binary_true_divide.90 = $276binary_multiply.88 / re_std_sq
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: weight_k = $262binary_subscr.81 - $280binary_true_divide.90
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $290binary_subscr.94 = getitem(value=dens_R, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $298binary_subscr.98 = getitem(value=dens_re_sum, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $302binary_subtract.100 = $298binary_subscr.98 - dens_re_mean
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $304binary_multiply.101 = dens_re_cov * $302binary_subtract.100
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $308binary_true_divide.103 = $304binary_multiply.101 / re_std_sq
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: weight_j = $290binary_subscr.94 - $308binary_true_divide.103
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $318binary_multiply.107 = dens_lambda * dens_mu_tot
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $324binary_multiply.110 = weight_k * drk
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $330binary_multiply.113 = weight_j * drj
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $332binary_add.114 = $324binary_multiply.110 + $330binary_multiply.113
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $334binary_multiply.115 = $318binary_multiply.107 * $332binary_add.114
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $340binary_subscr.118 = getitem(value=dens_mu, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $344binary_multiply.120 = $340binary_subscr.118 * dens_re_std
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $346binary_true_divide.121 = $334binary_multiply.115 / $344binary_multiply.120
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_cor_coeff = $346binary_true_divide.121 / n_vertices
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A421A9148>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const356.2 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $358compare_op.3 = dist_squared > $const356.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='dist_squared' stmt=$358compare_op.3 = dist_squared > $const356.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 40 from label 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 40
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool360 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $360pred = call bool360($358compare_op.3, func=bool360, args=(Var($358compare_op.3, layouts.py:134),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $360pred, 364, 414
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 364
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A421A9148>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const364.1 = const(float, -2.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $368binary_multiply.3 = $const364.1 * a
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $372binary_multiply.5 = $368binary_multiply.3 * b
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $374load_global.6 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const380.9 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $382binary_subtract.10 = b - $const380.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $384call_function.11 = call $374load_global.6(dist_squared, $382binary_subtract.10, func=$374load_global.6, args=[Var(dist_squared, layouts.py:98), Var($382binary_subtract.10, layouts.py:135)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='dist_squared' stmt=$384call_function.11 = call $374load_global.6(dist_squared, $382binary_subtract.10, func=$374load_global.6, args=[Var(dist_squared, layouts.py:98), Var($382binary_subtract.10, layouts.py:135)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 364
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 354 from label 364
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 40 from label 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 40
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $372binary_multiply.5 * $384call_function.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $394load_global.15 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $400call_function.18 = call $394load_global.15(dist_squared, b, func=$394load_global.15, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='dist_squared' stmt=$400call_function.18 = call $394load_global.15(dist_squared, b, func=$394load_global.15, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 364
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 354 from label 364
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 40 from label 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 40
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $402binary_multiply.19 = a * $400call_function.18
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const404.20 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $406binary_add.21 = $402binary_multiply.19 + $const404.20
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $408inplace_true_divide.22 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=grad_coeff, rhs=$406binary_add.21, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $408inplace_true_divide.22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 414
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A421A9148>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A421A9148>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $420load_global.1 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $424call_function.3 = call $420load_global.1(dim, func=$420load_global.1, args=[Var(dim, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $426get_iter.4 = getiter(value=$424call_function.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi428.1 = $426get_iter.4
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A421A9148>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $428for_iter.2 = iternext(value=$phi428.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $428for_iter.3 = pair_first(value=$428for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $428for_iter.4 = pair_second(value=$428for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi430.2 = $428for_iter.3
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $428for_iter.4, 430, 546
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 430
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A421A9148>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: d = $phi430.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $432load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $440binary_subscr.7 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $446binary_subscr.10 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $448binary_subtract.11 = $440binary_subscr.7 - $446binary_subscr.10
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $450binary_multiply.12 = grad_coeff * $448binary_subtract.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d = call $432load_global.3($450binary_multiply.12, func=$432load_global.3, args=[Var($450binary_multiply.12, layouts.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool458 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $458pred = call bool458(densmap_flag, func=bool458, args=(Var(densmap_flag, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $458pred, 462, 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 462
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A421A9148>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $464load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const466.4 = const(int, 2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $470binary_multiply.6 = $const466.4 * grad_cor_coeff
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $476binary_subscr.9 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $482binary_subscr.12 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $484binary_subtract.13 = $476binary_subscr.9 - $482binary_subscr.12
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $486binary_multiply.14 = $470binary_multiply.6 * $484binary_subtract.13
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $488call_function.15 = call $464load_global.3($486binary_multiply.14, func=$464load_global.3, args=[Var($486binary_multiply.14, layouts.py:146)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $490inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=grad_d, rhs=$488call_function.15, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.1 = $490inplace_add.16
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A421A9148>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.4 = phi(incoming_values=[Var(grad_d.1, layouts.py:146), Var(grad_d, layouts.py:141)], incoming_blocks=[462, 430])
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $500binary_subscr.6 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $506binary_multiply.9 = grad_d.4 * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $508inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$500binary_subscr.6, rhs=$506binary_multiply.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: current[d] = $508inplace_add.10
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool516 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $516pred = call bool516(move_other, func=bool516, args=(Var(move_other, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $516pred, 520, 825
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 520
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A421A9148>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $526binary_subscr.6 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $530unary_negative.8 = unary(fn=<built-in function neg>, value=grad_d.4)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $534binary_multiply.10 = $530unary_negative.8 * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $536inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$526binary_subscr.6, rhs=$534binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: other[d] = $536inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 825
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 546
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A421A9148>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 548
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 548
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A421A9148>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $554binary_subscr.5 = getitem(value=epoch_of_next_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $560binary_subscr.8 = getitem(value=epochs_per_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $562inplace_add.9 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$554binary_subscr.5, rhs=$560binary_subscr.8, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_sample[i] = $562inplace_add.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $568load_global.10 = global(int: <class 'int'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $576binary_subscr.14 = getitem(value=epoch_of_next_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $578binary_subtract.15 = n - $576binary_subscr.14
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $584binary_subscr.18 = getitem(value=epochs_per_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $586binary_true_divide.19 = $578binary_subtract.15 / $584binary_subscr.18
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: n_neg_samples = call $568load_global.10($586binary_true_divide.19, func=$568load_global.10, args=[Var($586binary_true_divide.19, layouts.py:155)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 592
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 592
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A421A9148>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $594load_global.1 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $598call_function.3 = call $594load_global.1(n_neg_samples, func=$594load_global.1, args=[Var(n_neg_samples, layouts.py:155)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $600get_iter.4 = getiter(value=$598call_function.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi602.1 = $600get_iter.4
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 602
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 602
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A421A9148>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $602for_iter.2 = iternext(value=$phi602.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $602for_iter.3 = pair_first(value=$602for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $602for_iter.4 = pair_second(value=$602for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi604.2 = $602for_iter.3
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $602for_iter.4, 604, 794
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 604
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A421A9148>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: p = $phi604.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $606load_global.3 = global(tau_rand_int: CPUDispatcher(<function tau_rand_int at 0x0000015A705D4A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $610call_function.5 = call $606load_global.3(rng_state, func=$606load_global.3, args=[Var(rng_state, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: k.1 = $610call_function.5 % n_vertices
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: other = getitem(value=tail_embedding, index=k.1, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $626load_global.11 = global(rdist: CPUDispatcher(<function rdist at 0x0000015A711E8AF8>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dist_squared.1 = call $626load_global.11(current, other, func=$626load_global.11, args=[Var(current, layouts.py:95), Var(other, layouts.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const638.16 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $640compare_op.17 = dist_squared > $const638.16
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='dist_squared' stmt=$640compare_op.17 = dist_squared > $const638.16
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG replaced with: $640compare_op.17 = dist_squared.1 > $const638.16
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool642 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $642pred = call bool642($640compare_op.17, func=bool642, args=(Var($640compare_op.17, layouts.py:165),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $642pred, 646, 690
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 646
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A421A9148>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const646.2 = const(float, 2.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $650binary_multiply.4 = $const646.2 * gamma
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $650binary_multiply.4 * b
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const660.8 = const(float, 0.001)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $664binary_add.10 = $const660.8 + dist_squared
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='dist_squared' stmt=$664binary_add.10 = $const660.8 + dist_squared
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 646
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 604 from label 646
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 604
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG replaced with: $664binary_add.10 = $const660.8 + dist_squared.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $668load_global.12 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $674call_function.15 = call $668load_global.12(dist_squared, b, func=$668load_global.12, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='dist_squared' stmt=$674call_function.15 = call $668load_global.12(dist_squared, b, func=$668load_global.12, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 646
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 604 from label 646
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 604
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG replaced with: $674call_function.15 = call $668load_global.12(dist_squared.1, b, func=$668load_global.12, args=[Var(dist_squared.1, layouts.py:163), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $676binary_multiply.16 = a * $674call_function.15
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const678.17 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $680binary_add.18 = $676binary_multiply.16 + $const678.17
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $682binary_multiply.19 = $664binary_add.10 * $680binary_add.18
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $684inplace_true_divide.20 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=grad_coeff, rhs=$682binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $684inplace_true_divide.20
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 690
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A421A9148>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $694compare_op.4 = j == k.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool696 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $696pred = call bool696($694compare_op.4, func=bool696, args=(Var($694compare_op.4, layouts.py:170),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $696pred, 700, 706
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 700
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A421A9148>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 826
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 706
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A421A9148>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A421A9148>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $712load_global.2 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $716call_function.4 = call $712load_global.2(dim, func=$712load_global.2, args=[Var(dim, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $718get_iter.5 = getiter(value=$716call_function.4)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi720.2 = $718get_iter.5
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A421A9148>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $720for_iter.3 = iternext(value=$phi720.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $720for_iter.4 = pair_first(value=$720for_iter.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $720for_iter.5 = pair_second(value=$720for_iter.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi722.3 = $720for_iter.4
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $720for_iter.5, 722, 788
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 722
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A421A9148>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: d = $phi722.3
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const726.5 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $728compare_op.6 = grad_coeff > $const726.5
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool730 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $730pred = call bool730($728compare_op.6, func=bool730, args=(Var($728compare_op.6, layouts.py:176),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $730pred, 734, 760
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 734
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A421A9148>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $734load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $742binary_subscr.7 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $748binary_subscr.10 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $750binary_subtract.11 = $742binary_subscr.7 - $748binary_subscr.10
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $752binary_multiply.12 = grad_coeff * $750binary_subtract.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.2 = call $734load_global.3($752binary_multiply.12, func=$734load_global.3, args=[Var($752binary_multiply.12, layouts.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 760
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A421A9148>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.3 = const(float, 4.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A421A9148>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.5 = phi(incoming_values=[Var(grad_d.3, layouts.py:179), Var(grad_d.2, layouts.py:177)], incoming_blocks=[760, 734])
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $770binary_subscr.7 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $776binary_multiply.10 = grad_d.5 * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $778inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$770binary_subscr.7, rhs=$776binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: current[d] = $778inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 788
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A421A9148>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 790
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 790
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A421A9148>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 826
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 794
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A421A9148>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 796
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 796
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A421A9148>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $802binary_subscr.5 = getitem(value=epoch_of_next_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $810binary_subscr.9 = getitem(value=epochs_per_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $812binary_multiply.10 = n_neg_samples * $810binary_subscr.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $814inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$802binary_subscr.5, rhs=$812binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_negative_sample[i] = $814inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 827
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 822
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A421A9148>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 824
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 824
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A421A9148>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const824.0 = const(NoneType, None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $826return_value.1 = cast(value=$const824.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: return $826return_value.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 825
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A421A9148>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 826
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A421A9148>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 602
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 827
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A421A9148>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Fix SSA violator on var d
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A994E88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: head_embedding = arg(0, name=head_embedding)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: tail_embedding = arg(1, name=tail_embedding)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: head = arg(2, name=head)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: tail = arg(3, name=tail)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: n_vertices = arg(4, name=n_vertices)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epochs_per_sample = arg(5, name=epochs_per_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: a = arg(6, name=a)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: b = arg(7, name=b)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: rng_state = arg(8, name=rng_state)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: gamma = arg(9, name=gamma)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dim = arg(10, name=dim)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: move_other = arg(11, name=move_other)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: alpha = arg(12, name=alpha)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epochs_per_negative_sample = arg(13, name=epochs_per_negative_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_negative_sample = arg(14, name=epoch_of_next_negative_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_sample = arg(15, name=epoch_of_next_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: n = arg(16, name=n)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: densmap_flag = arg(17, name=densmap_flag)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_phi_sum = arg(18, name=dens_phi_sum)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_sum = arg(19, name=dens_re_sum)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_cov = arg(20, name=dens_re_cov)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_std = arg(21, name=dens_re_std)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_mean = arg(22, name=dens_re_mean)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_lambda = arg(23, name=dens_lambda)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_R = arg(24, name=dens_R)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_mu = arg(25, name=dens_mu)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_mu_tot = arg(26, name=dens_mu_tot)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A994E88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $6load_global.0 = global(numba: <module 'numba' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numba\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $8load_method.1 = getattr(value=$6load_global.0, attr=prange)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $12load_attr.3 = getattr(value=epochs_per_sample, attr=shape)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const14.4 = const(int, 0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $16binary_subscr.5 = static_getitem(value=$12load_attr.3, index=0, index_var=$const14.4, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $18call_method.6 = call $8load_method.1($16binary_subscr.5, func=$8load_method.1, args=[Var($16binary_subscr.5, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $20get_iter.7 = getiter(value=$18call_method.6)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi22.0 = $20get_iter.7
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A994E88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $22for_iter.1 = iternext(value=$phi22.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi26.1 = $22for_iter.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $22for_iter.3, 26, 822
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 26
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A994E88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: i = $phi26.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $32binary_subscr.4 = getitem(value=epoch_of_next_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $36compare_op.6 = $32binary_subscr.4 <= n
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool38 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $38pred = call bool38($36compare_op.6, func=bool38, args=(Var($36compare_op.6, layouts.py:91),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $38pred, 40, 827
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 40
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A994E88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: j = getitem(value=head, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: k = getitem(value=tail, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: current = getitem(value=head_embedding, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: other = getitem(value=tail_embedding, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $72load_global.13 = global(rdist: CPUDispatcher(<function rdist at 0x0000015A711E8AF8>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dist_squared = call $72load_global.13(current, other, func=$72load_global.13, args=[Var(current, layouts.py:95), Var(other, layouts.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool84 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $84pred = call bool84(densmap_flag, func=bool84, args=(Var(densmap_flag, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $84pred, 88, 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 88
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A994E88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const88.1 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const90.2 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $94load_global.4 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $100call_function.7 = call $94load_global.4(dist_squared, b, func=$94load_global.4, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $102binary_multiply.8 = a * $100call_function.7
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $104binary_add.9 = $const90.2 + $102binary_multiply.8
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: phi = $const88.1 / $104binary_add.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $114binary_multiply.13 = a * b
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $116load_global.14 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const122.17 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $124binary_subtract.18 = b - $const122.17
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $126call_function.19 = call $116load_global.14(dist_squared, $124binary_subtract.18, func=$116load_global.14, args=[Var(dist_squared, layouts.py:98), Var($124binary_subtract.18, layouts.py:103)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $128binary_multiply.20 = $114binary_multiply.13 * $126call_function.19
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const130.21 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $134load_global.23 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $140call_function.26 = call $134load_global.23(dist_squared, b, func=$134load_global.23, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $142binary_multiply.27 = a * $140call_function.26
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $144binary_add.28 = $const130.21 + $142binary_multiply.27
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dphi_term = $128binary_multiply.20 / $144binary_add.28
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $156binary_subscr.33 = getitem(value=dens_phi_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: q_jk = phi / $156binary_subscr.33
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $168binary_subscr.38 = getitem(value=dens_phi_sum, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: q_kj = phi / $168binary_subscr.38
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const176.41 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const180.43 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $184binary_subtract.45 = $const180.43 - phi
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $186binary_multiply.46 = b * $184binary_subtract.45
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $188binary_subtract.47 = $const176.41 - $186binary_multiply.46
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $190load_global.48 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $192load_method.49 = getattr(value=$190load_global.48, attr=exp)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $198binary_subscr.52 = getitem(value=dens_re_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $200call_method.53 = call $192load_method.49($198binary_subscr.52, func=$192load_method.49, args=[Var($198binary_subscr.52, layouts.py:110)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $202binary_true_divide.54 = $188binary_subtract.47 / $200call_method.53
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $206binary_add.56 = $202binary_true_divide.54 + dphi_term
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: drk = q_jk * $206binary_add.56
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const214.59 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const218.61 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $222binary_subtract.63 = $const218.61 - phi
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $224binary_multiply.64 = b * $222binary_subtract.63
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $226binary_subtract.65 = $const214.59 - $224binary_multiply.64
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $228load_global.66 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $230load_method.67 = getattr(value=$228load_global.66, attr=exp)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $236binary_subscr.70 = getitem(value=dens_re_sum, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $238call_method.71 = call $230load_method.67($236binary_subscr.70, func=$230load_method.67, args=[Var($236binary_subscr.70, layouts.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $240binary_true_divide.72 = $226binary_subtract.65 / $238call_method.71
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $244binary_add.74 = $240binary_true_divide.72 + dphi_term
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: drj = q_kj * $244binary_add.74
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: re_std_sq = dens_re_std * dens_re_std
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $262binary_subscr.81 = getitem(value=dens_R, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $270binary_subscr.85 = getitem(value=dens_re_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $274binary_subtract.87 = $270binary_subscr.85 - dens_re_mean
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $276binary_multiply.88 = dens_re_cov * $274binary_subtract.87
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $280binary_true_divide.90 = $276binary_multiply.88 / re_std_sq
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: weight_k = $262binary_subscr.81 - $280binary_true_divide.90
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $290binary_subscr.94 = getitem(value=dens_R, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $298binary_subscr.98 = getitem(value=dens_re_sum, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $302binary_subtract.100 = $298binary_subscr.98 - dens_re_mean
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $304binary_multiply.101 = dens_re_cov * $302binary_subtract.100
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $308binary_true_divide.103 = $304binary_multiply.101 / re_std_sq
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: weight_j = $290binary_subscr.94 - $308binary_true_divide.103
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $318binary_multiply.107 = dens_lambda * dens_mu_tot
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $324binary_multiply.110 = weight_k * drk
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $330binary_multiply.113 = weight_j * drj
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $332binary_add.114 = $324binary_multiply.110 + $330binary_multiply.113
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $334binary_multiply.115 = $318binary_multiply.107 * $332binary_add.114
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $340binary_subscr.118 = getitem(value=dens_mu, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $344binary_multiply.120 = $340binary_subscr.118 * dens_re_std
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $346binary_true_divide.121 = $334binary_multiply.115 / $344binary_multiply.120
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_cor_coeff = $346binary_true_divide.121 / n_vertices
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A994E88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const356.2 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $358compare_op.3 = dist_squared > $const356.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool360 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $360pred = call bool360($358compare_op.3, func=bool360, args=(Var($358compare_op.3, layouts.py:134),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $360pred, 364, 414
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 364
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A994E88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const364.1 = const(float, -2.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $368binary_multiply.3 = $const364.1 * a
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $372binary_multiply.5 = $368binary_multiply.3 * b
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $374load_global.6 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const380.9 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $382binary_subtract.10 = b - $const380.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $384call_function.11 = call $374load_global.6(dist_squared, $382binary_subtract.10, func=$374load_global.6, args=[Var(dist_squared, layouts.py:98), Var($382binary_subtract.10, layouts.py:135)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $372binary_multiply.5 * $384call_function.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $394load_global.15 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $400call_function.18 = call $394load_global.15(dist_squared, b, func=$394load_global.15, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $402binary_multiply.19 = a * $400call_function.18
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const404.20 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $406binary_add.21 = $402binary_multiply.19 + $const404.20
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $408inplace_true_divide.22 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=grad_coeff, rhs=$406binary_add.21, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $408inplace_true_divide.22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 414
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A994E88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A994E88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $420load_global.1 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $424call_function.3 = call $420load_global.1(dim, func=$420load_global.1, args=[Var(dim, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $426get_iter.4 = getiter(value=$424call_function.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi428.1 = $426get_iter.4
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A994E88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $428for_iter.2 = iternext(value=$phi428.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $428for_iter.3 = pair_first(value=$428for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $428for_iter.4 = pair_second(value=$428for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi430.2 = $428for_iter.3
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $428for_iter.4, 430, 546
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 430
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A994E88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: d = $phi430.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG first assign: d
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG replaced with: d = $phi430.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $432load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $440binary_subscr.7 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $446binary_subscr.10 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $448binary_subtract.11 = $440binary_subscr.7 - $446binary_subscr.10
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $450binary_multiply.12 = grad_coeff * $448binary_subtract.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d = call $432load_global.3($450binary_multiply.12, func=$432load_global.3, args=[Var($450binary_multiply.12, layouts.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool458 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $458pred = call bool458(densmap_flag, func=bool458, args=(Var(densmap_flag, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $458pred, 462, 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 462
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A994E88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $464load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const466.4 = const(int, 2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $470binary_multiply.6 = $const466.4 * grad_cor_coeff
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $476binary_subscr.9 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $482binary_subscr.12 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $484binary_subtract.13 = $476binary_subscr.9 - $482binary_subscr.12
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $486binary_multiply.14 = $470binary_multiply.6 * $484binary_subtract.13
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $488call_function.15 = call $464load_global.3($486binary_multiply.14, func=$464load_global.3, args=[Var($486binary_multiply.14, layouts.py:146)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $490inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=grad_d, rhs=$488call_function.15, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.1 = $490inplace_add.16
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A994E88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.4 = phi(incoming_values=[Var(grad_d.1, layouts.py:146), Var(grad_d, layouts.py:141)], incoming_blocks=[462, 430])
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $500binary_subscr.6 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $506binary_multiply.9 = grad_d.4 * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $508inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$500binary_subscr.6, rhs=$506binary_multiply.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: current[d] = $508inplace_add.10
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool516 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $516pred = call bool516(move_other, func=bool516, args=(Var(move_other, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $516pred, 520, 825
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 520
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A994E88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $526binary_subscr.6 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $530unary_negative.8 = unary(fn=<built-in function neg>, value=grad_d.4)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $534binary_multiply.10 = $530unary_negative.8 * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $536inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$526binary_subscr.6, rhs=$534binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: other[d] = $536inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 825
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 546
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A994E88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 548
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 548
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A994E88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $554binary_subscr.5 = getitem(value=epoch_of_next_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $560binary_subscr.8 = getitem(value=epochs_per_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $562inplace_add.9 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$554binary_subscr.5, rhs=$560binary_subscr.8, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_sample[i] = $562inplace_add.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $568load_global.10 = global(int: <class 'int'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $576binary_subscr.14 = getitem(value=epoch_of_next_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $578binary_subtract.15 = n - $576binary_subscr.14
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $584binary_subscr.18 = getitem(value=epochs_per_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $586binary_true_divide.19 = $578binary_subtract.15 / $584binary_subscr.18
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: n_neg_samples = call $568load_global.10($586binary_true_divide.19, func=$568load_global.10, args=[Var($586binary_true_divide.19, layouts.py:155)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 592
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 592
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A994E88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $594load_global.1 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $598call_function.3 = call $594load_global.1(n_neg_samples, func=$594load_global.1, args=[Var(n_neg_samples, layouts.py:155)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $600get_iter.4 = getiter(value=$598call_function.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi602.1 = $600get_iter.4
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 602
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 602
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A994E88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $602for_iter.2 = iternext(value=$phi602.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $602for_iter.3 = pair_first(value=$602for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $602for_iter.4 = pair_second(value=$602for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi604.2 = $602for_iter.3
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $602for_iter.4, 604, 794
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 604
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A994E88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: p = $phi604.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $606load_global.3 = global(tau_rand_int: CPUDispatcher(<function tau_rand_int at 0x0000015A705D4A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $610call_function.5 = call $606load_global.3(rng_state, func=$606load_global.3, args=[Var(rng_state, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: k.1 = $610call_function.5 % n_vertices
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: other = getitem(value=tail_embedding, index=k.1, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $626load_global.11 = global(rdist: CPUDispatcher(<function rdist at 0x0000015A711E8AF8>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dist_squared.1 = call $626load_global.11(current, other, func=$626load_global.11, args=[Var(current, layouts.py:95), Var(other, layouts.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const638.16 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $640compare_op.17 = dist_squared.1 > $const638.16
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool642 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $642pred = call bool642($640compare_op.17, func=bool642, args=(Var($640compare_op.17, layouts.py:165),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $642pred, 646, 690
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 646
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A994E88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const646.2 = const(float, 2.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $650binary_multiply.4 = $const646.2 * gamma
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $650binary_multiply.4 * b
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const660.8 = const(float, 0.001)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $664binary_add.10 = $const660.8 + dist_squared.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $668load_global.12 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $674call_function.15 = call $668load_global.12(dist_squared.1, b, func=$668load_global.12, args=[Var(dist_squared.1, layouts.py:163), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $676binary_multiply.16 = a * $674call_function.15
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const678.17 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $680binary_add.18 = $676binary_multiply.16 + $const678.17
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $682binary_multiply.19 = $664binary_add.10 * $680binary_add.18
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $684inplace_true_divide.20 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=grad_coeff, rhs=$682binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $684inplace_true_divide.20
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 690
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A994E88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $694compare_op.4 = j == k.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool696 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $696pred = call bool696($694compare_op.4, func=bool696, args=(Var($694compare_op.4, layouts.py:170),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $696pred, 700, 706
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 700
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A994E88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 826
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 706
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A994E88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A994E88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $712load_global.2 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $716call_function.4 = call $712load_global.2(dim, func=$712load_global.2, args=[Var(dim, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $718get_iter.5 = getiter(value=$716call_function.4)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi720.2 = $718get_iter.5
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A994E88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $720for_iter.3 = iternext(value=$phi720.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $720for_iter.4 = pair_first(value=$720for_iter.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $720for_iter.5 = pair_second(value=$720for_iter.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi722.3 = $720for_iter.4
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $720for_iter.5, 722, 788
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 722
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A994E88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: d = $phi722.3
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG replaced with: d.1 = $phi722.3
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const726.5 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $728compare_op.6 = grad_coeff > $const726.5
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool730 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $730pred = call bool730($728compare_op.6, func=bool730, args=(Var($728compare_op.6, layouts.py:176),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $730pred, 734, 760
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 734
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A994E88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $734load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $742binary_subscr.7 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $748binary_subscr.10 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $750binary_subtract.11 = $742binary_subscr.7 - $748binary_subscr.10
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $752binary_multiply.12 = grad_coeff * $750binary_subtract.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.2 = call $734load_global.3($752binary_multiply.12, func=$734load_global.3, args=[Var($752binary_multiply.12, layouts.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 760
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A994E88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.3 = const(float, 4.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A994E88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.5 = phi(incoming_values=[Var(grad_d.3, layouts.py:179), Var(grad_d.2, layouts.py:177)], incoming_blocks=[760, 734])
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $770binary_subscr.7 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $776binary_multiply.10 = grad_d.5 * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $778inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$770binary_subscr.7, rhs=$776binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: current[d] = $778inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 788
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A994E88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 790
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 790
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A994E88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 826
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 794
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A994E88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 796
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 796
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A994E88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $802binary_subscr.5 = getitem(value=epoch_of_next_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $810binary_subscr.9 = getitem(value=epochs_per_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $812binary_multiply.10 = n_neg_samples * $810binary_subscr.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $814inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$802binary_subscr.5, rhs=$812binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_negative_sample[i] = $814inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 827
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 822
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A994E88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 824
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 824
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A994E88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const824.0 = const(NoneType, None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $826return_value.1 = cast(value=$const824.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: return $826return_value.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 825
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A994E88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 826
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A994E88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 602
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 827
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A8A994E88>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {430: [<numba.core.ir.Assign object at 0x0000015A75167748>],
             722: [<numba.core.ir.Assign object at 0x0000015A421A9D88>]})
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A75140C48>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: head_embedding = arg(0, name=head_embedding)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: tail_embedding = arg(1, name=tail_embedding)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: head = arg(2, name=head)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: tail = arg(3, name=tail)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: n_vertices = arg(4, name=n_vertices)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epochs_per_sample = arg(5, name=epochs_per_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: a = arg(6, name=a)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: b = arg(7, name=b)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: rng_state = arg(8, name=rng_state)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: gamma = arg(9, name=gamma)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dim = arg(10, name=dim)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: move_other = arg(11, name=move_other)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: alpha = arg(12, name=alpha)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epochs_per_negative_sample = arg(13, name=epochs_per_negative_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_negative_sample = arg(14, name=epoch_of_next_negative_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_sample = arg(15, name=epoch_of_next_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: n = arg(16, name=n)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: densmap_flag = arg(17, name=densmap_flag)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_phi_sum = arg(18, name=dens_phi_sum)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_sum = arg(19, name=dens_re_sum)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_cov = arg(20, name=dens_re_cov)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_std = arg(21, name=dens_re_std)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_mean = arg(22, name=dens_re_mean)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_lambda = arg(23, name=dens_lambda)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_R = arg(24, name=dens_R)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_mu = arg(25, name=dens_mu)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_mu_tot = arg(26, name=dens_mu_tot)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A75140C48>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $6load_global.0 = global(numba: <module 'numba' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numba\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $8load_method.1 = getattr(value=$6load_global.0, attr=prange)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $12load_attr.3 = getattr(value=epochs_per_sample, attr=shape)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const14.4 = const(int, 0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $16binary_subscr.5 = static_getitem(value=$12load_attr.3, index=0, index_var=$const14.4, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $18call_method.6 = call $8load_method.1($16binary_subscr.5, func=$8load_method.1, args=[Var($16binary_subscr.5, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $20get_iter.7 = getiter(value=$18call_method.6)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi22.0 = $20get_iter.7
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A75140C48>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $22for_iter.1 = iternext(value=$phi22.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi26.1 = $22for_iter.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $22for_iter.3, 26, 822
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 26
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A75140C48>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: i = $phi26.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $32binary_subscr.4 = getitem(value=epoch_of_next_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $36compare_op.6 = $32binary_subscr.4 <= n
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool38 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $38pred = call bool38($36compare_op.6, func=bool38, args=(Var($36compare_op.6, layouts.py:91),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $38pred, 40, 827
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 40
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A75140C48>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: j = getitem(value=head, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: k = getitem(value=tail, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: current = getitem(value=head_embedding, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: other = getitem(value=tail_embedding, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $72load_global.13 = global(rdist: CPUDispatcher(<function rdist at 0x0000015A711E8AF8>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dist_squared = call $72load_global.13(current, other, func=$72load_global.13, args=[Var(current, layouts.py:95), Var(other, layouts.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool84 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $84pred = call bool84(densmap_flag, func=bool84, args=(Var(densmap_flag, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $84pred, 88, 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 88
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A75140C48>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const88.1 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const90.2 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $94load_global.4 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $100call_function.7 = call $94load_global.4(dist_squared, b, func=$94load_global.4, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $102binary_multiply.8 = a * $100call_function.7
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $104binary_add.9 = $const90.2 + $102binary_multiply.8
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: phi = $const88.1 / $104binary_add.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $114binary_multiply.13 = a * b
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $116load_global.14 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const122.17 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $124binary_subtract.18 = b - $const122.17
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $126call_function.19 = call $116load_global.14(dist_squared, $124binary_subtract.18, func=$116load_global.14, args=[Var(dist_squared, layouts.py:98), Var($124binary_subtract.18, layouts.py:103)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $128binary_multiply.20 = $114binary_multiply.13 * $126call_function.19
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const130.21 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $134load_global.23 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $140call_function.26 = call $134load_global.23(dist_squared, b, func=$134load_global.23, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $142binary_multiply.27 = a * $140call_function.26
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $144binary_add.28 = $const130.21 + $142binary_multiply.27
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dphi_term = $128binary_multiply.20 / $144binary_add.28
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $156binary_subscr.33 = getitem(value=dens_phi_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: q_jk = phi / $156binary_subscr.33
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $168binary_subscr.38 = getitem(value=dens_phi_sum, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: q_kj = phi / $168binary_subscr.38
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const176.41 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const180.43 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $184binary_subtract.45 = $const180.43 - phi
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $186binary_multiply.46 = b * $184binary_subtract.45
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $188binary_subtract.47 = $const176.41 - $186binary_multiply.46
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $190load_global.48 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $192load_method.49 = getattr(value=$190load_global.48, attr=exp)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $198binary_subscr.52 = getitem(value=dens_re_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $200call_method.53 = call $192load_method.49($198binary_subscr.52, func=$192load_method.49, args=[Var($198binary_subscr.52, layouts.py:110)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $202binary_true_divide.54 = $188binary_subtract.47 / $200call_method.53
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $206binary_add.56 = $202binary_true_divide.54 + dphi_term
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: drk = q_jk * $206binary_add.56
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const214.59 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const218.61 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $222binary_subtract.63 = $const218.61 - phi
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $224binary_multiply.64 = b * $222binary_subtract.63
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $226binary_subtract.65 = $const214.59 - $224binary_multiply.64
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $228load_global.66 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $230load_method.67 = getattr(value=$228load_global.66, attr=exp)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $236binary_subscr.70 = getitem(value=dens_re_sum, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $238call_method.71 = call $230load_method.67($236binary_subscr.70, func=$230load_method.67, args=[Var($236binary_subscr.70, layouts.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $240binary_true_divide.72 = $226binary_subtract.65 / $238call_method.71
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $244binary_add.74 = $240binary_true_divide.72 + dphi_term
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: drj = q_kj * $244binary_add.74
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: re_std_sq = dens_re_std * dens_re_std
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $262binary_subscr.81 = getitem(value=dens_R, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $270binary_subscr.85 = getitem(value=dens_re_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $274binary_subtract.87 = $270binary_subscr.85 - dens_re_mean
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $276binary_multiply.88 = dens_re_cov * $274binary_subtract.87
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $280binary_true_divide.90 = $276binary_multiply.88 / re_std_sq
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: weight_k = $262binary_subscr.81 - $280binary_true_divide.90
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $290binary_subscr.94 = getitem(value=dens_R, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $298binary_subscr.98 = getitem(value=dens_re_sum, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $302binary_subtract.100 = $298binary_subscr.98 - dens_re_mean
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $304binary_multiply.101 = dens_re_cov * $302binary_subtract.100
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $308binary_true_divide.103 = $304binary_multiply.101 / re_std_sq
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: weight_j = $290binary_subscr.94 - $308binary_true_divide.103
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $318binary_multiply.107 = dens_lambda * dens_mu_tot
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $324binary_multiply.110 = weight_k * drk
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $330binary_multiply.113 = weight_j * drj
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $332binary_add.114 = $324binary_multiply.110 + $330binary_multiply.113
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $334binary_multiply.115 = $318binary_multiply.107 * $332binary_add.114
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $340binary_subscr.118 = getitem(value=dens_mu, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $344binary_multiply.120 = $340binary_subscr.118 * dens_re_std
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $346binary_true_divide.121 = $334binary_multiply.115 / $344binary_multiply.120
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_cor_coeff = $346binary_true_divide.121 / n_vertices
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A75140C48>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const356.2 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $358compare_op.3 = dist_squared > $const356.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool360 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $360pred = call bool360($358compare_op.3, func=bool360, args=(Var($358compare_op.3, layouts.py:134),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $360pred, 364, 414
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 364
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A75140C48>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const364.1 = const(float, -2.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $368binary_multiply.3 = $const364.1 * a
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $372binary_multiply.5 = $368binary_multiply.3 * b
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $374load_global.6 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const380.9 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $382binary_subtract.10 = b - $const380.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $384call_function.11 = call $374load_global.6(dist_squared, $382binary_subtract.10, func=$374load_global.6, args=[Var(dist_squared, layouts.py:98), Var($382binary_subtract.10, layouts.py:135)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $372binary_multiply.5 * $384call_function.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $394load_global.15 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $400call_function.18 = call $394load_global.15(dist_squared, b, func=$394load_global.15, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $402binary_multiply.19 = a * $400call_function.18
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const404.20 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $406binary_add.21 = $402binary_multiply.19 + $const404.20
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $408inplace_true_divide.22 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=grad_coeff, rhs=$406binary_add.21, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $408inplace_true_divide.22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 414
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A75140C48>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A75140C48>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $420load_global.1 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $424call_function.3 = call $420load_global.1(dim, func=$420load_global.1, args=[Var(dim, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $426get_iter.4 = getiter(value=$424call_function.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi428.1 = $426get_iter.4
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A75140C48>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $428for_iter.2 = iternext(value=$phi428.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $428for_iter.3 = pair_first(value=$428for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $428for_iter.4 = pair_second(value=$428for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi430.2 = $428for_iter.3
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $428for_iter.4, 430, 546
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 430
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A75140C48>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: d = $phi430.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $432load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $440binary_subscr.7 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='d' stmt=$440binary_subscr.7 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $446binary_subscr.10 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='d' stmt=$446binary_subscr.10 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $448binary_subtract.11 = $440binary_subscr.7 - $446binary_subscr.10
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $450binary_multiply.12 = grad_coeff * $448binary_subtract.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d = call $432load_global.3($450binary_multiply.12, func=$432load_global.3, args=[Var($450binary_multiply.12, layouts.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool458 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $458pred = call bool458(densmap_flag, func=bool458, args=(Var(densmap_flag, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $458pred, 462, 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 462
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A75140C48>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $464load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const466.4 = const(int, 2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $470binary_multiply.6 = $const466.4 * grad_cor_coeff
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $476binary_subscr.9 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='d' stmt=$476binary_subscr.9 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 462
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 430 from label 462
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 430
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $482binary_subscr.12 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='d' stmt=$482binary_subscr.12 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 462
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 430 from label 462
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 430
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $484binary_subtract.13 = $476binary_subscr.9 - $482binary_subscr.12
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $486binary_multiply.14 = $470binary_multiply.6 * $484binary_subtract.13
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $488call_function.15 = call $464load_global.3($486binary_multiply.14, func=$464load_global.3, args=[Var($486binary_multiply.14, layouts.py:146)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $490inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=grad_d, rhs=$488call_function.15, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.1 = $490inplace_add.16
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A75140C48>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.4 = phi(incoming_values=[Var(grad_d.1, layouts.py:146), Var(grad_d, layouts.py:141)], incoming_blocks=[462, 430])
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $500binary_subscr.6 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='d' stmt=$500binary_subscr.6 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 430 from label 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 430
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $506binary_multiply.9 = grad_d.4 * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $508inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$500binary_subscr.6, rhs=$506binary_multiply.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: current[d] = $508inplace_add.10
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='d' stmt=current[d] = $508inplace_add.10
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 430 from label 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 430
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool516 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $516pred = call bool516(move_other, func=bool516, args=(Var(move_other, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $516pred, 520, 825
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 520
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A75140C48>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $526binary_subscr.6 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='d' stmt=$526binary_subscr.6 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 520
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 494 from label 520
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 430 from label 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 430
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $530unary_negative.8 = unary(fn=<built-in function neg>, value=grad_d.4)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $534binary_multiply.10 = $530unary_negative.8 * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $536inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$526binary_subscr.6, rhs=$534binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: other[d] = $536inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='d' stmt=other[d] = $536inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 520
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 494 from label 520
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 430 from label 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 430
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 825
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 546
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A75140C48>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 548
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 548
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A75140C48>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $554binary_subscr.5 = getitem(value=epoch_of_next_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $560binary_subscr.8 = getitem(value=epochs_per_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $562inplace_add.9 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$554binary_subscr.5, rhs=$560binary_subscr.8, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_sample[i] = $562inplace_add.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $568load_global.10 = global(int: <class 'int'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $576binary_subscr.14 = getitem(value=epoch_of_next_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $578binary_subtract.15 = n - $576binary_subscr.14
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $584binary_subscr.18 = getitem(value=epochs_per_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $586binary_true_divide.19 = $578binary_subtract.15 / $584binary_subscr.18
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: n_neg_samples = call $568load_global.10($586binary_true_divide.19, func=$568load_global.10, args=[Var($586binary_true_divide.19, layouts.py:155)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 592
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 592
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A75140C48>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $594load_global.1 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $598call_function.3 = call $594load_global.1(n_neg_samples, func=$594load_global.1, args=[Var(n_neg_samples, layouts.py:155)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $600get_iter.4 = getiter(value=$598call_function.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi602.1 = $600get_iter.4
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 602
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 602
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A75140C48>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $602for_iter.2 = iternext(value=$phi602.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $602for_iter.3 = pair_first(value=$602for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $602for_iter.4 = pair_second(value=$602for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi604.2 = $602for_iter.3
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $602for_iter.4, 604, 794
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 604
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A75140C48>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: p = $phi604.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $606load_global.3 = global(tau_rand_int: CPUDispatcher(<function tau_rand_int at 0x0000015A705D4A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $610call_function.5 = call $606load_global.3(rng_state, func=$606load_global.3, args=[Var(rng_state, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: k.1 = $610call_function.5 % n_vertices
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: other = getitem(value=tail_embedding, index=k.1, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $626load_global.11 = global(rdist: CPUDispatcher(<function rdist at 0x0000015A711E8AF8>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dist_squared.1 = call $626load_global.11(current, other, func=$626load_global.11, args=[Var(current, layouts.py:95), Var(other, layouts.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const638.16 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $640compare_op.17 = dist_squared.1 > $const638.16
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool642 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $642pred = call bool642($640compare_op.17, func=bool642, args=(Var($640compare_op.17, layouts.py:165),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $642pred, 646, 690
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 646
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A75140C48>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const646.2 = const(float, 2.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $650binary_multiply.4 = $const646.2 * gamma
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $650binary_multiply.4 * b
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const660.8 = const(float, 0.001)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $664binary_add.10 = $const660.8 + dist_squared.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $668load_global.12 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $674call_function.15 = call $668load_global.12(dist_squared.1, b, func=$668load_global.12, args=[Var(dist_squared.1, layouts.py:163), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $676binary_multiply.16 = a * $674call_function.15
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const678.17 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $680binary_add.18 = $676binary_multiply.16 + $const678.17
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $682binary_multiply.19 = $664binary_add.10 * $680binary_add.18
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $684inplace_true_divide.20 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=grad_coeff, rhs=$682binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $684inplace_true_divide.20
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 690
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A75140C48>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $694compare_op.4 = j == k.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool696 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $696pred = call bool696($694compare_op.4, func=bool696, args=(Var($694compare_op.4, layouts.py:170),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $696pred, 700, 706
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 700
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A75140C48>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 826
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 706
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A75140C48>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A75140C48>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $712load_global.2 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $716call_function.4 = call $712load_global.2(dim, func=$712load_global.2, args=[Var(dim, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $718get_iter.5 = getiter(value=$716call_function.4)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi720.2 = $718get_iter.5
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A75140C48>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $720for_iter.3 = iternext(value=$phi720.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $720for_iter.4 = pair_first(value=$720for_iter.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $720for_iter.5 = pair_second(value=$720for_iter.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi722.3 = $720for_iter.4
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $720for_iter.5, 722, 788
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 722
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A75140C48>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: d.1 = $phi722.3
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const726.5 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $728compare_op.6 = grad_coeff > $const726.5
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool730 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $730pred = call bool730($728compare_op.6, func=bool730, args=(Var($728compare_op.6, layouts.py:176),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $730pred, 734, 760
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 734
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A75140C48>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $734load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $742binary_subscr.7 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='d' stmt=$742binary_subscr.7 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 734
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 722 from label 734
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 722
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG replaced with: $742binary_subscr.7 = getitem(value=current, index=d.1, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $748binary_subscr.10 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='d' stmt=$748binary_subscr.10 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 734
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 722 from label 734
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 722
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG replaced with: $748binary_subscr.10 = getitem(value=other, index=d.1, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $750binary_subtract.11 = $742binary_subscr.7 - $748binary_subscr.10
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $752binary_multiply.12 = grad_coeff * $750binary_subtract.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.2 = call $734load_global.3($752binary_multiply.12, func=$734load_global.3, args=[Var($752binary_multiply.12, layouts.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 760
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A75140C48>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.3 = const(float, 4.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A75140C48>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.5 = phi(incoming_values=[Var(grad_d.3, layouts.py:179), Var(grad_d.2, layouts.py:177)], incoming_blocks=[760, 734])
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $770binary_subscr.7 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='d' stmt=$770binary_subscr.7 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 722 from label 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 722
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG replaced with: $770binary_subscr.7 = getitem(value=current, index=d.1, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $776binary_multiply.10 = grad_d.5 * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $778inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$770binary_subscr.7, rhs=$776binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: current[d] = $778inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='d' stmt=current[d] = $778inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 722 from label 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 722
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG replaced with: current[d.1] = $778inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 788
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A75140C48>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 790
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 790
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A75140C48>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 826
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 794
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A75140C48>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 796
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 796
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A75140C48>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $802binary_subscr.5 = getitem(value=epoch_of_next_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $810binary_subscr.9 = getitem(value=epochs_per_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $812binary_multiply.10 = n_neg_samples * $810binary_subscr.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $814inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$802binary_subscr.5, rhs=$812binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_negative_sample[i] = $814inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 827
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 822
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A75140C48>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 824
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 824
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A75140C48>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const824.0 = const(NoneType, None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $826return_value.1 = cast(value=$const824.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: return $826return_value.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 825
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A75140C48>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 826
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A75140C48>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 602
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 827
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A75140C48>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Fix SSA violator on var other
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75167A08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: head_embedding = arg(0, name=head_embedding)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: tail_embedding = arg(1, name=tail_embedding)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: head = arg(2, name=head)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: tail = arg(3, name=tail)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: n_vertices = arg(4, name=n_vertices)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epochs_per_sample = arg(5, name=epochs_per_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: a = arg(6, name=a)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: b = arg(7, name=b)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: rng_state = arg(8, name=rng_state)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: gamma = arg(9, name=gamma)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dim = arg(10, name=dim)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: move_other = arg(11, name=move_other)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: alpha = arg(12, name=alpha)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epochs_per_negative_sample = arg(13, name=epochs_per_negative_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_negative_sample = arg(14, name=epoch_of_next_negative_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_sample = arg(15, name=epoch_of_next_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: n = arg(16, name=n)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: densmap_flag = arg(17, name=densmap_flag)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_phi_sum = arg(18, name=dens_phi_sum)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_sum = arg(19, name=dens_re_sum)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_cov = arg(20, name=dens_re_cov)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_std = arg(21, name=dens_re_std)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_mean = arg(22, name=dens_re_mean)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_lambda = arg(23, name=dens_lambda)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_R = arg(24, name=dens_R)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_mu = arg(25, name=dens_mu)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_mu_tot = arg(26, name=dens_mu_tot)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75167A08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $6load_global.0 = global(numba: <module 'numba' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numba\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $8load_method.1 = getattr(value=$6load_global.0, attr=prange)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $12load_attr.3 = getattr(value=epochs_per_sample, attr=shape)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const14.4 = const(int, 0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $16binary_subscr.5 = static_getitem(value=$12load_attr.3, index=0, index_var=$const14.4, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $18call_method.6 = call $8load_method.1($16binary_subscr.5, func=$8load_method.1, args=[Var($16binary_subscr.5, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $20get_iter.7 = getiter(value=$18call_method.6)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi22.0 = $20get_iter.7
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75167A08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $22for_iter.1 = iternext(value=$phi22.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi26.1 = $22for_iter.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $22for_iter.3, 26, 822
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 26
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75167A08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: i = $phi26.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $32binary_subscr.4 = getitem(value=epoch_of_next_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $36compare_op.6 = $32binary_subscr.4 <= n
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool38 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $38pred = call bool38($36compare_op.6, func=bool38, args=(Var($36compare_op.6, layouts.py:91),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $38pred, 40, 827
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 40
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75167A08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: j = getitem(value=head, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: k = getitem(value=tail, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: current = getitem(value=head_embedding, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: other = getitem(value=tail_embedding, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG first assign: other
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG replaced with: other = getitem(value=tail_embedding, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $72load_global.13 = global(rdist: CPUDispatcher(<function rdist at 0x0000015A711E8AF8>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dist_squared = call $72load_global.13(current, other, func=$72load_global.13, args=[Var(current, layouts.py:95), Var(other, layouts.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool84 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $84pred = call bool84(densmap_flag, func=bool84, args=(Var(densmap_flag, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $84pred, 88, 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 88
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75167A08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const88.1 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const90.2 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $94load_global.4 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $100call_function.7 = call $94load_global.4(dist_squared, b, func=$94load_global.4, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $102binary_multiply.8 = a * $100call_function.7
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $104binary_add.9 = $const90.2 + $102binary_multiply.8
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: phi = $const88.1 / $104binary_add.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $114binary_multiply.13 = a * b
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $116load_global.14 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const122.17 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $124binary_subtract.18 = b - $const122.17
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $126call_function.19 = call $116load_global.14(dist_squared, $124binary_subtract.18, func=$116load_global.14, args=[Var(dist_squared, layouts.py:98), Var($124binary_subtract.18, layouts.py:103)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $128binary_multiply.20 = $114binary_multiply.13 * $126call_function.19
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const130.21 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $134load_global.23 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $140call_function.26 = call $134load_global.23(dist_squared, b, func=$134load_global.23, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $142binary_multiply.27 = a * $140call_function.26
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $144binary_add.28 = $const130.21 + $142binary_multiply.27
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dphi_term = $128binary_multiply.20 / $144binary_add.28
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $156binary_subscr.33 = getitem(value=dens_phi_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: q_jk = phi / $156binary_subscr.33
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $168binary_subscr.38 = getitem(value=dens_phi_sum, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: q_kj = phi / $168binary_subscr.38
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const176.41 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const180.43 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $184binary_subtract.45 = $const180.43 - phi
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $186binary_multiply.46 = b * $184binary_subtract.45
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $188binary_subtract.47 = $const176.41 - $186binary_multiply.46
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $190load_global.48 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $192load_method.49 = getattr(value=$190load_global.48, attr=exp)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $198binary_subscr.52 = getitem(value=dens_re_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $200call_method.53 = call $192load_method.49($198binary_subscr.52, func=$192load_method.49, args=[Var($198binary_subscr.52, layouts.py:110)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $202binary_true_divide.54 = $188binary_subtract.47 / $200call_method.53
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $206binary_add.56 = $202binary_true_divide.54 + dphi_term
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: drk = q_jk * $206binary_add.56
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const214.59 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const218.61 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $222binary_subtract.63 = $const218.61 - phi
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $224binary_multiply.64 = b * $222binary_subtract.63
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $226binary_subtract.65 = $const214.59 - $224binary_multiply.64
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $228load_global.66 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $230load_method.67 = getattr(value=$228load_global.66, attr=exp)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $236binary_subscr.70 = getitem(value=dens_re_sum, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $238call_method.71 = call $230load_method.67($236binary_subscr.70, func=$230load_method.67, args=[Var($236binary_subscr.70, layouts.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $240binary_true_divide.72 = $226binary_subtract.65 / $238call_method.71
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $244binary_add.74 = $240binary_true_divide.72 + dphi_term
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: drj = q_kj * $244binary_add.74
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: re_std_sq = dens_re_std * dens_re_std
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $262binary_subscr.81 = getitem(value=dens_R, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $270binary_subscr.85 = getitem(value=dens_re_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $274binary_subtract.87 = $270binary_subscr.85 - dens_re_mean
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $276binary_multiply.88 = dens_re_cov * $274binary_subtract.87
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $280binary_true_divide.90 = $276binary_multiply.88 / re_std_sq
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: weight_k = $262binary_subscr.81 - $280binary_true_divide.90
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $290binary_subscr.94 = getitem(value=dens_R, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $298binary_subscr.98 = getitem(value=dens_re_sum, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $302binary_subtract.100 = $298binary_subscr.98 - dens_re_mean
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $304binary_multiply.101 = dens_re_cov * $302binary_subtract.100
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $308binary_true_divide.103 = $304binary_multiply.101 / re_std_sq
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: weight_j = $290binary_subscr.94 - $308binary_true_divide.103
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $318binary_multiply.107 = dens_lambda * dens_mu_tot
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $324binary_multiply.110 = weight_k * drk
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $330binary_multiply.113 = weight_j * drj
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $332binary_add.114 = $324binary_multiply.110 + $330binary_multiply.113
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $334binary_multiply.115 = $318binary_multiply.107 * $332binary_add.114
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $340binary_subscr.118 = getitem(value=dens_mu, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $344binary_multiply.120 = $340binary_subscr.118 * dens_re_std
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $346binary_true_divide.121 = $334binary_multiply.115 / $344binary_multiply.120
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_cor_coeff = $346binary_true_divide.121 / n_vertices
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75167A08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const356.2 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $358compare_op.3 = dist_squared > $const356.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool360 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $360pred = call bool360($358compare_op.3, func=bool360, args=(Var($358compare_op.3, layouts.py:134),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $360pred, 364, 414
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 364
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75167A08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const364.1 = const(float, -2.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $368binary_multiply.3 = $const364.1 * a
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $372binary_multiply.5 = $368binary_multiply.3 * b
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $374load_global.6 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const380.9 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $382binary_subtract.10 = b - $const380.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $384call_function.11 = call $374load_global.6(dist_squared, $382binary_subtract.10, func=$374load_global.6, args=[Var(dist_squared, layouts.py:98), Var($382binary_subtract.10, layouts.py:135)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $372binary_multiply.5 * $384call_function.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $394load_global.15 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $400call_function.18 = call $394load_global.15(dist_squared, b, func=$394load_global.15, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $402binary_multiply.19 = a * $400call_function.18
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const404.20 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $406binary_add.21 = $402binary_multiply.19 + $const404.20
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $408inplace_true_divide.22 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=grad_coeff, rhs=$406binary_add.21, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $408inplace_true_divide.22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 414
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75167A08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75167A08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $420load_global.1 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $424call_function.3 = call $420load_global.1(dim, func=$420load_global.1, args=[Var(dim, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $426get_iter.4 = getiter(value=$424call_function.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi428.1 = $426get_iter.4
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75167A08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $428for_iter.2 = iternext(value=$phi428.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $428for_iter.3 = pair_first(value=$428for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $428for_iter.4 = pair_second(value=$428for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi430.2 = $428for_iter.3
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $428for_iter.4, 430, 546
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 430
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75167A08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: d = $phi430.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $432load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $440binary_subscr.7 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $446binary_subscr.10 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $448binary_subtract.11 = $440binary_subscr.7 - $446binary_subscr.10
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $450binary_multiply.12 = grad_coeff * $448binary_subtract.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d = call $432load_global.3($450binary_multiply.12, func=$432load_global.3, args=[Var($450binary_multiply.12, layouts.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool458 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $458pred = call bool458(densmap_flag, func=bool458, args=(Var(densmap_flag, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $458pred, 462, 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 462
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75167A08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $464load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const466.4 = const(int, 2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $470binary_multiply.6 = $const466.4 * grad_cor_coeff
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $476binary_subscr.9 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $482binary_subscr.12 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $484binary_subtract.13 = $476binary_subscr.9 - $482binary_subscr.12
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $486binary_multiply.14 = $470binary_multiply.6 * $484binary_subtract.13
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $488call_function.15 = call $464load_global.3($486binary_multiply.14, func=$464load_global.3, args=[Var($486binary_multiply.14, layouts.py:146)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $490inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=grad_d, rhs=$488call_function.15, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.1 = $490inplace_add.16
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75167A08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.4 = phi(incoming_values=[Var(grad_d.1, layouts.py:146), Var(grad_d, layouts.py:141)], incoming_blocks=[462, 430])
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $500binary_subscr.6 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $506binary_multiply.9 = grad_d.4 * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $508inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$500binary_subscr.6, rhs=$506binary_multiply.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: current[d] = $508inplace_add.10
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool516 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $516pred = call bool516(move_other, func=bool516, args=(Var(move_other, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $516pred, 520, 825
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 520
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75167A08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $526binary_subscr.6 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $530unary_negative.8 = unary(fn=<built-in function neg>, value=grad_d.4)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $534binary_multiply.10 = $530unary_negative.8 * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $536inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$526binary_subscr.6, rhs=$534binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: other[d] = $536inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 825
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 546
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75167A08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 548
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 548
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75167A08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $554binary_subscr.5 = getitem(value=epoch_of_next_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $560binary_subscr.8 = getitem(value=epochs_per_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $562inplace_add.9 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$554binary_subscr.5, rhs=$560binary_subscr.8, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_sample[i] = $562inplace_add.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $568load_global.10 = global(int: <class 'int'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $576binary_subscr.14 = getitem(value=epoch_of_next_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $578binary_subtract.15 = n - $576binary_subscr.14
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $584binary_subscr.18 = getitem(value=epochs_per_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $586binary_true_divide.19 = $578binary_subtract.15 / $584binary_subscr.18
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: n_neg_samples = call $568load_global.10($586binary_true_divide.19, func=$568load_global.10, args=[Var($586binary_true_divide.19, layouts.py:155)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 592
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 592
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75167A08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $594load_global.1 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $598call_function.3 = call $594load_global.1(n_neg_samples, func=$594load_global.1, args=[Var(n_neg_samples, layouts.py:155)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $600get_iter.4 = getiter(value=$598call_function.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi602.1 = $600get_iter.4
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 602
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 602
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75167A08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $602for_iter.2 = iternext(value=$phi602.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $602for_iter.3 = pair_first(value=$602for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $602for_iter.4 = pair_second(value=$602for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi604.2 = $602for_iter.3
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $602for_iter.4, 604, 794
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 604
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75167A08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: p = $phi604.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $606load_global.3 = global(tau_rand_int: CPUDispatcher(<function tau_rand_int at 0x0000015A705D4A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $610call_function.5 = call $606load_global.3(rng_state, func=$606load_global.3, args=[Var(rng_state, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: k.1 = $610call_function.5 % n_vertices
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: other = getitem(value=tail_embedding, index=k.1, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG replaced with: other.1 = getitem(value=tail_embedding, index=k.1, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $626load_global.11 = global(rdist: CPUDispatcher(<function rdist at 0x0000015A711E8AF8>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dist_squared.1 = call $626load_global.11(current, other, func=$626load_global.11, args=[Var(current, layouts.py:95), Var(other, layouts.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const638.16 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $640compare_op.17 = dist_squared.1 > $const638.16
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool642 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $642pred = call bool642($640compare_op.17, func=bool642, args=(Var($640compare_op.17, layouts.py:165),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $642pred, 646, 690
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 646
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75167A08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const646.2 = const(float, 2.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $650binary_multiply.4 = $const646.2 * gamma
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $650binary_multiply.4 * b
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const660.8 = const(float, 0.001)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $664binary_add.10 = $const660.8 + dist_squared.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $668load_global.12 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $674call_function.15 = call $668load_global.12(dist_squared.1, b, func=$668load_global.12, args=[Var(dist_squared.1, layouts.py:163), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $676binary_multiply.16 = a * $674call_function.15
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const678.17 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $680binary_add.18 = $676binary_multiply.16 + $const678.17
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $682binary_multiply.19 = $664binary_add.10 * $680binary_add.18
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $684inplace_true_divide.20 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=grad_coeff, rhs=$682binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $684inplace_true_divide.20
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 690
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75167A08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $694compare_op.4 = j == k.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool696 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $696pred = call bool696($694compare_op.4, func=bool696, args=(Var($694compare_op.4, layouts.py:170),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $696pred, 700, 706
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 700
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75167A08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 826
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 706
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75167A08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75167A08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $712load_global.2 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $716call_function.4 = call $712load_global.2(dim, func=$712load_global.2, args=[Var(dim, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $718get_iter.5 = getiter(value=$716call_function.4)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi720.2 = $718get_iter.5
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75167A08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $720for_iter.3 = iternext(value=$phi720.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $720for_iter.4 = pair_first(value=$720for_iter.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $720for_iter.5 = pair_second(value=$720for_iter.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi722.3 = $720for_iter.4
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $720for_iter.5, 722, 788
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 722
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75167A08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: d.1 = $phi722.3
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const726.5 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $728compare_op.6 = grad_coeff > $const726.5
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool730 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $730pred = call bool730($728compare_op.6, func=bool730, args=(Var($728compare_op.6, layouts.py:176),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $730pred, 734, 760
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 734
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75167A08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $734load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $742binary_subscr.7 = getitem(value=current, index=d.1, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $748binary_subscr.10 = getitem(value=other, index=d.1, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $750binary_subtract.11 = $742binary_subscr.7 - $748binary_subscr.10
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $752binary_multiply.12 = grad_coeff * $750binary_subtract.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.2 = call $734load_global.3($752binary_multiply.12, func=$734load_global.3, args=[Var($752binary_multiply.12, layouts.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 760
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75167A08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.3 = const(float, 4.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75167A08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.5 = phi(incoming_values=[Var(grad_d.3, layouts.py:179), Var(grad_d.2, layouts.py:177)], incoming_blocks=[760, 734])
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $770binary_subscr.7 = getitem(value=current, index=d.1, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $776binary_multiply.10 = grad_d.5 * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $778inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$770binary_subscr.7, rhs=$776binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: current[d.1] = $778inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 788
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75167A08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 790
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 790
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75167A08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 826
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 794
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75167A08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 796
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 796
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75167A08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $802binary_subscr.5 = getitem(value=epoch_of_next_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $810binary_subscr.9 = getitem(value=epochs_per_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $812binary_multiply.10 = n_neg_samples * $810binary_subscr.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $814inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$802binary_subscr.5, rhs=$812binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_negative_sample[i] = $814inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 827
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 822
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75167A08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 824
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 824
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75167A08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const824.0 = const(NoneType, None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $826return_value.1 = cast(value=$const824.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: return $826return_value.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 825
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75167A08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 826
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75167A08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 602
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 827
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A75167A08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {40: [<numba.core.ir.Assign object at 0x0000015A751670C8>],
             604: [<numba.core.ir.Assign object at 0x0000015A75164FC8>]})
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A4E4CD3C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: head_embedding = arg(0, name=head_embedding)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: tail_embedding = arg(1, name=tail_embedding)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: head = arg(2, name=head)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: tail = arg(3, name=tail)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: n_vertices = arg(4, name=n_vertices)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epochs_per_sample = arg(5, name=epochs_per_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: a = arg(6, name=a)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: b = arg(7, name=b)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: rng_state = arg(8, name=rng_state)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: gamma = arg(9, name=gamma)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dim = arg(10, name=dim)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: move_other = arg(11, name=move_other)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: alpha = arg(12, name=alpha)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epochs_per_negative_sample = arg(13, name=epochs_per_negative_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_negative_sample = arg(14, name=epoch_of_next_negative_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_sample = arg(15, name=epoch_of_next_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: n = arg(16, name=n)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: densmap_flag = arg(17, name=densmap_flag)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_phi_sum = arg(18, name=dens_phi_sum)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_sum = arg(19, name=dens_re_sum)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_cov = arg(20, name=dens_re_cov)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_std = arg(21, name=dens_re_std)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_mean = arg(22, name=dens_re_mean)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_lambda = arg(23, name=dens_lambda)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_R = arg(24, name=dens_R)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_mu = arg(25, name=dens_mu)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_mu_tot = arg(26, name=dens_mu_tot)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A4E4CD3C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $6load_global.0 = global(numba: <module 'numba' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numba\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $8load_method.1 = getattr(value=$6load_global.0, attr=prange)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $12load_attr.3 = getattr(value=epochs_per_sample, attr=shape)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const14.4 = const(int, 0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $16binary_subscr.5 = static_getitem(value=$12load_attr.3, index=0, index_var=$const14.4, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $18call_method.6 = call $8load_method.1($16binary_subscr.5, func=$8load_method.1, args=[Var($16binary_subscr.5, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $20get_iter.7 = getiter(value=$18call_method.6)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi22.0 = $20get_iter.7
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A4E4CD3C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $22for_iter.1 = iternext(value=$phi22.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi26.1 = $22for_iter.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $22for_iter.3, 26, 822
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 26
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A4E4CD3C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: i = $phi26.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $32binary_subscr.4 = getitem(value=epoch_of_next_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $36compare_op.6 = $32binary_subscr.4 <= n
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool38 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $38pred = call bool38($36compare_op.6, func=bool38, args=(Var($36compare_op.6, layouts.py:91),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $38pred, 40, 827
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 40
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A4E4CD3C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: j = getitem(value=head, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: k = getitem(value=tail, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: current = getitem(value=head_embedding, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: other = getitem(value=tail_embedding, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $72load_global.13 = global(rdist: CPUDispatcher(<function rdist at 0x0000015A711E8AF8>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dist_squared = call $72load_global.13(current, other, func=$72load_global.13, args=[Var(current, layouts.py:95), Var(other, layouts.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='other' stmt=dist_squared = call $72load_global.13(current, other, func=$72load_global.13, args=[Var(current, layouts.py:95), Var(other, layouts.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool84 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $84pred = call bool84(densmap_flag, func=bool84, args=(Var(densmap_flag, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $84pred, 88, 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 88
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A4E4CD3C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const88.1 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const90.2 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $94load_global.4 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $100call_function.7 = call $94load_global.4(dist_squared, b, func=$94load_global.4, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $102binary_multiply.8 = a * $100call_function.7
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $104binary_add.9 = $const90.2 + $102binary_multiply.8
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: phi = $const88.1 / $104binary_add.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $114binary_multiply.13 = a * b
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $116load_global.14 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const122.17 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $124binary_subtract.18 = b - $const122.17
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $126call_function.19 = call $116load_global.14(dist_squared, $124binary_subtract.18, func=$116load_global.14, args=[Var(dist_squared, layouts.py:98), Var($124binary_subtract.18, layouts.py:103)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $128binary_multiply.20 = $114binary_multiply.13 * $126call_function.19
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const130.21 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $134load_global.23 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $140call_function.26 = call $134load_global.23(dist_squared, b, func=$134load_global.23, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $142binary_multiply.27 = a * $140call_function.26
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $144binary_add.28 = $const130.21 + $142binary_multiply.27
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dphi_term = $128binary_multiply.20 / $144binary_add.28
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $156binary_subscr.33 = getitem(value=dens_phi_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: q_jk = phi / $156binary_subscr.33
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $168binary_subscr.38 = getitem(value=dens_phi_sum, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: q_kj = phi / $168binary_subscr.38
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const176.41 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const180.43 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $184binary_subtract.45 = $const180.43 - phi
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $186binary_multiply.46 = b * $184binary_subtract.45
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $188binary_subtract.47 = $const176.41 - $186binary_multiply.46
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $190load_global.48 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $192load_method.49 = getattr(value=$190load_global.48, attr=exp)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $198binary_subscr.52 = getitem(value=dens_re_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $200call_method.53 = call $192load_method.49($198binary_subscr.52, func=$192load_method.49, args=[Var($198binary_subscr.52, layouts.py:110)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $202binary_true_divide.54 = $188binary_subtract.47 / $200call_method.53
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $206binary_add.56 = $202binary_true_divide.54 + dphi_term
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: drk = q_jk * $206binary_add.56
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const214.59 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const218.61 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $222binary_subtract.63 = $const218.61 - phi
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $224binary_multiply.64 = b * $222binary_subtract.63
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $226binary_subtract.65 = $const214.59 - $224binary_multiply.64
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $228load_global.66 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $230load_method.67 = getattr(value=$228load_global.66, attr=exp)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $236binary_subscr.70 = getitem(value=dens_re_sum, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $238call_method.71 = call $230load_method.67($236binary_subscr.70, func=$230load_method.67, args=[Var($236binary_subscr.70, layouts.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $240binary_true_divide.72 = $226binary_subtract.65 / $238call_method.71
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $244binary_add.74 = $240binary_true_divide.72 + dphi_term
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: drj = q_kj * $244binary_add.74
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: re_std_sq = dens_re_std * dens_re_std
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $262binary_subscr.81 = getitem(value=dens_R, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $270binary_subscr.85 = getitem(value=dens_re_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $274binary_subtract.87 = $270binary_subscr.85 - dens_re_mean
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $276binary_multiply.88 = dens_re_cov * $274binary_subtract.87
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $280binary_true_divide.90 = $276binary_multiply.88 / re_std_sq
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: weight_k = $262binary_subscr.81 - $280binary_true_divide.90
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $290binary_subscr.94 = getitem(value=dens_R, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $298binary_subscr.98 = getitem(value=dens_re_sum, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $302binary_subtract.100 = $298binary_subscr.98 - dens_re_mean
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $304binary_multiply.101 = dens_re_cov * $302binary_subtract.100
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $308binary_true_divide.103 = $304binary_multiply.101 / re_std_sq
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: weight_j = $290binary_subscr.94 - $308binary_true_divide.103
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $318binary_multiply.107 = dens_lambda * dens_mu_tot
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $324binary_multiply.110 = weight_k * drk
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $330binary_multiply.113 = weight_j * drj
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $332binary_add.114 = $324binary_multiply.110 + $330binary_multiply.113
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $334binary_multiply.115 = $318binary_multiply.107 * $332binary_add.114
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $340binary_subscr.118 = getitem(value=dens_mu, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $344binary_multiply.120 = $340binary_subscr.118 * dens_re_std
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $346binary_true_divide.121 = $334binary_multiply.115 / $344binary_multiply.120
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_cor_coeff = $346binary_true_divide.121 / n_vertices
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A4E4CD3C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const356.2 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $358compare_op.3 = dist_squared > $const356.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool360 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $360pred = call bool360($358compare_op.3, func=bool360, args=(Var($358compare_op.3, layouts.py:134),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $360pred, 364, 414
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 364
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A4E4CD3C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const364.1 = const(float, -2.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $368binary_multiply.3 = $const364.1 * a
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $372binary_multiply.5 = $368binary_multiply.3 * b
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $374load_global.6 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const380.9 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $382binary_subtract.10 = b - $const380.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $384call_function.11 = call $374load_global.6(dist_squared, $382binary_subtract.10, func=$374load_global.6, args=[Var(dist_squared, layouts.py:98), Var($382binary_subtract.10, layouts.py:135)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $372binary_multiply.5 * $384call_function.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $394load_global.15 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $400call_function.18 = call $394load_global.15(dist_squared, b, func=$394load_global.15, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $402binary_multiply.19 = a * $400call_function.18
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const404.20 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $406binary_add.21 = $402binary_multiply.19 + $const404.20
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $408inplace_true_divide.22 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=grad_coeff, rhs=$406binary_add.21, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $408inplace_true_divide.22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 414
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A4E4CD3C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A4E4CD3C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $420load_global.1 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $424call_function.3 = call $420load_global.1(dim, func=$420load_global.1, args=[Var(dim, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $426get_iter.4 = getiter(value=$424call_function.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi428.1 = $426get_iter.4
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A4E4CD3C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $428for_iter.2 = iternext(value=$phi428.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $428for_iter.3 = pair_first(value=$428for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $428for_iter.4 = pair_second(value=$428for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi430.2 = $428for_iter.3
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $428for_iter.4, 430, 546
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 430
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A4E4CD3C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: d = $phi430.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $432load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $440binary_subscr.7 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $446binary_subscr.10 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='other' stmt=$446binary_subscr.10 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 430
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 428 from label 430
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 418 from label 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 354 from label 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 40 from label 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 40
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $448binary_subtract.11 = $440binary_subscr.7 - $446binary_subscr.10
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $450binary_multiply.12 = grad_coeff * $448binary_subtract.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d = call $432load_global.3($450binary_multiply.12, func=$432load_global.3, args=[Var($450binary_multiply.12, layouts.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool458 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $458pred = call bool458(densmap_flag, func=bool458, args=(Var(densmap_flag, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $458pred, 462, 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 462
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A4E4CD3C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $464load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const466.4 = const(int, 2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $470binary_multiply.6 = $const466.4 * grad_cor_coeff
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $476binary_subscr.9 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $482binary_subscr.12 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='other' stmt=$482binary_subscr.12 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 462
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 430 from label 462
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 430
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 430
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 428 from label 430
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 418 from label 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 354 from label 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 40 from label 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 40
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $484binary_subtract.13 = $476binary_subscr.9 - $482binary_subscr.12
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $486binary_multiply.14 = $470binary_multiply.6 * $484binary_subtract.13
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $488call_function.15 = call $464load_global.3($486binary_multiply.14, func=$464load_global.3, args=[Var($486binary_multiply.14, layouts.py:146)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $490inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=grad_d, rhs=$488call_function.15, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.1 = $490inplace_add.16
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A4E4CD3C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.4 = phi(incoming_values=[Var(grad_d.1, layouts.py:146), Var(grad_d, layouts.py:141)], incoming_blocks=[462, 430])
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $500binary_subscr.6 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $506binary_multiply.9 = grad_d.4 * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $508inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$500binary_subscr.6, rhs=$506binary_multiply.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: current[d] = $508inplace_add.10
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool516 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $516pred = call bool516(move_other, func=bool516, args=(Var(move_other, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $516pred, 520, 825
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 520
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A4E4CD3C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $526binary_subscr.6 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='other' stmt=$526binary_subscr.6 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 520
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 494 from label 520
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 430 from label 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 430
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 430
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 428 from label 430
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 418 from label 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 354 from label 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 40 from label 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 40
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $530unary_negative.8 = unary(fn=<built-in function neg>, value=grad_d.4)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $534binary_multiply.10 = $530unary_negative.8 * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $536inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$526binary_subscr.6, rhs=$534binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: other[d] = $536inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='other' stmt=other[d] = $536inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 520
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 494 from label 520
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 430 from label 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 430
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 430
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 428 from label 430
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 418 from label 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 354 from label 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 40 from label 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 40
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 825
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 546
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A4E4CD3C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 548
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 548
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A4E4CD3C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $554binary_subscr.5 = getitem(value=epoch_of_next_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $560binary_subscr.8 = getitem(value=epochs_per_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $562inplace_add.9 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$554binary_subscr.5, rhs=$560binary_subscr.8, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_sample[i] = $562inplace_add.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $568load_global.10 = global(int: <class 'int'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $576binary_subscr.14 = getitem(value=epoch_of_next_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $578binary_subtract.15 = n - $576binary_subscr.14
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $584binary_subscr.18 = getitem(value=epochs_per_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $586binary_true_divide.19 = $578binary_subtract.15 / $584binary_subscr.18
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: n_neg_samples = call $568load_global.10($586binary_true_divide.19, func=$568load_global.10, args=[Var($586binary_true_divide.19, layouts.py:155)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 592
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 592
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A4E4CD3C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $594load_global.1 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $598call_function.3 = call $594load_global.1(n_neg_samples, func=$594load_global.1, args=[Var(n_neg_samples, layouts.py:155)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $600get_iter.4 = getiter(value=$598call_function.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi602.1 = $600get_iter.4
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 602
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 602
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A4E4CD3C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $602for_iter.2 = iternext(value=$phi602.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $602for_iter.3 = pair_first(value=$602for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $602for_iter.4 = pair_second(value=$602for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi604.2 = $602for_iter.3
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $602for_iter.4, 604, 794
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 604
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A4E4CD3C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: p = $phi604.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $606load_global.3 = global(tau_rand_int: CPUDispatcher(<function tau_rand_int at 0x0000015A705D4A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $610call_function.5 = call $606load_global.3(rng_state, func=$606load_global.3, args=[Var(rng_state, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: k.1 = $610call_function.5 % n_vertices
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: other.1 = getitem(value=tail_embedding, index=k.1, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $626load_global.11 = global(rdist: CPUDispatcher(<function rdist at 0x0000015A711E8AF8>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dist_squared.1 = call $626load_global.11(current, other, func=$626load_global.11, args=[Var(current, layouts.py:95), Var(other, layouts.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='other' stmt=dist_squared.1 = call $626load_global.11(current, other, func=$626load_global.11, args=[Var(current, layouts.py:95), Var(other, layouts.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG replaced with: dist_squared.1 = call $626load_global.11(current, other.1, func=$626load_global.11, args=[Var(current, layouts.py:95), Var(other.1, layouts.py:161)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const638.16 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $640compare_op.17 = dist_squared.1 > $const638.16
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool642 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $642pred = call bool642($640compare_op.17, func=bool642, args=(Var($640compare_op.17, layouts.py:165),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $642pred, 646, 690
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 646
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A4E4CD3C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const646.2 = const(float, 2.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $650binary_multiply.4 = $const646.2 * gamma
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $650binary_multiply.4 * b
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const660.8 = const(float, 0.001)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $664binary_add.10 = $const660.8 + dist_squared.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $668load_global.12 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $674call_function.15 = call $668load_global.12(dist_squared.1, b, func=$668load_global.12, args=[Var(dist_squared.1, layouts.py:163), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $676binary_multiply.16 = a * $674call_function.15
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const678.17 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $680binary_add.18 = $676binary_multiply.16 + $const678.17
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $682binary_multiply.19 = $664binary_add.10 * $680binary_add.18
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $684inplace_true_divide.20 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=grad_coeff, rhs=$682binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $684inplace_true_divide.20
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 690
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A4E4CD3C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $694compare_op.4 = j == k.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool696 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $696pred = call bool696($694compare_op.4, func=bool696, args=(Var($694compare_op.4, layouts.py:170),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $696pred, 700, 706
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 700
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A4E4CD3C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 826
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 706
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A4E4CD3C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A4E4CD3C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $712load_global.2 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $716call_function.4 = call $712load_global.2(dim, func=$712load_global.2, args=[Var(dim, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $718get_iter.5 = getiter(value=$716call_function.4)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi720.2 = $718get_iter.5
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A4E4CD3C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $720for_iter.3 = iternext(value=$phi720.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $720for_iter.4 = pair_first(value=$720for_iter.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $720for_iter.5 = pair_second(value=$720for_iter.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi722.3 = $720for_iter.4
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $720for_iter.5, 722, 788
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 722
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A4E4CD3C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: d.1 = $phi722.3
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const726.5 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $728compare_op.6 = grad_coeff > $const726.5
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool730 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $730pred = call bool730($728compare_op.6, func=bool730, args=(Var($728compare_op.6, layouts.py:176),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $730pred, 734, 760
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 734
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A4E4CD3C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $734load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $742binary_subscr.7 = getitem(value=current, index=d.1, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $748binary_subscr.10 = getitem(value=other, index=d.1, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='other' stmt=$748binary_subscr.10 = getitem(value=other, index=d.1, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 734
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 722 from label 734
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 722
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 722
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 720 from label 722
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 710 from label 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 604 from label 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 604
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG replaced with: $748binary_subscr.10 = getitem(value=other.1, index=d.1, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $750binary_subtract.11 = $742binary_subscr.7 - $748binary_subscr.10
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $752binary_multiply.12 = grad_coeff * $750binary_subtract.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.2 = call $734load_global.3($752binary_multiply.12, func=$734load_global.3, args=[Var($752binary_multiply.12, layouts.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 760
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A4E4CD3C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.3 = const(float, 4.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A4E4CD3C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.5 = phi(incoming_values=[Var(grad_d.3, layouts.py:179), Var(grad_d.2, layouts.py:177)], incoming_blocks=[760, 734])
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $770binary_subscr.7 = getitem(value=current, index=d.1, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $776binary_multiply.10 = grad_d.5 * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $778inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$770binary_subscr.7, rhs=$776binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: current[d.1] = $778inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 788
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A4E4CD3C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 790
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 790
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A4E4CD3C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 826
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 794
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A4E4CD3C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 796
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 796
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A4E4CD3C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $802binary_subscr.5 = getitem(value=epoch_of_next_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $810binary_subscr.9 = getitem(value=epochs_per_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $812binary_multiply.10 = n_neg_samples * $810binary_subscr.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $814inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$802binary_subscr.5, rhs=$812binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_negative_sample[i] = $814inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 827
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 822
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A4E4CD3C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 824
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 824
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A4E4CD3C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const824.0 = const(NoneType, None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $826return_value.1 = cast(value=$const824.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: return $826return_value.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 825
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A4E4CD3C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 826
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A4E4CD3C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 602
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 827
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A4E4CD3C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Fix SSA violator on var grad_coeff
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A421A9F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: head_embedding = arg(0, name=head_embedding)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: tail_embedding = arg(1, name=tail_embedding)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: head = arg(2, name=head)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: tail = arg(3, name=tail)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: n_vertices = arg(4, name=n_vertices)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epochs_per_sample = arg(5, name=epochs_per_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: a = arg(6, name=a)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: b = arg(7, name=b)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: rng_state = arg(8, name=rng_state)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: gamma = arg(9, name=gamma)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dim = arg(10, name=dim)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: move_other = arg(11, name=move_other)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: alpha = arg(12, name=alpha)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epochs_per_negative_sample = arg(13, name=epochs_per_negative_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_negative_sample = arg(14, name=epoch_of_next_negative_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_sample = arg(15, name=epoch_of_next_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: n = arg(16, name=n)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: densmap_flag = arg(17, name=densmap_flag)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_phi_sum = arg(18, name=dens_phi_sum)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_sum = arg(19, name=dens_re_sum)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_cov = arg(20, name=dens_re_cov)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_std = arg(21, name=dens_re_std)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_mean = arg(22, name=dens_re_mean)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_lambda = arg(23, name=dens_lambda)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_R = arg(24, name=dens_R)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_mu = arg(25, name=dens_mu)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_mu_tot = arg(26, name=dens_mu_tot)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A421A9F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $6load_global.0 = global(numba: <module 'numba' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numba\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $8load_method.1 = getattr(value=$6load_global.0, attr=prange)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $12load_attr.3 = getattr(value=epochs_per_sample, attr=shape)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const14.4 = const(int, 0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $16binary_subscr.5 = static_getitem(value=$12load_attr.3, index=0, index_var=$const14.4, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $18call_method.6 = call $8load_method.1($16binary_subscr.5, func=$8load_method.1, args=[Var($16binary_subscr.5, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $20get_iter.7 = getiter(value=$18call_method.6)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi22.0 = $20get_iter.7
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A421A9F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $22for_iter.1 = iternext(value=$phi22.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi26.1 = $22for_iter.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $22for_iter.3, 26, 822
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 26
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A421A9F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: i = $phi26.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $32binary_subscr.4 = getitem(value=epoch_of_next_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $36compare_op.6 = $32binary_subscr.4 <= n
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool38 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $38pred = call bool38($36compare_op.6, func=bool38, args=(Var($36compare_op.6, layouts.py:91),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $38pred, 40, 827
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 40
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A421A9F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: j = getitem(value=head, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: k = getitem(value=tail, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: current = getitem(value=head_embedding, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: other = getitem(value=tail_embedding, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $72load_global.13 = global(rdist: CPUDispatcher(<function rdist at 0x0000015A711E8AF8>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dist_squared = call $72load_global.13(current, other, func=$72load_global.13, args=[Var(current, layouts.py:95), Var(other, layouts.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool84 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $84pred = call bool84(densmap_flag, func=bool84, args=(Var(densmap_flag, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $84pred, 88, 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 88
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A421A9F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const88.1 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const90.2 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $94load_global.4 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $100call_function.7 = call $94load_global.4(dist_squared, b, func=$94load_global.4, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $102binary_multiply.8 = a * $100call_function.7
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $104binary_add.9 = $const90.2 + $102binary_multiply.8
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: phi = $const88.1 / $104binary_add.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $114binary_multiply.13 = a * b
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $116load_global.14 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const122.17 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $124binary_subtract.18 = b - $const122.17
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $126call_function.19 = call $116load_global.14(dist_squared, $124binary_subtract.18, func=$116load_global.14, args=[Var(dist_squared, layouts.py:98), Var($124binary_subtract.18, layouts.py:103)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $128binary_multiply.20 = $114binary_multiply.13 * $126call_function.19
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const130.21 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $134load_global.23 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $140call_function.26 = call $134load_global.23(dist_squared, b, func=$134load_global.23, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $142binary_multiply.27 = a * $140call_function.26
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $144binary_add.28 = $const130.21 + $142binary_multiply.27
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dphi_term = $128binary_multiply.20 / $144binary_add.28
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $156binary_subscr.33 = getitem(value=dens_phi_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: q_jk = phi / $156binary_subscr.33
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $168binary_subscr.38 = getitem(value=dens_phi_sum, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: q_kj = phi / $168binary_subscr.38
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const176.41 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const180.43 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $184binary_subtract.45 = $const180.43 - phi
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $186binary_multiply.46 = b * $184binary_subtract.45
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $188binary_subtract.47 = $const176.41 - $186binary_multiply.46
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $190load_global.48 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $192load_method.49 = getattr(value=$190load_global.48, attr=exp)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $198binary_subscr.52 = getitem(value=dens_re_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $200call_method.53 = call $192load_method.49($198binary_subscr.52, func=$192load_method.49, args=[Var($198binary_subscr.52, layouts.py:110)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $202binary_true_divide.54 = $188binary_subtract.47 / $200call_method.53
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $206binary_add.56 = $202binary_true_divide.54 + dphi_term
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: drk = q_jk * $206binary_add.56
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const214.59 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const218.61 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $222binary_subtract.63 = $const218.61 - phi
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $224binary_multiply.64 = b * $222binary_subtract.63
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $226binary_subtract.65 = $const214.59 - $224binary_multiply.64
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $228load_global.66 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $230load_method.67 = getattr(value=$228load_global.66, attr=exp)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $236binary_subscr.70 = getitem(value=dens_re_sum, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $238call_method.71 = call $230load_method.67($236binary_subscr.70, func=$230load_method.67, args=[Var($236binary_subscr.70, layouts.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $240binary_true_divide.72 = $226binary_subtract.65 / $238call_method.71
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $244binary_add.74 = $240binary_true_divide.72 + dphi_term
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: drj = q_kj * $244binary_add.74
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: re_std_sq = dens_re_std * dens_re_std
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $262binary_subscr.81 = getitem(value=dens_R, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $270binary_subscr.85 = getitem(value=dens_re_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $274binary_subtract.87 = $270binary_subscr.85 - dens_re_mean
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $276binary_multiply.88 = dens_re_cov * $274binary_subtract.87
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $280binary_true_divide.90 = $276binary_multiply.88 / re_std_sq
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: weight_k = $262binary_subscr.81 - $280binary_true_divide.90
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $290binary_subscr.94 = getitem(value=dens_R, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $298binary_subscr.98 = getitem(value=dens_re_sum, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $302binary_subtract.100 = $298binary_subscr.98 - dens_re_mean
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $304binary_multiply.101 = dens_re_cov * $302binary_subtract.100
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $308binary_true_divide.103 = $304binary_multiply.101 / re_std_sq
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: weight_j = $290binary_subscr.94 - $308binary_true_divide.103
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $318binary_multiply.107 = dens_lambda * dens_mu_tot
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $324binary_multiply.110 = weight_k * drk
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $330binary_multiply.113 = weight_j * drj
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $332binary_add.114 = $324binary_multiply.110 + $330binary_multiply.113
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $334binary_multiply.115 = $318binary_multiply.107 * $332binary_add.114
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $340binary_subscr.118 = getitem(value=dens_mu, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $344binary_multiply.120 = $340binary_subscr.118 * dens_re_std
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $346binary_true_divide.121 = $334binary_multiply.115 / $344binary_multiply.120
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_cor_coeff = $346binary_true_divide.121 / n_vertices
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A421A9F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const356.2 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $358compare_op.3 = dist_squared > $const356.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool360 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $360pred = call bool360($358compare_op.3, func=bool360, args=(Var($358compare_op.3, layouts.py:134),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $360pred, 364, 414
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 364
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A421A9F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const364.1 = const(float, -2.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $368binary_multiply.3 = $const364.1 * a
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $372binary_multiply.5 = $368binary_multiply.3 * b
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $374load_global.6 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const380.9 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $382binary_subtract.10 = b - $const380.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $384call_function.11 = call $374load_global.6(dist_squared, $382binary_subtract.10, func=$374load_global.6, args=[Var(dist_squared, layouts.py:98), Var($382binary_subtract.10, layouts.py:135)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $372binary_multiply.5 * $384call_function.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG first assign: grad_coeff
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG replaced with: grad_coeff = $372binary_multiply.5 * $384call_function.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $394load_global.15 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $400call_function.18 = call $394load_global.15(dist_squared, b, func=$394load_global.15, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $402binary_multiply.19 = a * $400call_function.18
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const404.20 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $406binary_add.21 = $402binary_multiply.19 + $const404.20
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $408inplace_true_divide.22 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=grad_coeff, rhs=$406binary_add.21, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $408inplace_true_divide.22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG replaced with: grad_coeff.1 = $408inplace_true_divide.22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 414
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A421A9F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG replaced with: grad_coeff.2 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A421A9F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $420load_global.1 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $424call_function.3 = call $420load_global.1(dim, func=$420load_global.1, args=[Var(dim, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $426get_iter.4 = getiter(value=$424call_function.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi428.1 = $426get_iter.4
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A421A9F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $428for_iter.2 = iternext(value=$phi428.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $428for_iter.3 = pair_first(value=$428for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $428for_iter.4 = pair_second(value=$428for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi430.2 = $428for_iter.3
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $428for_iter.4, 430, 546
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 430
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A421A9F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: d = $phi430.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $432load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $440binary_subscr.7 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $446binary_subscr.10 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $448binary_subtract.11 = $440binary_subscr.7 - $446binary_subscr.10
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $450binary_multiply.12 = grad_coeff * $448binary_subtract.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d = call $432load_global.3($450binary_multiply.12, func=$432load_global.3, args=[Var($450binary_multiply.12, layouts.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool458 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $458pred = call bool458(densmap_flag, func=bool458, args=(Var(densmap_flag, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $458pred, 462, 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 462
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A421A9F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $464load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const466.4 = const(int, 2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $470binary_multiply.6 = $const466.4 * grad_cor_coeff
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $476binary_subscr.9 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $482binary_subscr.12 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $484binary_subtract.13 = $476binary_subscr.9 - $482binary_subscr.12
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $486binary_multiply.14 = $470binary_multiply.6 * $484binary_subtract.13
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $488call_function.15 = call $464load_global.3($486binary_multiply.14, func=$464load_global.3, args=[Var($486binary_multiply.14, layouts.py:146)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $490inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=grad_d, rhs=$488call_function.15, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.1 = $490inplace_add.16
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A421A9F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.4 = phi(incoming_values=[Var(grad_d.1, layouts.py:146), Var(grad_d, layouts.py:141)], incoming_blocks=[462, 430])
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $500binary_subscr.6 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $506binary_multiply.9 = grad_d.4 * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $508inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$500binary_subscr.6, rhs=$506binary_multiply.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: current[d] = $508inplace_add.10
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool516 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $516pred = call bool516(move_other, func=bool516, args=(Var(move_other, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $516pred, 520, 825
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 520
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A421A9F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $526binary_subscr.6 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $530unary_negative.8 = unary(fn=<built-in function neg>, value=grad_d.4)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $534binary_multiply.10 = $530unary_negative.8 * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $536inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$526binary_subscr.6, rhs=$534binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: other[d] = $536inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 825
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 546
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A421A9F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 548
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 548
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A421A9F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $554binary_subscr.5 = getitem(value=epoch_of_next_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $560binary_subscr.8 = getitem(value=epochs_per_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $562inplace_add.9 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$554binary_subscr.5, rhs=$560binary_subscr.8, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_sample[i] = $562inplace_add.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $568load_global.10 = global(int: <class 'int'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $576binary_subscr.14 = getitem(value=epoch_of_next_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $578binary_subtract.15 = n - $576binary_subscr.14
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $584binary_subscr.18 = getitem(value=epochs_per_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $586binary_true_divide.19 = $578binary_subtract.15 / $584binary_subscr.18
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: n_neg_samples = call $568load_global.10($586binary_true_divide.19, func=$568load_global.10, args=[Var($586binary_true_divide.19, layouts.py:155)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 592
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 592
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A421A9F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $594load_global.1 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $598call_function.3 = call $594load_global.1(n_neg_samples, func=$594load_global.1, args=[Var(n_neg_samples, layouts.py:155)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $600get_iter.4 = getiter(value=$598call_function.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi602.1 = $600get_iter.4
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 602
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 602
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A421A9F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $602for_iter.2 = iternext(value=$phi602.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $602for_iter.3 = pair_first(value=$602for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $602for_iter.4 = pair_second(value=$602for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi604.2 = $602for_iter.3
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $602for_iter.4, 604, 794
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 604
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A421A9F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: p = $phi604.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $606load_global.3 = global(tau_rand_int: CPUDispatcher(<function tau_rand_int at 0x0000015A705D4A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $610call_function.5 = call $606load_global.3(rng_state, func=$606load_global.3, args=[Var(rng_state, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: k.1 = $610call_function.5 % n_vertices
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: other.1 = getitem(value=tail_embedding, index=k.1, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $626load_global.11 = global(rdist: CPUDispatcher(<function rdist at 0x0000015A711E8AF8>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dist_squared.1 = call $626load_global.11(current, other.1, func=$626load_global.11, args=[Var(current, layouts.py:95), Var(other.1, layouts.py:161)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const638.16 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $640compare_op.17 = dist_squared.1 > $const638.16
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool642 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $642pred = call bool642($640compare_op.17, func=bool642, args=(Var($640compare_op.17, layouts.py:165),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $642pred, 646, 690
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 646
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A421A9F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const646.2 = const(float, 2.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $650binary_multiply.4 = $const646.2 * gamma
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $650binary_multiply.4 * b
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG replaced with: grad_coeff.3 = $650binary_multiply.4 * b
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const660.8 = const(float, 0.001)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $664binary_add.10 = $const660.8 + dist_squared.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $668load_global.12 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $674call_function.15 = call $668load_global.12(dist_squared.1, b, func=$668load_global.12, args=[Var(dist_squared.1, layouts.py:163), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $676binary_multiply.16 = a * $674call_function.15
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const678.17 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $680binary_add.18 = $676binary_multiply.16 + $const678.17
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $682binary_multiply.19 = $664binary_add.10 * $680binary_add.18
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $684inplace_true_divide.20 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=grad_coeff, rhs=$682binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $684inplace_true_divide.20
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG replaced with: grad_coeff.4 = $684inplace_true_divide.20
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 690
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A421A9F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $694compare_op.4 = j == k.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool696 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $696pred = call bool696($694compare_op.4, func=bool696, args=(Var($694compare_op.4, layouts.py:170),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $696pred, 700, 706
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 700
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A421A9F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 826
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 706
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A421A9F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG replaced with: grad_coeff.5 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A421A9F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $712load_global.2 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $716call_function.4 = call $712load_global.2(dim, func=$712load_global.2, args=[Var(dim, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $718get_iter.5 = getiter(value=$716call_function.4)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi720.2 = $718get_iter.5
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A421A9F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $720for_iter.3 = iternext(value=$phi720.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $720for_iter.4 = pair_first(value=$720for_iter.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $720for_iter.5 = pair_second(value=$720for_iter.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi722.3 = $720for_iter.4
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $720for_iter.5, 722, 788
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 722
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A421A9F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: d.1 = $phi722.3
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const726.5 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $728compare_op.6 = grad_coeff > $const726.5
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool730 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $730pred = call bool730($728compare_op.6, func=bool730, args=(Var($728compare_op.6, layouts.py:176),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $730pred, 734, 760
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 734
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A421A9F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $734load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $742binary_subscr.7 = getitem(value=current, index=d.1, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $748binary_subscr.10 = getitem(value=other.1, index=d.1, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $750binary_subtract.11 = $742binary_subscr.7 - $748binary_subscr.10
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $752binary_multiply.12 = grad_coeff * $750binary_subtract.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.2 = call $734load_global.3($752binary_multiply.12, func=$734load_global.3, args=[Var($752binary_multiply.12, layouts.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 760
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A421A9F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.3 = const(float, 4.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A421A9F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.5 = phi(incoming_values=[Var(grad_d.3, layouts.py:179), Var(grad_d.2, layouts.py:177)], incoming_blocks=[760, 734])
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $770binary_subscr.7 = getitem(value=current, index=d.1, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $776binary_multiply.10 = grad_d.5 * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $778inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$770binary_subscr.7, rhs=$776binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: current[d.1] = $778inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 788
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A421A9F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 790
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 790
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A421A9F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 826
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 794
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A421A9F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 796
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 796
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A421A9F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $802binary_subscr.5 = getitem(value=epoch_of_next_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $810binary_subscr.9 = getitem(value=epochs_per_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $812binary_multiply.10 = n_neg_samples * $810binary_subscr.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $814inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$802binary_subscr.5, rhs=$812binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_negative_sample[i] = $814inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 827
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 822
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A421A9F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 824
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 824
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A421A9F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const824.0 = const(NoneType, None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $826return_value.1 = cast(value=$const824.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: return $826return_value.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 825
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A421A9F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 826
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A421A9F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 602
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 827
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000015A421A9F08>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {364: [<numba.core.ir.Assign object at 0x0000015A42192108>,
                   <numba.core.ir.Assign object at 0x0000015A42192B08>],
             414: [<numba.core.ir.Assign object at 0x0000015A7517A588>],
             646: [<numba.core.ir.Assign object at 0x0000015A75167408>,
                   <numba.core.ir.Assign object at 0x0000015A75167D88>],
             706: [<numba.core.ir.Assign object at 0x0000015A421AA208>]})
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 0
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A751671C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: head_embedding = arg(0, name=head_embedding)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: tail_embedding = arg(1, name=tail_embedding)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: head = arg(2, name=head)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: tail = arg(3, name=tail)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: n_vertices = arg(4, name=n_vertices)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epochs_per_sample = arg(5, name=epochs_per_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: a = arg(6, name=a)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: b = arg(7, name=b)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: rng_state = arg(8, name=rng_state)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: gamma = arg(9, name=gamma)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dim = arg(10, name=dim)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: move_other = arg(11, name=move_other)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: alpha = arg(12, name=alpha)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epochs_per_negative_sample = arg(13, name=epochs_per_negative_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_negative_sample = arg(14, name=epoch_of_next_negative_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_sample = arg(15, name=epoch_of_next_sample)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: n = arg(16, name=n)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: densmap_flag = arg(17, name=densmap_flag)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_phi_sum = arg(18, name=dens_phi_sum)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_sum = arg(19, name=dens_re_sum)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_cov = arg(20, name=dens_re_cov)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_std = arg(21, name=dens_re_std)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_re_mean = arg(22, name=dens_re_mean)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_lambda = arg(23, name=dens_lambda)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_R = arg(24, name=dens_R)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_mu = arg(25, name=dens_mu)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dens_mu_tot = arg(26, name=dens_mu_tot)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A751671C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $6load_global.0 = global(numba: <module 'numba' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numba\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $8load_method.1 = getattr(value=$6load_global.0, attr=prange)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $12load_attr.3 = getattr(value=epochs_per_sample, attr=shape)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const14.4 = const(int, 0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $16binary_subscr.5 = static_getitem(value=$12load_attr.3, index=0, index_var=$const14.4, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $18call_method.6 = call $8load_method.1($16binary_subscr.5, func=$8load_method.1, args=[Var($16binary_subscr.5, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $20get_iter.7 = getiter(value=$18call_method.6)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi22.0 = $20get_iter.7
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A751671C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $22for_iter.1 = iternext(value=$phi22.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi26.1 = $22for_iter.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $22for_iter.3, 26, 822
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 26
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A751671C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: i = $phi26.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $32binary_subscr.4 = getitem(value=epoch_of_next_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $36compare_op.6 = $32binary_subscr.4 <= n
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool38 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $38pred = call bool38($36compare_op.6, func=bool38, args=(Var($36compare_op.6, layouts.py:91),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $38pred, 40, 827
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 40
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A751671C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: j = getitem(value=head, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: k = getitem(value=tail, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: current = getitem(value=head_embedding, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: other = getitem(value=tail_embedding, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $72load_global.13 = global(rdist: CPUDispatcher(<function rdist at 0x0000015A711E8AF8>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dist_squared = call $72load_global.13(current, other, func=$72load_global.13, args=[Var(current, layouts.py:95), Var(other, layouts.py:96)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool84 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $84pred = call bool84(densmap_flag, func=bool84, args=(Var(densmap_flag, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $84pred, 88, 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 88
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A751671C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const88.1 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const90.2 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $94load_global.4 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $100call_function.7 = call $94load_global.4(dist_squared, b, func=$94load_global.4, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $102binary_multiply.8 = a * $100call_function.7
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $104binary_add.9 = $const90.2 + $102binary_multiply.8
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: phi = $const88.1 / $104binary_add.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $114binary_multiply.13 = a * b
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $116load_global.14 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const122.17 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $124binary_subtract.18 = b - $const122.17
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $126call_function.19 = call $116load_global.14(dist_squared, $124binary_subtract.18, func=$116load_global.14, args=[Var(dist_squared, layouts.py:98), Var($124binary_subtract.18, layouts.py:103)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $128binary_multiply.20 = $114binary_multiply.13 * $126call_function.19
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const130.21 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $134load_global.23 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $140call_function.26 = call $134load_global.23(dist_squared, b, func=$134load_global.23, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $142binary_multiply.27 = a * $140call_function.26
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $144binary_add.28 = $const130.21 + $142binary_multiply.27
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dphi_term = $128binary_multiply.20 / $144binary_add.28
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $156binary_subscr.33 = getitem(value=dens_phi_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: q_jk = phi / $156binary_subscr.33
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $168binary_subscr.38 = getitem(value=dens_phi_sum, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: q_kj = phi / $168binary_subscr.38
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const176.41 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const180.43 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $184binary_subtract.45 = $const180.43 - phi
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $186binary_multiply.46 = b * $184binary_subtract.45
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $188binary_subtract.47 = $const176.41 - $186binary_multiply.46
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $190load_global.48 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $192load_method.49 = getattr(value=$190load_global.48, attr=exp)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $198binary_subscr.52 = getitem(value=dens_re_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $200call_method.53 = call $192load_method.49($198binary_subscr.52, func=$192load_method.49, args=[Var($198binary_subscr.52, layouts.py:110)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $202binary_true_divide.54 = $188binary_subtract.47 / $200call_method.53
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $206binary_add.56 = $202binary_true_divide.54 + dphi_term
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: drk = q_jk * $206binary_add.56
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const214.59 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const218.61 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $222binary_subtract.63 = $const218.61 - phi
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $224binary_multiply.64 = b * $222binary_subtract.63
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $226binary_subtract.65 = $const214.59 - $224binary_multiply.64
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $228load_global.66 = global(np: <module 'numpy' from 'C:\\Users\\nss\\anaconda3\\envs\\pytorch_a1\\lib\\site-packages\\numpy\\__init__.py'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $230load_method.67 = getattr(value=$228load_global.66, attr=exp)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $236binary_subscr.70 = getitem(value=dens_re_sum, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $238call_method.71 = call $230load_method.67($236binary_subscr.70, func=$230load_method.67, args=[Var($236binary_subscr.70, layouts.py:113)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $240binary_true_divide.72 = $226binary_subtract.65 / $238call_method.71
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $244binary_add.74 = $240binary_true_divide.72 + dphi_term
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: drj = q_kj * $244binary_add.74
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: re_std_sq = dens_re_std * dens_re_std
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $262binary_subscr.81 = getitem(value=dens_R, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $270binary_subscr.85 = getitem(value=dens_re_sum, index=k, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $274binary_subtract.87 = $270binary_subscr.85 - dens_re_mean
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $276binary_multiply.88 = dens_re_cov * $274binary_subtract.87
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $280binary_true_divide.90 = $276binary_multiply.88 / re_std_sq
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: weight_k = $262binary_subscr.81 - $280binary_true_divide.90
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $290binary_subscr.94 = getitem(value=dens_R, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $298binary_subscr.98 = getitem(value=dens_re_sum, index=j, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $302binary_subtract.100 = $298binary_subscr.98 - dens_re_mean
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $304binary_multiply.101 = dens_re_cov * $302binary_subtract.100
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $308binary_true_divide.103 = $304binary_multiply.101 / re_std_sq
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: weight_j = $290binary_subscr.94 - $308binary_true_divide.103
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $318binary_multiply.107 = dens_lambda * dens_mu_tot
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $324binary_multiply.110 = weight_k * drk
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $330binary_multiply.113 = weight_j * drj
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $332binary_add.114 = $324binary_multiply.110 + $330binary_multiply.113
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $334binary_multiply.115 = $318binary_multiply.107 * $332binary_add.114
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $340binary_subscr.118 = getitem(value=dens_mu, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $344binary_multiply.120 = $340binary_subscr.118 * dens_re_std
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $346binary_true_divide.121 = $334binary_multiply.115 / $344binary_multiply.120
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_cor_coeff = $346binary_true_divide.121 / n_vertices
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 354
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A751671C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const356.2 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $358compare_op.3 = dist_squared > $const356.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool360 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $360pred = call bool360($358compare_op.3, func=bool360, args=(Var($358compare_op.3, layouts.py:134),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $360pred, 364, 414
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 364
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A751671C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const364.1 = const(float, -2.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $368binary_multiply.3 = $const364.1 * a
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $372binary_multiply.5 = $368binary_multiply.3 * b
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $374load_global.6 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const380.9 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $382binary_subtract.10 = b - $const380.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $384call_function.11 = call $374load_global.6(dist_squared, $382binary_subtract.10, func=$374load_global.6, args=[Var(dist_squared, layouts.py:98), Var($382binary_subtract.10, layouts.py:135)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff = $372binary_multiply.5 * $384call_function.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $394load_global.15 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $400call_function.18 = call $394load_global.15(dist_squared, b, func=$394load_global.15, args=[Var(dist_squared, layouts.py:98), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $402binary_multiply.19 = a * $400call_function.18
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const404.20 = const(float, 1.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $406binary_add.21 = $402binary_multiply.19 + $const404.20
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $408inplace_true_divide.22 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=grad_coeff, rhs=$406binary_add.21, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='grad_coeff' stmt=$408inplace_true_divide.22 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=grad_coeff, rhs=$406binary_add.21, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff.1 = $408inplace_true_divide.22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 414
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A751671C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff.2 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A751671C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $420load_global.1 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $424call_function.3 = call $420load_global.1(dim, func=$420load_global.1, args=[Var(dim, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $426get_iter.4 = getiter(value=$424call_function.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi428.1 = $426get_iter.4
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A751671C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $428for_iter.2 = iternext(value=$phi428.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $428for_iter.3 = pair_first(value=$428for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $428for_iter.4 = pair_second(value=$428for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi430.2 = $428for_iter.3
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $428for_iter.4, 430, 546
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 430
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A751671C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: d = $phi430.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $432load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $440binary_subscr.7 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $446binary_subscr.10 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $448binary_subtract.11 = $440binary_subscr.7 - $446binary_subscr.10
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $450binary_multiply.12 = grad_coeff * $448binary_subtract.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='grad_coeff' stmt=$450binary_multiply.12 = grad_coeff * $448binary_subtract.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 430
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 428 from label 430
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 418 from label 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG insert phi node grad_coeff.6 = phi(incoming_values=[], incoming_blocks=[]) at 418
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 364
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG incoming_def grad_coeff.1 = $408inplace_true_divide.22
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 414
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG incoming_def grad_coeff.2 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG replaced with: $450binary_multiply.12 = grad_coeff.6 * $448binary_subtract.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d = call $432load_global.3($450binary_multiply.12, func=$432load_global.3, args=[Var($450binary_multiply.12, layouts.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool458 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $458pred = call bool458(densmap_flag, func=bool458, args=(Var(densmap_flag, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $458pred, 462, 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 462
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A751671C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $464load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const466.4 = const(int, 2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $470binary_multiply.6 = $const466.4 * grad_cor_coeff
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $476binary_subscr.9 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $482binary_subscr.12 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $484binary_subtract.13 = $476binary_subscr.9 - $482binary_subscr.12
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $486binary_multiply.14 = $470binary_multiply.6 * $484binary_subtract.13
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $488call_function.15 = call $464load_global.3($486binary_multiply.14, func=$464load_global.3, args=[Var($486binary_multiply.14, layouts.py:146)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $490inplace_add.16 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=grad_d, rhs=$488call_function.15, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.1 = $490inplace_add.16
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 494
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A751671C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.4 = phi(incoming_values=[Var(grad_d.1, layouts.py:146), Var(grad_d, layouts.py:141)], incoming_blocks=[462, 430])
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $500binary_subscr.6 = getitem(value=current, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $506binary_multiply.9 = grad_d.4 * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $508inplace_add.10 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$500binary_subscr.6, rhs=$506binary_multiply.9, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: current[d] = $508inplace_add.10
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool516 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $516pred = call bool516(move_other, func=bool516, args=(Var(move_other, layouts.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $516pred, 520, 825
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 520
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A751671C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $526binary_subscr.6 = getitem(value=other, index=d, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $530unary_negative.8 = unary(fn=<built-in function neg>, value=grad_d.4)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $534binary_multiply.10 = $530unary_negative.8 * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $536inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$526binary_subscr.6, rhs=$534binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: other[d] = $536inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 825
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 546
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A751671C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 548
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 548
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A751671C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $554binary_subscr.5 = getitem(value=epoch_of_next_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $560binary_subscr.8 = getitem(value=epochs_per_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $562inplace_add.9 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$554binary_subscr.5, rhs=$560binary_subscr.8, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_sample[i] = $562inplace_add.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $568load_global.10 = global(int: <class 'int'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $576binary_subscr.14 = getitem(value=epoch_of_next_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $578binary_subtract.15 = n - $576binary_subscr.14
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $584binary_subscr.18 = getitem(value=epochs_per_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $586binary_true_divide.19 = $578binary_subtract.15 / $584binary_subscr.18
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: n_neg_samples = call $568load_global.10($586binary_true_divide.19, func=$568load_global.10, args=[Var($586binary_true_divide.19, layouts.py:155)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 592
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 592
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A751671C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $594load_global.1 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $598call_function.3 = call $594load_global.1(n_neg_samples, func=$594load_global.1, args=[Var(n_neg_samples, layouts.py:155)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $600get_iter.4 = getiter(value=$598call_function.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi602.1 = $600get_iter.4
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 602
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 602
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A751671C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $602for_iter.2 = iternext(value=$phi602.1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $602for_iter.3 = pair_first(value=$602for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $602for_iter.4 = pair_second(value=$602for_iter.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi604.2 = $602for_iter.3
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $602for_iter.4, 604, 794
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 604
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A751671C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: p = $phi604.2
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $606load_global.3 = global(tau_rand_int: CPUDispatcher(<function tau_rand_int at 0x0000015A705D4A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $610call_function.5 = call $606load_global.3(rng_state, func=$606load_global.3, args=[Var(rng_state, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: k.1 = $610call_function.5 % n_vertices
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: other.1 = getitem(value=tail_embedding, index=k.1, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $626load_global.11 = global(rdist: CPUDispatcher(<function rdist at 0x0000015A711E8AF8>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: dist_squared.1 = call $626load_global.11(current, other.1, func=$626load_global.11, args=[Var(current, layouts.py:95), Var(other.1, layouts.py:161)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const638.16 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $640compare_op.17 = dist_squared.1 > $const638.16
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool642 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $642pred = call bool642($640compare_op.17, func=bool642, args=(Var($640compare_op.17, layouts.py:165),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $642pred, 646, 690
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 646
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A751671C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const646.2 = const(float, 2.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $650binary_multiply.4 = $const646.2 * gamma
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff.3 = $650binary_multiply.4 * b
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const660.8 = const(float, 0.001)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $664binary_add.10 = $const660.8 + dist_squared.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $668load_global.12 = global(pow: <built-in function pow>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $674call_function.15 = call $668load_global.12(dist_squared.1, b, func=$668load_global.12, args=[Var(dist_squared.1, layouts.py:163), Var(b, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $676binary_multiply.16 = a * $674call_function.15
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const678.17 = const(int, 1)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $680binary_add.18 = $676binary_multiply.16 + $const678.17
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $682binary_multiply.19 = $664binary_add.10 * $680binary_add.18
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $684inplace_true_divide.20 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=grad_coeff, rhs=$682binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='grad_coeff' stmt=$684inplace_true_divide.20 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=grad_coeff, rhs=$682binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG replaced with: $684inplace_true_divide.20 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=grad_coeff.3, rhs=$682binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff.4 = $684inplace_true_divide.20
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 690
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A751671C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $694compare_op.4 = j == k.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool696 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $696pred = call bool696($694compare_op.4, func=bool696, args=(Var($694compare_op.4, layouts.py:170),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $696pred, 700, 706
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 700
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A751671C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 826
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 706
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A751671C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_coeff.5 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A751671C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $712load_global.2 = global(range: <class 'range'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $716call_function.4 = call $712load_global.2(dim, func=$712load_global.2, args=[Var(dim, layouts.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $718get_iter.5 = getiter(value=$716call_function.4)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi720.2 = $718get_iter.5
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A751671C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $720for_iter.3 = iternext(value=$phi720.2)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $720for_iter.4 = pair_first(value=$720for_iter.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $720for_iter.5 = pair_second(value=$720for_iter.3)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $phi722.3 = $720for_iter.4
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $720for_iter.5, 722, 788
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 722
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A751671C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: d.1 = $phi722.3
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const726.5 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $728compare_op.6 = grad_coeff > $const726.5
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='grad_coeff' stmt=$728compare_op.6 = grad_coeff > $const726.5
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 722
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 720 from label 722
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 710 from label 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG insert phi node grad_coeff.7 = phi(incoming_values=[], incoming_blocks=[]) at 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 706
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG incoming_def grad_coeff.5 = const(float, 0.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 646
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG incoming_def grad_coeff.4 = $684inplace_true_divide.20
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG replaced with: $728compare_op.6 = grad_coeff.7 > $const726.5
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: bool730 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $730pred = call bool730($728compare_op.6, func=bool730, args=(Var($728compare_op.6, layouts.py:176),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: branch $730pred, 734, 760
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 734
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A751671C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $734load_global.3 = global(clip: CPUDispatcher(<function clip at 0x0000015A711E8A68>))
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $742binary_subscr.7 = getitem(value=current, index=d.1, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $748binary_subscr.10 = getitem(value=other.1, index=d.1, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $750binary_subtract.11 = $742binary_subscr.7 - $748binary_subscr.10
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $752binary_multiply.12 = grad_coeff * $750binary_subtract.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def var='grad_coeff' stmt=$752binary_multiply.12 = grad_coeff * $750binary_subtract.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 734
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 722 from label 734
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 722
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 722
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 720 from label 722
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_top label 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG idom 710 from label 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG find_def_from_bottom label 710
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG replaced with: $752binary_multiply.12 = grad_coeff.7 * $750binary_subtract.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.2 = call $734load_global.3($752binary_multiply.12, func=$734load_global.3, args=[Var($752binary_multiply.12, layouts.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 760
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A751671C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.3 = const(float, 4.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 764
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A751671C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: grad_d.5 = phi(incoming_values=[Var(grad_d.3, layouts.py:179), Var(grad_d.2, layouts.py:177)], incoming_blocks=[760, 734])
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $770binary_subscr.7 = getitem(value=current, index=d.1, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $776binary_multiply.10 = grad_d.5 * alpha
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $778inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$770binary_subscr.7, rhs=$776binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: current[d.1] = $778inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 720
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 788
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A751671C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 790
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 790
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A751671C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 826
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 794
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A751671C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 796
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 796
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A751671C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $802binary_subscr.5 = getitem(value=epoch_of_next_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $810binary_subscr.9 = getitem(value=epochs_per_negative_sample, index=i, fn=<built-in function getitem>)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $812binary_multiply.10 = n_neg_samples * $810binary_subscr.9
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $814inplace_add.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$802binary_subscr.5, rhs=$812binary_multiply.10, static_lhs=Undefined, static_rhs=Undefined)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: epoch_of_next_negative_sample[i] = $814inplace_add.11
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 827
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 822
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A751671C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 824
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 824
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A751671C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $const824.0 = const(NoneType, None)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: $826return_value.1 = cast(value=$const824.0)
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: return $826return_value.1
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 825
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A751671C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 428
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 826
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A751671C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 602
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG ==== SSA block rewrite pass on 827
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000015A751671C8>
Sat 01 Jul 2023 19:39:44 ssa.py DEBUG on stmt: jump 22
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG bytecode dump:
>          0	NOP(arg=None, lineno=22)
           2	LOAD_FAST(arg=0, lineno=22)
           4	LOAD_CONST(arg=1, lineno=22)
           6	COMPARE_OP(arg=4, lineno=22)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=22)
          10	LOAD_CONST(arg=1, lineno=23)
          12	RETURN_VALUE(arg=None, lineno=23)
>         14	LOAD_FAST(arg=0, lineno=24)
          16	LOAD_CONST(arg=2, lineno=24)
          18	COMPARE_OP(arg=0, lineno=24)
          20	POP_JUMP_IF_FALSE(arg=26, lineno=24)
          22	LOAD_CONST(arg=2, lineno=25)
          24	RETURN_VALUE(arg=None, lineno=25)
>         26	LOAD_FAST(arg=0, lineno=27)
          28	RETURN_VALUE(arg=None, lineno=27)
          30	LOAD_CONST(arg=3, lineno=27)
          32	RETURN_VALUE(arg=None, lineno=27)
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG pending: deque([State(pc_initial=0 nstack_initial=0)])
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG dispatch pc=0, inst=NOP(arg=None, lineno=22)
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=22)
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=22)
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG stack ['$val2.0']
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=22)
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG stack ['$val2.0', '$const4.1']
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=22)
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG stack ['$6compare_op.2']
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=23)
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=23)
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG stack ['$const10.0']
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG pending: deque([State(pc_initial=14 nstack_initial=0)])
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=24)
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG dispatch pc=16, inst=LOAD_CONST(arg=2, lineno=24)
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG stack ['$val14.0']
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG dispatch pc=18, inst=COMPARE_OP(arg=0, lineno=24)
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG stack ['$val14.0', '$const16.1']
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG dispatch pc=20, inst=POP_JUMP_IF_FALSE(arg=26, lineno=24)
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG stack ['$18compare_op.2']
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG end state. edges=[Edge(pc=22, stack=(), blockstack=(), npush=0), Edge(pc=26, stack=(), blockstack=(), npush=0)]
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG pending: deque([State(pc_initial=22 nstack_initial=0), State(pc_initial=26 nstack_initial=0)])
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG dispatch pc=22, inst=LOAD_CONST(arg=2, lineno=25)
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG dispatch pc=24, inst=RETURN_VALUE(arg=None, lineno=25)
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG stack ['$const22.0']
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG pending: deque([State(pc_initial=26 nstack_initial=0)])
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG stack: []
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=27)
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG stack []
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG dispatch pc=28, inst=RETURN_VALUE(arg=None, lineno=27)
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG stack ['$val26.0']
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG end state. edges=[]
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG -------------------------Prune PHIs-------------------------
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=22 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set()})
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG defmap: {}
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG changing phismap: defaultdict(<class 'set'>, {})
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG keep phismap: {}
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG new_out: defaultdict(<class 'dict'>, {})
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG ----------------------DONE Prune PHIs-----------------------
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$val2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$val2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$val14.0'}), (16, {'res': '$const16.1'}), (18, {'lhs': '$val14.0', 'rhs': '$const16.1', 'res': '$18compare_op.2'}), (20, {'pred': '$18compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: (), 26: ()})
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG block_infos State(pc_initial=22 nstack_initial=0):
AdaptBlockInfo(insts=((22, {'res': '$const22.0'}), (24, {'retval': '$const22.0', 'castval': '$24return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:45 byteflow.py DEBUG block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$val26.0'}), (28, {'retval': '$val26.0', 'castval': '$28return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
Sat 01 Jul 2023 19:39:45 interpreter.py DEBUG label 0:
    val = arg(0, name=val)                   ['val']
    $const4.1 = const(float, 4.0)            ['$const4.1']
    $6compare_op.2 = val > $const4.1         ['$6compare_op.2', '$const4.1', 'val']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, layouts.py:22),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(float, 4.0)           ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    $const16.1 = const(float, -4.0)          ['$const16.1']
    $18compare_op.2 = val < $const16.1       ['$18compare_op.2', '$const16.1', 'val']
    bool20 = global(bool: <class 'bool'>)    ['bool20']
    $20pred = call bool20($18compare_op.2, func=bool20, args=(Var($18compare_op.2, layouts.py:24),), kws=(), vararg=None, varkwarg=None, target=None) ['$18compare_op.2', '$20pred', 'bool20']
    branch $20pred, 22, 26                   ['$20pred']
label 22:
    $const22.0 = const(float, -4.0)          ['$const22.0']
    $24return_value.1 = cast(value=$const22.0) ['$24return_value.1', '$const22.0']
    return $24return_value.1                 ['$24return_value.1']
label 26:
    $28return_value.1 = cast(value=val)      ['$28return_value.1', 'val']
    return $28return_value.1                 ['$28return_value.1']

Sat 01 Jul 2023 19:39:45 ssa.py DEBUG ==== SSA block analysis pass on 0
Sat 01 Jul 2023 19:39:45 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A4217AF88>
Sat 01 Jul 2023 19:39:45 ssa.py DEBUG on stmt: val = arg(0, name=val)
Sat 01 Jul 2023 19:39:45 ssa.py DEBUG on stmt: $const4.1 = const(float, 4.0)
Sat 01 Jul 2023 19:39:45 ssa.py DEBUG on stmt: $6compare_op.2 = val > $const4.1
Sat 01 Jul 2023 19:39:45 ssa.py DEBUG on stmt: bool8 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:45 ssa.py DEBUG on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, layouts.py:22),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:45 ssa.py DEBUG on stmt: branch $8pred, 10, 14
Sat 01 Jul 2023 19:39:45 ssa.py DEBUG ==== SSA block analysis pass on 10
Sat 01 Jul 2023 19:39:45 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A4217AF88>
Sat 01 Jul 2023 19:39:45 ssa.py DEBUG on stmt: $const10.0 = const(float, 4.0)
Sat 01 Jul 2023 19:39:45 ssa.py DEBUG on stmt: $12return_value.1 = cast(value=$const10.0)
Sat 01 Jul 2023 19:39:45 ssa.py DEBUG on stmt: return $12return_value.1
Sat 01 Jul 2023 19:39:45 ssa.py DEBUG ==== SSA block analysis pass on 14
Sat 01 Jul 2023 19:39:45 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A4217AF88>
Sat 01 Jul 2023 19:39:45 ssa.py DEBUG on stmt: $const16.1 = const(float, -4.0)
Sat 01 Jul 2023 19:39:45 ssa.py DEBUG on stmt: $18compare_op.2 = val < $const16.1
Sat 01 Jul 2023 19:39:45 ssa.py DEBUG on stmt: bool20 = global(bool: <class 'bool'>)
Sat 01 Jul 2023 19:39:45 ssa.py DEBUG on stmt: $20pred = call bool20($18compare_op.2, func=bool20, args=(Var($18compare_op.2, layouts.py:24),), kws=(), vararg=None, varkwarg=None, target=None)
Sat 01 Jul 2023 19:39:45 ssa.py DEBUG on stmt: branch $20pred, 22, 26
Sat 01 Jul 2023 19:39:45 ssa.py DEBUG ==== SSA block analysis pass on 22
Sat 01 Jul 2023 19:39:45 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A4217AF88>
Sat 01 Jul 2023 19:39:45 ssa.py DEBUG on stmt: $const22.0 = const(float, -4.0)
Sat 01 Jul 2023 19:39:45 ssa.py DEBUG on stmt: $24return_value.1 = cast(value=$const22.0)
Sat 01 Jul 2023 19:39:45 ssa.py DEBUG on stmt: return $24return_value.1
Sat 01 Jul 2023 19:39:45 ssa.py DEBUG ==== SSA block analysis pass on 26
Sat 01 Jul 2023 19:39:45 ssa.py DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000015A4217AF88>
Sat 01 Jul 2023 19:39:45 ssa.py DEBUG on stmt: $28return_value.1 = cast(value=val)
Sat 01 Jul 2023 19:39:45 ssa.py DEBUG on stmt: return $28return_value.1
Sat 01 Jul 2023 19:39:45 ssa.py DEBUG defs defaultdict(<class 'list'>,
            {'$12return_value.1': [<numba.core.ir.Assign object at 0x0000015A421A2A88>],
             '$18compare_op.2': [<numba.core.ir.Assign object at 0x0000015A4217A888>],
             '$20pred': [<numba.core.ir.Assign object at 0x0000015A4217A3C8>],
             '$24return_value.1': [<numba.core.ir.Assign object at 0x0000015A4217AAC8>],
             '$28return_value.1': [<numba.core.ir.Assign object at 0x0000015A4217AE48>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x0000015A42197E48>],
             '$8pred': [<numba.core.ir.Assign object at 0x0000015A42197988>],
             '$const10.0': [<numba.core.ir.Assign object at 0x0000015A421A28C8>],
             '$const16.1': [<numba.core.ir.Assign object at 0x0000015A4217A9C8>],
             '$const22.0': [<numba.core.ir.Assign object at 0x0000015A4217A488>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000015A421971C8>],
             'bool20': [<numba.core.ir.Assign object at 0x0000015A4217A708>],
             'bool8': [<numba.core.ir.Assign object at 0x0000015A42197088>],
             'val': [<numba.core.ir.Assign object at 0x0000015A421A5FC8>]})
Sat 01 Jul 2023 19:39:45 ssa.py DEBUG SSA violators set()
